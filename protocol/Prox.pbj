/*  CBR
 *  Prox.pbj
 *
 *  Copyright (c) 2009, Ewen Cheslack-Postava
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are
 *  met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *  * Neither the name of Sirikata nor the names of its contributors may
 *    be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

"pbj-0.0.3"

package CBR.Protocol.Prox;


message TimedMotionVector {
    required time t = 1;
    required vector3f position = 2;
    required vector3f velocity = 3;
}

// Queries

message ServerQuery {
    enum Action {
        AddOrUpdate = 1;
        Remove = 2;
    }

    required Action action = 1;
    optional TimedMotionVector location = 2;
    optional boundingsphere3f bounds = 3;
    optional float min_angle = 4;
}

// Object migration data - shipped between space nodes when object migration occurs
message ObjectMigrationData {
    optional float min_angle = 1;
}

// Query Results

message ObjectAddition {
    required uuid object = 1;
    required TimedMotionVector location = 2;
    required boundingsphere3f bounds = 3;
}

message ObjectRemoval {
    required uuid object = 1;
}

message ProximityResults {
    required time t = 1;
    repeated ObjectAddition addition = 2;
    repeated ObjectRemoval removal = 3;
}

message Container {
    optional ServerQuery query = 1;
    optional ProximityResults result = 2;
}