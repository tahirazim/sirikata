// Copyright (c) 2012 Sirikata Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can
// be found in the LICENSE file.

#ifndef _SIRIKATA_LIBSPACE_MASTER_PINTO_SERVER_QUERIER_BASE_HPP_
#define _SIRIKATA_LIBSPACE_MASTER_PINTO_SERVER_QUERIER_BASE_HPP_

#include <sirikata/space/PintoServerQuerier.hpp>
#include <sirikata/core/network/IOStrand.hpp>
#include <sirikata/core/network/Stream.hpp>
#include <sirikata/space/SpaceContext.hpp>

#define OPT_MASTER_PINTO_PROTOCOL             "protocol"
#define OPT_MASTER_PINTO_PROTOCOL_OPTIONS     "protocol-options"
#define OPT_MASTER_PINTO_HOST                 "host"
#define OPT_MASTER_PINTO_PORT                 "port"

namespace Sirikata {

namespace Protocol {
namespace MasterPinto {
class PintoResponse;
}
}


/** MasterPintoServerQuerierBase uses a single, centralized master Pinto query
 *  server to discover which other space servers must be queried. Base class for
 *  specific implementation, e.g. using aggregated queries, or replicated
 *  top-level trees. It handles setting up the connection and managing updates
 *  for the required properties. Implementations need to handle query update
 *  requests from Proximity and deal with interaction over the connection
 *  generated by this class.
 */
class MasterPintoServerQuerierBase : public PintoServerQuerier {
public:
    MasterPintoServerQuerierBase(SpaceContext* ctx, const String& params);
    virtual ~MasterPintoServerQuerierBase();

    // Service Interface
    virtual void start();
    virtual void stop();

    // PintoServerQuerier Interface
    virtual void updateRegion(const BoundingBox3f& region);
    virtual void updateLargestObject(float max_radius);
    virtual void updateQuery(const String& update) = 0;

protected:

    // Connection events for implementations
    // onConnected - invoked when connection to pinto server is made, allowing
    // you to, e.g., initialize queries
    virtual void onConnected() {}
    // onDisconnected - invoked when connection to pinto server is lost,
    // allowing you to, e.g., clean up data.
    virtual void onDisconnected() {}

    // Data events for implementations - a message has been received. The data
    // should be processed by the implementation
    virtual void onPintoData(const String& data) = 0;

    // Helpers
    enum QueueUpdateType {
        QueueUpdate,
        DoNotQueueUpdate
    };
    // Send a query update, or, if not connected yet, possibly queue it to be
    // sent later
    void sendQueryUpdate(const String& data, QueueUpdateType queue = QueueUpdate);

private:
    // Connection management
    void connect();
    bool connected() { return mConnected; }

    // Handlers for mServerStream
    void handleServerConnection(Network::Stream::ConnectionStatus status, const std::string &reason);
    void handleServerReceived(Network::Chunk& data, const Network::Stream::PauseReceiveCallback& pause);
    void handleServerReadySend();

    // If connected and any properties are marked as dirty, tries to
    // send an update to the server
    void tryServerUpdate();

protected:
    SpaceContext* mContext;

    Network::IOStrand* mIOStrand;

    Network::Stream* mServerStream;

private:
    String mHost;
    String mPort;

    bool mConnecting;
    bool mConnected;
    bool mGaveID;

    BoundingBox3f mRegion;
    bool mRegionDirty;
    float32 mMaxRadius;
    bool mMaxRadiusDirty;

    std::vector<String> mQueuedQueryUpdates;
}; // MasterPintoServerQuerierBase

} // namespace Sirikata

#endif //_SIRIKATA_LIBSPACE_MASTER_PINTO_SERVER_QUERIER_BASE_HPP_
