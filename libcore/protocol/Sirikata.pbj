/*  Sirikata Serialization Protocol
 *  Sirikata.pbj
 *
 *  Copyright (c) 2009, Daniel Reiter Horn
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are
 *  met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *  * Neither the name of Sirikata nor the names of its contributors may
 *    be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
"pbj-0.0.3"


package Sirikata.Protocol;

/////////////Standard Message Container///////////////

//This MessageBody is the standard mechanism to transport messages over the net. See ReadOnlyMessage for comments.
message MessageBody {
    reserve 1 to 8;
    reserve 1536 to 2560;
    reserve 229376 to 294912;

    repeated string message_names=9;

    repeated bytes message_arguments=10;

    optional bytes payload = 11;
}

//This is the standard message container. All items sent over the wire may be read with the following message format. It should not be used to encode message since header fields may not end up before other fields
message ReadOnlyMessage {
//******************BEGIN ROUTING HEADER*********************
    reserve 1 to 8;
    reserve 1536 to 2560;
    reserve 229376 to 294912;

    //the source ObjectReference. Must be present on the receiver. Ignored if present on the sender.
    optional uuid source_object = 1;

    //the source port from which the message originated. Must be present on the receiver. Ignored if present on the sender.
    optional uint32 source_port = 3;

    //the spaceID origin message. Will never be present.
    optional uuid source_space = 1536;

    //the destination ObjectReference. Should never be present on the receiver. Must be present for the sender.
    optional uuid destination_object = 2;

    //the destination port that should process the message. Should never be present on the receiver. May be present for the sender.
    optional uint32 destination_port = 4;

    //spaceID of the destination object. Will never be present.
    optional uuid destination_space = 1537;
//******************END ROUTING HEADER*********************
//******************BEGIN RPC HEADER*********************
    optional int64 id = 7;
    optional int64 reply_id = 8;

    enum ReturnStatus {
        SUCCESS = 0;
        NETWORK_FAILURE = 1; ///< The network connection was interrupted. Usually sent by AA.
        TIMEOUT_FAILURE = 3; ///< Failed to receive any reply messages. Usually sent by AA.
        PROTOCOL_ERROR = 4; ///< The message format could not be understood. Usually sent by BB.
        PORT_FAILURE = 5; ///< Object BB does not understand or handle 'destination_port' messages.
    }
    optional ReturnStatus return_status=1792;
//******************END RPC HEADER*********************

//******************BEGIN MESSAGE BODY*********************
    //the name of the function(s) to call. message_names MUST be empty if and only if this is a response.
    // If this is a request and message_names is smaller than message_arguments, the last name in the list is to be used for all the responses.
    // If message_names is ever larger than message_arguments, this is an error, and the extra message_names are to be ignored.
    repeated string message_names=9;

    //message to be decoded by the function(s). If a request, message_arguments determines the length of the request.
    // If a response, and the length is smaller than the length of the request, it is to be assumed that the bodies of all remaining response messages are empty.
    repeated bytes message_arguments=10;
//******************END MESSAGE BODY*********************

    optional bytes payload = 11;
}

/////////////Built-in messages///////////////

message SpaceServices {
   optional uint32 rpc_port=32;
   optional uint32 registration_port=33;
   optional uint32 loc_port=34;
   optional uint32 geom_port=35;
   optional uint32 oseg_port=36;
   optional uint32 cseg_port=37;
   optional uint32 router_port=38;
   optional uint32 persistence_port=39;
   optional uint32 physics_port=40;
   optional uint64 pre_connection_buffer=64;
   optional uint64 max_pre_connection_messages=65;
}

//This message is from a space to an object updating its position and orientation (returns void)
//If sent in response to a LocRequest, the information must be valid.
message ObjLoc {

    //time that the update was sent out. Required.
    optional time timestamp = 2;

    //position of source object
    optional vector3d position = 3;

    //orientation of source object
    optional quaternion orientation = 4;

    //velocity of the source object at snapsot
    optional vector3f velocity = 5;

    //axis of rotation of source object
    optional normal rotational_axis = 7;

    //speed of rotation around axis (may be negative)
    optional float angular_speed = 8;

    //Force update send out even if last update is within range (often useful for final resting pos)
    flags8 UpdateFlags{
           FORCE=1;
    }
    //options for this update, right now only force is the option
    optional UpdateFlags update_flags = 6;
}

message LocRequest {
  flags32 Fields {
    POSITION = 1;
    ORIENTATION = 2;
    VELOCITY = 4;
    ROTATIONAL_AXIS = 8;
    ANGULAR_SPEED = 16;
  }
  optional Fields requested_fields = 2; // if omitted, send all fields.
}

//New Streams can establish an ObjectConnection
message NewObj {
    ///key to indicate how an object's ObjectReference should be restored
    optional uuid object_uuid_evidence=2;
    ///The object host may request a position for a newly created object
    optional ObjLoc requested_object_loc=3;
    ///the bounding sphere for the mesh, so that proximity detection can begin right away
    optional boundingsphere3f bounding_sphere=4;
}


//This will be in the argument for the return value of the NewObj function
message RetObj {
    //return value for NewObj message
    optional uuid object_reference = 2;
    //the definitive location of the object
    optional ObjLoc location=3;
    ///the defininitive bounding sphere for the mesh: may be smaller than the requested bounding sphere due to policy
    optional boundingsphere3f bounding_sphere=4;
}

//This message indicates an object has disconnected and should be removed from space. May only be sent by the object connection service: DelObj messages from specific objects will be ignored.
message DelObj {
   optional uuid object_reference = 2;
}

message NewProxQuery {

    //the client chosen id for this query
    optional uint32 query_id=2;

    //If present and set to true, the query is fired once, the relevant items are returned and the query is forgotten
    optional bool stateless=3;

    //the relative offset from the source object
    optional vector3f relative_center=4;

    //an absolute query center...this ignores the source object
    optional vector3d absolute_center=5;

    //query returns all objects within this many meters
    optional float max_radius=6;

    //query returns all objects that occupy at least this many steradians
    optional angle min_solid_angle=7;
}
message ProxCall {

    //the id of the query
    required uint32 query_id=2;

    //the object falling within (or falling out) of range
    required uuid proximate_object=3;

    //the type of proximity callback we are getting
    enum ProximityEvent {
        EXITED_PROXIMITY=0;
        ENTERED_PROXIMITY=1;
        STATELESS_PROXIMITY=2;
    }
    required ProximityEvent proximity_event=4;
}

// used to unregister a proximity query.
// May be sent back as a return value if space does not support standing queries
message DelProxQuery {
    //delete a query by client id
    optional uint32 query_id=2;
}



message Vector3fProperty {
    optional vector3f value=10;
}

message StringProperty {
    optional string value=10;
}

message StringMapProperty {
    repeated string keys=2;
    repeated string values=3;
}

message PhysicalParameters {
	enum Mode {
		NONPHYSICAL = 0;
		STATIC = 1;
		DYNAMICBOX = 2;
		DYNAMICSPHERE = 3;
		DYNAMICCYLINDER = 4;
		CHARACTER = 5;
//		DYNAMICMESH = 123456789;
	}
	optional Mode mode = 2 ;
	optional float density = 3 ;
	optional float friction = 4 ;
	optional float bounce = 5 ;
    optional vector3f hull = 6 ;
    optional uint32 collide_msg = 16 ;
    optional uint32 collide_mask = 17 ;
    optional float gravity = 18 ;
}

message LightInfoProperty {
    optional vector3f diffuse_color=3;
    optional vector3f specular_color=4;
    optional float power=5;
    optional vector3f ambient_color=6;
    optional vector3f shadow_color=7;
    optional double light_range=8;
    optional float constant_falloff=9;
    optional float linear_falloff=10;
    optional float quadratic_falloff=11;
    optional float cone_inner_radians=12;
    optional float cone_outer_radians=13;
    optional float cone_falloff=14;
    enum LightTypes {
        POINT=0;
        SPOTLIGHT=1;
        DIRECTIONAL=2;
    }
    optional LightTypes type=15;
    optional bool casts_shadow=16;
}

message ParentProperty {
    optional uuid value=10;
}
message UUIDListProperty {
    repeated uuid value=10;
}

// TODO: Move these into a different ObjectHost-specific file.

//New Streams can establish an ObjectConnection
message ConnectToSpace {
    optional uuid space_id=1;
    ///key to indicate how an object's ObjectReference should be restored
    optional uuid object_uuid_evidence=2;
    ///The object host may request a position for a newly created object
    optional ObjLoc requested_object_loc=3;
    ///the bounding sphere for the mesh, so that proximity detection can begin right away
    optional boundingsphere3f bounding_sphere=4;
}

//New Streams can establish an ObjectConnection
message DisconnectFromSpace {
    optional uuid space_id=1;
}

message CreateObject {
    optional uuid object_uuid=1;
    repeated ConnectToSpace space_properties=2;
    optional string mesh=3;
    optional vector3f scale=4;
    optional string weburl=5;
    optional LightInfoProperty light_info=6;
    optional bool camera=7;
    optional PhysicalParameters physical=8;

    optional string script = 9;
    optional string script_name = 10;
    optional StringMapProperty script_args = 11;
	
}


message ScriptingInit {
    optional string script = 1;
    optional StringMapProperty script_args = 2;
}

message ScriptingRequest {
    optional uint32 id = 1;
    optional string body = 2;
}

message ScriptingReply {
    optional uint32 id = 1;
    optional string body = 2;
}

message ScriptingMessage {
    repeated ScriptingRequest requests = 1;
    repeated ScriptingReply replies = 2;
}
