/** \file
 *  This C header file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//LexWhenPred.g
 *     -                            On : 2011-02-22 17:07:00
 *     -                for the parser : LexWhenPredParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser LexWhenPredParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pLexWhenPredParser, which is returned from a call to LexWhenPredParserNew().
 *
 * The methods in pLexWhenPredParser are  as follows:
 *
 *  - LexWhenPredParser_program_return      pLexWhenPredParser->program(pLexWhenPredParser)
 *  - LexWhenPredParser_sourceElements_return      pLexWhenPredParser->sourceElements(pLexWhenPredParser)
 *  - LexWhenPredParser_sourceElement_return      pLexWhenPredParser->sourceElement(pLexWhenPredParser)
 *  - LexWhenPredParser_functionDeclaration_return      pLexWhenPredParser->functionDeclaration(pLexWhenPredParser)
 *  - LexWhenPredParser_functionExpression_return      pLexWhenPredParser->functionExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_formalParameterList_return      pLexWhenPredParser->formalParameterList(pLexWhenPredParser)
 *  - LexWhenPredParser_functionBody_return      pLexWhenPredParser->functionBody(pLexWhenPredParser)
 *  - LexWhenPredParser_statement_return      pLexWhenPredParser->statement(pLexWhenPredParser)
 *  - LexWhenPredParser_statementBlock_return      pLexWhenPredParser->statementBlock(pLexWhenPredParser)
 *  - LexWhenPredParser_statementList_return      pLexWhenPredParser->statementList(pLexWhenPredParser)
 *  - LexWhenPredParser_variableStatement_return      pLexWhenPredParser->variableStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_variableDeclarationList_return      pLexWhenPredParser->variableDeclarationList(pLexWhenPredParser)
 *  - LexWhenPredParser_variableDeclarationListNoIn_return      pLexWhenPredParser->variableDeclarationListNoIn(pLexWhenPredParser)
 *  - LexWhenPredParser_variableDeclaration_return      pLexWhenPredParser->variableDeclaration(pLexWhenPredParser)
 *  - LexWhenPredParser_variableDeclarationNoIn_return      pLexWhenPredParser->variableDeclarationNoIn(pLexWhenPredParser)
 *  - LexWhenPredParser_initialiser_return      pLexWhenPredParser->initialiser(pLexWhenPredParser)
 *  - LexWhenPredParser_initialiserNoIn_return      pLexWhenPredParser->initialiserNoIn(pLexWhenPredParser)
 *  - LexWhenPredParser_emptyStatement_return      pLexWhenPredParser->emptyStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_expressionStatement_return      pLexWhenPredParser->expressionStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_whenStatement_return      pLexWhenPredParser->whenStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_whenPred_return      pLexWhenPredParser->whenPred(pLexWhenPredParser)
 *  - LexWhenPredParser_whenCheckedListFirst_return      pLexWhenPredParser->whenCheckedListFirst(pLexWhenPredParser)
 *  - LexWhenPredParser_whenCheckedListSubsequent_return      pLexWhenPredParser->whenCheckedListSubsequent(pLexWhenPredParser)
 *  - LexWhenPredParser_ifStatement_return      pLexWhenPredParser->ifStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_iterationStatement_return      pLexWhenPredParser->iterationStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_doWhileStatement_return      pLexWhenPredParser->doWhileStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_whileStatement_return      pLexWhenPredParser->whileStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_forStatement_return      pLexWhenPredParser->forStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_forStatementInitialiserPart_return      pLexWhenPredParser->forStatementInitialiserPart(pLexWhenPredParser)
 *  - LexWhenPredParser_forInStatement_return      pLexWhenPredParser->forInStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_forInStatementInitialiserPart_return      pLexWhenPredParser->forInStatementInitialiserPart(pLexWhenPredParser)
 *  - LexWhenPredParser_continueStatement_return      pLexWhenPredParser->continueStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_breakStatement_return      pLexWhenPredParser->breakStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_returnStatement_return      pLexWhenPredParser->returnStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_withStatement_return      pLexWhenPredParser->withStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_labelledStatement_return      pLexWhenPredParser->labelledStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_switchStatement_return      pLexWhenPredParser->switchStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_caseBlock_return      pLexWhenPredParser->caseBlock(pLexWhenPredParser)
 *  - LexWhenPredParser_caseClause_return      pLexWhenPredParser->caseClause(pLexWhenPredParser)
 *  - LexWhenPredParser_defaultClause_return      pLexWhenPredParser->defaultClause(pLexWhenPredParser)
 *  - LexWhenPredParser_throwStatement_return      pLexWhenPredParser->throwStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_tryStatement_return      pLexWhenPredParser->tryStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_catchClause_return      pLexWhenPredParser->catchClause(pLexWhenPredParser)
 *  - LexWhenPredParser_finallyClause_return      pLexWhenPredParser->finallyClause(pLexWhenPredParser)
 *  - LexWhenPredParser_msgSendStatement_return      pLexWhenPredParser->msgSendStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_msgRecvStatement_return      pLexWhenPredParser->msgRecvStatement(pLexWhenPredParser)
 *  - LexWhenPredParser_expression_return      pLexWhenPredParser->expression(pLexWhenPredParser)
 *  - LexWhenPredParser_expressionNoIn_return      pLexWhenPredParser->expressionNoIn(pLexWhenPredParser)
 *  - LexWhenPredParser_assignmentExpression_return      pLexWhenPredParser->assignmentExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_assignmentExpressionNoIn_return      pLexWhenPredParser->assignmentExpressionNoIn(pLexWhenPredParser)
 *  - LexWhenPredParser_leftHandSideExpression_return      pLexWhenPredParser->leftHandSideExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_newExpression_return      pLexWhenPredParser->newExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_indexSuffix1_return      pLexWhenPredParser->indexSuffix1(pLexWhenPredParser)
 *  - LexWhenPredParser_propertyReferenceSuffix1_return      pLexWhenPredParser->propertyReferenceSuffix1(pLexWhenPredParser)
 *  - LexWhenPredParser_memberExpression_return      pLexWhenPredParser->memberExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_memberExpressionSuffix_return      pLexWhenPredParser->memberExpressionSuffix(pLexWhenPredParser)
 *  - LexWhenPredParser_callExpression_return      pLexWhenPredParser->callExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_callExpressionSuffix_return      pLexWhenPredParser->callExpressionSuffix(pLexWhenPredParser)
 *  - LexWhenPredParser_arguments_return      pLexWhenPredParser->arguments(pLexWhenPredParser)
 *  - LexWhenPredParser_indexSuffix_return      pLexWhenPredParser->indexSuffix(pLexWhenPredParser)
 *  - LexWhenPredParser_propertyReferenceSuffix_return      pLexWhenPredParser->propertyReferenceSuffix(pLexWhenPredParser)
 *  - LexWhenPredParser_assignmentOperator_return      pLexWhenPredParser->assignmentOperator(pLexWhenPredParser)
 *  - LexWhenPredParser_conditionalExpression_return      pLexWhenPredParser->conditionalExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_conditionalExpressionNoIn_return      pLexWhenPredParser->conditionalExpressionNoIn(pLexWhenPredParser)
 *  - LexWhenPredParser_logicalORExpression_return      pLexWhenPredParser->logicalORExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_logicalANDExpression_return      pLexWhenPredParser->logicalANDExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_logicalORExpressionNoIn_return      pLexWhenPredParser->logicalORExpressionNoIn(pLexWhenPredParser)
 *  - LexWhenPredParser_logicalANDExpressionNoIn_return      pLexWhenPredParser->logicalANDExpressionNoIn(pLexWhenPredParser)
 *  - LexWhenPredParser_bitwiseORExpression_return      pLexWhenPredParser->bitwiseORExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_bitwiseORExpressionNoIn_return      pLexWhenPredParser->bitwiseORExpressionNoIn(pLexWhenPredParser)
 *  - LexWhenPredParser_bitwiseXORExpression_return      pLexWhenPredParser->bitwiseXORExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_bitwiseXORExpressionNoIn_return      pLexWhenPredParser->bitwiseXORExpressionNoIn(pLexWhenPredParser)
 *  - LexWhenPredParser_bitwiseANDExpression_return      pLexWhenPredParser->bitwiseANDExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_bitwiseANDExpressionNoIn_return      pLexWhenPredParser->bitwiseANDExpressionNoIn(pLexWhenPredParser)
 *  - LexWhenPredParser_equalityExpression_return      pLexWhenPredParser->equalityExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_equalityOps_return      pLexWhenPredParser->equalityOps(pLexWhenPredParser)
 *  - LexWhenPredParser_equalityExpressionNoIn_return      pLexWhenPredParser->equalityExpressionNoIn(pLexWhenPredParser)
 *  - LexWhenPredParser_relationalOps_return      pLexWhenPredParser->relationalOps(pLexWhenPredParser)
 *  - LexWhenPredParser_relationalExpression_return      pLexWhenPredParser->relationalExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_relationalOpsNoIn_return      pLexWhenPredParser->relationalOpsNoIn(pLexWhenPredParser)
 *  - LexWhenPredParser_relationalExpressionNoIn_return      pLexWhenPredParser->relationalExpressionNoIn(pLexWhenPredParser)
 *  - LexWhenPredParser_shiftOps_return      pLexWhenPredParser->shiftOps(pLexWhenPredParser)
 *  - LexWhenPredParser_shiftExpression_return      pLexWhenPredParser->shiftExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_addOps_return      pLexWhenPredParser->addOps(pLexWhenPredParser)
 *  - LexWhenPredParser_additiveExpression_return      pLexWhenPredParser->additiveExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_multOps_return      pLexWhenPredParser->multOps(pLexWhenPredParser)
 *  - LexWhenPredParser_multiplicativeExpression_return      pLexWhenPredParser->multiplicativeExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_postfixExpression_return      pLexWhenPredParser->postfixExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_unaryOps_return      pLexWhenPredParser->unaryOps(pLexWhenPredParser)
 *  - LexWhenPredParser_unaryExpression_return      pLexWhenPredParser->unaryExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_primaryExpression_return      pLexWhenPredParser->primaryExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_dollarExpression_return      pLexWhenPredParser->dollarExpression(pLexWhenPredParser)
 *  - LexWhenPredParser_arrayLiteral_return      pLexWhenPredParser->arrayLiteral(pLexWhenPredParser)
 *  - LexWhenPredParser_objectLiteral_return      pLexWhenPredParser->objectLiteral(pLexWhenPredParser)
 *  - LexWhenPredParser_propertyNameAndValue_return      pLexWhenPredParser->propertyNameAndValue(pLexWhenPredParser)
 *  - LexWhenPredParser_propertyName_return      pLexWhenPredParser->propertyName(pLexWhenPredParser)
 *  - LexWhenPredParser_literal_return      pLexWhenPredParser->literal(pLexWhenPredParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_LexWhenPredParser_H
#define _LexWhenPredParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct LexWhenPredParser_Ctx_struct LexWhenPredParser, * pLexWhenPredParser;



  #include <stdlib.h>;
  #include <stdio.h>;
  #include "../emerson/Util.h";


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct LexWhenPredParser_program_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_program_return;

typedef struct LexWhenPredParser_sourceElements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_sourceElements_return;

typedef struct LexWhenPredParser_sourceElement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_sourceElement_return;

typedef struct LexWhenPredParser_functionDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_functionDeclaration_return;

typedef struct LexWhenPredParser_functionExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_functionExpression_return;

typedef struct LexWhenPredParser_formalParameterList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_formalParameterList_return;

typedef struct LexWhenPredParser_functionBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_functionBody_return;

typedef struct LexWhenPredParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_statement_return;

typedef struct LexWhenPredParser_statementBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_statementBlock_return;

typedef struct LexWhenPredParser_statementList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_statementList_return;

typedef struct LexWhenPredParser_variableStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_variableStatement_return;

typedef struct LexWhenPredParser_variableDeclarationList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_variableDeclarationList_return;

typedef struct LexWhenPredParser_variableDeclarationListNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_variableDeclarationListNoIn_return;

typedef struct LexWhenPredParser_variableDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_variableDeclaration_return;

typedef struct LexWhenPredParser_variableDeclarationNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_variableDeclarationNoIn_return;

typedef struct LexWhenPredParser_initialiser_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_initialiser_return;

typedef struct LexWhenPredParser_initialiserNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_initialiserNoIn_return;

typedef struct LexWhenPredParser_emptyStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_emptyStatement_return;

typedef struct LexWhenPredParser_expressionStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_expressionStatement_return;

typedef struct LexWhenPredParser_whenStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_whenStatement_return;

typedef struct LexWhenPredParser_whenPred_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_whenPred_return;

typedef struct LexWhenPredParser_whenCheckedListFirst_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_whenCheckedListFirst_return;

typedef struct LexWhenPredParser_whenCheckedListSubsequent_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_whenCheckedListSubsequent_return;

typedef struct LexWhenPredParser_ifStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_ifStatement_return;

typedef struct LexWhenPredParser_iterationStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_iterationStatement_return;

typedef struct LexWhenPredParser_doWhileStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_doWhileStatement_return;

typedef struct LexWhenPredParser_whileStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_whileStatement_return;

typedef struct LexWhenPredParser_forStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_forStatement_return;

typedef struct LexWhenPredParser_forStatementInitialiserPart_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_forStatementInitialiserPart_return;

typedef struct LexWhenPredParser_forInStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_forInStatement_return;

typedef struct LexWhenPredParser_forInStatementInitialiserPart_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_forInStatementInitialiserPart_return;

typedef struct LexWhenPredParser_continueStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_continueStatement_return;

typedef struct LexWhenPredParser_breakStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_breakStatement_return;

typedef struct LexWhenPredParser_returnStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_returnStatement_return;

typedef struct LexWhenPredParser_withStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_withStatement_return;

typedef struct LexWhenPredParser_labelledStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_labelledStatement_return;

typedef struct LexWhenPredParser_switchStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_switchStatement_return;

typedef struct LexWhenPredParser_caseBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_caseBlock_return;

typedef struct LexWhenPredParser_caseClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_caseClause_return;

typedef struct LexWhenPredParser_defaultClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_defaultClause_return;

typedef struct LexWhenPredParser_throwStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_throwStatement_return;

typedef struct LexWhenPredParser_tryStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_tryStatement_return;

typedef struct LexWhenPredParser_catchClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_catchClause_return;

typedef struct LexWhenPredParser_finallyClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_finallyClause_return;

typedef struct LexWhenPredParser_msgSendStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_msgSendStatement_return;

typedef struct LexWhenPredParser_msgRecvStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_msgRecvStatement_return;

typedef struct LexWhenPredParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_expression_return;

typedef struct LexWhenPredParser_expressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_expressionNoIn_return;

typedef struct LexWhenPredParser_assignmentExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_assignmentExpression_return;

typedef struct LexWhenPredParser_assignmentExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_assignmentExpressionNoIn_return;

typedef struct LexWhenPredParser_leftHandSideExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_leftHandSideExpression_return;

typedef struct LexWhenPredParser_newExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_newExpression_return;

typedef struct LexWhenPredParser_indexSuffix1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_indexSuffix1_return;

typedef struct LexWhenPredParser_propertyReferenceSuffix1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_propertyReferenceSuffix1_return;

typedef struct LexWhenPredParser_memberExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_memberExpression_return;

typedef struct LexWhenPredParser_memberExpressionSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_memberExpressionSuffix_return;

typedef struct LexWhenPredParser_callExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_callExpression_return;

typedef struct LexWhenPredParser_callExpressionSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_callExpressionSuffix_return;

typedef struct LexWhenPredParser_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_arguments_return;

typedef struct LexWhenPredParser_indexSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_indexSuffix_return;

typedef struct LexWhenPredParser_propertyReferenceSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_propertyReferenceSuffix_return;

typedef struct LexWhenPredParser_assignmentOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_assignmentOperator_return;

typedef struct LexWhenPredParser_conditionalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_conditionalExpression_return;

typedef struct LexWhenPredParser_conditionalExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_conditionalExpressionNoIn_return;

typedef struct LexWhenPredParser_logicalORExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_logicalORExpression_return;

typedef struct LexWhenPredParser_logicalANDExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_logicalANDExpression_return;

typedef struct LexWhenPredParser_logicalORExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_logicalORExpressionNoIn_return;

typedef struct LexWhenPredParser_logicalANDExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_logicalANDExpressionNoIn_return;

typedef struct LexWhenPredParser_bitwiseORExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_bitwiseORExpression_return;

typedef struct LexWhenPredParser_bitwiseORExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_bitwiseORExpressionNoIn_return;

typedef struct LexWhenPredParser_bitwiseXORExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_bitwiseXORExpression_return;

typedef struct LexWhenPredParser_bitwiseXORExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_bitwiseXORExpressionNoIn_return;

typedef struct LexWhenPredParser_bitwiseANDExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_bitwiseANDExpression_return;

typedef struct LexWhenPredParser_bitwiseANDExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_bitwiseANDExpressionNoIn_return;

typedef struct LexWhenPredParser_equalityExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_equalityExpression_return;

typedef struct LexWhenPredParser_equalityOps_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_equalityOps_return;

typedef struct LexWhenPredParser_equalityExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_equalityExpressionNoIn_return;

typedef struct LexWhenPredParser_relationalOps_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_relationalOps_return;

typedef struct LexWhenPredParser_relationalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_relationalExpression_return;

typedef struct LexWhenPredParser_relationalOpsNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_relationalOpsNoIn_return;

typedef struct LexWhenPredParser_relationalExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_relationalExpressionNoIn_return;

typedef struct LexWhenPredParser_shiftOps_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_shiftOps_return;

typedef struct LexWhenPredParser_shiftExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_shiftExpression_return;

typedef struct LexWhenPredParser_addOps_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_addOps_return;

typedef struct LexWhenPredParser_additiveExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_additiveExpression_return;

typedef struct LexWhenPredParser_multOps_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_multOps_return;

typedef struct LexWhenPredParser_multiplicativeExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_multiplicativeExpression_return;

typedef struct LexWhenPredParser_postfixExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_postfixExpression_return;

typedef struct LexWhenPredParser_unaryOps_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_unaryOps_return;

typedef struct LexWhenPredParser_unaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_unaryExpression_return;

typedef struct LexWhenPredParser_primaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_primaryExpression_return;

typedef struct LexWhenPredParser_dollarExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_dollarExpression_return;

typedef struct LexWhenPredParser_arrayLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_arrayLiteral_return;

typedef struct LexWhenPredParser_objectLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_objectLiteral_return;

typedef struct LexWhenPredParser_propertyNameAndValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_propertyNameAndValue_return;

typedef struct LexWhenPredParser_propertyName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_propertyName_return;

typedef struct LexWhenPredParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    LexWhenPredParser_literal_return;



/** Context tracking structure for LexWhenPredParser
 */
struct LexWhenPredParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     LexWhenPredParser_program_return (*program)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_sourceElements_return (*sourceElements)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_sourceElement_return (*sourceElement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_functionDeclaration_return (*functionDeclaration)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_functionExpression_return (*functionExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_formalParameterList_return (*formalParameterList)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_functionBody_return (*functionBody)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_statement_return (*statement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_statementBlock_return (*statementBlock)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_statementList_return (*statementList)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_variableStatement_return (*variableStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_variableDeclarationList_return (*variableDeclarationList)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_variableDeclarationListNoIn_return (*variableDeclarationListNoIn)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_variableDeclaration_return (*variableDeclaration)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_variableDeclarationNoIn_return (*variableDeclarationNoIn)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_initialiser_return (*initialiser)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_initialiserNoIn_return (*initialiserNoIn)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_emptyStatement_return (*emptyStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_expressionStatement_return (*expressionStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_whenStatement_return (*whenStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_whenPred_return (*whenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_whenCheckedListFirst_return (*whenCheckedListFirst)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_whenCheckedListSubsequent_return (*whenCheckedListSubsequent)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_ifStatement_return (*ifStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_iterationStatement_return (*iterationStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_doWhileStatement_return (*doWhileStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_whileStatement_return (*whileStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_forStatement_return (*forStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_forStatementInitialiserPart_return (*forStatementInitialiserPart)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_forInStatement_return (*forInStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_forInStatementInitialiserPart_return (*forInStatementInitialiserPart)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_continueStatement_return (*continueStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_breakStatement_return (*breakStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_returnStatement_return (*returnStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_withStatement_return (*withStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_labelledStatement_return (*labelledStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_switchStatement_return (*switchStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_caseBlock_return (*caseBlock)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_caseClause_return (*caseClause)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_defaultClause_return (*defaultClause)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_throwStatement_return (*throwStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_tryStatement_return (*tryStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_catchClause_return (*catchClause)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_finallyClause_return (*finallyClause)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_msgSendStatement_return (*msgSendStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_msgRecvStatement_return (*msgRecvStatement)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_expression_return (*expression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_expressionNoIn_return (*expressionNoIn)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_assignmentExpression_return (*assignmentExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_assignmentExpressionNoIn_return (*assignmentExpressionNoIn)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_leftHandSideExpression_return (*leftHandSideExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_newExpression_return (*newExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_indexSuffix1_return (*indexSuffix1)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_propertyReferenceSuffix1_return (*propertyReferenceSuffix1)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_memberExpression_return (*memberExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_memberExpressionSuffix_return (*memberExpressionSuffix)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_callExpression_return (*callExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_callExpressionSuffix_return (*callExpressionSuffix)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_arguments_return (*arguments)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_indexSuffix_return (*indexSuffix)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_propertyReferenceSuffix_return (*propertyReferenceSuffix)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_assignmentOperator_return (*assignmentOperator)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_conditionalExpression_return (*conditionalExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_conditionalExpressionNoIn_return (*conditionalExpressionNoIn)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_logicalORExpression_return (*logicalORExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_logicalANDExpression_return (*logicalANDExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_logicalORExpressionNoIn_return (*logicalORExpressionNoIn)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_logicalANDExpressionNoIn_return (*logicalANDExpressionNoIn)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_bitwiseORExpression_return (*bitwiseORExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_bitwiseORExpressionNoIn_return (*bitwiseORExpressionNoIn)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_bitwiseXORExpression_return (*bitwiseXORExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_bitwiseXORExpressionNoIn_return (*bitwiseXORExpressionNoIn)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_bitwiseANDExpression_return (*bitwiseANDExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_bitwiseANDExpressionNoIn_return (*bitwiseANDExpressionNoIn)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_equalityExpression_return (*equalityExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_equalityOps_return (*equalityOps)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_equalityExpressionNoIn_return (*equalityExpressionNoIn)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_relationalOps_return (*relationalOps)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_relationalExpression_return (*relationalExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_relationalOpsNoIn_return (*relationalOpsNoIn)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_relationalExpressionNoIn_return (*relationalExpressionNoIn)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_shiftOps_return (*shiftOps)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_shiftExpression_return (*shiftExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_addOps_return (*addOps)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_additiveExpression_return (*additiveExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_multOps_return (*multOps)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_multiplicativeExpression_return (*multiplicativeExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_postfixExpression_return (*postfixExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_unaryOps_return (*unaryOps)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_unaryExpression_return (*unaryExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_primaryExpression_return (*primaryExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_dollarExpression_return (*dollarExpression)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_arrayLiteral_return (*arrayLiteral)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_objectLiteral_return (*objectLiteral)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_propertyNameAndValue_return (*propertyNameAndValue)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_propertyName_return (*propertyName)	(struct LexWhenPredParser_Ctx_struct * ctx);
     LexWhenPredParser_literal_return (*literal)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred5_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred9_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred23_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred26_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred33_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred38_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred53_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred55_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred69_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred76_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred79_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred134_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred137_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred155_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred161_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred165_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred168_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred171_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred172_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred178_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred180_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred183_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred185_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred190_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred192_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred196_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred198_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred200_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred295_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred322_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred325_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred330_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred333_LexWhenPred)	(struct LexWhenPredParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct LexWhenPredParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pLexWhenPredParser LexWhenPredParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pLexWhenPredParser LexWhenPredParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define T__159      159
#define T__158      158
#define MOD      73
#define T__160      160
#define DO      14
#define LEFT_SHIFT_ASSIGN      45
#define NOT      85
#define COND_EXPR_NOIN      93
#define T__167      167
#define TRIPLE_SHIFT      68
#define T__168      168
#define EOF      -1
#define T__165      165
#define T__166      166
#define T__163      163
#define T__164      164
#define UNARY_PLUS      82
#define T__161      161
#define T__162      162
#define SingleStringCharacter      104
#define T__148      148
#define T__147      147
#define T__149      149
#define INSTANCE_OF      64
#define RETURN      23
#define UnicodeLetter      119
#define WhiteSpace      125
#define MESSAGE_SEND      96
#define T__154      154
#define T__155      155
#define T__156      156
#define T__157      157
#define T__150      150
#define T__151      151
#define T__152      152
#define UnicodeCombiningMark      122
#define T__153      153
#define T__139      139
#define LTERM      99
#define T__138      138
#define UnicodeDigit      120
#define T__137      137
#define T__136      136
#define NumericLiteral      102
#define UNARY_MINUS      83
#define DoubleStringCharacter      103
#define T__141      141
#define T__142      142
#define T__140      140
#define T__145      145
#define T__146      146
#define T__143      143
#define T__144      144
#define T__126      126
#define T__128      128
#define T__127      127
#define T__129      129
#define TYPEOF      79
#define COND_EXPR      92
#define LESS_THAN      60
#define COMPLEMENT      84
#define LEFT_SHIFT      66
#define NAME_VALUE      76
#define CALL      5
#define CharacterEscapeSequence      106
#define T__130      130
#define T__131      131
#define T__132      132
#define T__133      133
#define T__134      134
#define T__135      135
#define PLUSPLUS      80
#define SUB      70
#define HexDigit      113
#define NOT_EQUALS      57
#define PAREN      98
#define T__202      202
#define T__203      203
#define T__204      204
#define T__205      205
#define WHEN_CHECKED_LIST_SUBSEQUENT      28
#define ARRAY_INDEX      6
#define RIGHT_SHIFT_ASSIGN      46
#define SLIST      9
#define IDENT      58
#define ADD      69
#define GREATER_THAN      61
#define EXP_ASSIGN      49
#define UnicodeEscapeSequence      108
#define FUNC_DECL      88
#define NOT_IDENT      59
#define StringLiteral      101
#define OR_ASSIGN      50
#define FORCOND      18
#define WHEN      26
#define HexIntegerLiteral      115
#define NonEscapeCharacter      110
#define LESS_THAN_EQUAL      62
#define DOLLAR_EXPRESSION      30
#define DIV      72
#define SUB_ASSIGN      44
#define WHEN_PRED      29
#define OBJ_LITERAL      75
#define WHILE      15
#define MOD_ASSIGN      42
#define CASE      37
#define NEW      25
#define MINUSMINUS      81
#define ARGLIST      90
#define EQUALS      56
#define ARRAY_LITERAL      74
#define DecimalDigit      112
#define FUNC_EXPR      89
#define DIV_ASSIGN      41
#define BREAK      21
#define Identifier      100
#define BIT_OR      53
#define Comment      123
#define EXP      54
#define SingleEscapeCharacter      109
#define WHEN_CHECKED_LIST_FIRST      27
#define ExponentPart      116
#define VAR      12
#define VOID      78
#define FORINIT      17
#define GREATER_THAN_EQUAL      63
#define ADD_ASSIGN      43
#define SWITCH      36
#define IdentifierStart      117
#define FUNC_PARAMS      87
#define DELETE      77
#define MULT      71
#define EMPTY_FUNC_BODY      95
#define TRY      31
#define T__200      200
#define T__201      201
#define FUNC      8
#define OR      51
#define VARLIST      11
#define CATCH      33
#define MESSAGE_RECV      97
#define EscapeSequence      105
#define THROW      32
#define UnicodeConnectorPunctuation      121
#define BIT_AND      55
#define HexEscapeSequence      107
#define MULT_ASSIGN      40
#define LineComment      124
#define FOR      16
#define AND      52
#define AND_ASSIGN      48
#define IF      10
#define EXPR_LIST      91
#define T__199      199
#define T__198      198
#define PROG      13
#define T__197      197
#define T__196      196
#define IN      65
#define T__195      195
#define T__194      194
#define T__193      193
#define CONTINUE      22
#define T__192      192
#define T__191      191
#define T__190      190
#define FORITER      19
#define RIGHT_SHIFT      67
#define EscapeCharacter      111
#define UNDEF      4
#define DOT      7
#define TERNARYOP      94
#define IdentifierPart      118
#define WITH      24
#define T__184      184
#define T__183      183
#define T__186      186
#define T__185      185
#define T__188      188
#define T__187      187
#define T__189      189
#define T__180      180
#define T__182      182
#define DEFAULT      35
#define T__181      181
#define POSTEXPR      86
#define TRIPLE_SHIFT_ASSIGN      47
#define FORIN      20
#define DecimalLiteral      114
#define T__175      175
#define T__174      174
#define T__173      173
#define T__172      172
#define T__179      179
#define T__178      178
#define T__177      177
#define T__176      176
#define FINALLY      34
#define LABEL      38
#define T__171      171
#define T__170      170
#define ASSIGN      39
#define T__169      169
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for LexWhenPredParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
