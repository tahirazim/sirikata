/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//LexWhenPred.g
 *     -                            On : 2011-02-22 17:07:00
 *     -                for the parser : LexWhenPredParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

  #include <stdlib.h>;
  #include <stdio.h>;
  #include "../emerson/Util.h";

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "LexWhenPredParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pLexWhenPredParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pLexWhenPredParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pLexWhenPredParser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   LexWhenPredParserTokenNames[202+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "UNDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "ARRAY_INDEX",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "SLIST",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "VARLIST",
        (pANTLR3_UINT8) "VAR",
        (pANTLR3_UINT8) "PROG",
        (pANTLR3_UINT8) "DO",
        (pANTLR3_UINT8) "WHILE",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FORINIT",
        (pANTLR3_UINT8) "FORCOND",
        (pANTLR3_UINT8) "FORITER",
        (pANTLR3_UINT8) "FORIN",
        (pANTLR3_UINT8) "BREAK",
        (pANTLR3_UINT8) "CONTINUE",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "NEW",
        (pANTLR3_UINT8) "WHEN",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_FIRST",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_SUBSEQUENT",
        (pANTLR3_UINT8) "WHEN_PRED",
        (pANTLR3_UINT8) "DOLLAR_EXPRESSION",
        (pANTLR3_UINT8) "TRY",
        (pANTLR3_UINT8) "THROW",
        (pANTLR3_UINT8) "CATCH",
        (pANTLR3_UINT8) "FINALLY",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "SWITCH",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "LABEL",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "MULT_ASSIGN",
        (pANTLR3_UINT8) "DIV_ASSIGN",
        (pANTLR3_UINT8) "MOD_ASSIGN",
        (pANTLR3_UINT8) "ADD_ASSIGN",
        (pANTLR3_UINT8) "SUB_ASSIGN",
        (pANTLR3_UINT8) "LEFT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "RIGHT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "TRIPLE_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "AND_ASSIGN",
        (pANTLR3_UINT8) "EXP_ASSIGN",
        (pANTLR3_UINT8) "OR_ASSIGN",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "EXP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "EQUALS",
        (pANTLR3_UINT8) "NOT_EQUALS",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "NOT_IDENT",
        (pANTLR3_UINT8) "LESS_THAN",
        (pANTLR3_UINT8) "GREATER_THAN",
        (pANTLR3_UINT8) "LESS_THAN_EQUAL",
        (pANTLR3_UINT8) "GREATER_THAN_EQUAL",
        (pANTLR3_UINT8) "INSTANCE_OF",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "LEFT_SHIFT",
        (pANTLR3_UINT8) "RIGHT_SHIFT",
        (pANTLR3_UINT8) "TRIPLE_SHIFT",
        (pANTLR3_UINT8) "ADD",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "MULT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "ARRAY_LITERAL",
        (pANTLR3_UINT8) "OBJ_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE",
        (pANTLR3_UINT8) "DELETE",
        (pANTLR3_UINT8) "VOID",
        (pANTLR3_UINT8) "TYPEOF",
        (pANTLR3_UINT8) "PLUSPLUS",
        (pANTLR3_UINT8) "MINUSMINUS",
        (pANTLR3_UINT8) "UNARY_PLUS",
        (pANTLR3_UINT8) "UNARY_MINUS",
        (pANTLR3_UINT8) "COMPLEMENT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "POSTEXPR",
        (pANTLR3_UINT8) "FUNC_PARAMS",
        (pANTLR3_UINT8) "FUNC_DECL",
        (pANTLR3_UINT8) "FUNC_EXPR",
        (pANTLR3_UINT8) "ARGLIST",
        (pANTLR3_UINT8) "EXPR_LIST",
        (pANTLR3_UINT8) "COND_EXPR",
        (pANTLR3_UINT8) "COND_EXPR_NOIN",
        (pANTLR3_UINT8) "TERNARYOP",
        (pANTLR3_UINT8) "EMPTY_FUNC_BODY",
        (pANTLR3_UINT8) "MESSAGE_SEND",
        (pANTLR3_UINT8) "MESSAGE_RECV",
        (pANTLR3_UINT8) "PAREN",
        (pANTLR3_UINT8) "LTERM",
        (pANTLR3_UINT8) "Identifier",
        (pANTLR3_UINT8) "StringLiteral",
        (pANTLR3_UINT8) "NumericLiteral",
        (pANTLR3_UINT8) "DoubleStringCharacter",
        (pANTLR3_UINT8) "SingleStringCharacter",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "CharacterEscapeSequence",
        (pANTLR3_UINT8) "HexEscapeSequence",
        (pANTLR3_UINT8) "UnicodeEscapeSequence",
        (pANTLR3_UINT8) "SingleEscapeCharacter",
        (pANTLR3_UINT8) "NonEscapeCharacter",
        (pANTLR3_UINT8) "EscapeCharacter",
        (pANTLR3_UINT8) "DecimalDigit",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "DecimalLiteral",
        (pANTLR3_UINT8) "HexIntegerLiteral",
        (pANTLR3_UINT8) "ExponentPart",
        (pANTLR3_UINT8) "IdentifierStart",
        (pANTLR3_UINT8) "IdentifierPart",
        (pANTLR3_UINT8) "UnicodeLetter",
        (pANTLR3_UINT8) "UnicodeDigit",
        (pANTLR3_UINT8) "UnicodeConnectorPunctuation",
        (pANTLR3_UINT8) "UnicodeCombiningMark",
        (pANTLR3_UINT8) "Comment",
        (pANTLR3_UINT8) "LineComment",
        (pANTLR3_UINT8) "WhiteSpace",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "'var'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'when'",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'with'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'throw'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'finally'",
        (pANTLR3_UINT8) "'->'",
        (pANTLR3_UINT8) "'<-'",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'<<='",
        (pANTLR3_UINT8) "'>>='",
        (pANTLR3_UINT8) "'>>>='",
        (pANTLR3_UINT8) "'&='",
        (pANTLR3_UINT8) "'^='",
        (pANTLR3_UINT8) "'|='",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'^'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'==='",
        (pANTLR3_UINT8) "'!=='",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'instanceof'",
        (pANTLR3_UINT8) "'<<'",
        (pANTLR3_UINT8) "'>>'",
        (pANTLR3_UINT8) "'>>>'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'delete'",
        (pANTLR3_UINT8) "'void'",
        (pANTLR3_UINT8) "'typeof'",
        (pANTLR3_UINT8) "'~'",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'`'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static LexWhenPredParser_program_return	program    (pLexWhenPredParser ctx);
static LexWhenPredParser_sourceElements_return	sourceElements    (pLexWhenPredParser ctx);
static LexWhenPredParser_sourceElement_return	sourceElement    (pLexWhenPredParser ctx);
static LexWhenPredParser_functionDeclaration_return	functionDeclaration    (pLexWhenPredParser ctx);
static LexWhenPredParser_functionExpression_return	functionExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_formalParameterList_return	formalParameterList    (pLexWhenPredParser ctx);
static LexWhenPredParser_functionBody_return	functionBody    (pLexWhenPredParser ctx);
static LexWhenPredParser_statement_return	statement    (pLexWhenPredParser ctx);
static LexWhenPredParser_statementBlock_return	statementBlock    (pLexWhenPredParser ctx);
static LexWhenPredParser_statementList_return	statementList    (pLexWhenPredParser ctx);
static LexWhenPredParser_variableStatement_return	variableStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_variableDeclarationList_return	variableDeclarationList    (pLexWhenPredParser ctx);
static LexWhenPredParser_variableDeclarationListNoIn_return	variableDeclarationListNoIn    (pLexWhenPredParser ctx);
static LexWhenPredParser_variableDeclaration_return	variableDeclaration    (pLexWhenPredParser ctx);
static LexWhenPredParser_variableDeclarationNoIn_return	variableDeclarationNoIn    (pLexWhenPredParser ctx);
static LexWhenPredParser_initialiser_return	initialiser    (pLexWhenPredParser ctx);
static LexWhenPredParser_initialiserNoIn_return	initialiserNoIn    (pLexWhenPredParser ctx);
static LexWhenPredParser_emptyStatement_return	emptyStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_expressionStatement_return	expressionStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_whenStatement_return	whenStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_whenPred_return	whenPred    (pLexWhenPredParser ctx);
static LexWhenPredParser_whenCheckedListFirst_return	whenCheckedListFirst    (pLexWhenPredParser ctx);
static LexWhenPredParser_whenCheckedListSubsequent_return	whenCheckedListSubsequent    (pLexWhenPredParser ctx);
static LexWhenPredParser_ifStatement_return	ifStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_iterationStatement_return	iterationStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_doWhileStatement_return	doWhileStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_whileStatement_return	whileStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_forStatement_return	forStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_forStatementInitialiserPart_return	forStatementInitialiserPart    (pLexWhenPredParser ctx);
static LexWhenPredParser_forInStatement_return	forInStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_forInStatementInitialiserPart_return	forInStatementInitialiserPart    (pLexWhenPredParser ctx);
static LexWhenPredParser_continueStatement_return	continueStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_breakStatement_return	breakStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_returnStatement_return	returnStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_withStatement_return	withStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_labelledStatement_return	labelledStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_switchStatement_return	switchStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_caseBlock_return	caseBlock    (pLexWhenPredParser ctx);
static LexWhenPredParser_caseClause_return	caseClause    (pLexWhenPredParser ctx);
static LexWhenPredParser_defaultClause_return	defaultClause    (pLexWhenPredParser ctx);
static LexWhenPredParser_throwStatement_return	throwStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_tryStatement_return	tryStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_catchClause_return	catchClause    (pLexWhenPredParser ctx);
static LexWhenPredParser_finallyClause_return	finallyClause    (pLexWhenPredParser ctx);
static LexWhenPredParser_msgSendStatement_return	msgSendStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_msgRecvStatement_return	msgRecvStatement    (pLexWhenPredParser ctx);
static LexWhenPredParser_expression_return	expression    (pLexWhenPredParser ctx);
static LexWhenPredParser_expressionNoIn_return	expressionNoIn    (pLexWhenPredParser ctx);
static LexWhenPredParser_assignmentExpression_return	assignmentExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_assignmentExpressionNoIn_return	assignmentExpressionNoIn    (pLexWhenPredParser ctx);
static LexWhenPredParser_leftHandSideExpression_return	leftHandSideExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_newExpression_return	newExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_indexSuffix1_return	indexSuffix1    (pLexWhenPredParser ctx);
static LexWhenPredParser_propertyReferenceSuffix1_return	propertyReferenceSuffix1    (pLexWhenPredParser ctx);
static LexWhenPredParser_memberExpression_return	memberExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_memberExpressionSuffix_return	memberExpressionSuffix    (pLexWhenPredParser ctx);
static LexWhenPredParser_callExpression_return	callExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_callExpressionSuffix_return	callExpressionSuffix    (pLexWhenPredParser ctx);
static LexWhenPredParser_arguments_return	arguments    (pLexWhenPredParser ctx);
static LexWhenPredParser_indexSuffix_return	indexSuffix    (pLexWhenPredParser ctx);
static LexWhenPredParser_propertyReferenceSuffix_return	propertyReferenceSuffix    (pLexWhenPredParser ctx);
static LexWhenPredParser_assignmentOperator_return	assignmentOperator    (pLexWhenPredParser ctx);
static LexWhenPredParser_conditionalExpression_return	conditionalExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_conditionalExpressionNoIn_return	conditionalExpressionNoIn    (pLexWhenPredParser ctx);
static LexWhenPredParser_logicalORExpression_return	logicalORExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_logicalANDExpression_return	logicalANDExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_logicalORExpressionNoIn_return	logicalORExpressionNoIn    (pLexWhenPredParser ctx);
static LexWhenPredParser_logicalANDExpressionNoIn_return	logicalANDExpressionNoIn    (pLexWhenPredParser ctx);
static LexWhenPredParser_bitwiseORExpression_return	bitwiseORExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_bitwiseORExpressionNoIn_return	bitwiseORExpressionNoIn    (pLexWhenPredParser ctx);
static LexWhenPredParser_bitwiseXORExpression_return	bitwiseXORExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_bitwiseXORExpressionNoIn_return	bitwiseXORExpressionNoIn    (pLexWhenPredParser ctx);
static LexWhenPredParser_bitwiseANDExpression_return	bitwiseANDExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_bitwiseANDExpressionNoIn_return	bitwiseANDExpressionNoIn    (pLexWhenPredParser ctx);
static LexWhenPredParser_equalityExpression_return	equalityExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_equalityOps_return	equalityOps    (pLexWhenPredParser ctx);
static LexWhenPredParser_equalityExpressionNoIn_return	equalityExpressionNoIn    (pLexWhenPredParser ctx);
static LexWhenPredParser_relationalOps_return	relationalOps    (pLexWhenPredParser ctx);
static LexWhenPredParser_relationalExpression_return	relationalExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_relationalOpsNoIn_return	relationalOpsNoIn    (pLexWhenPredParser ctx);
static LexWhenPredParser_relationalExpressionNoIn_return	relationalExpressionNoIn    (pLexWhenPredParser ctx);
static LexWhenPredParser_shiftOps_return	shiftOps    (pLexWhenPredParser ctx);
static LexWhenPredParser_shiftExpression_return	shiftExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_addOps_return	addOps    (pLexWhenPredParser ctx);
static LexWhenPredParser_additiveExpression_return	additiveExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_multOps_return	multOps    (pLexWhenPredParser ctx);
static LexWhenPredParser_multiplicativeExpression_return	multiplicativeExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_postfixExpression_return	postfixExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_unaryOps_return	unaryOps    (pLexWhenPredParser ctx);
static LexWhenPredParser_unaryExpression_return	unaryExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_primaryExpression_return	primaryExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_dollarExpression_return	dollarExpression    (pLexWhenPredParser ctx);
static LexWhenPredParser_arrayLiteral_return	arrayLiteral    (pLexWhenPredParser ctx);
static LexWhenPredParser_objectLiteral_return	objectLiteral    (pLexWhenPredParser ctx);
static LexWhenPredParser_propertyNameAndValue_return	propertyNameAndValue    (pLexWhenPredParser ctx);
static LexWhenPredParser_propertyName_return	propertyName    (pLexWhenPredParser ctx);
static LexWhenPredParser_literal_return	literal    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred5_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred9_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred23_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred26_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred33_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred38_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred53_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred55_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred69_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred76_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred79_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred134_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred137_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred155_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred161_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred165_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred168_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred171_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred172_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred178_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred180_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred183_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred185_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred190_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred192_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred196_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred198_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred200_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred295_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred322_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred325_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred330_LexWhenPred    (pLexWhenPredParser ctx);
static ANTLR3_BOOLEAN	synpred333_LexWhenPred    (pLexWhenPredParser ctx);
static void	LexWhenPredParserFree(pLexWhenPredParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = ".//LexWhenPred.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new LexWhenPredParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pLexWhenPredParser
LexWhenPredParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return LexWhenPredParserNewSSD(instream, NULL);
}

/** \brief Create a new LexWhenPredParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pLexWhenPredParser
LexWhenPredParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pLexWhenPredParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pLexWhenPredParser) ANTLR3_CALLOC(1, sizeof(LexWhenPredParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in LexWhenPredParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our LexWhenPredParser interface
     */
    ctx->program	= program;
    ctx->sourceElements	= sourceElements;
    ctx->sourceElement	= sourceElement;
    ctx->functionDeclaration	= functionDeclaration;
    ctx->functionExpression	= functionExpression;
    ctx->formalParameterList	= formalParameterList;
    ctx->functionBody	= functionBody;
    ctx->statement	= statement;
    ctx->statementBlock	= statementBlock;
    ctx->statementList	= statementList;
    ctx->variableStatement	= variableStatement;
    ctx->variableDeclarationList	= variableDeclarationList;
    ctx->variableDeclarationListNoIn	= variableDeclarationListNoIn;
    ctx->variableDeclaration	= variableDeclaration;
    ctx->variableDeclarationNoIn	= variableDeclarationNoIn;
    ctx->initialiser	= initialiser;
    ctx->initialiserNoIn	= initialiserNoIn;
    ctx->emptyStatement	= emptyStatement;
    ctx->expressionStatement	= expressionStatement;
    ctx->whenStatement	= whenStatement;
    ctx->whenPred	= whenPred;
    ctx->whenCheckedListFirst	= whenCheckedListFirst;
    ctx->whenCheckedListSubsequent	= whenCheckedListSubsequent;
    ctx->ifStatement	= ifStatement;
    ctx->iterationStatement	= iterationStatement;
    ctx->doWhileStatement	= doWhileStatement;
    ctx->whileStatement	= whileStatement;
    ctx->forStatement	= forStatement;
    ctx->forStatementInitialiserPart	= forStatementInitialiserPart;
    ctx->forInStatement	= forInStatement;
    ctx->forInStatementInitialiserPart	= forInStatementInitialiserPart;
    ctx->continueStatement	= continueStatement;
    ctx->breakStatement	= breakStatement;
    ctx->returnStatement	= returnStatement;
    ctx->withStatement	= withStatement;
    ctx->labelledStatement	= labelledStatement;
    ctx->switchStatement	= switchStatement;
    ctx->caseBlock	= caseBlock;
    ctx->caseClause	= caseClause;
    ctx->defaultClause	= defaultClause;
    ctx->throwStatement	= throwStatement;
    ctx->tryStatement	= tryStatement;
    ctx->catchClause	= catchClause;
    ctx->finallyClause	= finallyClause;
    ctx->msgSendStatement	= msgSendStatement;
    ctx->msgRecvStatement	= msgRecvStatement;
    ctx->expression	= expression;
    ctx->expressionNoIn	= expressionNoIn;
    ctx->assignmentExpression	= assignmentExpression;
    ctx->assignmentExpressionNoIn	= assignmentExpressionNoIn;
    ctx->leftHandSideExpression	= leftHandSideExpression;
    ctx->newExpression	= newExpression;
    ctx->indexSuffix1	= indexSuffix1;
    ctx->propertyReferenceSuffix1	= propertyReferenceSuffix1;
    ctx->memberExpression	= memberExpression;
    ctx->memberExpressionSuffix	= memberExpressionSuffix;
    ctx->callExpression	= callExpression;
    ctx->callExpressionSuffix	= callExpressionSuffix;
    ctx->arguments	= arguments;
    ctx->indexSuffix	= indexSuffix;
    ctx->propertyReferenceSuffix	= propertyReferenceSuffix;
    ctx->assignmentOperator	= assignmentOperator;
    ctx->conditionalExpression	= conditionalExpression;
    ctx->conditionalExpressionNoIn	= conditionalExpressionNoIn;
    ctx->logicalORExpression	= logicalORExpression;
    ctx->logicalANDExpression	= logicalANDExpression;
    ctx->logicalORExpressionNoIn	= logicalORExpressionNoIn;
    ctx->logicalANDExpressionNoIn	= logicalANDExpressionNoIn;
    ctx->bitwiseORExpression	= bitwiseORExpression;
    ctx->bitwiseORExpressionNoIn	= bitwiseORExpressionNoIn;
    ctx->bitwiseXORExpression	= bitwiseXORExpression;
    ctx->bitwiseXORExpressionNoIn	= bitwiseXORExpressionNoIn;
    ctx->bitwiseANDExpression	= bitwiseANDExpression;
    ctx->bitwiseANDExpressionNoIn	= bitwiseANDExpressionNoIn;
    ctx->equalityExpression	= equalityExpression;
    ctx->equalityOps	= equalityOps;
    ctx->equalityExpressionNoIn	= equalityExpressionNoIn;
    ctx->relationalOps	= relationalOps;
    ctx->relationalExpression	= relationalExpression;
    ctx->relationalOpsNoIn	= relationalOpsNoIn;
    ctx->relationalExpressionNoIn	= relationalExpressionNoIn;
    ctx->shiftOps	= shiftOps;
    ctx->shiftExpression	= shiftExpression;
    ctx->addOps	= addOps;
    ctx->additiveExpression	= additiveExpression;
    ctx->multOps	= multOps;
    ctx->multiplicativeExpression	= multiplicativeExpression;
    ctx->postfixExpression	= postfixExpression;
    ctx->unaryOps	= unaryOps;
    ctx->unaryExpression	= unaryExpression;
    ctx->primaryExpression	= primaryExpression;
    ctx->dollarExpression	= dollarExpression;
    ctx->arrayLiteral	= arrayLiteral;
    ctx->objectLiteral	= objectLiteral;
    ctx->propertyNameAndValue	= propertyNameAndValue;
    ctx->propertyName	= propertyName;
    ctx->literal	= literal;
    ctx->synpred5_LexWhenPred	= synpred5_LexWhenPred;
    ctx->synpred9_LexWhenPred	= synpred9_LexWhenPred;
    ctx->synpred23_LexWhenPred	= synpred23_LexWhenPred;
    ctx->synpred26_LexWhenPred	= synpred26_LexWhenPred;
    ctx->synpred33_LexWhenPred	= synpred33_LexWhenPred;
    ctx->synpred38_LexWhenPred	= synpred38_LexWhenPred;
    ctx->synpred53_LexWhenPred	= synpred53_LexWhenPred;
    ctx->synpred55_LexWhenPred	= synpred55_LexWhenPred;
    ctx->synpred69_LexWhenPred	= synpred69_LexWhenPred;
    ctx->synpred76_LexWhenPred	= synpred76_LexWhenPred;
    ctx->synpred79_LexWhenPred	= synpred79_LexWhenPred;
    ctx->synpred134_LexWhenPred	= synpred134_LexWhenPred;
    ctx->synpred137_LexWhenPred	= synpred137_LexWhenPred;
    ctx->synpred155_LexWhenPred	= synpred155_LexWhenPred;
    ctx->synpred161_LexWhenPred	= synpred161_LexWhenPred;
    ctx->synpred165_LexWhenPred	= synpred165_LexWhenPred;
    ctx->synpred168_LexWhenPred	= synpred168_LexWhenPred;
    ctx->synpred171_LexWhenPred	= synpred171_LexWhenPred;
    ctx->synpred172_LexWhenPred	= synpred172_LexWhenPred;
    ctx->synpred178_LexWhenPred	= synpred178_LexWhenPred;
    ctx->synpred180_LexWhenPred	= synpred180_LexWhenPred;
    ctx->synpred183_LexWhenPred	= synpred183_LexWhenPred;
    ctx->synpred185_LexWhenPred	= synpred185_LexWhenPred;
    ctx->synpred190_LexWhenPred	= synpred190_LexWhenPred;
    ctx->synpred192_LexWhenPred	= synpred192_LexWhenPred;
    ctx->synpred196_LexWhenPred	= synpred196_LexWhenPred;
    ctx->synpred198_LexWhenPred	= synpred198_LexWhenPred;
    ctx->synpred200_LexWhenPred	= synpred200_LexWhenPred;
    ctx->synpred295_LexWhenPred	= synpred295_LexWhenPred;
    ctx->synpred322_LexWhenPred	= synpred322_LexWhenPred;
    ctx->synpred325_LexWhenPred	= synpred325_LexWhenPred;
    ctx->synpred330_LexWhenPred	= synpred330_LexWhenPred;
    ctx->synpred333_LexWhenPred	= synpred333_LexWhenPred;
    ctx->free			= LexWhenPredParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

    /* Create a LIST for recording rule memos.
     */
     RULEMEMO    = antlr3IntTrieNew(15);	/* 16 bit depth is enough for 32768 rules! */
	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = LexWhenPredParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 LexWhenPredParserFree(pLexWhenPredParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	if	(RULEMEMO != NULL)
	{
		RULEMEMO->free(RULEMEMO);
		RULEMEMO = NULL;
	}	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return LexWhenPredParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program786  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program786_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program786	= { FOLLOW_LTERM_in_program786_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_program789  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_program789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_program789	= { FOLLOW_sourceElements_in_program789_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program791  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program791_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program791	= { FOLLOW_LTERM_in_program791_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_program794  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_program794_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_program794	= { FOLLOW_EOF_in_program794_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements815  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements815_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements815	= { FOLLOW_sourceElement_in_sourceElements815_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_sourceElements818  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_sourceElements818_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_sourceElements818	= { FOLLOW_LTERM_in_sourceElements818_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements821  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements821	= { FOLLOW_sourceElement_in_sourceElements821_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_sourceElement842  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_sourceElement842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_sourceElement842	= { FOLLOW_functionDeclaration_in_sourceElement842_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_sourceElement851  */
static	ANTLR3_BITWORD FOLLOW_statement_in_sourceElement851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_sourceElement851	= { FOLLOW_statement_in_sourceElement851_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_functionDeclaration868  */
static	ANTLR3_BITWORD FOLLOW_126_in_functionDeclaration868_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_functionDeclaration868	= { FOLLOW_126_in_functionDeclaration868_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration870  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration870	= { FOLLOW_LTERM_in_functionDeclaration870_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionDeclaration873  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionDeclaration873_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionDeclaration873	= { FOLLOW_Identifier_in_functionDeclaration873_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration875  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration875_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration875	= { FOLLOW_LTERM_in_functionDeclaration875_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionDeclaration878  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionDeclaration878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionDeclaration878	= { FOLLOW_formalParameterList_in_functionDeclaration878_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration880  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration880	= { FOLLOW_LTERM_in_functionDeclaration880_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionDeclaration883  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionDeclaration883_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionDeclaration883	= { FOLLOW_functionBody_in_functionDeclaration883_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_functionExpression907  */
static	ANTLR3_BITWORD FOLLOW_126_in_functionExpression907_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_functionExpression907	= { FOLLOW_126_in_functionExpression907_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression909  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression909_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression909	= { FOLLOW_LTERM_in_functionExpression909_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionExpression912  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionExpression912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionExpression912	= { FOLLOW_Identifier_in_functionExpression912_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression915  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression915_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression915	= { FOLLOW_LTERM_in_functionExpression915_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionExpression918  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionExpression918_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionExpression918	= { FOLLOW_formalParameterList_in_functionExpression918_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression920  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression920_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression920	= { FOLLOW_LTERM_in_functionExpression920_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionExpression923  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionExpression923_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionExpression923	= { FOLLOW_functionBody_in_functionExpression923_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_formalParameterList950  */
static	ANTLR3_BITWORD FOLLOW_127_in_formalParameterList950_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_formalParameterList950	= { FOLLOW_127_in_formalParameterList950_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList953  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList953	= { FOLLOW_LTERM_in_formalParameterList953_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList958  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList958_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList958	= { FOLLOW_Identifier_in_formalParameterList958_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList961  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList961	= { FOLLOW_LTERM_in_formalParameterList961_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_formalParameterList964  */
static	ANTLR3_BITWORD FOLLOW_128_in_formalParameterList964_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_formalParameterList964	= { FOLLOW_128_in_formalParameterList964_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList966  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList966_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList966	= { FOLLOW_LTERM_in_formalParameterList966_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList971  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList971_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList971	= { FOLLOW_Identifier_in_formalParameterList971_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList977  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList977_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList977	= { FOLLOW_LTERM_in_formalParameterList977_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_formalParameterList980  */
static	ANTLR3_BITWORD FOLLOW_129_in_formalParameterList980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_formalParameterList980	= { FOLLOW_129_in_formalParameterList980_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_functionBody1006  */
static	ANTLR3_BITWORD FOLLOW_130_in_functionBody1006_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_functionBody1006	= { FOLLOW_130_in_functionBody1006_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1008  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1008	= { FOLLOW_LTERM_in_functionBody1008_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_functionBody1011  */
static	ANTLR3_BITWORD FOLLOW_131_in_functionBody1011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_functionBody1011	= { FOLLOW_131_in_functionBody1011_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_functionBody1022  */
static	ANTLR3_BITWORD FOLLOW_130_in_functionBody1022_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_functionBody1022	= { FOLLOW_130_in_functionBody1022_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1024  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1024_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1024	= { FOLLOW_LTERM_in_functionBody1024_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_functionBody1028  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_functionBody1028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_functionBody1028	= { FOLLOW_sourceElements_in_functionBody1028_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1035  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1035	= { FOLLOW_LTERM_in_functionBody1035_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_functionBody1038  */
static	ANTLR3_BITWORD FOLLOW_131_in_functionBody1038_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_functionBody1038	= { FOLLOW_131_in_functionBody1038_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_statement1050  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_statement1050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_statement1050	= { FOLLOW_statementBlock_in_statement1050_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableStatement_in_statement1055  */
static	ANTLR3_BITWORD FOLLOW_variableStatement_in_statement1055_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableStatement_in_statement1055	= { FOLLOW_variableStatement_in_statement1055_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_emptyStatement_in_statement1060  */
static	ANTLR3_BITWORD FOLLOW_emptyStatement_in_statement1060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_emptyStatement_in_statement1060	= { FOLLOW_emptyStatement_in_statement1060_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_statement1065  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_statement1065_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_statement1065	= { FOLLOW_expressionStatement_in_statement1065_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement1070  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement1070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement1070	= { FOLLOW_ifStatement_in_statement1070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iterationStatement_in_statement1075  */
static	ANTLR3_BITWORD FOLLOW_iterationStatement_in_statement1075_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iterationStatement_in_statement1075	= { FOLLOW_iterationStatement_in_statement1075_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_continueStatement_in_statement1080  */
static	ANTLR3_BITWORD FOLLOW_continueStatement_in_statement1080_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_continueStatement_in_statement1080	= { FOLLOW_continueStatement_in_statement1080_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_statement1085  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_statement1085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_statement1085	= { FOLLOW_breakStatement_in_statement1085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement1090  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement1090_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement1090	= { FOLLOW_returnStatement_in_statement1090_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_withStatement_in_statement1095  */
static	ANTLR3_BITWORD FOLLOW_withStatement_in_statement1095_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_withStatement_in_statement1095	= { FOLLOW_withStatement_in_statement1095_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labelledStatement_in_statement1100  */
static	ANTLR3_BITWORD FOLLOW_labelledStatement_in_statement1100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labelledStatement_in_statement1100	= { FOLLOW_labelledStatement_in_statement1100_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_statement1105  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_statement1105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_statement1105	= { FOLLOW_switchStatement_in_statement1105_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throwStatement_in_statement1110  */
static	ANTLR3_BITWORD FOLLOW_throwStatement_in_statement1110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throwStatement_in_statement1110	= { FOLLOW_throwStatement_in_statement1110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenStatement_in_statement1122  */
static	ANTLR3_BITWORD FOLLOW_whenStatement_in_statement1122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenStatement_in_statement1122	= { FOLLOW_whenStatement_in_statement1122_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tryStatement_in_statement1127  */
static	ANTLR3_BITWORD FOLLOW_tryStatement_in_statement1127_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tryStatement_in_statement1127	= { FOLLOW_tryStatement_in_statement1127_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSendStatement_in_statement1132  */
static	ANTLR3_BITWORD FOLLOW_msgSendStatement_in_statement1132_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSendStatement_in_statement1132	= { FOLLOW_msgSendStatement_in_statement1132_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvStatement_in_statement1137  */
static	ANTLR3_BITWORD FOLLOW_msgRecvStatement_in_statement1137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvStatement_in_statement1137	= { FOLLOW_msgRecvStatement_in_statement1137_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_statementBlock1149  */
static	ANTLR3_BITWORD FOLLOW_130_in_statementBlock1149_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_statementBlock1149	= { FOLLOW_130_in_statementBlock1149_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1151  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1151_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1151	= { FOLLOW_LTERM_in_statementBlock1151_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_statementBlock1154  */
static	ANTLR3_BITWORD FOLLOW_131_in_statementBlock1154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_statementBlock1154	= { FOLLOW_131_in_statementBlock1154_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_statementBlock1159  */
static	ANTLR3_BITWORD FOLLOW_130_in_statementBlock1159_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_statementBlock1159	= { FOLLOW_130_in_statementBlock1159_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1161  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1161_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1161	= { FOLLOW_LTERM_in_statementBlock1161_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_statementBlock1165  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_statementBlock1165_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_statementBlock1165	= { FOLLOW_statementList_in_statementBlock1165_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1170  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1170	= { FOLLOW_LTERM_in_statementBlock1170_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_statementBlock1173  */
static	ANTLR3_BITWORD FOLLOW_131_in_statementBlock1173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_statementBlock1173	= { FOLLOW_131_in_statementBlock1173_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList1186  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList1186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList1186	= { FOLLOW_statement_in_statementList1186_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementList1189  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementList1189_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementList1189	= { FOLLOW_LTERM_in_statementList1189_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList1192  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList1192_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList1192	= { FOLLOW_statement_in_statementList1192_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_variableStatement1215  */
static	ANTLR3_BITWORD FOLLOW_132_in_variableStatement1215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_variableStatement1215	= { FOLLOW_132_in_variableStatement1215_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1217  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1217	= { FOLLOW_LTERM_in_variableStatement1217_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationList_in_variableStatement1220  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationList_in_variableStatement1220_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationList_in_variableStatement1220	= { FOLLOW_variableDeclarationList_in_variableStatement1220_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1223  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1223	= { FOLLOW_LTERM_in_variableStatement1223_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_variableStatement1227  */
static	ANTLR3_BITWORD FOLLOW_133_in_variableStatement1227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_variableStatement1227	= { FOLLOW_133_in_variableStatement1227_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1249  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1249_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1249	= { FOLLOW_variableDeclaration_in_variableDeclarationList1249_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1252  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1252	= { FOLLOW_LTERM_in_variableDeclarationList1252_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_variableDeclarationList1255  */
static	ANTLR3_BITWORD FOLLOW_128_in_variableDeclarationList1255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_variableDeclarationList1255	= { FOLLOW_128_in_variableDeclarationList1255_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1257  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1257	= { FOLLOW_LTERM_in_variableDeclarationList1257_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1260  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1260_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1260	= { FOLLOW_variableDeclaration_in_variableDeclarationList1260_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1279  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1279_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1279	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1279_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1282  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1282	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1282_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_variableDeclarationListNoIn1285  */
static	ANTLR3_BITWORD FOLLOW_128_in_variableDeclarationListNoIn1285_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_variableDeclarationListNoIn1285	= { FOLLOW_128_in_variableDeclarationListNoIn1285_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1287  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1287_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1287	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1287_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1290  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1290	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1290_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclaration1309  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclaration1309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclaration1309	= { FOLLOW_Identifier_in_variableDeclaration1309_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclaration1311  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclaration1311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclaration1311	= { FOLLOW_LTERM_in_variableDeclaration1311_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiser_in_variableDeclaration1314  */
static	ANTLR3_BITWORD FOLLOW_initialiser_in_variableDeclaration1314_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiser_in_variableDeclaration1314	= { FOLLOW_initialiser_in_variableDeclaration1314_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclarationNoIn1338  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclarationNoIn1338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclarationNoIn1338	= { FOLLOW_Identifier_in_variableDeclarationNoIn1338_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationNoIn1340  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationNoIn1340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationNoIn1340	= { FOLLOW_LTERM_in_variableDeclarationNoIn1340_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1343  */
static	ANTLR3_BITWORD FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1343	= { FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1343_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_134_in_initialiser1368  */
static	ANTLR3_BITWORD FOLLOW_134_in_initialiser1368_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_134_in_initialiser1368	= { FOLLOW_134_in_initialiser1368_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiser1370  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiser1370_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiser1370	= { FOLLOW_LTERM_in_initialiser1370_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_initialiser1373  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_initialiser1373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_initialiser1373	= { FOLLOW_assignmentExpression_in_initialiser1373_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_134_in_initialiserNoIn1390  */
static	ANTLR3_BITWORD FOLLOW_134_in_initialiserNoIn1390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_134_in_initialiserNoIn1390	= { FOLLOW_134_in_initialiserNoIn1390_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiserNoIn1392  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiserNoIn1392_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiserNoIn1392	= { FOLLOW_LTERM_in_initialiserNoIn1392_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1395  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1395_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1395	= { FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1395_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_emptyStatement1411  */
static	ANTLR3_BITWORD FOLLOW_133_in_emptyStatement1411_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_emptyStatement1411	= { FOLLOW_133_in_emptyStatement1411_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionStatement1423  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionStatement1423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionStatement1423	= { FOLLOW_expression_in_expressionStatement1423_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionStatement1426  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionStatement1426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionStatement1426	= { FOLLOW_LTERM_in_expressionStatement1426_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_expressionStatement1430  */
static	ANTLR3_BITWORD FOLLOW_133_in_expressionStatement1430_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_expressionStatement1430	= { FOLLOW_133_in_expressionStatement1430_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_135_in_whenStatement1450  */
static	ANTLR3_BITWORD FOLLOW_135_in_whenStatement1450_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_135_in_whenStatement1450	= { FOLLOW_135_in_whenStatement1450_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1452  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1452	= { FOLLOW_LTERM_in_whenStatement1452_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_whenStatement1455  */
static	ANTLR3_BITWORD FOLLOW_127_in_whenStatement1455_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_whenStatement1455	= { FOLLOW_127_in_whenStatement1455_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1457  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1457	= { FOLLOW_LTERM_in_whenStatement1457_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenPred_in_whenStatement1460  */
static	ANTLR3_BITWORD FOLLOW_whenPred_in_whenStatement1460_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenPred_in_whenStatement1460	= { FOLLOW_whenPred_in_whenStatement1460_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1462  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1462	= { FOLLOW_LTERM_in_whenStatement1462_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_whenStatement1465  */
static	ANTLR3_BITWORD FOLLOW_129_in_whenStatement1465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_whenStatement1465	= { FOLLOW_129_in_whenStatement1465_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenStatement1467  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenStatement1467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenStatement1467	= { FOLLOW_LTERM_in_whenStatement1467_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_whenStatement1470  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_whenStatement1470_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_whenStatement1470	= { FOLLOW_functionBody_in_whenStatement1470_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenPred1499  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenPred1499_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenPred1499	= { FOLLOW_expression_in_whenPred1499_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenCheckedListFirst1526  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenCheckedListFirst1526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenCheckedListFirst1526	= { FOLLOW_expression_in_whenCheckedListFirst1526_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListFirst1528  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListFirst1528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListFirst1528	= { FOLLOW_LTERM_in_whenCheckedListFirst1528_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_whenCheckedListFirst1532  */
static	ANTLR3_BITWORD FOLLOW_128_in_whenCheckedListFirst1532_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_whenCheckedListFirst1532	= { FOLLOW_128_in_whenCheckedListFirst1532_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListFirst1534  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListFirst1534_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListFirst1534	= { FOLLOW_LTERM_in_whenCheckedListFirst1534_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1539  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1539_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1539	= { FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1539_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whenCheckedListSubsequent1576  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whenCheckedListSubsequent1576_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whenCheckedListSubsequent1576	= { FOLLOW_expression_in_whenCheckedListSubsequent1576_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListSubsequent1578  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListSubsequent1578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListSubsequent1578	= { FOLLOW_LTERM_in_whenCheckedListSubsequent1578_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_whenCheckedListSubsequent1582  */
static	ANTLR3_BITWORD FOLLOW_128_in_whenCheckedListSubsequent1582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_whenCheckedListSubsequent1582	= { FOLLOW_128_in_whenCheckedListSubsequent1582_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whenCheckedListSubsequent1584  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whenCheckedListSubsequent1584_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whenCheckedListSubsequent1584	= { FOLLOW_LTERM_in_whenCheckedListSubsequent1584_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1589  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1589_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1589	= { FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1589_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_ifStatement1622  */
static	ANTLR3_BITWORD FOLLOW_136_in_ifStatement1622_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_ifStatement1622	= { FOLLOW_136_in_ifStatement1622_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1624  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1624_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1624	= { FOLLOW_LTERM_in_ifStatement1624_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_ifStatement1627  */
static	ANTLR3_BITWORD FOLLOW_127_in_ifStatement1627_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_ifStatement1627	= { FOLLOW_127_in_ifStatement1627_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1629  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1629_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1629	= { FOLLOW_LTERM_in_ifStatement1629_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1632  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1632	= { FOLLOW_expression_in_ifStatement1632_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1634  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1634_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1634	= { FOLLOW_LTERM_in_ifStatement1634_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_ifStatement1637  */
static	ANTLR3_BITWORD FOLLOW_129_in_ifStatement1637_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_ifStatement1637	= { FOLLOW_129_in_ifStatement1637_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1639  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1639_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1639	= { FOLLOW_LTERM_in_ifStatement1639_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1644  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1644_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1644	= { FOLLOW_statement_in_ifStatement1644_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1647  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1647	= { FOLLOW_LTERM_in_ifStatement1647_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_ifStatement1650  */
static	ANTLR3_BITWORD FOLLOW_137_in_ifStatement1650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_ifStatement1650	= { FOLLOW_137_in_ifStatement1650_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1652  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1652_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1652	= { FOLLOW_LTERM_in_ifStatement1652_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1657  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1657	= { FOLLOW_statement_in_ifStatement1657_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_doWhileStatement_in_iterationStatement1689  */
static	ANTLR3_BITWORD FOLLOW_doWhileStatement_in_iterationStatement1689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_doWhileStatement_in_iterationStatement1689	= { FOLLOW_doWhileStatement_in_iterationStatement1689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_iterationStatement1694  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_iterationStatement1694_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_iterationStatement1694	= { FOLLOW_whileStatement_in_iterationStatement1694_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_iterationStatement1699  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_iterationStatement1699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_iterationStatement1699	= { FOLLOW_forStatement_in_iterationStatement1699_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatement_in_iterationStatement1704  */
static	ANTLR3_BITWORD FOLLOW_forInStatement_in_iterationStatement1704_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatement_in_iterationStatement1704	= { FOLLOW_forInStatement_in_iterationStatement1704_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_doWhileStatement1716  */
static	ANTLR3_BITWORD FOLLOW_138_in_doWhileStatement1716_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_doWhileStatement1716	= { FOLLOW_138_in_doWhileStatement1716_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1718  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1718	= { FOLLOW_LTERM_in_doWhileStatement1718_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_doWhileStatement1721  */
static	ANTLR3_BITWORD FOLLOW_statement_in_doWhileStatement1721_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_doWhileStatement1721	= { FOLLOW_statement_in_doWhileStatement1721_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1723  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1723_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1723	= { FOLLOW_LTERM_in_doWhileStatement1723_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_doWhileStatement1726  */
static	ANTLR3_BITWORD FOLLOW_139_in_doWhileStatement1726_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_doWhileStatement1726	= { FOLLOW_139_in_doWhileStatement1726_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1728  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1728_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1728	= { FOLLOW_LTERM_in_doWhileStatement1728_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_doWhileStatement1731  */
static	ANTLR3_BITWORD FOLLOW_127_in_doWhileStatement1731_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007000000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_doWhileStatement1731	= { FOLLOW_127_in_doWhileStatement1731_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_doWhileStatement1733  */
static	ANTLR3_BITWORD FOLLOW_expression_in_doWhileStatement1733_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_doWhileStatement1733	= { FOLLOW_expression_in_doWhileStatement1733_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_doWhileStatement1735  */
static	ANTLR3_BITWORD FOLLOW_129_in_doWhileStatement1735_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_doWhileStatement1735	= { FOLLOW_129_in_doWhileStatement1735_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1738  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1738	= { FOLLOW_LTERM_in_doWhileStatement1738_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_doWhileStatement1742  */
static	ANTLR3_BITWORD FOLLOW_133_in_doWhileStatement1742_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_doWhileStatement1742	= { FOLLOW_133_in_doWhileStatement1742_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_whileStatement1768  */
static	ANTLR3_BITWORD FOLLOW_139_in_whileStatement1768_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_whileStatement1768	= { FOLLOW_139_in_whileStatement1768_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1770  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1770_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1770	= { FOLLOW_LTERM_in_whileStatement1770_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_whileStatement1773  */
static	ANTLR3_BITWORD FOLLOW_127_in_whileStatement1773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_whileStatement1773	= { FOLLOW_127_in_whileStatement1773_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1775  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1775_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1775	= { FOLLOW_LTERM_in_whileStatement1775_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1778  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1778_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1778	= { FOLLOW_expression_in_whileStatement1778_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1780  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1780_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1780	= { FOLLOW_LTERM_in_whileStatement1780_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_whileStatement1783  */
static	ANTLR3_BITWORD FOLLOW_129_in_whileStatement1783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_whileStatement1783	= { FOLLOW_129_in_whileStatement1783_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1785  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1785_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1785	= { FOLLOW_LTERM_in_whileStatement1785_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1788  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1788_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1788	= { FOLLOW_statement_in_whileStatement1788_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_forStatement1811  */
static	ANTLR3_BITWORD FOLLOW_140_in_forStatement1811_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_forStatement1811	= { FOLLOW_140_in_forStatement1811_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1813  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1813_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1813	= { FOLLOW_LTERM_in_forStatement1813_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_forStatement1816  */
static	ANTLR3_BITWORD FOLLOW_127_in_forStatement1816_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000034), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_forStatement1816	= { FOLLOW_127_in_forStatement1816_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1819  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1819_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000014), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1819	= { FOLLOW_LTERM_in_forStatement1819_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatementInitialiserPart_in_forStatement1824  */
static	ANTLR3_BITWORD FOLLOW_forStatementInitialiserPart_in_forStatement1824_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatementInitialiserPart_in_forStatement1824	= { FOLLOW_forStatementInitialiserPart_in_forStatement1824_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1828  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1828_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1828	= { FOLLOW_LTERM_in_forStatement1828_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_forStatement1831  */
static	ANTLR3_BITWORD FOLLOW_133_in_forStatement1831_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000024), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_forStatement1831	= { FOLLOW_133_in_forStatement1831_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1834  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1834	= { FOLLOW_LTERM_in_forStatement1834_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1839  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1839_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1839	= { FOLLOW_expression_in_forStatement1839_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1843  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1843_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1843	= { FOLLOW_LTERM_in_forStatement1843_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_forStatement1846  */
static	ANTLR3_BITWORD FOLLOW_133_in_forStatement1846_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000006), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_forStatement1846	= { FOLLOW_133_in_forStatement1846_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1849  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1849_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1849	= { FOLLOW_LTERM_in_forStatement1849_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1854  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1854	= { FOLLOW_expression_in_forStatement1854_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1858  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1858	= { FOLLOW_LTERM_in_forStatement1858_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_forStatement1861  */
static	ANTLR3_BITWORD FOLLOW_129_in_forStatement1861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_forStatement1861	= { FOLLOW_129_in_forStatement1861_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1863  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1863	= { FOLLOW_LTERM_in_forStatement1863_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forStatement1866  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forStatement1866_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forStatement1866	= { FOLLOW_statement_in_forStatement1866_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_forStatementInitialiserPart1915  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_forStatementInitialiserPart1915_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_forStatementInitialiserPart1915	= { FOLLOW_expressionNoIn_in_forStatementInitialiserPart1915_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_forStatementInitialiserPart1920  */
static	ANTLR3_BITWORD FOLLOW_132_in_forStatementInitialiserPart1920_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_forStatementInitialiserPart1920	= { FOLLOW_132_in_forStatementInitialiserPart1920_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatementInitialiserPart1922  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatementInitialiserPart1922_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatementInitialiserPart1922	= { FOLLOW_LTERM_in_forStatementInitialiserPart1922_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1925  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1925_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1925	= { FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1925_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_forInStatement1945  */
static	ANTLR3_BITWORD FOLLOW_140_in_forInStatement1945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_forInStatement1945	= { FOLLOW_140_in_forInStatement1945_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1947  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1947_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1947	= { FOLLOW_LTERM_in_forInStatement1947_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_forInStatement1950  */
static	ANTLR3_BITWORD FOLLOW_127_in_forInStatement1950_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x0000000030000014), ANTLR3_UINT64_LIT(0x0000000000003E00) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_forInStatement1950	= { FOLLOW_127_in_forInStatement1950_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1952  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x0000000030000014), ANTLR3_UINT64_LIT(0x0000000000003E00) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1952	= { FOLLOW_LTERM_in_forInStatement1952_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatementInitialiserPart_in_forInStatement1955  */
static	ANTLR3_BITWORD FOLLOW_forInStatementInitialiserPart_in_forInStatement1955_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatementInitialiserPart_in_forInStatement1955	= { FOLLOW_forInStatementInitialiserPart_in_forInStatement1955_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1957  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1957_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1957	= { FOLLOW_LTERM_in_forInStatement1957_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_forInStatement1960  */
static	ANTLR3_BITWORD FOLLOW_141_in_forInStatement1960_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_forInStatement1960	= { FOLLOW_141_in_forInStatement1960_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1962  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1962	= { FOLLOW_LTERM_in_forInStatement1962_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forInStatement1965  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forInStatement1965_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forInStatement1965	= { FOLLOW_expression_in_forInStatement1965_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1967  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1967_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1967	= { FOLLOW_LTERM_in_forInStatement1967_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_forInStatement1970  */
static	ANTLR3_BITWORD FOLLOW_129_in_forInStatement1970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_forInStatement1970	= { FOLLOW_129_in_forInStatement1970_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1972  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1972	= { FOLLOW_LTERM_in_forInStatement1972_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forInStatement1975  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forInStatement1975_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forInStatement1975	= { FOLLOW_statement_in_forInStatement1975_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1999  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1999_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1999	= { FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1999_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_forInStatementInitialiserPart2008  */
static	ANTLR3_BITWORD FOLLOW_132_in_forInStatementInitialiserPart2008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_forInStatementInitialiserPart2008	= { FOLLOW_132_in_forInStatementInitialiserPart2008_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatementInitialiserPart2010  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatementInitialiserPart2010_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatementInitialiserPart2010	= { FOLLOW_LTERM_in_forInStatementInitialiserPart2010_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2013  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2013_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2013	= { FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2013_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_continueStatement2032  */
static	ANTLR3_BITWORD FOLLOW_142_in_continueStatement2032_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_continueStatement2032	= { FOLLOW_142_in_continueStatement2032_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_continueStatement2034  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_continueStatement2034_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_continueStatement2034	= { FOLLOW_Identifier_in_continueStatement2034_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_continueStatement2038  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_continueStatement2038_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_continueStatement2038	= { FOLLOW_LTERM_in_continueStatement2038_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_continueStatement2042  */
static	ANTLR3_BITWORD FOLLOW_133_in_continueStatement2042_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_continueStatement2042	= { FOLLOW_133_in_continueStatement2042_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_breakStatement2064  */
static	ANTLR3_BITWORD FOLLOW_143_in_breakStatement2064_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_breakStatement2064	= { FOLLOW_143_in_breakStatement2064_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_breakStatement2066  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_breakStatement2066_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_breakStatement2066	= { FOLLOW_Identifier_in_breakStatement2066_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_breakStatement2070  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_breakStatement2070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_breakStatement2070	= { FOLLOW_LTERM_in_breakStatement2070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_breakStatement2074  */
static	ANTLR3_BITWORD FOLLOW_133_in_breakStatement2074_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_breakStatement2074	= { FOLLOW_133_in_breakStatement2074_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_returnStatement2095  */
static	ANTLR3_BITWORD FOLLOW_144_in_returnStatement2095_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000024), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_returnStatement2095	= { FOLLOW_144_in_returnStatement2095_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2097  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2097_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2097	= { FOLLOW_expression_in_returnStatement2097_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_returnStatement2101  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_returnStatement2101_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_returnStatement2101	= { FOLLOW_LTERM_in_returnStatement2101_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_returnStatement2105  */
static	ANTLR3_BITWORD FOLLOW_133_in_returnStatement2105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_returnStatement2105	= { FOLLOW_133_in_returnStatement2105_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_withStatement2127  */
static	ANTLR3_BITWORD FOLLOW_145_in_withStatement2127_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_withStatement2127	= { FOLLOW_145_in_withStatement2127_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2129  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2129	= { FOLLOW_LTERM_in_withStatement2129_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_withStatement2132  */
static	ANTLR3_BITWORD FOLLOW_127_in_withStatement2132_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_withStatement2132	= { FOLLOW_127_in_withStatement2132_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2134  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2134	= { FOLLOW_LTERM_in_withStatement2134_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_withStatement2137  */
static	ANTLR3_BITWORD FOLLOW_expression_in_withStatement2137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_withStatement2137	= { FOLLOW_expression_in_withStatement2137_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2139  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2139_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2139	= { FOLLOW_LTERM_in_withStatement2139_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_withStatement2142  */
static	ANTLR3_BITWORD FOLLOW_129_in_withStatement2142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_withStatement2142	= { FOLLOW_129_in_withStatement2142_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2144  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2144_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2144	= { FOLLOW_LTERM_in_withStatement2144_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_withStatement2147  */
static	ANTLR3_BITWORD FOLLOW_statement_in_withStatement2147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_withStatement2147	= { FOLLOW_statement_in_withStatement2147_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_labelledStatement2168  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_labelledStatement2168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_labelledStatement2168	= { FOLLOW_Identifier_in_labelledStatement2168_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_labelledStatement2170  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_labelledStatement2170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_labelledStatement2170	= { FOLLOW_LTERM_in_labelledStatement2170_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_labelledStatement2173  */
static	ANTLR3_BITWORD FOLLOW_146_in_labelledStatement2173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_labelledStatement2173	= { FOLLOW_146_in_labelledStatement2173_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_labelledStatement2175  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_labelledStatement2175_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_labelledStatement2175	= { FOLLOW_LTERM_in_labelledStatement2175_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_labelledStatement2178  */
static	ANTLR3_BITWORD FOLLOW_statement_in_labelledStatement2178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_labelledStatement2178	= { FOLLOW_statement_in_labelledStatement2178_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_switchStatement2201  */
static	ANTLR3_BITWORD FOLLOW_147_in_switchStatement2201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_switchStatement2201	= { FOLLOW_147_in_switchStatement2201_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2203  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2203	= { FOLLOW_LTERM_in_switchStatement2203_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_switchStatement2206  */
static	ANTLR3_BITWORD FOLLOW_127_in_switchStatement2206_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_switchStatement2206	= { FOLLOW_127_in_switchStatement2206_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2208  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2208_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2208	= { FOLLOW_LTERM_in_switchStatement2208_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_switchStatement2211  */
static	ANTLR3_BITWORD FOLLOW_expression_in_switchStatement2211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_switchStatement2211	= { FOLLOW_expression_in_switchStatement2211_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2213  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2213	= { FOLLOW_LTERM_in_switchStatement2213_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_switchStatement2216  */
static	ANTLR3_BITWORD FOLLOW_129_in_switchStatement2216_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_switchStatement2216	= { FOLLOW_129_in_switchStatement2216_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2218  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2218	= { FOLLOW_LTERM_in_switchStatement2218_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseBlock_in_switchStatement2221  */
static	ANTLR3_BITWORD FOLLOW_caseBlock_in_switchStatement2221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseBlock_in_switchStatement2221	= { FOLLOW_caseBlock_in_switchStatement2221_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_caseBlock2243  */
static	ANTLR3_BITWORD FOLLOW_130_in_caseBlock2243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000300008) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_caseBlock2243	= { FOLLOW_130_in_caseBlock2243_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2246  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2246_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2246	= { FOLLOW_LTERM_in_caseBlock2246_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2251  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000300008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2251	= { FOLLOW_caseClause_in_caseBlock2251_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2256  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2256_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2256	= { FOLLOW_LTERM_in_caseBlock2256_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseBlock2259  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseBlock2259_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000100008) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseBlock2259	= { FOLLOW_defaultClause_in_caseBlock2259_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2262  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2262	= { FOLLOW_LTERM_in_caseBlock2262_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2267  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2267_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000100008) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2267	= { FOLLOW_caseClause_in_caseBlock2267_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2273  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2273	= { FOLLOW_LTERM_in_caseBlock2273_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_caseBlock2276  */
static	ANTLR3_BITWORD FOLLOW_131_in_caseBlock2276_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_caseBlock2276	= { FOLLOW_131_in_caseBlock2276_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_148_in_caseClause2313  */
static	ANTLR3_BITWORD FOLLOW_148_in_caseClause2313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_148_in_caseClause2313	= { FOLLOW_148_in_caseClause2313_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2315  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2315	= { FOLLOW_LTERM_in_caseClause2315_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_caseClause2318  */
static	ANTLR3_BITWORD FOLLOW_expression_in_caseClause2318_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_caseClause2318	= { FOLLOW_expression_in_caseClause2318_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2320  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2320_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2320	= { FOLLOW_LTERM_in_caseClause2320_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_caseClause2323  */
static	ANTLR3_BITWORD FOLLOW_146_in_caseClause2323_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_caseClause2323	= { FOLLOW_146_in_caseClause2323_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2325  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2325	= { FOLLOW_LTERM_in_caseClause2325_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2328  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2328	= { FOLLOW_statementList_in_caseClause2328_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_defaultClause2353  */
static	ANTLR3_BITWORD FOLLOW_149_in_defaultClause2353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_defaultClause2353	= { FOLLOW_149_in_defaultClause2353_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2355  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2355_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2355	= { FOLLOW_LTERM_in_defaultClause2355_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_defaultClause2358  */
static	ANTLR3_BITWORD FOLLOW_146_in_defaultClause2358_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_defaultClause2358	= { FOLLOW_146_in_defaultClause2358_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2360  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2360	= { FOLLOW_LTERM_in_defaultClause2360_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_defaultClause2363  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_defaultClause2363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_defaultClause2363	= { FOLLOW_statementList_in_defaultClause2363_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_150_in_throwStatement2385  */
static	ANTLR3_BITWORD FOLLOW_150_in_throwStatement2385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007000000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_150_in_throwStatement2385	= { FOLLOW_150_in_throwStatement2385_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_throwStatement2387  */
static	ANTLR3_BITWORD FOLLOW_expression_in_throwStatement2387_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_throwStatement2387	= { FOLLOW_expression_in_throwStatement2387_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_throwStatement2390  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_throwStatement2390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_throwStatement2390	= { FOLLOW_LTERM_in_throwStatement2390_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_throwStatement2394  */
static	ANTLR3_BITWORD FOLLOW_133_in_throwStatement2394_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_throwStatement2394	= { FOLLOW_133_in_throwStatement2394_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_tryStatement2415  */
static	ANTLR3_BITWORD FOLLOW_151_in_tryStatement2415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_tryStatement2415	= { FOLLOW_151_in_tryStatement2415_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2417  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2417	= { FOLLOW_LTERM_in_tryStatement2417_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_tryStatement2420  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_tryStatement2420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_tryStatement2420	= { FOLLOW_statementBlock_in_tryStatement2420_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2422  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2422_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000003000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2422	= { FOLLOW_LTERM_in_tryStatement2422_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyClause_in_tryStatement2434  */
static	ANTLR3_BITWORD FOLLOW_finallyClause_in_tryStatement2434_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyClause_in_tryStatement2434	= { FOLLOW_finallyClause_in_tryStatement2434_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchClause_in_tryStatement2446  */
static	ANTLR3_BITWORD FOLLOW_catchClause_in_tryStatement2446_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_catchClause_in_tryStatement2446	= { FOLLOW_catchClause_in_tryStatement2446_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2449  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2449_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2449	= { FOLLOW_LTERM_in_tryStatement2449_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyClause_in_tryStatement2452  */
static	ANTLR3_BITWORD FOLLOW_finallyClause_in_tryStatement2452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyClause_in_tryStatement2452	= { FOLLOW_finallyClause_in_tryStatement2452_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_catchClause2485  */
static	ANTLR3_BITWORD FOLLOW_152_in_catchClause2485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_catchClause2485	= { FOLLOW_152_in_catchClause2485_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2487  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2487	= { FOLLOW_LTERM_in_catchClause2487_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_catchClause2490  */
static	ANTLR3_BITWORD FOLLOW_127_in_catchClause2490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_catchClause2490	= { FOLLOW_127_in_catchClause2490_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2492  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2492_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2492	= { FOLLOW_LTERM_in_catchClause2492_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchClause2495  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchClause2495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchClause2495	= { FOLLOW_Identifier_in_catchClause2495_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2497  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2497	= { FOLLOW_LTERM_in_catchClause2497_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_catchClause2500  */
static	ANTLR3_BITWORD FOLLOW_129_in_catchClause2500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_catchClause2500	= { FOLLOW_129_in_catchClause2500_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2502  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2502_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2502	= { FOLLOW_LTERM_in_catchClause2502_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchClause2505  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchClause2505_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchClause2505	= { FOLLOW_statementBlock_in_catchClause2505_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_153_in_finallyClause2527  */
static	ANTLR3_BITWORD FOLLOW_153_in_finallyClause2527_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_153_in_finallyClause2527	= { FOLLOW_153_in_finallyClause2527_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_finallyClause2529  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_finallyClause2529_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_finallyClause2529	= { FOLLOW_LTERM_in_finallyClause2529_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyClause2532  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyClause2532_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyClause2532	= { FOLLOW_statementBlock_in_finallyClause2532_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement2557  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement2557_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement2557	= { FOLLOW_leftHandSideExpression_in_msgSendStatement2557_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSendStatement2560  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSendStatement2560_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSendStatement2560	= { FOLLOW_LTERM_in_msgSendStatement2560_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_154_in_msgSendStatement2563  */
static	ANTLR3_BITWORD FOLLOW_154_in_msgSendStatement2563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007000000000), ANTLR3_UINT64_LIT(0x0000000030000004), ANTLR3_UINT64_LIT(0x0000000000003E00) };
static  ANTLR3_BITSET_LIST FOLLOW_154_in_msgSendStatement2563	= { FOLLOW_154_in_msgSendStatement2563_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement2568  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement2568_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement2568	= { FOLLOW_leftHandSideExpression_in_msgSendStatement2568_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSendStatement2571  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSendStatement2571_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSendStatement2571	= { FOLLOW_LTERM_in_msgSendStatement2571_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_msgSendStatement2575  */
static	ANTLR3_BITWORD FOLLOW_133_in_msgSendStatement2575_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_msgSendStatement2575	= { FOLLOW_133_in_msgSendStatement2575_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_154_in_msgSendStatement2594  */
static	ANTLR3_BITWORD FOLLOW_154_in_msgSendStatement2594_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007000000000), ANTLR3_UINT64_LIT(0x0000000030000004), ANTLR3_UINT64_LIT(0x0000000000003E00) };
static  ANTLR3_BITSET_LIST FOLLOW_154_in_msgSendStatement2594	= { FOLLOW_154_in_msgSendStatement2594_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgSendStatement2596  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgSendStatement2596_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgSendStatement2596	= { FOLLOW_memberExpression_in_msgSendStatement2596_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgRecvStatement2624  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgRecvStatement2624_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgRecvStatement2624	= { FOLLOW_memberExpression_in_msgRecvStatement2624_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2626  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2626	= { FOLLOW_LTERM_in_msgRecvStatement2626_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_msgRecvStatement2628  */
static	ANTLR3_BITWORD FOLLOW_155_in_msgRecvStatement2628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007000000000), ANTLR3_UINT64_LIT(0x0000000030000004), ANTLR3_UINT64_LIT(0x0000000000003E00) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_msgRecvStatement2628	= { FOLLOW_155_in_msgRecvStatement2628_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement2632  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement2632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement2632	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement2632_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2635  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2635_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2635	= { FOLLOW_LTERM_in_msgRecvStatement2635_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_msgRecvStatement2639  */
static	ANTLR3_BITWORD FOLLOW_133_in_msgRecvStatement2639_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_msgRecvStatement2639	= { FOLLOW_133_in_msgRecvStatement2639_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgRecvStatement2660  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgRecvStatement2660_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgRecvStatement2660	= { FOLLOW_memberExpression_in_msgRecvStatement2660_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2662  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2662	= { FOLLOW_LTERM_in_msgRecvStatement2662_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_msgRecvStatement2664  */
static	ANTLR3_BITWORD FOLLOW_155_in_msgRecvStatement2664_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007000000000), ANTLR3_UINT64_LIT(0x0000000030000004), ANTLR3_UINT64_LIT(0x0000000000003E00) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_msgRecvStatement2664	= { FOLLOW_155_in_msgRecvStatement2664_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement2668  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement2668_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement2668	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement2668_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2670  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2670_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2670	= { FOLLOW_LTERM_in_msgRecvStatement2670_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_msgRecvStatement2673  */
static	ANTLR3_BITWORD FOLLOW_155_in_msgRecvStatement2673_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007000000000), ANTLR3_UINT64_LIT(0x0000000030000004), ANTLR3_UINT64_LIT(0x0000000000003E00) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_msgRecvStatement2673	= { FOLLOW_155_in_msgRecvStatement2673_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgRecvStatement2677  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgRecvStatement2677_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgRecvStatement2677	= { FOLLOW_memberExpression_in_msgRecvStatement2677_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2680  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2680_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2680	= { FOLLOW_LTERM_in_msgRecvStatement2680_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_msgRecvStatement2684  */
static	ANTLR3_BITWORD FOLLOW_133_in_msgRecvStatement2684_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_msgRecvStatement2684	= { FOLLOW_133_in_msgRecvStatement2684_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression2711  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression2711_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression2711	= { FOLLOW_assignmentExpression_in_expression2711_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expression2714  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expression2714_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expression2714	= { FOLLOW_LTERM_in_expression2714_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_expression2717  */
static	ANTLR3_BITWORD FOLLOW_128_in_expression2717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_expression2717	= { FOLLOW_128_in_expression2717_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expression2719  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expression2719_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expression2719	= { FOLLOW_LTERM_in_expression2719_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression2722  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression2722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression2722	= { FOLLOW_assignmentExpression_in_expression2722_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2746  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2746_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2746	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2746_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionNoIn2749  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionNoIn2749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionNoIn2749	= { FOLLOW_LTERM_in_expressionNoIn2749_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_expressionNoIn2752  */
static	ANTLR3_BITWORD FOLLOW_128_in_expressionNoIn2752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_expressionNoIn2752	= { FOLLOW_128_in_expressionNoIn2752_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionNoIn2754  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionNoIn2754_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionNoIn2754	= { FOLLOW_LTERM_in_expressionNoIn2754_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2757  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2757_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2757	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2757_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpression2781  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpression2781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpression2781	= { FOLLOW_conditionalExpression_in_assignmentExpression2781_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression2794  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression2794_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x000007FF00000040) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression2794	= { FOLLOW_leftHandSideExpression_in_assignmentExpression2794_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2796  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2796_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x000007FF00000040) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2796	= { FOLLOW_LTERM_in_assignmentExpression2796_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpression2799  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpression2799_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpression2799	= { FOLLOW_assignmentOperator_in_assignmentExpression2799_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2801  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2801	= { FOLLOW_LTERM_in_assignmentExpression2801_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpression2804  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpression2804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpression2804	= { FOLLOW_assignmentExpression_in_assignmentExpression2804_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2828  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2828_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2828	= { FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2828_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2841  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2841_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x000007FF00000040) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2841	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2841_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn2843  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn2843_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x000007FF00000040) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn2843	= { FOLLOW_LTERM_in_assignmentExpressionNoIn2843_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2846  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2846_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2846	= { FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2846_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn2848  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn2848_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn2848	= { FOLLOW_LTERM_in_assignmentExpressionNoIn2848_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2851  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2851	= { FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2851_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_leftHandSideExpression2876  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_leftHandSideExpression2876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_leftHandSideExpression2876	= { FOLLOW_callExpression_in_leftHandSideExpression2876_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_leftHandSideExpression2885  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_leftHandSideExpression2885_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_leftHandSideExpression2885	= { FOLLOW_newExpression_in_leftHandSideExpression2885_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_newExpression2901  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_newExpression2901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_newExpression2901	= { FOLLOW_memberExpression_in_newExpression2901_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_newExpression2910  */
static	ANTLR3_BITWORD FOLLOW_156_in_newExpression2910_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x0000000030000004), ANTLR3_UINT64_LIT(0x0000000000003E00) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_newExpression2910	= { FOLLOW_156_in_newExpression2910_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_newExpression2912  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_newExpression2912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x0000000030000004), ANTLR3_UINT64_LIT(0x0000000000003E00) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_newExpression2912	= { FOLLOW_LTERM_in_newExpression2912_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_newExpression2915  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_newExpression2915_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_newExpression2915	= { FOLLOW_newExpression_in_newExpression2915_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_indexSuffix12937  */
static	ANTLR3_BITWORD FOLLOW_157_in_indexSuffix12937_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_indexSuffix12937	= { FOLLOW_157_in_indexSuffix12937_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix12939  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix12939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix12939	= { FOLLOW_LTERM_in_indexSuffix12939_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix12942  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix12942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix12942	= { FOLLOW_expression_in_indexSuffix12942_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix12944  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix12944_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix12944	= { FOLLOW_LTERM_in_indexSuffix12944_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_indexSuffix12947  */
static	ANTLR3_BITWORD FOLLOW_158_in_indexSuffix12947_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_indexSuffix12947	= { FOLLOW_158_in_indexSuffix12947_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_propertyReferenceSuffix12964  */
static	ANTLR3_BITWORD FOLLOW_159_in_propertyReferenceSuffix12964_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_propertyReferenceSuffix12964	= { FOLLOW_159_in_propertyReferenceSuffix12964_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix12966  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix12966_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix12966	= { FOLLOW_LTERM_in_propertyReferenceSuffix12966_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix12969  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix12969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix12969	= { FOLLOW_Identifier_in_propertyReferenceSuffix12969_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primaryExpression_in_memberExpression2986  */
static	ANTLR3_BITWORD FOLLOW_primaryExpression_in_memberExpression2986_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_primaryExpression_in_memberExpression2986	= { FOLLOW_primaryExpression_in_memberExpression2986_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression2995  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression2995_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression2995	= { FOLLOW_LTERM_in_memberExpression2995_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression2998  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression2998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression2998	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression2998_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3015  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3015	= { FOLLOW_LTERM_in_memberExpression3015_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3018  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3018	= { FOLLOW_indexSuffix1_in_memberExpression3018_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionExpression_in_memberExpression3037  */
static	ANTLR3_BITWORD FOLLOW_functionExpression_in_memberExpression3037_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_functionExpression_in_memberExpression3037	= { FOLLOW_functionExpression_in_memberExpression3037_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3045  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3045	= { FOLLOW_LTERM_in_memberExpression3045_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3048  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3048	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3048_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3064  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3064_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3064	= { FOLLOW_LTERM_in_memberExpression3064_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3067  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3067_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3067	= { FOLLOW_indexSuffix1_in_memberExpression3067_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_memberExpression3086  */
static	ANTLR3_BITWORD FOLLOW_156_in_memberExpression3086_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x0000000030000004), ANTLR3_UINT64_LIT(0x0000000000003E00) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_memberExpression3086	= { FOLLOW_156_in_memberExpression3086_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3088  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3088_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x0000000030000004), ANTLR3_UINT64_LIT(0x0000000000003E00) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3088	= { FOLLOW_LTERM_in_memberExpression3088_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression3093  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression3093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression3093	= { FOLLOW_memberExpression_in_memberExpression3093_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3095  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3095_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3095	= { FOLLOW_LTERM_in_memberExpression3095_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_memberExpression3098  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_memberExpression3098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_memberExpression3098	= { FOLLOW_arguments_in_memberExpression3098_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3113  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3113_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3113	= { FOLLOW_LTERM_in_memberExpression3113_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3116  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3116	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3116_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3129  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3129	= { FOLLOW_LTERM_in_memberExpression3129_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3132  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3132_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3132	= { FOLLOW_indexSuffix1_in_memberExpression3132_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_memberExpressionSuffix3167  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_memberExpressionSuffix3167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_memberExpressionSuffix3167	= { FOLLOW_indexSuffix_in_memberExpressionSuffix3167_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3177  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3177_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3177	= { FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3177_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_callExpression3197  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_callExpression3197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_callExpression3197	= { FOLLOW_memberExpression_in_callExpression3197_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3199  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3199_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3199	= { FOLLOW_LTERM_in_callExpression3199_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3202  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3202	= { FOLLOW_arguments_in_callExpression3202_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3216  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3216_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3216	= { FOLLOW_LTERM_in_callExpression3216_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3219  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3219_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3219	= { FOLLOW_arguments_in_callExpression3219_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3227  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3227	= { FOLLOW_LTERM_in_callExpression3227_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_callExpression3230  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_callExpression3230_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_callExpression3230	= { FOLLOW_indexSuffix1_in_callExpression3230_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3245  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3245_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3245	= { FOLLOW_LTERM_in_callExpression3245_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_callExpression3248  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_callExpression3248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x8000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_callExpression3248	= { FOLLOW_propertyReferenceSuffix1_in_callExpression3248_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpressionSuffix3275  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpressionSuffix3275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpressionSuffix3275	= { FOLLOW_arguments_in_callExpressionSuffix3275_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_callExpressionSuffix3284  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_callExpressionSuffix3284_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_callExpressionSuffix3284	= { FOLLOW_indexSuffix_in_callExpressionSuffix3284_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3293  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3293_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3293	= { FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3293_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_arguments3308  */
static	ANTLR3_BITWORD FOLLOW_127_in_arguments3308_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000006), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_arguments3308	= { FOLLOW_127_in_arguments3308_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3311  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3311	= { FOLLOW_LTERM_in_arguments3311_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments3315  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments3315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments3315	= { FOLLOW_assignmentExpression_in_arguments3315_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3319  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3319	= { FOLLOW_LTERM_in_arguments3319_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_arguments3322  */
static	ANTLR3_BITWORD FOLLOW_128_in_arguments3322_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_arguments3322	= { FOLLOW_128_in_arguments3322_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3324  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3324_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3324	= { FOLLOW_LTERM_in_arguments3324_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments3327  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments3327_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments3327	= { FOLLOW_assignmentExpression_in_arguments3327_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3333  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3333_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3333	= { FOLLOW_LTERM_in_arguments3333_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_arguments3336  */
static	ANTLR3_BITWORD FOLLOW_129_in_arguments3336_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_arguments3336	= { FOLLOW_129_in_arguments3336_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_indexSuffix3359  */
static	ANTLR3_BITWORD FOLLOW_157_in_indexSuffix3359_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_indexSuffix3359	= { FOLLOW_157_in_indexSuffix3359_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3361  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3361_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3361	= { FOLLOW_LTERM_in_indexSuffix3361_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix3364  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix3364_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix3364	= { FOLLOW_expression_in_indexSuffix3364_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3366  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3366_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3366	= { FOLLOW_LTERM_in_indexSuffix3366_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_indexSuffix3369  */
static	ANTLR3_BITWORD FOLLOW_158_in_indexSuffix3369_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_indexSuffix3369	= { FOLLOW_158_in_indexSuffix3369_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_propertyReferenceSuffix3390  */
static	ANTLR3_BITWORD FOLLOW_159_in_propertyReferenceSuffix3390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_propertyReferenceSuffix3390	= { FOLLOW_159_in_propertyReferenceSuffix3390_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix3392  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix3392_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix3392	= { FOLLOW_LTERM_in_propertyReferenceSuffix3392_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix3395  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix3395_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix3395	= { FOLLOW_Identifier_in_propertyReferenceSuffix3395_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_134_in_assignmentOperator3423  */
static	ANTLR3_BITWORD FOLLOW_134_in_assignmentOperator3423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_134_in_assignmentOperator3423	= { FOLLOW_134_in_assignmentOperator3423_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_assignmentOperator3432  */
static	ANTLR3_BITWORD FOLLOW_160_in_assignmentOperator3432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_assignmentOperator3432	= { FOLLOW_160_in_assignmentOperator3432_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_161_in_assignmentOperator3441  */
static	ANTLR3_BITWORD FOLLOW_161_in_assignmentOperator3441_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_161_in_assignmentOperator3441	= { FOLLOW_161_in_assignmentOperator3441_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_assignmentOperator3451  */
static	ANTLR3_BITWORD FOLLOW_162_in_assignmentOperator3451_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_assignmentOperator3451	= { FOLLOW_162_in_assignmentOperator3451_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_163_in_assignmentOperator3460  */
static	ANTLR3_BITWORD FOLLOW_163_in_assignmentOperator3460_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_163_in_assignmentOperator3460	= { FOLLOW_163_in_assignmentOperator3460_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_164_in_assignmentOperator3469  */
static	ANTLR3_BITWORD FOLLOW_164_in_assignmentOperator3469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_164_in_assignmentOperator3469	= { FOLLOW_164_in_assignmentOperator3469_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_assignmentOperator3478  */
static	ANTLR3_BITWORD FOLLOW_165_in_assignmentOperator3478_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_assignmentOperator3478	= { FOLLOW_165_in_assignmentOperator3478_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_assignmentOperator3487  */
static	ANTLR3_BITWORD FOLLOW_166_in_assignmentOperator3487_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_assignmentOperator3487	= { FOLLOW_166_in_assignmentOperator3487_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_assignmentOperator3496  */
static	ANTLR3_BITWORD FOLLOW_167_in_assignmentOperator3496_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_assignmentOperator3496	= { FOLLOW_167_in_assignmentOperator3496_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_assignmentOperator3505  */
static	ANTLR3_BITWORD FOLLOW_168_in_assignmentOperator3505_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_assignmentOperator3505	= { FOLLOW_168_in_assignmentOperator3505_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_assignmentOperator3513  */
static	ANTLR3_BITWORD FOLLOW_169_in_assignmentOperator3513_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_assignmentOperator3513	= { FOLLOW_169_in_assignmentOperator3513_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_170_in_assignmentOperator3522  */
static	ANTLR3_BITWORD FOLLOW_170_in_assignmentOperator3522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_170_in_assignmentOperator3522	= { FOLLOW_170_in_assignmentOperator3522_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_conditionalExpression3540  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_conditionalExpression3540_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_conditionalExpression3540	= { FOLLOW_logicalORExpression_in_conditionalExpression3540_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3548  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3548_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3548	= { FOLLOW_LTERM_in_conditionalExpression3548_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_171_in_conditionalExpression3551  */
static	ANTLR3_BITWORD FOLLOW_171_in_conditionalExpression3551_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_171_in_conditionalExpression3551	= { FOLLOW_171_in_conditionalExpression3551_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3553  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3553_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3553	= { FOLLOW_LTERM_in_conditionalExpression3553_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_conditionalExpression3558  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_conditionalExpression3558_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_conditionalExpression3558	= { FOLLOW_assignmentExpression_in_conditionalExpression3558_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3560  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3560_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3560	= { FOLLOW_LTERM_in_conditionalExpression3560_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_conditionalExpression3563  */
static	ANTLR3_BITWORD FOLLOW_146_in_conditionalExpression3563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_conditionalExpression3563	= { FOLLOW_146_in_conditionalExpression3563_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3565  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3565	= { FOLLOW_LTERM_in_conditionalExpression3565_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_conditionalExpression3570  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_conditionalExpression3570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_conditionalExpression3570	= { FOLLOW_assignmentExpression_in_conditionalExpression3570_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3601  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3601_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3601	= { FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3601_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3608  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3608_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3608	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3608_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_171_in_conditionalExpressionNoIn3611  */
static	ANTLR3_BITWORD FOLLOW_171_in_conditionalExpressionNoIn3611_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_171_in_conditionalExpressionNoIn3611	= { FOLLOW_171_in_conditionalExpressionNoIn3611_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3613  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3613	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3613_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3618  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3618_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3618	= { FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3618_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3620  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3620	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3620_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_conditionalExpressionNoIn3623  */
static	ANTLR3_BITWORD FOLLOW_146_in_conditionalExpressionNoIn3623_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_conditionalExpressionNoIn3623	= { FOLLOW_146_in_conditionalExpressionNoIn3623_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3625  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3625	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3625_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3630  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3630_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3630	= { FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3630_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression3660  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression3660_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression3660	= { FOLLOW_logicalANDExpression_in_logicalORExpression3660_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression3667  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression3667_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression3667	= { FOLLOW_LTERM_in_logicalORExpression3667_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_172_in_logicalORExpression3670  */
static	ANTLR3_BITWORD FOLLOW_172_in_logicalORExpression3670_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_172_in_logicalORExpression3670	= { FOLLOW_172_in_logicalORExpression3670_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression3672  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression3672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression3672	= { FOLLOW_LTERM_in_logicalORExpression3672_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression3675  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression3675_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression3675	= { FOLLOW_logicalANDExpression_in_logicalORExpression3675_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression3702  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression3702_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression3702	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression3702_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression3709  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression3709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression3709	= { FOLLOW_LTERM_in_logicalANDExpression3709_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_173_in_logicalANDExpression3712  */
static	ANTLR3_BITWORD FOLLOW_173_in_logicalANDExpression3712_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_173_in_logicalANDExpression3712	= { FOLLOW_173_in_logicalANDExpression3712_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression3714  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression3714_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression3714	= { FOLLOW_LTERM_in_logicalANDExpression3714_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression3717  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression3717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression3717	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression3717_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3745  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3745_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3745	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3745_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn3752  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn3752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn3752	= { FOLLOW_LTERM_in_logicalORExpressionNoIn3752_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_172_in_logicalORExpressionNoIn3755  */
static	ANTLR3_BITWORD FOLLOW_172_in_logicalORExpressionNoIn3755_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_172_in_logicalORExpressionNoIn3755	= { FOLLOW_172_in_logicalORExpressionNoIn3755_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn3757  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn3757_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn3757	= { FOLLOW_LTERM_in_logicalORExpressionNoIn3757_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3760  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3760_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3760	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3760_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3789  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3789	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3789_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn3797  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn3797_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn3797	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn3797_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_173_in_logicalANDExpressionNoIn3800  */
static	ANTLR3_BITWORD FOLLOW_173_in_logicalANDExpressionNoIn3800_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_173_in_logicalANDExpressionNoIn3800	= { FOLLOW_173_in_logicalANDExpressionNoIn3800_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn3802  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn3802_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn3802	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn3802_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3805  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3805	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3805_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3832  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3832	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3832_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression3840  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression3840_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression3840	= { FOLLOW_LTERM_in_bitwiseORExpression3840_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_174_in_bitwiseORExpression3843  */
static	ANTLR3_BITWORD FOLLOW_174_in_bitwiseORExpression3843_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_174_in_bitwiseORExpression3843	= { FOLLOW_174_in_bitwiseORExpression3843_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression3845  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression3845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression3845	= { FOLLOW_LTERM_in_bitwiseORExpression3845_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3848  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3848_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3848	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3848_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3875  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3875_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3875	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3875_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn3883  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn3883_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn3883	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn3883_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_174_in_bitwiseORExpressionNoIn3886  */
static	ANTLR3_BITWORD FOLLOW_174_in_bitwiseORExpressionNoIn3886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_174_in_bitwiseORExpressionNoIn3886	= { FOLLOW_174_in_bitwiseORExpressionNoIn3886_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn3888  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn3888_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn3888	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn3888_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3891  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3891_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3891	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3891_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3917  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3917_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3917	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3917_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression3925  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression3925_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression3925	= { FOLLOW_LTERM_in_bitwiseXORExpression3925_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_bitwiseXORExpression3928  */
static	ANTLR3_BITWORD FOLLOW_175_in_bitwiseXORExpression3928_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_bitwiseXORExpression3928	= { FOLLOW_175_in_bitwiseXORExpression3928_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression3930  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression3930_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression3930	= { FOLLOW_LTERM_in_bitwiseXORExpression3930_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3933  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3933	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3933_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3960  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3960_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3960	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3960_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3967  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3967_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3967	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3967_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_bitwiseXORExpressionNoIn3970  */
static	ANTLR3_BITWORD FOLLOW_175_in_bitwiseXORExpressionNoIn3970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_bitwiseXORExpressionNoIn3970	= { FOLLOW_175_in_bitwiseXORExpressionNoIn3970_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3972  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3972	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3972_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3975  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3975_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3975	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3975_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression4003  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression4003_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression4003	= { FOLLOW_equalityExpression_in_bitwiseANDExpression4003_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression4011  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression4011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression4011	= { FOLLOW_LTERM_in_bitwiseANDExpression4011_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_bitwiseANDExpression4014  */
static	ANTLR3_BITWORD FOLLOW_176_in_bitwiseANDExpression4014_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_bitwiseANDExpression4014	= { FOLLOW_176_in_bitwiseANDExpression4014_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression4016  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression4016_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression4016	= { FOLLOW_LTERM_in_bitwiseANDExpression4016_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression4019  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression4019_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression4019	= { FOLLOW_equalityExpression_in_bitwiseANDExpression4019_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4047  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4047	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4047_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4055  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4055_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4055	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4055_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_bitwiseANDExpressionNoIn4058  */
static	ANTLR3_BITWORD FOLLOW_176_in_bitwiseANDExpressionNoIn4058_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_bitwiseANDExpressionNoIn4058	= { FOLLOW_176_in_bitwiseANDExpressionNoIn4058_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4060  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4060	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4060_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4063  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4063_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4063	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4063_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression4090  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression4090_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression4090	= { FOLLOW_relationalExpression_in_equalityExpression4090_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression4097  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression4097_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression4097	= { FOLLOW_LTERM_in_equalityExpression4097_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpression4100  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpression4100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpression4100	= { FOLLOW_equalityOps_in_equalityExpression4100_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression4102  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression4102_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression4102	= { FOLLOW_LTERM_in_equalityExpression4102_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression4105  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression4105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression4105	= { FOLLOW_relationalExpression_in_equalityExpression4105_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_177_in_equalityOps4130  */
static	ANTLR3_BITWORD FOLLOW_177_in_equalityOps4130_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_177_in_equalityOps4130	= { FOLLOW_177_in_equalityOps4130_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_equalityOps4140  */
static	ANTLR3_BITWORD FOLLOW_178_in_equalityOps4140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_equalityOps4140	= { FOLLOW_178_in_equalityOps4140_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_equalityOps4150  */
static	ANTLR3_BITWORD FOLLOW_179_in_equalityOps4150_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_equalityOps4150	= { FOLLOW_179_in_equalityOps4150_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_equalityOps4160  */
static	ANTLR3_BITWORD FOLLOW_180_in_equalityOps4160_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_equalityOps4160	= { FOLLOW_180_in_equalityOps4160_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4177  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4177_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4177	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4177_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn4184  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn4184_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn4184	= { FOLLOW_LTERM_in_equalityExpressionNoIn4184_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpressionNoIn4187  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpressionNoIn4187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpressionNoIn4187	= { FOLLOW_equalityOps_in_equalityExpressionNoIn4187_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn4189  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn4189_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn4189	= { FOLLOW_LTERM_in_equalityExpressionNoIn4189_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4192  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4192_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4192	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4192_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_relationalOps4217  */
static	ANTLR3_BITWORD FOLLOW_181_in_relationalOps4217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_relationalOps4217	= { FOLLOW_181_in_relationalOps4217_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_relationalOps4228  */
static	ANTLR3_BITWORD FOLLOW_182_in_relationalOps4228_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_relationalOps4228	= { FOLLOW_182_in_relationalOps4228_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_relationalOps4239  */
static	ANTLR3_BITWORD FOLLOW_183_in_relationalOps4239_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_relationalOps4239	= { FOLLOW_183_in_relationalOps4239_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_relationalOps4249  */
static	ANTLR3_BITWORD FOLLOW_184_in_relationalOps4249_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_relationalOps4249	= { FOLLOW_184_in_relationalOps4249_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_185_in_relationalOps4259  */
static	ANTLR3_BITWORD FOLLOW_185_in_relationalOps4259_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_185_in_relationalOps4259	= { FOLLOW_185_in_relationalOps4259_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_relationalOps4269  */
static	ANTLR3_BITWORD FOLLOW_141_in_relationalOps4269_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_relationalOps4269	= { FOLLOW_141_in_relationalOps4269_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression4294  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression4294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x03E0000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression4294	= { FOLLOW_shiftExpression_in_relationalExpression4294_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression4302  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression4302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x03E0000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression4302	= { FOLLOW_LTERM_in_relationalExpression4302_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_relationalExpression4305  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_relationalExpression4305_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_relationalExpression4305	= { FOLLOW_relationalOps_in_relationalExpression4305_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression4307  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression4307_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression4307	= { FOLLOW_LTERM_in_relationalExpression4307_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression4310  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression4310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x03E0000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression4310	= { FOLLOW_shiftExpression_in_relationalExpression4310_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_relationalOpsNoIn4334  */
static	ANTLR3_BITWORD FOLLOW_181_in_relationalOpsNoIn4334_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_relationalOpsNoIn4334	= { FOLLOW_181_in_relationalOpsNoIn4334_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_relationalOpsNoIn4345  */
static	ANTLR3_BITWORD FOLLOW_182_in_relationalOpsNoIn4345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_relationalOpsNoIn4345	= { FOLLOW_182_in_relationalOpsNoIn4345_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_relationalOpsNoIn4356  */
static	ANTLR3_BITWORD FOLLOW_183_in_relationalOpsNoIn4356_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_relationalOpsNoIn4356	= { FOLLOW_183_in_relationalOpsNoIn4356_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_relationalOpsNoIn4366  */
static	ANTLR3_BITWORD FOLLOW_184_in_relationalOpsNoIn4366_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_relationalOpsNoIn4366	= { FOLLOW_184_in_relationalOpsNoIn4366_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_185_in_relationalOpsNoIn4376  */
static	ANTLR3_BITWORD FOLLOW_185_in_relationalOpsNoIn4376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_185_in_relationalOpsNoIn4376	= { FOLLOW_185_in_relationalOpsNoIn4376_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn4393  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn4393_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x03E0000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn4393	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn4393_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn4401  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn4401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x03E0000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn4401	= { FOLLOW_LTERM_in_relationalExpressionNoIn4401_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4404  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4404	= { FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4404_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn4406  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn4406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn4406	= { FOLLOW_LTERM_in_relationalExpressionNoIn4406_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn4409  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn4409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x03E0000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn4409	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn4409_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_186_in_shiftOps4432  */
static	ANTLR3_BITWORD FOLLOW_186_in_shiftOps4432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_186_in_shiftOps4432	= { FOLLOW_186_in_shiftOps4432_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_187_in_shiftOps4442  */
static	ANTLR3_BITWORD FOLLOW_187_in_shiftOps4442_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_187_in_shiftOps4442	= { FOLLOW_187_in_shiftOps4442_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_188_in_shiftOps4451  */
static	ANTLR3_BITWORD FOLLOW_188_in_shiftOps4451_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_188_in_shiftOps4451	= { FOLLOW_188_in_shiftOps4451_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression4468  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression4468_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x1C00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression4468	= { FOLLOW_additiveExpression_in_shiftExpression4468_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_shiftExpression4475  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_shiftExpression4475_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x1C00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_shiftExpression4475	= { FOLLOW_LTERM_in_shiftExpression4475_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftOps_in_shiftExpression4478  */
static	ANTLR3_BITWORD FOLLOW_shiftOps_in_shiftExpression4478_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftOps_in_shiftExpression4478	= { FOLLOW_shiftOps_in_shiftExpression4478_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_shiftExpression4480  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_shiftExpression4480_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_shiftExpression4480	= { FOLLOW_LTERM_in_shiftExpression4480_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression4483  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression4483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x1C00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression4483	= { FOLLOW_additiveExpression_in_shiftExpression4483_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_189_in_addOps4509  */
static	ANTLR3_BITWORD FOLLOW_189_in_addOps4509_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_189_in_addOps4509	= { FOLLOW_189_in_addOps4509_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_addOps4519  */
static	ANTLR3_BITWORD FOLLOW_190_in_addOps4519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_addOps4519	= { FOLLOW_190_in_addOps4519_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression4537  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression4537_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x6000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression4537	= { FOLLOW_multiplicativeExpression_in_additiveExpression4537_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression4544  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression4544_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x6000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression4544	= { FOLLOW_LTERM_in_additiveExpression4544_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_additiveExpression4547  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_additiveExpression4547_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_additiveExpression4547	= { FOLLOW_addOps_in_additiveExpression4547_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression4549  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression4549_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression4549	= { FOLLOW_LTERM_in_additiveExpression4549_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression4552  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression4552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x6000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression4552	= { FOLLOW_multiplicativeExpression_in_additiveExpression4552_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_multOps4577  */
static	ANTLR3_BITWORD FOLLOW_191_in_multOps4577_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_multOps4577	= { FOLLOW_191_in_multOps4577_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_multOps4587  */
static	ANTLR3_BITWORD FOLLOW_192_in_multOps4587_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_multOps4587	= { FOLLOW_192_in_multOps4587_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_multOps4597  */
static	ANTLR3_BITWORD FOLLOW_193_in_multOps4597_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_multOps4597	= { FOLLOW_193_in_multOps4597_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression4614  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression4614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x8000000000000000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression4614	= { FOLLOW_unaryExpression_in_multiplicativeExpression4614_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression4622  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression4622_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x8000000000000000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression4622	= { FOLLOW_LTERM_in_multiplicativeExpression4622_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multOps_in_multiplicativeExpression4625  */
static	ANTLR3_BITWORD FOLLOW_multOps_in_multiplicativeExpression4625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_multOps_in_multiplicativeExpression4625	= { FOLLOW_multOps_in_multiplicativeExpression4625_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression4627  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression4627_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression4627	= { FOLLOW_LTERM_in_multiplicativeExpression4627_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression4630  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression4630_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x8000000000000000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression4630	= { FOLLOW_unaryExpression_in_multiplicativeExpression4630_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression4655  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression4655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000000000000C) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression4655	= { FOLLOW_leftHandSideExpression_in_postfixExpression4655_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_postfixExpression4664  */
static	ANTLR3_BITWORD FOLLOW_194_in_postfixExpression4664_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_postfixExpression4664	= { FOLLOW_194_in_postfixExpression4664_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_postfixExpression4677  */
static	ANTLR3_BITWORD FOLLOW_195_in_postfixExpression4677_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_postfixExpression4677	= { FOLLOW_195_in_postfixExpression4677_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_196_in_unaryOps4697  */
static	ANTLR3_BITWORD FOLLOW_196_in_unaryOps4697_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_196_in_unaryOps4697	= { FOLLOW_196_in_unaryOps4697_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_197_in_unaryOps4707  */
static	ANTLR3_BITWORD FOLLOW_197_in_unaryOps4707_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_197_in_unaryOps4707	= { FOLLOW_197_in_unaryOps4707_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_198_in_unaryOps4717  */
static	ANTLR3_BITWORD FOLLOW_198_in_unaryOps4717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_198_in_unaryOps4717	= { FOLLOW_198_in_unaryOps4717_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_unaryOps4727  */
static	ANTLR3_BITWORD FOLLOW_195_in_unaryOps4727_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_unaryOps4727	= { FOLLOW_195_in_unaryOps4727_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_unaryOps4738  */
static	ANTLR3_BITWORD FOLLOW_194_in_unaryOps4738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_unaryOps4738	= { FOLLOW_194_in_unaryOps4738_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_189_in_unaryOps4749  */
static	ANTLR3_BITWORD FOLLOW_189_in_unaryOps4749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_189_in_unaryOps4749	= { FOLLOW_189_in_unaryOps4749_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_unaryOps4761  */
static	ANTLR3_BITWORD FOLLOW_190_in_unaryOps4761_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_unaryOps4761	= { FOLLOW_190_in_unaryOps4761_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_199_in_unaryOps4773  */
static	ANTLR3_BITWORD FOLLOW_199_in_unaryOps4773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_199_in_unaryOps4773	= { FOLLOW_199_in_unaryOps4773_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_200_in_unaryOps4785  */
static	ANTLR3_BITWORD FOLLOW_200_in_unaryOps4785_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_200_in_unaryOps4785	= { FOLLOW_200_in_unaryOps4785_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_unaryExpression4804  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_unaryExpression4804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_unaryExpression4804	= { FOLLOW_postfixExpression_in_unaryExpression4804_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryOps_in_unaryExpression4817  */
static	ANTLR3_BITWORD FOLLOW_unaryOps_in_unaryExpression4817_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007000000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryOps_in_unaryExpression4817	= { FOLLOW_unaryOps_in_unaryExpression4817_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_unaryExpression4821  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_unaryExpression4821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_unaryExpression4821	= { FOLLOW_unaryExpression_in_unaryExpression4821_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_201_in_primaryExpression4843  */
static	ANTLR3_BITWORD FOLLOW_201_in_primaryExpression4843_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_201_in_primaryExpression4843	= { FOLLOW_201_in_primaryExpression4843_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_primaryExpression4848  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_primaryExpression4848_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_primaryExpression4848	= { FOLLOW_Identifier_in_primaryExpression4848_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dollarExpression_in_primaryExpression4860  */
static	ANTLR3_BITWORD FOLLOW_dollarExpression_in_primaryExpression4860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dollarExpression_in_primaryExpression4860	= { FOLLOW_dollarExpression_in_primaryExpression4860_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primaryExpression4865  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primaryExpression4865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primaryExpression4865	= { FOLLOW_literal_in_primaryExpression4865_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayLiteral_in_primaryExpression4870  */
static	ANTLR3_BITWORD FOLLOW_arrayLiteral_in_primaryExpression4870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayLiteral_in_primaryExpression4870	= { FOLLOW_arrayLiteral_in_primaryExpression4870_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_primaryExpression4875  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_primaryExpression4875_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_primaryExpression4875	= { FOLLOW_objectLiteral_in_primaryExpression4875_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_primaryExpression4880  */
static	ANTLR3_BITWORD FOLLOW_127_in_primaryExpression4880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_primaryExpression4880	= { FOLLOW_127_in_primaryExpression4880_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression4882  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression4882_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression4882	= { FOLLOW_LTERM_in_primaryExpression4882_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primaryExpression4885  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primaryExpression4885_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primaryExpression4885	= { FOLLOW_expression_in_primaryExpression4885_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression4887  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression4887_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression4887	= { FOLLOW_LTERM_in_primaryExpression4887_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_primaryExpression4890  */
static	ANTLR3_BITWORD FOLLOW_129_in_primaryExpression4890_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_primaryExpression4890	= { FOLLOW_129_in_primaryExpression4890_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_202_in_dollarExpression4918  */
static	ANTLR3_BITWORD FOLLOW_202_in_dollarExpression4918_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_202_in_dollarExpression4918	= { FOLLOW_202_in_dollarExpression4918_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_dollarExpression4920  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_dollarExpression4920_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_dollarExpression4920	= { FOLLOW_LTERM_in_dollarExpression4920_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_dollarExpression4923  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_dollarExpression4923_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_dollarExpression4923	= { FOLLOW_Identifier_in_dollarExpression4923_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_dollarExpression4925  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_dollarExpression4925_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_dollarExpression4925	= { FOLLOW_LTERM_in_dollarExpression4925_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_202_in_dollarExpression4928  */
static	ANTLR3_BITWORD FOLLOW_202_in_dollarExpression4928_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_202_in_dollarExpression4928	= { FOLLOW_202_in_dollarExpression4928_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_arrayLiteral4964  */
static	ANTLR3_BITWORD FOLLOW_157_in_arrayLiteral4964_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000070000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_arrayLiteral4964	= { FOLLOW_157_in_arrayLiteral4964_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4966  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4966_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000070000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4966	= { FOLLOW_LTERM_in_arrayLiteral4966_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral4970  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral4970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral4970	= { FOLLOW_assignmentExpression_in_arrayLiteral4970_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4974  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4974_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4974	= { FOLLOW_LTERM_in_arrayLiteral4974_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_arrayLiteral4977  */
static	ANTLR3_BITWORD FOLLOW_158_in_arrayLiteral4977_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_arrayLiteral4977	= { FOLLOW_158_in_arrayLiteral4977_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_arrayLiteral4991  */
static	ANTLR3_BITWORD FOLLOW_157_in_arrayLiteral4991_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_arrayLiteral4991	= { FOLLOW_157_in_arrayLiteral4991_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4993  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4993	= { FOLLOW_LTERM_in_arrayLiteral4993_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral4998  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral4998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000040000001) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral4998	= { FOLLOW_assignmentExpression_in_arrayLiteral4998_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_arrayLiteral5001  */
static	ANTLR3_BITWORD FOLLOW_128_in_arrayLiteral5001_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_arrayLiteral5001	= { FOLLOW_128_in_arrayLiteral5001_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral5003  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral5003_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral5003	= { FOLLOW_LTERM_in_arrayLiteral5003_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral5008  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral5008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000040000001) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral5008	= { FOLLOW_assignmentExpression_in_arrayLiteral5008_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral5012  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral5012_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral5012	= { FOLLOW_LTERM_in_arrayLiteral5012_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_arrayLiteral5015  */
static	ANTLR3_BITWORD FOLLOW_158_in_arrayLiteral5015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_arrayLiteral5015	= { FOLLOW_158_in_arrayLiteral5015_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_objectLiteral5046  */
static	ANTLR3_BITWORD FOLLOW_130_in_objectLiteral5046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000007800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_objectLiteral5046	= { FOLLOW_130_in_objectLiteral5046_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5048  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000007800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5048	= { FOLLOW_LTERM_in_objectLiteral5048_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral5051  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral5051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral5051	= { FOLLOW_propertyNameAndValue_in_objectLiteral5051_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5054  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5054	= { FOLLOW_LTERM_in_objectLiteral5054_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_objectLiteral5057  */
static	ANTLR3_BITWORD FOLLOW_131_in_objectLiteral5057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_objectLiteral5057	= { FOLLOW_131_in_objectLiteral5057_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_objectLiteral5071  */
static	ANTLR3_BITWORD FOLLOW_130_in_objectLiteral5071_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000007800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_objectLiteral5071	= { FOLLOW_130_in_objectLiteral5071_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5073  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000007800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5073	= { FOLLOW_LTERM_in_objectLiteral5073_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral5078  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral5078_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000009) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral5078	= { FOLLOW_propertyNameAndValue_in_objectLiteral5078_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_objectLiteral5081  */
static	ANTLR3_BITWORD FOLLOW_128_in_objectLiteral5081_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000007800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_objectLiteral5081	= { FOLLOW_128_in_objectLiteral5081_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5083  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5083_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000007800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5083	= { FOLLOW_LTERM_in_objectLiteral5083_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral5088  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral5088_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000009) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral5088	= { FOLLOW_propertyNameAndValue_in_objectLiteral5088_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral5092  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral5092_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral5092	= { FOLLOW_LTERM_in_objectLiteral5092_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_objectLiteral5099  */
static	ANTLR3_BITWORD FOLLOW_131_in_objectLiteral5099_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_objectLiteral5099	= { FOLLOW_131_in_objectLiteral5099_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_propertyNameAndValue5123  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_propertyNameAndValue5123_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_propertyNameAndValue5123	= { FOLLOW_propertyName_in_propertyNameAndValue5123_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue5125  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue5125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue5125	= { FOLLOW_LTERM_in_propertyNameAndValue5125_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_propertyNameAndValue5128  */
static	ANTLR3_BITWORD FOLLOW_146_in_propertyNameAndValue5128_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_propertyNameAndValue5128	= { FOLLOW_146_in_propertyNameAndValue5128_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue5130  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue5130_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue5130	= { FOLLOW_LTERM_in_propertyNameAndValue5130_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_propertyNameAndValue5133  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_propertyNameAndValue5133_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_propertyNameAndValue5133	= { FOLLOW_assignmentExpression_in_propertyNameAndValue5133_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_propertyName0  */
static	ANTLR3_BITWORD FOLLOW_set_in_propertyName0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_propertyName0	= { FOLLOW_set_in_propertyName0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_synpred5_LexWhenPred842  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_synpred5_LexWhenPred842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_synpred5_LexWhenPred842	= { FOLLOW_functionDeclaration_in_synpred5_LexWhenPred842_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred9_LexWhenPred909  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred9_LexWhenPred909_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred9_LexWhenPred909	= { FOLLOW_LTERM_in_synpred9_LexWhenPred909_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_synpred23_LexWhenPred1050  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_synpred23_LexWhenPred1050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_synpred23_LexWhenPred1050	= { FOLLOW_statementBlock_in_synpred23_LexWhenPred1050_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_synpred26_LexWhenPred1065  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_synpred26_LexWhenPred1065_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_synpred26_LexWhenPred1065	= { FOLLOW_expressionStatement_in_synpred26_LexWhenPred1065_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labelledStatement_in_synpred33_LexWhenPred1100  */
static	ANTLR3_BITWORD FOLLOW_labelledStatement_in_synpred33_LexWhenPred1100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labelledStatement_in_synpred33_LexWhenPred1100	= { FOLLOW_labelledStatement_in_synpred33_LexWhenPred1100_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSendStatement_in_synpred38_LexWhenPred1132  */
static	ANTLR3_BITWORD FOLLOW_msgSendStatement_in_synpred38_LexWhenPred1132_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSendStatement_in_synpred38_LexWhenPred1132	= { FOLLOW_msgSendStatement_in_synpred38_LexWhenPred1132_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred53_LexWhenPred1311  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred53_LexWhenPred1311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred53_LexWhenPred1311	= { FOLLOW_LTERM_in_synpred53_LexWhenPred1311_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred55_LexWhenPred1340  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred55_LexWhenPred1340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred55_LexWhenPred1340	= { FOLLOW_LTERM_in_synpred55_LexWhenPred1340_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_synpred69_LexWhenPred1582  */
static	ANTLR3_BITWORD FOLLOW_128_in_synpred69_LexWhenPred1582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_synpred69_LexWhenPred1582	= { FOLLOW_128_in_synpred69_LexWhenPred1582_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred69_LexWhenPred1584  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred69_LexWhenPred1584_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred69_LexWhenPred1584	= { FOLLOW_LTERM_in_synpred69_LexWhenPred1584_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whenCheckedListSubsequent_in_synpred69_LexWhenPred1589  */
static	ANTLR3_BITWORD FOLLOW_whenCheckedListSubsequent_in_synpred69_LexWhenPred1589_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whenCheckedListSubsequent_in_synpred69_LexWhenPred1589	= { FOLLOW_whenCheckedListSubsequent_in_synpred69_LexWhenPred1589_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred76_LexWhenPred1647  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred76_LexWhenPred1647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred76_LexWhenPred1647	= { FOLLOW_LTERM_in_synpred76_LexWhenPred1647_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_synpred76_LexWhenPred1650  */
static	ANTLR3_BITWORD FOLLOW_137_in_synpred76_LexWhenPred1650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_synpred76_LexWhenPred1650	= { FOLLOW_137_in_synpred76_LexWhenPred1650_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred76_LexWhenPred1652  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred76_LexWhenPred1652_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030CBDDB4), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred76_LexWhenPred1652	= { FOLLOW_LTERM_in_synpred76_LexWhenPred1652_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred76_LexWhenPred1657  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred76_LexWhenPred1657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred76_LexWhenPred1657	= { FOLLOW_statement_in_synpred76_LexWhenPred1657_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_synpred79_LexWhenPred1699  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_synpred79_LexWhenPred1699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_synpred79_LexWhenPred1699	= { FOLLOW_forStatement_in_synpred79_LexWhenPred1699_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred134_LexWhenPred2325  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred134_LexWhenPred2325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred134_LexWhenPred2325	= { FOLLOW_LTERM_in_synpred134_LexWhenPred2325_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred137_LexWhenPred2360  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred137_LexWhenPred2360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred137_LexWhenPred2360	= { FOLLOW_LTERM_in_synpred137_LexWhenPred2360_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred155_LexWhenPred2624  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred155_LexWhenPred2624_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred155_LexWhenPred2624	= { FOLLOW_memberExpression_in_synpred155_LexWhenPred2624_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred155_LexWhenPred2626  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred155_LexWhenPred2626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred155_LexWhenPred2626	= { FOLLOW_LTERM_in_synpred155_LexWhenPred2626_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_synpred155_LexWhenPred2628  */
static	ANTLR3_BITWORD FOLLOW_155_in_synpred155_LexWhenPred2628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007000000000), ANTLR3_UINT64_LIT(0x0000000030000004), ANTLR3_UINT64_LIT(0x0000000000003E00) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_synpred155_LexWhenPred2628	= { FOLLOW_155_in_synpred155_LexWhenPred2628_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred155_LexWhenPred2632  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred155_LexWhenPred2632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred155_LexWhenPred2632	= { FOLLOW_leftHandSideExpression_in_synpred155_LexWhenPred2632_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred155_LexWhenPred2634  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred155_LexWhenPred2634_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred155_LexWhenPred2634	= { FOLLOW_set_in_synpred155_LexWhenPred2634_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred161_LexWhenPred2714  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred161_LexWhenPred2714_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred161_LexWhenPred2714	= { FOLLOW_LTERM_in_synpred161_LexWhenPred2714_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_synpred161_LexWhenPred2717  */
static	ANTLR3_BITWORD FOLLOW_128_in_synpred161_LexWhenPred2717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_synpred161_LexWhenPred2717	= { FOLLOW_128_in_synpred161_LexWhenPred2717_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred161_LexWhenPred2719  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred161_LexWhenPred2719_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred161_LexWhenPred2719	= { FOLLOW_LTERM_in_synpred161_LexWhenPred2719_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred161_LexWhenPred2722  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred161_LexWhenPred2722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred161_LexWhenPred2722	= { FOLLOW_assignmentExpression_in_synpred161_LexWhenPred2722_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_synpred165_LexWhenPred2781  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_synpred165_LexWhenPred2781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_synpred165_LexWhenPred2781	= { FOLLOW_conditionalExpression_in_synpred165_LexWhenPred2781_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_synpred168_LexWhenPred2828  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_synpred168_LexWhenPred2828_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_synpred168_LexWhenPred2828	= { FOLLOW_conditionalExpressionNoIn_in_synpred168_LexWhenPred2828_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred171_LexWhenPred2876  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred171_LexWhenPred2876_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred171_LexWhenPred2876	= { FOLLOW_callExpression_in_synpred171_LexWhenPred2876_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred172_LexWhenPred2901  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred172_LexWhenPred2901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred172_LexWhenPred2901	= { FOLLOW_memberExpression_in_synpred172_LexWhenPred2901_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred178_LexWhenPred2995  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred178_LexWhenPred2995_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred178_LexWhenPred2995	= { FOLLOW_LTERM_in_synpred178_LexWhenPred2995_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred178_LexWhenPred2998  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred178_LexWhenPred2998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred178_LexWhenPred2998	= { FOLLOW_propertyReferenceSuffix1_in_synpred178_LexWhenPred2998_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred180_LexWhenPred3015  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred180_LexWhenPred3015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred180_LexWhenPred3015	= { FOLLOW_LTERM_in_synpred180_LexWhenPred3015_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred180_LexWhenPred3018  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred180_LexWhenPred3018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred180_LexWhenPred3018	= { FOLLOW_indexSuffix1_in_synpred180_LexWhenPred3018_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred183_LexWhenPred3045  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred183_LexWhenPred3045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred183_LexWhenPred3045	= { FOLLOW_LTERM_in_synpred183_LexWhenPred3045_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred183_LexWhenPred3048  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred183_LexWhenPred3048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred183_LexWhenPred3048	= { FOLLOW_propertyReferenceSuffix1_in_synpred183_LexWhenPred3048_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred185_LexWhenPred3064  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred185_LexWhenPred3064_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred185_LexWhenPred3064	= { FOLLOW_LTERM_in_synpred185_LexWhenPred3064_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred185_LexWhenPred3067  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred185_LexWhenPred3067_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred185_LexWhenPred3067	= { FOLLOW_indexSuffix1_in_synpred185_LexWhenPred3067_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred190_LexWhenPred3113  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred190_LexWhenPred3113_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred190_LexWhenPred3113	= { FOLLOW_LTERM_in_synpred190_LexWhenPred3113_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred190_LexWhenPred3116  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred190_LexWhenPred3116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred190_LexWhenPred3116	= { FOLLOW_propertyReferenceSuffix1_in_synpred190_LexWhenPred3116_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred192_LexWhenPred3129  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred192_LexWhenPred3129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred192_LexWhenPred3129	= { FOLLOW_LTERM_in_synpred192_LexWhenPred3129_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred192_LexWhenPred3132  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred192_LexWhenPred3132_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred192_LexWhenPred3132	= { FOLLOW_indexSuffix1_in_synpred192_LexWhenPred3132_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred196_LexWhenPred3216  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred196_LexWhenPred3216_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x8000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred196_LexWhenPred3216	= { FOLLOW_LTERM_in_synpred196_LexWhenPred3216_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_synpred196_LexWhenPred3219  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_synpred196_LexWhenPred3219_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_synpred196_LexWhenPred3219	= { FOLLOW_arguments_in_synpred196_LexWhenPred3219_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred198_LexWhenPred3227  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred198_LexWhenPred3227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred198_LexWhenPred3227	= { FOLLOW_LTERM_in_synpred198_LexWhenPred3227_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred198_LexWhenPred3230  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred198_LexWhenPred3230_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred198_LexWhenPred3230	= { FOLLOW_indexSuffix1_in_synpred198_LexWhenPred3230_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred200_LexWhenPred3245  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred200_LexWhenPred3245_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred200_LexWhenPred3245	= { FOLLOW_LTERM_in_synpred200_LexWhenPred3245_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred200_LexWhenPred3248  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred200_LexWhenPred3248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred200_LexWhenPred3248	= { FOLLOW_propertyReferenceSuffix1_in_synpred200_LexWhenPred3248_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred295_LexWhenPred4544  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred295_LexWhenPred4544_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x6000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred295_LexWhenPred4544	= { FOLLOW_LTERM_in_synpred295_LexWhenPred4544_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_synpred295_LexWhenPred4547  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_synpred295_LexWhenPred4547_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_synpred295_LexWhenPred4547	= { FOLLOW_addOps_in_synpred295_LexWhenPred4547_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred295_LexWhenPred4549  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred295_LexWhenPred4549_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000030000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred295_LexWhenPred4549	= { FOLLOW_LTERM_in_synpred295_LexWhenPred4549_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_synpred295_LexWhenPred4552  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_synpred295_LexWhenPred4552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_synpred295_LexWhenPred4552	= { FOLLOW_multiplicativeExpression_in_synpred295_LexWhenPred4552_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred322_LexWhenPred4966  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred322_LexWhenPred4966_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred322_LexWhenPred4966	= { FOLLOW_LTERM_in_synpred322_LexWhenPred4966_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_synpred325_LexWhenPred4964  */
static	ANTLR3_BITWORD FOLLOW_157_in_synpred325_LexWhenPred4964_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000070000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_synpred325_LexWhenPred4964	= { FOLLOW_157_in_synpred325_LexWhenPred4964_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred325_LexWhenPred4966  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred325_LexWhenPred4966_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xC000007800000000), ANTLR3_UINT64_LIT(0x6000000070000004), ANTLR3_UINT64_LIT(0x0000000000003FFC) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred325_LexWhenPred4966	= { FOLLOW_LTERM_in_synpred325_LexWhenPred4966_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred325_LexWhenPred4970  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred325_LexWhenPred4970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred325_LexWhenPred4970	= { FOLLOW_assignmentExpression_in_synpred325_LexWhenPred4970_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred325_LexWhenPred4974  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred325_LexWhenPred4974_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred325_LexWhenPred4974	= { FOLLOW_LTERM_in_synpred325_LexWhenPred4974_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_synpred325_LexWhenPred4977  */
static	ANTLR3_BITWORD FOLLOW_158_in_synpred325_LexWhenPred4977_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_synpred325_LexWhenPred4977	= { FOLLOW_158_in_synpred325_LexWhenPred4977_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred330_LexWhenPred5048  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred330_LexWhenPred5048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred330_LexWhenPred5048	= { FOLLOW_LTERM_in_synpred330_LexWhenPred5048_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_synpred333_LexWhenPred5046  */
static	ANTLR3_BITWORD FOLLOW_130_in_synpred333_LexWhenPred5046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000007800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_synpred333_LexWhenPred5046	= { FOLLOW_130_in_synpred333_LexWhenPred5046_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred333_LexWhenPred5048  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred333_LexWhenPred5048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000007800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred333_LexWhenPred5048	= { FOLLOW_LTERM_in_synpred333_LexWhenPred5048_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_synpred333_LexWhenPred5051  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_synpred333_LexWhenPred5051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_synpred333_LexWhenPred5051	= { FOLLOW_propertyNameAndValue_in_synpred333_LexWhenPred5051_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred333_LexWhenPred5054  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred333_LexWhenPred5054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000800000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred333_LexWhenPred5054	= { FOLLOW_LTERM_in_synpred333_LexWhenPred5054_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_synpred333_LexWhenPred5057  */
static	ANTLR3_BITWORD FOLLOW_131_in_synpred333_LexWhenPred5057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_synpred333_LexWhenPred5057	= { FOLLOW_131_in_synpred333_LexWhenPred5057_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 136:18: ( ( LTERM )* sourceElement )*
 */
static const ANTLR3_INT32 dfa4_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa4_eof[4] =
    {
	2, 2, -1, -1
    };
static const ANTLR3_INT32 dfa4_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa4_max[4] =
    {
	205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa4_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa4_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa4_T_empty	    NULL

static const ANTLR3_INT32 dfa4_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, -1, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 3, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa4_transitions[] =
{
    dfa4_T0, dfa4_T0, dfa4_T_empty, dfa4_T_empty	
};


/* Declare tracking structure for Cyclic DFA 4
 */
static
ANTLR3_CYCLIC_DFA cdfa4
    =	{
	    4,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 136:18: ( ( LTERM )* sourceElement )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa4_eot,	    /* EOT table			    */
	    dfa4_eof,	    /* EOF table			    */
	    dfa4_min,	    /* Minimum tokens for each state    */
	    dfa4_max,	    /* Maximum tokens for each state    */
	    dfa4_accept,	/* Accept table			    */
	    dfa4_special,	/* Special transition states	    */
	    dfa4_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 4
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    139:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static const ANTLR3_INT32 dfa5_eot[34] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_eof[34] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_min[34] =
    {
	100, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_max[34] =
    {
	205, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_accept[34] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa5_special[34] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa5_T_empty	    NULL

static const ANTLR3_INT32 dfa5_T0[] =
    {
	2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, 2, -1, 2, 2, -1, 2, 2, -1, 2, 
	2, 2, -1, 2, 2, 2, 2, -1, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa5_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa5_transitions[] =
{
    dfa5_T0, dfa5_T1, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty	
};

static ANTLR3_INT32 dfa5_sst(pLexWhenPredParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA5_1;

    	    ANTLR3_MARKER index5_1;


    		LA5_1 = LA(1);

    	 
    	    index5_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred5_LexWhenPred(ctx)) )
    	    {
    	        s = 33;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index5_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"139:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );";
    EXCEPTION->decisionNum  = 5;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 5
 */
static
ANTLR3_CYCLIC_DFA cdfa5
    =	{
	    5,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"139:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );",	
	    (CDFA_SPECIAL_FUNC) dfa5_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa5_eot,	    /* EOT table			    */
	    dfa5_eof,	    /* EOF table			    */
	    dfa5_min,	    /* Minimum tokens for each state    */
	    dfa5_max,	    /* Maximum tokens for each state    */
	    dfa5_accept,	/* Accept table			    */
	    dfa5_special,	/* Special transition states	    */
	    dfa5_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 5
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    154:8: ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )?
 */
static const ANTLR3_INT32 dfa17_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa17_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa17_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa17_max[4] =
    {
	129, 129, -1, -1
    };
static const ANTLR3_INT32 dfa17_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa17_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa17_T_empty	    NULL

static const ANTLR3_INT32 dfa17_T0[] =
    {
	1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa17_transitions[] =
{
    dfa17_T0, dfa17_T0, dfa17_T_empty, dfa17_T_empty	
};


/* Declare tracking structure for Cyclic DFA 17
 */
static
ANTLR3_CYCLIC_DFA cdfa17
    =	{
	    17,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"154:8: ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa17_eot,	    /* EOT table			    */
	    dfa17_eof,	    /* EOF table			    */
	    dfa17_min,	    /* Minimum tokens for each state    */
	    dfa17_max,	    /* Maximum tokens for each state    */
	    dfa17_accept,	/* Accept table			    */
	    dfa17_special,	/* Special transition states	    */
	    dfa17_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 17
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 154:30: ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*
 */
static const ANTLR3_INT32 dfa16_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa16_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa16_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa16_max[4] =
    {
	129, 129, -1, -1
    };
static const ANTLR3_INT32 dfa16_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa16_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa16_T_empty	    NULL

static const ANTLR3_INT32 dfa16_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa16_transitions[] =
{
    dfa16_T0, dfa16_T0, dfa16_T_empty, dfa16_T_empty	
};


/* Declare tracking structure for Cyclic DFA 16
 */
static
ANTLR3_CYCLIC_DFA cdfa16
    =	{
	    16,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 154:30: ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa16_eot,	    /* EOT table			    */
	    dfa16_eof,	    /* EOF table			    */
	    dfa16_min,	    /* Minimum tokens for each state    */
	    dfa16_max,	    /* Maximum tokens for each state    */
	    dfa16_accept,	/* Accept table			    */
	    dfa16_special,	/* Special transition states	    */
	    dfa16_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 16
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    157:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa22_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa22_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa22_min[5] =
    {
	130, 99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa22_max[5] =
    {
	130, 205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa22_accept[5] =
    {
	-1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa22_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa22_T_empty	    NULL

static const ANTLR3_INT32 dfa22_T0[] =
    {
	2, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, 4, 3, 4, 4, -1, 4, 4, -1, 
	4, 4, 4, -1, 4, 4, 4, 4, -1, 4, -1, -1, 4, 4, -1, -1, -1, -1, 4, 4, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, -1, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4
    };static const ANTLR3_INT32 dfa22_T1[] =
    {
	1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa22_transitions[] =
{
    dfa22_T1, dfa22_T0, dfa22_T0, dfa22_T_empty, dfa22_T_empty	
};


/* Declare tracking structure for Cyclic DFA 22
 */
static
ANTLR3_CYCLIC_DFA cdfa22
    =	{
	    22,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"157:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa22_eot,	    /* EOT table			    */
	    dfa22_eof,	    /* EOF table			    */
	    dfa22_min,	    /* Minimum tokens for each state    */
	    dfa22_max,	    /* Maximum tokens for each state    */
	    dfa22_accept,	/* Accept table			    */
	    dfa22_special,	/* Special transition states	    */
	    dfa22_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 22
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    163:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement | msgSendStatement | msgRecvStatement );
 */
static const ANTLR3_INT32 dfa23_eot[37] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa23_eof[37] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa23_min[37] =
    {
	100, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_max[37] =
    {
	205, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_accept[37] =
    {
	-1, -1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, 
	-1, -1, 5, 6, -1, -1, 7, 8, 9, 10, 12, 13, 14, 15, 1, 16, 17, 11
    };
static const ANTLR3_INT32 dfa23_special[37] =
    {	
	-1, 0, -1, -1, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa23_T_empty	    NULL

static const ANTLR3_INT32 dfa23_T0[] =
    {
	5, 7, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 10, 9, -1, -1, 1, -1, 2, 3, -1, 31, 21, -1, 
	22, 22, 22, -1, 25, 26, 27, 28, -1, 29, -1, -1, 30, 32, -1, -1, -1, -1, 
	11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, -1, 
	-1, -1, 12, 12, 12, 12, 12, 12, 12, 4, 6, 7, 7, 7
    };static const ANTLR3_INT32 dfa23_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa23_transitions[] =
{
    dfa23_T0, dfa23_T1, dfa23_T_empty, dfa23_T_empty, dfa23_T1, dfa23_T1, 
    dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty	
};

static ANTLR3_INT32 dfa23_sst(pLexWhenPredParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA23_1;

    	    ANTLR3_MARKER index23_1;


    		LA23_1 = LA(1);

    	 
    	    index23_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred23_LexWhenPred(ctx)) )
    	    {
    	        s = 33;
    	    }

    	    else if ( (synpred26_LexWhenPred(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (synpred38_LexWhenPred(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index23_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA23_4;

    	    ANTLR3_MARKER index23_4;


    		LA23_4 = LA(1);

    	 
    	    index23_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_LexWhenPred(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (synpred38_LexWhenPred(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index23_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA23_5;

    	    ANTLR3_MARKER index23_5;


    		LA23_5 = LA(1);

    	 
    	    index23_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_LexWhenPred(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (synpred33_LexWhenPred(ctx)) )
    	    {
    	        s = 36;
    	    }

    	    else if ( (synpred38_LexWhenPred(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index23_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA23_6;

    	    ANTLR3_MARKER index23_6;


    		LA23_6 = LA(1);

    	 
    	    index23_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_LexWhenPred(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (synpred38_LexWhenPred(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index23_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA23_7;

    	    ANTLR3_MARKER index23_7;


    		LA23_7 = LA(1);

    	 
    	    index23_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_LexWhenPred(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (synpred38_LexWhenPred(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index23_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA23_8;

    	    ANTLR3_MARKER index23_8;


    		LA23_8 = LA(1);

    	 
    	    index23_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_LexWhenPred(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (synpred38_LexWhenPred(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index23_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA23_9;

    	    ANTLR3_MARKER index23_9;


    		LA23_9 = LA(1);

    	 
    	    index23_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_LexWhenPred(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (synpred38_LexWhenPred(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index23_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA23_10;

    	    ANTLR3_MARKER index23_10;


    		LA23_10 = LA(1);

    	 
    	    index23_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_LexWhenPred(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (synpred38_LexWhenPred(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index23_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA23_11;

    	    ANTLR3_MARKER index23_11;


    		LA23_11 = LA(1);

    	 
    	    index23_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_LexWhenPred(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (synpred38_LexWhenPred(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 35;
    	    }

    	 
    		SEEK(index23_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"163:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement | msgSendStatement | msgRecvStatement );";
    EXCEPTION->decisionNum  = 23;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 23
 */
static
ANTLR3_CYCLIC_DFA cdfa23
    =	{
	    23,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"163:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement | msgSendStatement | msgRecvStatement );",	
	    (CDFA_SPECIAL_FUNC) dfa23_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa23_eot,	    /* EOT table			    */
	    dfa23_eof,	    /* EOF table			    */
	    dfa23_min,	    /* Minimum tokens for each state    */
	    dfa23_max,	    /* Maximum tokens for each state    */
	    dfa23_accept,	/* Accept table			    */
	    dfa23_special,	/* Special transition states	    */
	    dfa23_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 23
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    183:1: statementBlock : ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa27_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa27_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa27_min[5] =
    {
	130, 99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa27_max[5] =
    {
	130, 205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa27_accept[5] =
    {
	-1, -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa27_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa27_T_empty	    NULL

static const ANTLR3_INT32 dfa27_T0[] =
    {
	2, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 4, 3, 3, -1, 3, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, -1, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 3, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3
    };static const ANTLR3_INT32 dfa27_T1[] =
    {
	1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa27_transitions[] =
{
    dfa27_T1, dfa27_T0, dfa27_T0, dfa27_T_empty, dfa27_T_empty	
};


/* Declare tracking structure for Cyclic DFA 27
 */
static
ANTLR3_CYCLIC_DFA cdfa27
    =	{
	    27,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"183:1: statementBlock : ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa27_eot,	    /* EOT table			    */
	    dfa27_eof,	    /* EOF table			    */
	    dfa27_min,	    /* Minimum tokens for each state    */
	    dfa27_max,	    /* Maximum tokens for each state    */
	    dfa27_accept,	/* Accept table			    */
	    dfa27_special,	/* Special transition states	    */
	    dfa27_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 27
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 189:14: ( ( LTERM )* statement )*
 */
static const ANTLR3_INT32 dfa29_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa29_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa29_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa29_max[4] =
    {
	205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa29_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa29_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa29_T_empty	    NULL

static const ANTLR3_INT32 dfa29_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, -1, 3, 2, 2, 3, 3, -1, -1, -1, -1, 3, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa29_transitions[] =
{
    dfa29_T0, dfa29_T0, dfa29_T_empty, dfa29_T_empty	
};


/* Declare tracking structure for Cyclic DFA 29
 */
static
ANTLR3_CYCLIC_DFA cdfa29
    =	{
	    29,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 189:14: ( ( LTERM )* statement )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa29_eot,	    /* EOT table			    */
	    dfa29_eof,	    /* EOF table			    */
	    dfa29_min,	    /* Minimum tokens for each state    */
	    dfa29_max,	    /* Maximum tokens for each state    */
	    dfa29_accept,	/* Accept table			    */
	    dfa29_special,	/* Special transition states	    */
	    dfa29_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 29
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 197:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
 */
static const ANTLR3_INT32 dfa34_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa34_eof[5] =
    {
	-1, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa34_min[5] =
    {
	99, 99, -1, -1, 99
    };
static const ANTLR3_INT32 dfa34_max[5] =
    {
	133, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa34_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa34_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa34_T_empty	    NULL

static const ANTLR3_INT32 dfa34_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa34_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa34_transitions[] =
{
    dfa34_T1, dfa34_T0, dfa34_T_empty, dfa34_T_empty, dfa34_T0	
};


/* Declare tracking structure for Cyclic DFA 34
 */
static
ANTLR3_CYCLIC_DFA cdfa34
    =	{
	    34,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 197:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa34_eot,	    /* EOT table			    */
	    dfa34_eof,	    /* EOF table			    */
	    dfa34_min,	    /* Minimum tokens for each state    */
	    dfa34_max,	    /* Maximum tokens for each state    */
	    dfa34_accept,	/* Accept table			    */
	    dfa34_special,	/* Special transition states	    */
	    dfa34_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 34
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 201:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
 */
static const ANTLR3_INT32 dfa37_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa37_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa37_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa37_max[4] =
    {
	133, 133, -1, -1
    };
static const ANTLR3_INT32 dfa37_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa37_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa37_T_empty	    NULL

static const ANTLR3_INT32 dfa37_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa37_transitions[] =
{
    dfa37_T0, dfa37_T0, dfa37_T_empty, dfa37_T_empty	
};


/* Declare tracking structure for Cyclic DFA 37
 */
static
ANTLR3_CYCLIC_DFA cdfa37
    =	{
	    37,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 201:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa37_eot,	    /* EOT table			    */
	    dfa37_eof,	    /* EOF table			    */
	    dfa37_min,	    /* Minimum tokens for each state    */
	    dfa37_max,	    /* Maximum tokens for each state    */
	    dfa37_accept,	/* Accept table			    */
	    dfa37_special,	/* Special transition states	    */
	    dfa37_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 37
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    268:21: ( ( LTERM )* init= forStatementInitialiserPart )?
 */
static const ANTLR3_INT32 dfa73_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa73_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa73_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa73_max[4] =
    {
	205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa73_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa73_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa73_T_empty	    NULL

static const ANTLR3_INT32 dfa73_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 2, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa73_transitions[] =
{
    dfa73_T0, dfa73_T0, dfa73_T_empty, dfa73_T_empty	
};


/* Declare tracking structure for Cyclic DFA 73
 */
static
ANTLR3_CYCLIC_DFA cdfa73
    =	{
	    73,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"268:21: ( ( LTERM )* init= forStatementInitialiserPart )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa73_eot,	    /* EOT table			    */
	    dfa73_eof,	    /* EOF table			    */
	    dfa73_min,	    /* Minimum tokens for each state    */
	    dfa73_max,	    /* Maximum tokens for each state    */
	    dfa73_accept,	/* Accept table			    */
	    dfa73_special,	/* Special transition states	    */
	    dfa73_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 73
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    268:75: ( ( LTERM )* cond= expression )?
 */
static const ANTLR3_INT32 dfa76_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa76_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa76_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa76_max[4] =
    {
	205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa76_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa76_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa76_T_empty	    NULL

static const ANTLR3_INT32 dfa76_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa76_transitions[] =
{
    dfa76_T0, dfa76_T0, dfa76_T_empty, dfa76_T_empty	
};


/* Declare tracking structure for Cyclic DFA 76
 */
static
ANTLR3_CYCLIC_DFA cdfa76
    =	{
	    76,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"268:75: ( ( LTERM )* cond= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa76_eot,	    /* EOT table			    */
	    dfa76_eof,	    /* EOF table			    */
	    dfa76_min,	    /* Minimum tokens for each state    */
	    dfa76_max,	    /* Maximum tokens for each state    */
	    dfa76_accept,	/* Accept table			    */
	    dfa76_special,	/* Special transition states	    */
	    dfa76_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 76
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    268:112: ( ( LTERM )* iter= expression )?
 */
static const ANTLR3_INT32 dfa79_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa79_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa79_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa79_max[4] =
    {
	205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa79_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa79_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa79_T_empty	    NULL

static const ANTLR3_INT32 dfa79_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 3, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa79_transitions[] =
{
    dfa79_T0, dfa79_T0, dfa79_T_empty, dfa79_T_empty	
};


/* Declare tracking structure for Cyclic DFA 79
 */
static
ANTLR3_CYCLIC_DFA cdfa79
    =	{
	    79,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"268:112: ( ( LTERM )* iter= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa79_eot,	    /* EOT table			    */
	    dfa79_eof,	    /* EOF table			    */
	    dfa79_min,	    /* Minimum tokens for each state    */
	    dfa79_max,	    /* Maximum tokens for each state    */
	    dfa79_accept,	/* Accept table			    */
	    dfa79_special,	/* Special transition states	    */
	    dfa79_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 79
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 310:8: ( ( LTERM )* case1= caseClause )*
 */
static const ANTLR3_INT32 dfa109_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa109_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa109_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa109_max[4] =
    {
	149, 149, -1, -1
    };
static const ANTLR3_INT32 dfa109_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa109_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa109_T_empty	    NULL

static const ANTLR3_INT32 dfa109_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa109_transitions[] =
{
    dfa109_T0, dfa109_T0, dfa109_T_empty, dfa109_T_empty	
};


/* Declare tracking structure for Cyclic DFA 109
 */
static
ANTLR3_CYCLIC_DFA cdfa109
    =	{
	    109,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 310:8: ( ( LTERM )* case1= caseClause )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa109_eot,	    /* EOT table			    */
	    dfa109_eof,	    /* EOF table			    */
	    dfa109_min,	    /* Minimum tokens for each state    */
	    dfa109_max,	    /* Maximum tokens for each state    */
	    dfa109_accept,	/* Accept table			    */
	    dfa109_special,	/* Special transition states	    */
	    dfa109_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 109
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    310:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?
 */
static const ANTLR3_INT32 dfa113_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa113_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa113_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa113_max[4] =
    {
	149, 149, -1, -1
    };
static const ANTLR3_INT32 dfa113_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa113_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa113_T_empty	    NULL

static const ANTLR3_INT32 dfa113_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa113_transitions[] =
{
    dfa113_T0, dfa113_T0, dfa113_T_empty, dfa113_T_empty	
};


/* Declare tracking structure for Cyclic DFA 113
 */
static
ANTLR3_CYCLIC_DFA cdfa113
    =	{
	    113,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"310:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa113_eot,	    /* EOT table			    */
	    dfa113_eof,	    /* EOF table			    */
	    dfa113_min,	    /* Minimum tokens for each state    */
	    dfa113_max,	    /* Maximum tokens for each state    */
	    dfa113_accept,	/* Accept table			    */
	    dfa113_special,	/* Special transition states	    */
	    dfa113_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 113
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 310:57: ( ( LTERM )* case2= caseClause )*
 */
static const ANTLR3_INT32 dfa112_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa112_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa112_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa112_max[4] =
    {
	148, 148, -1, -1
    };
static const ANTLR3_INT32 dfa112_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa112_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa112_T_empty	    NULL

static const ANTLR3_INT32 dfa112_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa112_transitions[] =
{
    dfa112_T0, dfa112_T0, dfa112_T_empty, dfa112_T_empty	
};


/* Declare tracking structure for Cyclic DFA 112
 */
static
ANTLR3_CYCLIC_DFA cdfa112
    =	{
	    112,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 310:57: ( ( LTERM )* case2= caseClause )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa112_eot,	    /* EOT table			    */
	    dfa112_eof,	    /* EOF table			    */
	    dfa112_min,	    /* Minimum tokens for each state    */
	    dfa112_max,	    /* Maximum tokens for each state    */
	    dfa112_accept,	/* Accept table			    */
	    dfa112_special,	/* Special transition states	    */
	    dfa112_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 112
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    326:127: ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?
 */
static const ANTLR3_INT32 dfa126_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa126_eof[4] =
    {
	3, 3, -1, -1
    };
static const ANTLR3_INT32 dfa126_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa126_max[4] =
    {
	205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa126_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa126_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa126_T_empty	    NULL

static const ANTLR3_INT32 dfa126_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 3, 3, 3, -1, 3, 3, 3, 
	3, 3, 3, -1, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, -1, 2, -1, -1, 3, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa126_transitions[] =
{
    dfa126_T0, dfa126_T0, dfa126_T_empty, dfa126_T_empty	
};


/* Declare tracking structure for Cyclic DFA 126
 */
static
ANTLR3_CYCLIC_DFA cdfa126
    =	{
	    126,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"326:127: ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa126_eot,	    /* EOT table			    */
	    dfa126_eof,	    /* EOF table			    */
	    dfa126_min,	    /* Minimum tokens for each state    */
	    dfa126_max,	    /* Maximum tokens for each state    */
	    dfa126_accept,	/* Accept table			    */
	    dfa126_special,	/* Special transition states	    */
	    dfa126_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 126
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    346:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );
 */
static const ANTLR3_INT32 dfa141_eot[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa141_eof[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa141_min[12] =
    {
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa141_max[12] =
    {
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa141_accept[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa141_special[12] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa141_T_empty	    NULL

static const ANTLR3_INT32 dfa141_T0[] =
    {
	2, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 8, 7, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 4, 4, 4
    };static const ANTLR3_INT32 dfa141_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa141_transitions[] =
{
    dfa141_T0, dfa141_T1, dfa141_T1, dfa141_T1, dfa141_T1, dfa141_T1, dfa141_T1, 
    dfa141_T1, dfa141_T1, dfa141_T1, dfa141_T_empty, dfa141_T_empty	
};

static ANTLR3_INT32 dfa141_sst(pLexWhenPredParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA141_1;

    	    ANTLR3_MARKER index141_1;


    		LA141_1 = LA(1);

    	 
    	    index141_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index141_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA141_2;

    	    ANTLR3_MARKER index141_2;


    		LA141_2 = LA(1);

    	 
    	    index141_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index141_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA141_3;

    	    ANTLR3_MARKER index141_3;


    		LA141_3 = LA(1);

    	 
    	    index141_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index141_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA141_4;

    	    ANTLR3_MARKER index141_4;


    		LA141_4 = LA(1);

    	 
    	    index141_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index141_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA141_5;

    	    ANTLR3_MARKER index141_5;


    		LA141_5 = LA(1);

    	 
    	    index141_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index141_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA141_6;

    	    ANTLR3_MARKER index141_6;


    		LA141_6 = LA(1);

    	 
    	    index141_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index141_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA141_7;

    	    ANTLR3_MARKER index141_7;


    		LA141_7 = LA(1);

    	 
    	    index141_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index141_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA141_8;

    	    ANTLR3_MARKER index141_8;


    		LA141_8 = LA(1);

    	 
    	    index141_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index141_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA141_9;

    	    ANTLR3_MARKER index141_9;


    		LA141_9 = LA(1);

    	 
    	    index141_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index141_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"346:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );";
    EXCEPTION->decisionNum  = 141;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 141
 */
static
ANTLR3_CYCLIC_DFA cdfa141
    =	{
	    141,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"346:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );",	
	    (CDFA_SPECIAL_FUNC) dfa141_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa141_eot,	    /* EOT table			    */
	    dfa141_eof,	    /* EOF table			    */
	    dfa141_min,	    /* Minimum tokens for each state    */
	    dfa141_max,	    /* Maximum tokens for each state    */
	    dfa141_accept,	/* Accept table			    */
	    dfa141_special,	/* Special transition states	    */
	    dfa141_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 141
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 357:29: ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*
 */
static const ANTLR3_INT32 dfa147_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa147_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa147_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa147_max[4] =
    {
	133, 133, -1, -1
    };
static const ANTLR3_INT32 dfa147_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa147_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa147_T_empty	    NULL

static const ANTLR3_INT32 dfa147_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa147_transitions[] =
{
    dfa147_T0, dfa147_T0, dfa147_T_empty, dfa147_T_empty	
};


/* Declare tracking structure for Cyclic DFA 147
 */
static
ANTLR3_CYCLIC_DFA cdfa147
    =	{
	    147,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 357:29: ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa147_eot,	    /* EOT table			    */
	    dfa147_eof,	    /* EOF table			    */
	    dfa147_min,	    /* Minimum tokens for each state    */
	    dfa147_max,	    /* Maximum tokens for each state    */
	    dfa147_accept,	/* Accept table			    */
	    dfa147_special,	/* Special transition states	    */
	    dfa147_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 147
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    361:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static const ANTLR3_INT32 dfa150_eot[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa150_eof[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa150_min[20] =
    {
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa150_max[20] =
    {
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa150_accept[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2
    };
static const ANTLR3_INT32 dfa150_special[20] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa150_T_empty	    NULL

static const ANTLR3_INT32 dfa150_T0[] =
    {
	2, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 8, 7, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, -1, -1, 
	-1, 10, 10, 10, 10, 10, 10, 10, 1, 3, 4, 4, 4
    };static const ANTLR3_INT32 dfa150_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa150_transitions[] =
{
    dfa150_T0, dfa150_T1, dfa150_T1, dfa150_T1, dfa150_T1, dfa150_T1, dfa150_T1, 
    dfa150_T1, dfa150_T1, dfa150_T1, dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, 
    dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, 
    dfa150_T_empty, dfa150_T_empty	
};

static ANTLR3_INT32 dfa150_sst(pLexWhenPredParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA150_1;

    	    ANTLR3_MARKER index150_1;


    		LA150_1 = LA(1);

    	 
    	    index150_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred165_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index150_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA150_2;

    	    ANTLR3_MARKER index150_2;


    		LA150_2 = LA(1);

    	 
    	    index150_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred165_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index150_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA150_3;

    	    ANTLR3_MARKER index150_3;


    		LA150_3 = LA(1);

    	 
    	    index150_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred165_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index150_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA150_4;

    	    ANTLR3_MARKER index150_4;


    		LA150_4 = LA(1);

    	 
    	    index150_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred165_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index150_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA150_5;

    	    ANTLR3_MARKER index150_5;


    		LA150_5 = LA(1);

    	 
    	    index150_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred165_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index150_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA150_6;

    	    ANTLR3_MARKER index150_6;


    		LA150_6 = LA(1);

    	 
    	    index150_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred165_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index150_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA150_7;

    	    ANTLR3_MARKER index150_7;


    		LA150_7 = LA(1);

    	 
    	    index150_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred165_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index150_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA150_8;

    	    ANTLR3_MARKER index150_8;


    		LA150_8 = LA(1);

    	 
    	    index150_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred165_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index150_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA150_9;

    	    ANTLR3_MARKER index150_9;


    		LA150_9 = LA(1);

    	 
    	    index150_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred165_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index150_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"361:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );";
    EXCEPTION->decisionNum  = 150;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 150
 */
static
ANTLR3_CYCLIC_DFA cdfa150
    =	{
	    150,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"361:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa150_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa150_eot,	    /* EOT table			    */
	    dfa150_eof,	    /* EOF table			    */
	    dfa150_min,	    /* Minimum tokens for each state    */
	    dfa150_max,	    /* Maximum tokens for each state    */
	    dfa150_accept,	/* Accept table			    */
	    dfa150_special,	/* Special transition states	    */
	    dfa150_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 150
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    366:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static const ANTLR3_INT32 dfa153_eot[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa153_eof[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa153_min[20] =
    {
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa153_max[20] =
    {
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa153_accept[20] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2
    };
static const ANTLR3_INT32 dfa153_special[20] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa153_T_empty	    NULL

static const ANTLR3_INT32 dfa153_T0[] =
    {
	2, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 8, 7, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, -1, -1, 
	-1, 10, 10, 10, 10, 10, 10, 10, 1, 3, 4, 4, 4
    };static const ANTLR3_INT32 dfa153_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa153_transitions[] =
{
    dfa153_T0, dfa153_T1, dfa153_T1, dfa153_T1, dfa153_T1, dfa153_T1, dfa153_T1, 
    dfa153_T1, dfa153_T1, dfa153_T1, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty	
};

static ANTLR3_INT32 dfa153_sst(pLexWhenPredParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA153_1;

    	    ANTLR3_MARKER index153_1;


    		LA153_1 = LA(1);

    	 
    	    index153_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index153_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA153_2;

    	    ANTLR3_MARKER index153_2;


    		LA153_2 = LA(1);

    	 
    	    index153_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index153_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA153_3;

    	    ANTLR3_MARKER index153_3;


    		LA153_3 = LA(1);

    	 
    	    index153_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index153_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA153_4;

    	    ANTLR3_MARKER index153_4;


    		LA153_4 = LA(1);

    	 
    	    index153_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index153_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA153_5;

    	    ANTLR3_MARKER index153_5;


    		LA153_5 = LA(1);

    	 
    	    index153_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index153_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA153_6;

    	    ANTLR3_MARKER index153_6;


    		LA153_6 = LA(1);

    	 
    	    index153_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index153_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA153_7;

    	    ANTLR3_MARKER index153_7;


    		LA153_7 = LA(1);

    	 
    	    index153_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index153_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA153_8;

    	    ANTLR3_MARKER index153_8;


    		LA153_8 = LA(1);

    	 
    	    index153_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index153_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA153_9;

    	    ANTLR3_MARKER index153_9;


    		LA153_9 = LA(1);

    	 
    	    index153_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 19;
    	    }

    	 
    		SEEK(index153_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"366:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );";
    EXCEPTION->decisionNum  = 153;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 153
 */
static
ANTLR3_CYCLIC_DFA cdfa153
    =	{
	    153,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"366:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );",	
	    (CDFA_SPECIAL_FUNC) dfa153_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa153_eot,	    /* EOT table			    */
	    dfa153_eof,	    /* EOF table			    */
	    dfa153_min,	    /* Minimum tokens for each state    */
	    dfa153_max,	    /* Maximum tokens for each state    */
	    dfa153_accept,	/* Accept table			    */
	    dfa153_special,	/* Special transition states	    */
	    dfa153_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 153
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    371:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static const ANTLR3_INT32 dfa154_eot[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa154_eof[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa154_min[12] =
    {
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa154_max[12] =
    {
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa154_accept[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa154_special[12] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa154_T_empty	    NULL

static const ANTLR3_INT32 dfa154_T0[] =
    {
	2, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 8, 7, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 4, 4, 4
    };static const ANTLR3_INT32 dfa154_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa154_transitions[] =
{
    dfa154_T0, dfa154_T1, dfa154_T1, dfa154_T1, dfa154_T1, dfa154_T1, dfa154_T1, 
    dfa154_T1, dfa154_T1, dfa154_T1, dfa154_T_empty, dfa154_T_empty	
};

static ANTLR3_INT32 dfa154_sst(pLexWhenPredParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA154_1;

    	    ANTLR3_MARKER index154_1;


    		LA154_1 = LA(1);

    	 
    	    index154_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index154_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA154_2;

    	    ANTLR3_MARKER index154_2;


    		LA154_2 = LA(1);

    	 
    	    index154_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index154_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA154_3;

    	    ANTLR3_MARKER index154_3;


    		LA154_3 = LA(1);

    	 
    	    index154_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index154_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA154_4;

    	    ANTLR3_MARKER index154_4;


    		LA154_4 = LA(1);

    	 
    	    index154_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index154_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA154_5;

    	    ANTLR3_MARKER index154_5;


    		LA154_5 = LA(1);

    	 
    	    index154_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index154_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA154_6;

    	    ANTLR3_MARKER index154_6;


    		LA154_6 = LA(1);

    	 
    	    index154_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index154_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA154_7;

    	    ANTLR3_MARKER index154_7;


    		LA154_7 = LA(1);

    	 
    	    index154_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index154_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA154_8;

    	    ANTLR3_MARKER index154_8;


    		LA154_8 = LA(1);

    	 
    	    index154_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index154_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA154_9;

    	    ANTLR3_MARKER index154_9;


    		LA154_9 = LA(1);

    	 
    	    index154_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_LexWhenPred(ctx)) )
    	    {
    	        s = 10;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index154_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"371:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );";
    EXCEPTION->decisionNum  = 154;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 154
 */
static
ANTLR3_CYCLIC_DFA cdfa154
    =	{
	    154,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"371:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa154_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa154_eot,	    /* EOT table			    */
	    dfa154_eof,	    /* EOF table			    */
	    dfa154_min,	    /* Minimum tokens for each state    */
	    dfa154_max,	    /* Maximum tokens for each state    */
	    dfa154_accept,	/* Accept table			    */
	    dfa154_special,	/* Special transition states	    */
	    dfa154_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 154
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    376:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static const ANTLR3_INT32 dfa156_eot[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa156_eof[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa156_min[11] =
    {
	100, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa156_max[11] =
    {
	205, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa156_accept[11] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };
static const ANTLR3_INT32 dfa156_special[11] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa156_T_empty	    NULL

static const ANTLR3_INT32 dfa156_T0[] =
    {
	1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa156_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa156_transitions[] =
{
    dfa156_T0, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T1, 
    dfa156_T_empty	
};

static ANTLR3_INT32 dfa156_sst(pLexWhenPredParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA156_9;

    	    ANTLR3_MARKER index156_9;


    		LA156_9 = LA(1);

    	 
    	    index156_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred172_LexWhenPred(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index156_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"376:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );";
    EXCEPTION->decisionNum  = 156;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 156
 */
static
ANTLR3_CYCLIC_DFA cdfa156
    =	{
	    156,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"376:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa156_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa156_eot,	    /* EOT table			    */
	    dfa156_eof,	    /* EOF table			    */
	    dfa156_min,	    /* Minimum tokens for each state    */
	    dfa156_max,	    /* Maximum tokens for each state    */
	    dfa156_accept,	/* Accept table			    */
	    dfa156_special,	/* Special transition states	    */
	    dfa156_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 156
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 393:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa162_eot[81] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa162_eof[81] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa162_min[81] =
    {
	99, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa162_max[81] =
    {
	205, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa162_accept[81] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa162_special[81] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa162_T_empty	    NULL

static const ANTLR3_INT32 dfa162_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 10, 2, 79, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa162_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa162_transitions[] =
{
    dfa162_T0, dfa162_T1, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T1, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, dfa162_T_empty, 
    dfa162_T_empty	
};

static ANTLR3_INT32 dfa162_sst(pLexWhenPredParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA162_1;

    	    ANTLR3_MARKER index162_1;


    		LA162_1 = LA(1);

    	 
    	    index162_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred178_LexWhenPred(ctx)) )
    	    {
    	        s = 79;
    	    }

    	    else if ( (synpred180_LexWhenPred(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index162_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA162_10;

    	    ANTLR3_MARKER index162_10;


    		LA162_10 = LA(1);

    	 
    	    index162_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred180_LexWhenPred(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index162_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 393:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 162;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 162
 */
static
ANTLR3_CYCLIC_DFA cdfa162
    =	{
	    162,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 393:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa162_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa162_eot,	    /* EOT table			    */
	    dfa162_eof,	    /* EOF table			    */
	    dfa162_min,	    /* Minimum tokens for each state    */
	    dfa162_max,	    /* Maximum tokens for each state    */
	    dfa162_accept,	/* Accept table			    */
	    dfa162_special,	/* Special transition states	    */
	    dfa162_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 162
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 394:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa165_eot[81] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_eof[81] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_min[81] =
    {
	99, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_max[81] =
    {
	205, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa165_accept[81] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa165_special[81] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa165_T_empty	    NULL

static const ANTLR3_INT32 dfa165_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 10, 2, 79, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa165_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa165_transitions[] =
{
    dfa165_T0, dfa165_T1, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T1, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, dfa165_T_empty, 
    dfa165_T_empty	
};

static ANTLR3_INT32 dfa165_sst(pLexWhenPredParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA165_1;

    	    ANTLR3_MARKER index165_1;


    		LA165_1 = LA(1);

    	 
    	    index165_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred183_LexWhenPred(ctx)) )
    	    {
    	        s = 79;
    	    }

    	    else if ( (synpred185_LexWhenPred(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index165_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA165_10;

    	    ANTLR3_MARKER index165_10;


    		LA165_10 = LA(1);

    	 
    	    index165_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred185_LexWhenPred(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index165_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 394:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 165;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 165
 */
static
ANTLR3_CYCLIC_DFA cdfa165
    =	{
	    165,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 394:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa165_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa165_eot,	    /* EOT table			    */
	    dfa165_eof,	    /* EOF table			    */
	    dfa165_min,	    /* Minimum tokens for each state    */
	    dfa165_max,	    /* Maximum tokens for each state    */
	    dfa165_accept,	/* Accept table			    */
	    dfa165_special,	/* Special transition states	    */
	    dfa165_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 165
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 395:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa170_eot[81] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa170_eof[81] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa170_min[81] =
    {
	99, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa170_max[81] =
    {
	205, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa170_accept[81] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa170_special[81] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa170_T_empty	    NULL

static const ANTLR3_INT32 dfa170_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 10, 2, 79, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa170_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa170_transitions[] =
{
    dfa170_T0, dfa170_T1, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T1, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, dfa170_T_empty, 
    dfa170_T_empty	
};

static ANTLR3_INT32 dfa170_sst(pLexWhenPredParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA170_1;

    	    ANTLR3_MARKER index170_1;


    		LA170_1 = LA(1);

    	 
    	    index170_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred190_LexWhenPred(ctx)) )
    	    {
    	        s = 79;
    	    }

    	    else if ( (synpred192_LexWhenPred(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index170_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA170_10;

    	    ANTLR3_MARKER index170_10;


    		LA170_10 = LA(1);

    	 
    	    index170_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred192_LexWhenPred(ctx)) )
    	    {
    	        s = 80;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index170_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 395:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 170;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 170
 */
static
ANTLR3_CYCLIC_DFA cdfa170
    =	{
	    170,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 395:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa170_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa170_eot,	    /* EOT table			    */
	    dfa170_eof,	    /* EOF table			    */
	    dfa170_min,	    /* Minimum tokens for each state    */
	    dfa170_max,	    /* Maximum tokens for each state    */
	    dfa170_accept,	/* Accept table			    */
	    dfa170_special,	/* Special transition states	    */
	    dfa170_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 170
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 404:81: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa177_eot[52] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa177_eof[52] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa177_min[52] =
    {
	99, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa177_max[52] =
    {
	195, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa177_accept[52] =
    {
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3
    };
static const ANTLR3_INT32 dfa177_special[52] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa177_T_empty	    NULL

static const ANTLR3_INT32 dfa177_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 2, 2, -1, 2, -1, 2, 2, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, 50, 2, 51, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa177_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa177_transitions[] =
{
    dfa177_T0, dfa177_T1, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, dfa177_T_empty, 
    dfa177_T_empty, dfa177_T_empty	
};

static ANTLR3_INT32 dfa177_sst(pLexWhenPredParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA177_1;

    	    ANTLR3_MARKER index177_1;


    		LA177_1 = LA(1);

    	 
    	    index177_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred196_LexWhenPred(ctx)) )
    	    {
    	        s = 49;
    	    }

    	    else if ( (synpred198_LexWhenPred(ctx)) )
    	    {
    	        s = 50;
    	    }

    	    else if ( (synpred200_LexWhenPred(ctx)) )
    	    {
    	        s = 51;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index177_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 404:81: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*";
    EXCEPTION->decisionNum  = 177;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 177
 */
static
ANTLR3_CYCLIC_DFA cdfa177
    =	{
	    177,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 404:81: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa177_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa177_eot,	    /* EOT table			    */
	    dfa177_eof,	    /* EOF table			    */
	    dfa177_min,	    /* Minimum tokens for each state    */
	    dfa177_max,	    /* Maximum tokens for each state    */
	    dfa177_accept,	/* Accept table			    */
	    dfa177_special,	/* Special transition states	    */
	    dfa177_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 177
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    414:8: ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )?
 */
static const ANTLR3_INT32 dfa183_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa183_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa183_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa183_max[4] =
    {
	205, 205, -1, -1
    };
static const ANTLR3_INT32 dfa183_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa183_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa183_T_empty	    NULL

static const ANTLR3_INT32 dfa183_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 3, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 
	-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa183_transitions[] =
{
    dfa183_T0, dfa183_T0, dfa183_T_empty, dfa183_T_empty	
};


/* Declare tracking structure for Cyclic DFA 183
 */
static
ANTLR3_CYCLIC_DFA cdfa183
    =	{
	    183,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"414:8: ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa183_eot,	    /* EOT table			    */
	    dfa183_eof,	    /* EOF table			    */
	    dfa183_min,	    /* Minimum tokens for each state    */
	    dfa183_max,	    /* Maximum tokens for each state    */
	    dfa183_accept,	/* Accept table			    */
	    dfa183_special,	/* Special transition states	    */
	    dfa183_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 183
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 414:39: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
 */
static const ANTLR3_INT32 dfa182_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa182_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa182_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa182_max[4] =
    {
	129, 129, -1, -1
    };
static const ANTLR3_INT32 dfa182_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa182_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa182_T_empty	    NULL

static const ANTLR3_INT32 dfa182_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa182_transitions[] =
{
    dfa182_T0, dfa182_T0, dfa182_T_empty, dfa182_T_empty	
};


/* Declare tracking structure for Cyclic DFA 182
 */
static
ANTLR3_CYCLIC_DFA cdfa182
    =	{
	    182,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 414:39: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa182_eot,	    /* EOT table			    */
	    dfa182_eof,	    /* EOF table			    */
	    dfa182_min,	    /* Minimum tokens for each state    */
	    dfa182_max,	    /* Maximum tokens for each state    */
	    dfa182_accept,	/* Accept table			    */
	    dfa182_special,	/* Special transition states	    */
	    dfa182_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 182
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    432:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
 */
static const ANTLR3_INT32 dfa193_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa193_eof[5] =
    {
	3, 3, -1, -1, 3
    };
static const ANTLR3_INT32 dfa193_min[5] =
    {
	99, 99, -1, -1, 99
    };
static const ANTLR3_INT32 dfa193_max[5] =
    {
	171, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa193_accept[5] =
    {
	-1, -1, 1, 2, -1
    };
static const ANTLR3_INT32 dfa193_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa193_T_empty	    NULL

static const ANTLR3_INT32 dfa193_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, 3, -1, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };static const ANTLR3_INT32 dfa193_T1[] =
    {
	4, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 
	3, 3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, -1, 3, 3, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa193_transitions[] =
{
    dfa193_T0, dfa193_T1, dfa193_T_empty, dfa193_T_empty, dfa193_T1	
};


/* Declare tracking structure for Cyclic DFA 193
 */
static
ANTLR3_CYCLIC_DFA cdfa193
    =	{
	    193,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"432:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa193_eot,	    /* EOT table			    */
	    dfa193_eof,	    /* EOF table			    */
	    dfa193_min,	    /* Minimum tokens for each state    */
	    dfa193_max,	    /* Maximum tokens for each state    */
	    dfa193_accept,	/* Accept table			    */
	    dfa193_special,	/* Special transition states	    */
	    dfa193_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 193
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    436:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
 */
static const ANTLR3_INT32 dfa198_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa198_eof[4] =
    {
	3, -1, -1, -1
    };
static const ANTLR3_INT32 dfa198_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa198_max[4] =
    {
	171, 171, -1, -1
    };
static const ANTLR3_INT32 dfa198_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa198_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa198_T_empty	    NULL

static const ANTLR3_INT32 dfa198_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 3, -1, -1, 
	-1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa198_transitions[] =
{
    dfa198_T0, dfa198_T0, dfa198_T_empty, dfa198_T_empty	
};


/* Declare tracking structure for Cyclic DFA 198
 */
static
ANTLR3_CYCLIC_DFA cdfa198
    =	{
	    198,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"436:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa198_eot,	    /* EOT table			    */
	    dfa198_eof,	    /* EOF table			    */
	    dfa198_min,	    /* Minimum tokens for each state    */
	    dfa198_max,	    /* Maximum tokens for each state    */
	    dfa198_accept,	/* Accept table			    */
	    dfa198_special,	/* Special transition states	    */
	    dfa198_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 198
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 441:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
 */
static const ANTLR3_INT32 dfa201_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa201_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa201_min[5] =
    {
	99, 99, -1, -1, 99
    };
static const ANTLR3_INT32 dfa201_max[5] =
    {
	172, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa201_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa201_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa201_T_empty	    NULL

static const ANTLR3_INT32 dfa201_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3
    };static const ANTLR3_INT32 dfa201_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa201_transitions[] =
{
    dfa201_T0, dfa201_T1, dfa201_T_empty, dfa201_T_empty, dfa201_T1	
};


/* Declare tracking structure for Cyclic DFA 201
 */
static
ANTLR3_CYCLIC_DFA cdfa201
    =	{
	    201,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 441:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa201_eot,	    /* EOT table			    */
	    dfa201_eof,	    /* EOF table			    */
	    dfa201_min,	    /* Minimum tokens for each state    */
	    dfa201_max,	    /* Maximum tokens for each state    */
	    dfa201_accept,	/* Accept table			    */
	    dfa201_special,	/* Special transition states	    */
	    dfa201_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 201
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 445:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
 */
static const ANTLR3_INT32 dfa204_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa204_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa204_min[5] =
    {
	99, 99, -1, -1, 99
    };
static const ANTLR3_INT32 dfa204_max[5] =
    {
	173, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa204_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa204_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa204_T_empty	    NULL

static const ANTLR3_INT32 dfa204_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa204_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa204_transitions[] =
{
    dfa204_T1, dfa204_T0, dfa204_T_empty, dfa204_T_empty, dfa204_T0	
};


/* Declare tracking structure for Cyclic DFA 204
 */
static
ANTLR3_CYCLIC_DFA cdfa204
    =	{
	    204,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 445:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa204_eot,	    /* EOT table			    */
	    dfa204_eof,	    /* EOF table			    */
	    dfa204_min,	    /* Minimum tokens for each state    */
	    dfa204_max,	    /* Maximum tokens for each state    */
	    dfa204_accept,	/* Accept table			    */
	    dfa204_special,	/* Special transition states	    */
	    dfa204_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 204
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 449:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa207_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa207_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa207_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa207_max[4] =
    {
	172, 172, -1, -1
    };
static const ANTLR3_INT32 dfa207_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa207_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa207_T_empty	    NULL

static const ANTLR3_INT32 dfa207_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa207_transitions[] =
{
    dfa207_T0, dfa207_T0, dfa207_T_empty, dfa207_T_empty	
};


/* Declare tracking structure for Cyclic DFA 207
 */
static
ANTLR3_CYCLIC_DFA cdfa207
    =	{
	    207,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 449:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa207_eot,	    /* EOT table			    */
	    dfa207_eof,	    /* EOF table			    */
	    dfa207_min,	    /* Minimum tokens for each state    */
	    dfa207_max,	    /* Maximum tokens for each state    */
	    dfa207_accept,	/* Accept table			    */
	    dfa207_special,	/* Special transition states	    */
	    dfa207_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 207
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 454:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa210_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa210_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa210_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa210_max[4] =
    {
	173, 173, -1, -1
    };
static const ANTLR3_INT32 dfa210_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa210_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa210_T_empty	    NULL

static const ANTLR3_INT32 dfa210_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa210_transitions[] =
{
    dfa210_T0, dfa210_T0, dfa210_T_empty, dfa210_T_empty	
};


/* Declare tracking structure for Cyclic DFA 210
 */
static
ANTLR3_CYCLIC_DFA cdfa210
    =	{
	    210,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 454:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa210_eot,	    /* EOT table			    */
	    dfa210_eof,	    /* EOF table			    */
	    dfa210_min,	    /* Minimum tokens for each state    */
	    dfa210_max,	    /* Maximum tokens for each state    */
	    dfa210_accept,	/* Accept table			    */
	    dfa210_special,	/* Special transition states	    */
	    dfa210_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 210
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 458:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
 */
static const ANTLR3_INT32 dfa213_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa213_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa213_min[5] =
    {
	99, 99, -1, -1, 99
    };
static const ANTLR3_INT32 dfa213_max[5] =
    {
	174, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa213_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa213_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa213_T_empty	    NULL

static const ANTLR3_INT32 dfa213_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 3, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa213_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa213_transitions[] =
{
    dfa213_T1, dfa213_T0, dfa213_T_empty, dfa213_T_empty, dfa213_T0	
};


/* Declare tracking structure for Cyclic DFA 213
 */
static
ANTLR3_CYCLIC_DFA cdfa213
    =	{
	    213,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 458:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa213_eot,	    /* EOT table			    */
	    dfa213_eof,	    /* EOF table			    */
	    dfa213_min,	    /* Minimum tokens for each state    */
	    dfa213_max,	    /* Maximum tokens for each state    */
	    dfa213_accept,	/* Accept table			    */
	    dfa213_special,	/* Special transition states	    */
	    dfa213_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 213
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 462:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa216_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa216_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa216_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa216_max[4] =
    {
	174, 174, -1, -1
    };
static const ANTLR3_INT32 dfa216_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa216_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa216_T_empty	    NULL

static const ANTLR3_INT32 dfa216_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa216_transitions[] =
{
    dfa216_T0, dfa216_T0, dfa216_T_empty, dfa216_T_empty	
};


/* Declare tracking structure for Cyclic DFA 216
 */
static
ANTLR3_CYCLIC_DFA cdfa216
    =	{
	    216,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 462:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa216_eot,	    /* EOT table			    */
	    dfa216_eof,	    /* EOF table			    */
	    dfa216_min,	    /* Minimum tokens for each state    */
	    dfa216_max,	    /* Maximum tokens for each state    */
	    dfa216_accept,	/* Accept table			    */
	    dfa216_special,	/* Special transition states	    */
	    dfa216_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 216
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 466:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
 */
static const ANTLR3_INT32 dfa219_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa219_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa219_min[5] =
    {
	99, 99, -1, -1, 99
    };
static const ANTLR3_INT32 dfa219_max[5] =
    {
	175, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa219_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa219_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa219_T_empty	    NULL

static const ANTLR3_INT32 dfa219_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa219_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa219_transitions[] =
{
    dfa219_T1, dfa219_T0, dfa219_T_empty, dfa219_T_empty, dfa219_T0	
};


/* Declare tracking structure for Cyclic DFA 219
 */
static
ANTLR3_CYCLIC_DFA cdfa219
    =	{
	    219,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 466:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa219_eot,	    /* EOT table			    */
	    dfa219_eof,	    /* EOF table			    */
	    dfa219_min,	    /* Minimum tokens for each state    */
	    dfa219_max,	    /* Maximum tokens for each state    */
	    dfa219_accept,	/* Accept table			    */
	    dfa219_special,	/* Special transition states	    */
	    dfa219_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 219
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 470:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa222_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa222_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa222_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa222_max[4] =
    {
	175, 175, -1, -1
    };
static const ANTLR3_INT32 dfa222_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa222_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa222_T_empty	    NULL

static const ANTLR3_INT32 dfa222_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa222_transitions[] =
{
    dfa222_T0, dfa222_T0, dfa222_T_empty, dfa222_T_empty	
};


/* Declare tracking structure for Cyclic DFA 222
 */
static
ANTLR3_CYCLIC_DFA cdfa222
    =	{
	    222,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 470:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa222_eot,	    /* EOT table			    */
	    dfa222_eof,	    /* EOF table			    */
	    dfa222_min,	    /* Minimum tokens for each state    */
	    dfa222_max,	    /* Maximum tokens for each state    */
	    dfa222_accept,	/* Accept table			    */
	    dfa222_special,	/* Special transition states	    */
	    dfa222_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 222
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 474:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
 */
static const ANTLR3_INT32 dfa225_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa225_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa225_min[5] =
    {
	99, 99, -1, -1, 99
    };
static const ANTLR3_INT32 dfa225_max[5] =
    {
	176, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa225_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa225_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa225_T_empty	    NULL

static const ANTLR3_INT32 dfa225_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa225_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa225_transitions[] =
{
    dfa225_T1, dfa225_T0, dfa225_T_empty, dfa225_T_empty, dfa225_T0	
};


/* Declare tracking structure for Cyclic DFA 225
 */
static
ANTLR3_CYCLIC_DFA cdfa225
    =	{
	    225,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 474:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa225_eot,	    /* EOT table			    */
	    dfa225_eof,	    /* EOF table			    */
	    dfa225_min,	    /* Minimum tokens for each state    */
	    dfa225_max,	    /* Maximum tokens for each state    */
	    dfa225_accept,	/* Accept table			    */
	    dfa225_special,	/* Special transition states	    */
	    dfa225_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 225
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 478:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa228_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa228_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa228_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa228_max[4] =
    {
	176, 176, -1, -1
    };
static const ANTLR3_INT32 dfa228_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa228_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa228_T_empty	    NULL

static const ANTLR3_INT32 dfa228_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa228_transitions[] =
{
    dfa228_T0, dfa228_T0, dfa228_T_empty, dfa228_T_empty	
};


/* Declare tracking structure for Cyclic DFA 228
 */
static
ANTLR3_CYCLIC_DFA cdfa228
    =	{
	    228,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 478:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa228_eot,	    /* EOT table			    */
	    dfa228_eof,	    /* EOF table			    */
	    dfa228_min,	    /* Minimum tokens for each state    */
	    dfa228_max,	    /* Maximum tokens for each state    */
	    dfa228_accept,	/* Accept table			    */
	    dfa228_special,	/* Special transition states	    */
	    dfa228_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 228
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 482:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
 */
static const ANTLR3_INT32 dfa231_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa231_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa231_min[5] =
    {
	99, 99, -1, -1, 99
    };
static const ANTLR3_INT32 dfa231_max[5] =
    {
	180, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa231_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa231_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa231_T_empty	    NULL

static const ANTLR3_INT32 dfa231_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };static const ANTLR3_INT32 dfa231_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	2, 2, 2, 2, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa231_transitions[] =
{
    dfa231_T1, dfa231_T0, dfa231_T_empty, dfa231_T_empty, dfa231_T0	
};


/* Declare tracking structure for Cyclic DFA 231
 */
static
ANTLR3_CYCLIC_DFA cdfa231
    =	{
	    231,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 482:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa231_eot,	    /* EOT table			    */
	    dfa231_eof,	    /* EOF table			    */
	    dfa231_min,	    /* Minimum tokens for each state    */
	    dfa231_max,	    /* Maximum tokens for each state    */
	    dfa231_accept,	/* Accept table			    */
	    dfa231_special,	/* Special transition states	    */
	    dfa231_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 231
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 493:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa235_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa235_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa235_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa235_max[4] =
    {
	180, 180, -1, -1
    };
static const ANTLR3_INT32 dfa235_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa235_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa235_T_empty	    NULL

static const ANTLR3_INT32 dfa235_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa235_transitions[] =
{
    dfa235_T0, dfa235_T0, dfa235_T_empty, dfa235_T_empty	
};


/* Declare tracking structure for Cyclic DFA 235
 */
static
ANTLR3_CYCLIC_DFA cdfa235
    =	{
	    235,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 493:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa235_eot,	    /* EOT table			    */
	    dfa235_eof,	    /* EOF table			    */
	    dfa235_min,	    /* Minimum tokens for each state    */
	    dfa235_max,	    /* Maximum tokens for each state    */
	    dfa235_accept,	/* Accept table			    */
	    dfa235_special,	/* Special transition states	    */
	    dfa235_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 235
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 507:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*
 */
static const ANTLR3_INT32 dfa239_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa239_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa239_min[5] =
    {
	99, 99, -1, -1, 99
    };
static const ANTLR3_INT32 dfa239_max[5] =
    {
	185, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa239_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa239_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa239_T_empty	    NULL

static const ANTLR3_INT32 dfa239_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 
	3, 3, 3, 3, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2
    };static const ANTLR3_INT32 dfa239_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa239_transitions[] =
{
    dfa239_T1, dfa239_T0, dfa239_T_empty, dfa239_T_empty, dfa239_T0	
};


/* Declare tracking structure for Cyclic DFA 239
 */
static
ANTLR3_CYCLIC_DFA cdfa239
    =	{
	    239,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 507:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa239_eot,	    /* EOT table			    */
	    dfa239_eof,	    /* EOF table			    */
	    dfa239_min,	    /* Minimum tokens for each state    */
	    dfa239_max,	    /* Maximum tokens for each state    */
	    dfa239_accept,	/* Accept table			    */
	    dfa239_special,	/* Special transition states	    */
	    dfa239_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 239
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 519:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*
 */
static const ANTLR3_INT32 dfa243_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa243_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa243_min[4] =
    {
	99, 99, -1, -1
    };
static const ANTLR3_INT32 dfa243_max[4] =
    {
	185, 185, -1, -1
    };
static const ANTLR3_INT32 dfa243_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa243_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa243_T_empty	    NULL

static const ANTLR3_INT32 dfa243_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa243_transitions[] =
{
    dfa243_T0, dfa243_T0, dfa243_T_empty, dfa243_T_empty	
};


/* Declare tracking structure for Cyclic DFA 243
 */
static
ANTLR3_CYCLIC_DFA cdfa243
    =	{
	    243,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 519:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa243_eot,	    /* EOT table			    */
	    dfa243_eof,	    /* EOF table			    */
	    dfa243_min,	    /* Minimum tokens for each state    */
	    dfa243_max,	    /* Maximum tokens for each state    */
	    dfa243_accept,	/* Accept table			    */
	    dfa243_special,	/* Special transition states	    */
	    dfa243_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 243
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 529:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*
 */
static const ANTLR3_INT32 dfa247_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa247_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa247_min[5] =
    {
	99, 99, -1, -1, 99
    };
static const ANTLR3_INT32 dfa247_max[5] =
    {
	188, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa247_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa247_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa247_T_empty	    NULL

static const ANTLR3_INT32 dfa247_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 3, 3, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2
    };static const ANTLR3_INT32 dfa247_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa247_transitions[] =
{
    dfa247_T1, dfa247_T0, dfa247_T_empty, dfa247_T_empty, dfa247_T0	
};


/* Declare tracking structure for Cyclic DFA 247
 */
static
ANTLR3_CYCLIC_DFA cdfa247
    =	{
	    247,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 529:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa247_eot,	    /* EOT table			    */
	    dfa247_eof,	    /* EOF table			    */
	    dfa247_min,	    /* Minimum tokens for each state    */
	    dfa247_max,	    /* Maximum tokens for each state    */
	    dfa247_accept,	/* Accept table			    */
	    dfa247_special,	/* Special transition states	    */
	    dfa247_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 247
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 540:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
 */
static const ANTLR3_INT32 dfa251_eot[30] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa251_eof[30] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa251_min[30] =
    {
	99, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa251_max[30] =
    {
	190, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa251_accept[30] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1
    };
static const ANTLR3_INT32 dfa251_special[30] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa251_T_empty	    NULL

static const ANTLR3_INT32 dfa251_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 28, 28
    };static const ANTLR3_INT32 dfa251_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa251_transitions[] =
{
    dfa251_T0, dfa251_T1, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, 
    dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, 
    dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, 
    dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, 
    dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, 
    dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty, dfa251_T_empty	
};

static ANTLR3_INT32 dfa251_sst(pLexWhenPredParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA251_1;

    	    ANTLR3_MARKER index251_1;


    		LA251_1 = LA(1);

    	 
    	    index251_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred295_LexWhenPred(ctx)) )
    	    {
    	        s = 28;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index251_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 540:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*";
    EXCEPTION->decisionNum  = 251;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 251
 */
static
ANTLR3_CYCLIC_DFA cdfa251
    =	{
	    251,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 540:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa251_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa251_eot,	    /* EOT table			    */
	    dfa251_eof,	    /* EOF table			    */
	    dfa251_min,	    /* Minimum tokens for each state    */
	    dfa251_max,	    /* Maximum tokens for each state    */
	    dfa251_accept,	/* Accept table			    */
	    dfa251_special,	/* Special transition states	    */
	    dfa251_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 251
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 550:41: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
 */
static const ANTLR3_INT32 dfa255_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa255_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa255_min[5] =
    {
	99, 99, -1, -1, 99
    };
static const ANTLR3_INT32 dfa255_max[5] =
    {
	193, 205, -1, -1, 205
    };
static const ANTLR3_INT32 dfa255_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa255_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa255_T_empty	    NULL

static const ANTLR3_INT32 dfa255_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa255_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa255_transitions[] =
{
    dfa255_T1, dfa255_T0, dfa255_T_empty, dfa255_T_empty, dfa255_T0	
};


/* Declare tracking structure for Cyclic DFA 255
 */
static
ANTLR3_CYCLIC_DFA cdfa255
    =	{
	    255,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 550:41: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa255_eot,	    /* EOT table			    */
	    dfa255_eof,	    /* EOF table			    */
	    dfa255_min,	    /* Minimum tokens for each state    */
	    dfa255_max,	    /* Maximum tokens for each state    */
	    dfa255_accept,	/* Accept table			    */
	    dfa255_special,	/* Special transition states	    */
	    dfa255_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 255
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * .//LexWhenPred.g:130:1: program : (a= LTERM )* sourceElements ( LTERM )* EOF -> ^( PROG sourceElements ) ;
 */
static LexWhenPredParser_program_return
program(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_program_return retval;
    ANTLR3_UINT32 program_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    a;
    pANTLR3_COMMON_TOKEN    LTERM2;
    pANTLR3_COMMON_TOKEN    EOF3;
    LexWhenPredParser_sourceElements_return sourceElements1;
    #undef	RETURN_TYPE_sourceElements1
    #define	RETURN_TYPE_sourceElements1 LexWhenPredParser_sourceElements_return

    pANTLR3_BASE_TREE a_tree;
    pANTLR3_BASE_TREE LTERM2_tree;
    pANTLR3_BASE_TREE EOF3_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    program_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(1)) )
    {
    	retval.start = 0;

        return retval; 
    }
    a       = NULL;
    LTERM2       = NULL;
    EOF3       = NULL;
    sourceElements1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    a_tree   = NULL;
    LTERM2_tree   = NULL;
    EOF3_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:131:2: ( (a= LTERM )* sourceElements ( LTERM )* EOF -> ^( PROG sourceElements ) )
        // .//LexWhenPred.g:131:4: (a= LTERM )* sourceElements ( LTERM )* EOF
        {

            // .//LexWhenPred.g:131:5: (a= LTERM )*

            for (;;)
            {
                int alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA1_0 = LA(1);
                    if ( (LA1_0 == LTERM) ) 
                    {
                        alt1=1;
                    }

                }
                switch (alt1) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: a= LTERM
            	    {
            	        a = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program786); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, a, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_sourceElements_in_program789);
            sourceElements1=sourceElements(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements1.tree, NULL); }

            // .//LexWhenPred.g:131:28: ( LTERM )*

            for (;;)
            {
                int alt2=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA2_0 = LA(1);
                    if ( (LA2_0 == LTERM) ) 
                    {
                        alt2=1;
                    }

                }
                switch (alt2) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM2 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program791); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM2, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */

            EOF3 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_program794); 
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF3, NULL); }


             
            /* AST REWRITE
             * elements          : sourceElements
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 131:39: -> ^( PROG sourceElements )
            	{
            	    // .//LexWhenPred.g:131:42: ^( PROG sourceElements )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PROG, (pANTLR3_UINT8)"PROG"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(1, program_StartIndex); }
    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start sourceElements
 * .//LexWhenPred.g:135:1: sourceElements : sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ ;
 */
static LexWhenPredParser_sourceElements_return
sourceElements(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_sourceElements_return retval;
    ANTLR3_UINT32 sourceElements_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM5;
    LexWhenPredParser_sourceElement_return sourceElement4;
    #undef	RETURN_TYPE_sourceElement4
    #define	RETURN_TYPE_sourceElement4 LexWhenPredParser_sourceElement_return

    LexWhenPredParser_sourceElement_return sourceElement6;
    #undef	RETURN_TYPE_sourceElement6
    #define	RETURN_TYPE_sourceElement6 LexWhenPredParser_sourceElement_return

    pANTLR3_BASE_TREE LTERM5_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElement;
    /* Initialize rule variables
     */
    sourceElements_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(2)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM5       = NULL;
    sourceElement4.tree = NULL;

    sourceElement6.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM5_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_sourceElement   = NULL;
    #define CREATE_stream_sourceElement  if (stream_sourceElement == NULL) {stream_sourceElement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElement"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:136:2: ( sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ )
        // .//LexWhenPred.g:136:4: sourceElement ( ( LTERM )* sourceElement )*
        {
            FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements815);
            sourceElement4=sourceElement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceElementsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement4.tree, NULL); }

            // .//LexWhenPred.g:136:18: ( ( LTERM )* sourceElement )*

            for (;;)
            {
                int alt4=2;
                alt4 = cdfa4.predict(ctx, RECOGNIZER, ISTREAM, &cdfa4);
                if  (HASEXCEPTION())
                {
                    goto rulesourceElementsEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt4) 
                {
            	case 1:
            	    // .//LexWhenPred.g:136:19: ( LTERM )* sourceElement
            	    {

            	        // .//LexWhenPred.g:136:19: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt3=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA3_0 = LA(1);
            	                if ( (LA3_0 == LTERM) ) 
            	                {
            	                    alt3=1;
            	                }

            	            }
            	            switch (alt3) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM5 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_sourceElements818); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesourceElementsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM5, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop3;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop3: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements821);
            	        sourceElement6=sourceElement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceElementsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement6.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : sourceElement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 136:42: -> ( sourceElement )+
            	{
            	    if ((stream_sourceElement == NULL || !stream_sourceElement->hasNext(stream_sourceElement))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_sourceElement->hasNext(stream_sourceElement))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElement == NULL ? NULL : stream_sourceElement->nextTree(stream_sourceElement));

            	    	}
            	    	stream_sourceElement->reset(stream_sourceElement);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementsEx; /* Prevent compiler warnings */
    rulesourceElementsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_sourceElement != NULL) stream_sourceElement->free(stream_sourceElement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(2, sourceElements_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElements */

/** 
 * $ANTLR start sourceElement
 * .//LexWhenPred.g:139:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static LexWhenPredParser_sourceElement_return
sourceElement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_sourceElement_return retval;
    ANTLR3_UINT32 sourceElement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    LexWhenPredParser_functionDeclaration_return functionDeclaration7;
    #undef	RETURN_TYPE_functionDeclaration7
    #define	RETURN_TYPE_functionDeclaration7 LexWhenPredParser_functionDeclaration_return

    LexWhenPredParser_statement_return statement8;
    #undef	RETURN_TYPE_statement8
    #define	RETURN_TYPE_statement8 LexWhenPredParser_statement_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionDeclaration;
    /* Initialize rule variables
     */
    sourceElement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(3)) )
    {
    	retval.start = 0;

        return retval; 
    }
    functionDeclaration7.tree = NULL;

    statement8.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_functionDeclaration   = NULL;
    #define CREATE_stream_functionDeclaration  if (stream_functionDeclaration == NULL) {stream_functionDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionDeclaration"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:140:2: ( functionDeclaration -> functionDeclaration | statement -> statement )
            
            ANTLR3_UINT32 alt5;

            alt5=2;

            alt5 = cdfa5.predict(ctx, RECOGNIZER, ISTREAM, &cdfa5);
            if  (HASEXCEPTION())
            {
                goto rulesourceElementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt5) 
            {
        	case 1:
        	    // .//LexWhenPred.g:140:4: functionDeclaration
        	    {
        	        FOLLOWPUSH(FOLLOW_functionDeclaration_in_sourceElement842);
        	        functionDeclaration7=functionDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_functionDeclaration; stream_functionDeclaration->add(stream_functionDeclaration, functionDeclaration7.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : functionDeclaration
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 140:24: -> functionDeclaration
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionDeclaration == NULL ? NULL : stream_functionDeclaration->nextTree(stream_functionDeclaration));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:141:4: statement
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_sourceElement851);
        	        statement8=statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement8.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : statement
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 141:14: -> statement
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementEx; /* Prevent compiler warnings */
    rulesourceElementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_functionDeclaration != NULL) stream_functionDeclaration->free(stream_functionDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(3, sourceElement_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElement */

/** 
 * $ANTLR start functionDeclaration
 * .//LexWhenPred.g:145:1: functionDeclaration : 'function' ( LTERM )* Identifier ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_DECL Identifier formalParameterList functionBody ) ;
 */
static LexWhenPredParser_functionDeclaration_return
functionDeclaration(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_functionDeclaration_return retval;
    ANTLR3_UINT32 functionDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal9;
    pANTLR3_COMMON_TOKEN    LTERM10;
    pANTLR3_COMMON_TOKEN    Identifier11;
    pANTLR3_COMMON_TOKEN    LTERM12;
    pANTLR3_COMMON_TOKEN    LTERM14;
    LexWhenPredParser_formalParameterList_return formalParameterList13;
    #undef	RETURN_TYPE_formalParameterList13
    #define	RETURN_TYPE_formalParameterList13 LexWhenPredParser_formalParameterList_return

    LexWhenPredParser_functionBody_return functionBody15;
    #undef	RETURN_TYPE_functionBody15
    #define	RETURN_TYPE_functionBody15 LexWhenPredParser_functionBody_return

    pANTLR3_BASE_TREE string_literal9_tree;
    pANTLR3_BASE_TREE LTERM10_tree;
    pANTLR3_BASE_TREE Identifier11_tree;
    pANTLR3_BASE_TREE LTERM12_tree;
    pANTLR3_BASE_TREE LTERM14_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(4)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal9       = NULL;
    LTERM10       = NULL;
    Identifier11       = NULL;
    LTERM12       = NULL;
    LTERM14       = NULL;
    formalParameterList13.tree = NULL;

    functionBody15.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal9_tree   = NULL;
    LTERM10_tree   = NULL;
    Identifier11_tree   = NULL;
    LTERM12_tree   = NULL;
    LTERM14_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:146:2: ( 'function' ( LTERM )* Identifier ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_DECL Identifier formalParameterList functionBody ) )
        // .//LexWhenPred.g:146:4: 'function' ( LTERM )* Identifier ( LTERM )* formalParameterList ( LTERM )* functionBody
        {
            string_literal9 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_functionDeclaration868); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, string_literal9, NULL); }


            // .//LexWhenPred.g:146:15: ( LTERM )*

            for (;;)
            {
                int alt6=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA6_0 = LA(1);
                    if ( (LA6_0 == LTERM) ) 
                    {
                        alt6=1;
                    }

                }
                switch (alt6) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM10 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration870); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM10, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop6;	/* break out of the loop */
            	    break;
                }
            }
            loop6: ; /* Jump out to here if this rule does not match */

            Identifier11 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionDeclaration873); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier11, NULL); }


            // .//LexWhenPred.g:146:33: ( LTERM )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == LTERM) ) 
                    {
                        alt7=1;
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM12 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration875); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM12, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_formalParameterList_in_functionDeclaration878);
            formalParameterList13=formalParameterList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList13.tree, NULL); }

            // .//LexWhenPred.g:146:60: ( LTERM )*

            for (;;)
            {
                int alt8=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == LTERM) ) 
                    {
                        alt8=1;
                    }

                }
                switch (alt8) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM14 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration880); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM14, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionDeclaration883);
            functionBody15=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody15.tree, NULL); }

             
            /* AST REWRITE
             * elements          : formalParameterList, Identifier, functionBody
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 146:80: -> ^( FUNC_DECL Identifier formalParameterList functionBody )
            	{
            	    // .//LexWhenPred.g:146:83: ^( FUNC_DECL Identifier formalParameterList functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_DECL, (pANTLR3_UINT8)"FUNC_DECL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionDeclarationEx; /* Prevent compiler warnings */
    rulefunctionDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(4, functionDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end functionDeclaration */

/** 
 * $ANTLR start functionExpression
 * .//LexWhenPred.g:149:1: functionExpression : 'function' ( LTERM )* ( Identifier )? ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody ) ;
 */
static LexWhenPredParser_functionExpression_return
functionExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_functionExpression_return retval;
    ANTLR3_UINT32 functionExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal16;
    pANTLR3_COMMON_TOKEN    LTERM17;
    pANTLR3_COMMON_TOKEN    Identifier18;
    pANTLR3_COMMON_TOKEN    LTERM19;
    pANTLR3_COMMON_TOKEN    LTERM21;
    LexWhenPredParser_formalParameterList_return formalParameterList20;
    #undef	RETURN_TYPE_formalParameterList20
    #define	RETURN_TYPE_formalParameterList20 LexWhenPredParser_formalParameterList_return

    LexWhenPredParser_functionBody_return functionBody22;
    #undef	RETURN_TYPE_functionBody22
    #define	RETURN_TYPE_functionBody22 LexWhenPredParser_functionBody_return

    pANTLR3_BASE_TREE string_literal16_tree;
    pANTLR3_BASE_TREE LTERM17_tree;
    pANTLR3_BASE_TREE Identifier18_tree;
    pANTLR3_BASE_TREE LTERM19_tree;
    pANTLR3_BASE_TREE LTERM21_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(5)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal16       = NULL;
    LTERM17       = NULL;
    Identifier18       = NULL;
    LTERM19       = NULL;
    LTERM21       = NULL;
    formalParameterList20.tree = NULL;

    functionBody22.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal16_tree   = NULL;
    LTERM17_tree   = NULL;
    Identifier18_tree   = NULL;
    LTERM19_tree   = NULL;
    LTERM21_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:150:2: ( 'function' ( LTERM )* ( Identifier )? ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody ) )
        // .//LexWhenPred.g:150:4: 'function' ( LTERM )* ( Identifier )? ( LTERM )* formalParameterList ( LTERM )* functionBody
        {
            string_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_functionExpression907); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, string_literal16, NULL); }


            // .//LexWhenPred.g:150:15: ( LTERM )*

            for (;;)
            {
                int alt9=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA9_0 = LA(1);
                    if ( (LA9_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA9_2 = LA(2);
                            if ( (synpred9_LexWhenPred(ctx)) ) 
                            {
                                alt9=1;
                            }

                        }
                    }

                }
                switch (alt9) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM17 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression909); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM17, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */


            // .//LexWhenPred.g:150:22: ( Identifier )?
            {
                int alt10=2;
                {
                    int LA10_0 = LA(1);
                    if ( (LA10_0 == Identifier) ) 
                    {
                        alt10=1;
                    }
                }
                switch (alt10) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: Identifier
            	    {
            	        Identifier18 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionExpression912); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier18, NULL); }


            	    }
            	    break;

                }
            }

            // .//LexWhenPred.g:150:34: ( LTERM )*

            for (;;)
            {
                int alt11=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA11_0 = LA(1);
                    if ( (LA11_0 == LTERM) ) 
                    {
                        alt11=1;
                    }

                }
                switch (alt11) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM19 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression915); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM19, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_formalParameterList_in_functionExpression918);
            formalParameterList20=formalParameterList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList20.tree, NULL); }

            // .//LexWhenPred.g:150:61: ( LTERM )*

            for (;;)
            {
                int alt12=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA12_0 = LA(1);
                    if ( (LA12_0 == LTERM) ) 
                    {
                        alt12=1;
                    }

                }
                switch (alt12) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM21 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression920); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM21, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionExpression923);
            functionBody22=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody22.tree, NULL); }

             
            /* AST REWRITE
             * elements          : formalParameterList, functionBody, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 150:81: -> ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody )
            	{
            	    // .//LexWhenPred.g:150:84: ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_EXPR, (pANTLR3_UINT8)"FUNC_EXPR"), root_1));

            	        // .//LexWhenPred.g:150:97: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionExpressionEx; /* Prevent compiler warnings */
    rulefunctionExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(5, functionExpression_StartIndex); }
    return retval;
}
/* $ANTLR end functionExpression */

/** 
 * $ANTLR start formalParameterList
 * .//LexWhenPred.g:153:1: formalParameterList : '(' ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )? ( LTERM )* ')' -> ^( FUNC_PARAMS ( $i1)? ( $i2)* ) ;
 */
static LexWhenPredParser_formalParameterList_return
formalParameterList(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_formalParameterList_return retval;
    ANTLR3_UINT32 formalParameterList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    i1;
    pANTLR3_COMMON_TOKEN    i2;
    pANTLR3_COMMON_TOKEN    char_literal23;
    pANTLR3_COMMON_TOKEN    LTERM24;
    pANTLR3_COMMON_TOKEN    LTERM25;
    pANTLR3_COMMON_TOKEN    char_literal26;
    pANTLR3_COMMON_TOKEN    LTERM27;
    pANTLR3_COMMON_TOKEN    LTERM28;
    pANTLR3_COMMON_TOKEN    char_literal29;

    pANTLR3_BASE_TREE i1_tree;
    pANTLR3_BASE_TREE i2_tree;
    pANTLR3_BASE_TREE char_literal23_tree;
    pANTLR3_BASE_TREE LTERM24_tree;
    pANTLR3_BASE_TREE LTERM25_tree;
    pANTLR3_BASE_TREE char_literal26_tree;
    pANTLR3_BASE_TREE LTERM27_tree;
    pANTLR3_BASE_TREE LTERM28_tree;
    pANTLR3_BASE_TREE char_literal29_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;

    /* Initialize rule variables
     */
    formalParameterList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(6)) )
    {
    	retval.start = 0;

        return retval; 
    }
    i1       = NULL;
    i2       = NULL;
    char_literal23       = NULL;
    LTERM24       = NULL;
    LTERM25       = NULL;
    char_literal26       = NULL;
    LTERM27       = NULL;
    LTERM28       = NULL;
    char_literal29       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    i1_tree   = NULL;
    i2_tree   = NULL;
    char_literal23_tree   = NULL;
    LTERM24_tree   = NULL;
    LTERM25_tree   = NULL;
    char_literal26_tree   = NULL;
    LTERM27_tree   = NULL;
    LTERM28_tree   = NULL;
    char_literal29_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:154:2: ( '(' ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )? ( LTERM )* ')' -> ^( FUNC_PARAMS ( $i1)? ( $i2)* ) )
        // .//LexWhenPred.g:154:4: '(' ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )? ( LTERM )* ')'
        {
            char_literal23 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_formalParameterList950); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal23, NULL); }


            // .//LexWhenPred.g:154:8: ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )?
            {
                int alt17=2;
                alt17 = cdfa17.predict(ctx, RECOGNIZER, ISTREAM, &cdfa17);
                if  (HASEXCEPTION())
                {
                    goto ruleformalParameterListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt17) 
                {
            	case 1:
            	    // .//LexWhenPred.g:154:9: ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*
            	    {

            	        // .//LexWhenPred.g:154:9: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt13=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA13_0 = LA(1);
            	                if ( (LA13_0 == LTERM) ) 
            	                {
            	                    alt13=1;
            	                }

            	            }
            	            switch (alt13) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM24 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList953); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM24, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop13;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop13: ; /* Jump out to here if this rule does not match */

            	        i1 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList958); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, i1, NULL); }


            	        // .//LexWhenPred.g:154:30: ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*

            	        for (;;)
            	        {
            	            int alt16=2;
            	            alt16 = cdfa16.predict(ctx, RECOGNIZER, ISTREAM, &cdfa16);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleformalParameterListEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt16) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:154:31: ( LTERM )* ',' ( LTERM )* i2= Identifier
            	        	    {

            	        	        // .//LexWhenPred.g:154:31: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt14=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA14_0 = LA(1);
            	        	                if ( (LA14_0 == LTERM) ) 
            	        	                {
            	        	                    alt14=1;
            	        	                }

            	        	            }
            	        	            switch (alt14) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM25 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList961); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleformalParameterListEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM25, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop14;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop14: ; /* Jump out to here if this rule does not match */

            	        	        char_literal26 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_formalParameterList964); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal26, NULL); }


            	        	        // .//LexWhenPred.g:154:42: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt15=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA15_0 = LA(1);
            	        	                if ( (LA15_0 == LTERM) ) 
            	        	                {
            	        	                    alt15=1;
            	        	                }

            	        	            }
            	        	            switch (alt15) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM27 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList966); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleformalParameterListEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM27, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop15;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop15: ; /* Jump out to here if this rule does not match */

            	        	        i2 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList971); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, i2, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop16;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop16: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // .//LexWhenPred.g:154:67: ( LTERM )*

            for (;;)
            {
                int alt18=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA18_0 = LA(1);
                    if ( (LA18_0 == LTERM) ) 
                    {
                        alt18=1;
                    }

                }
                switch (alt18) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM28 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList977); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM28, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop18;	/* break out of the loop */
            	    break;
                }
            }
            loop18: ; /* Jump out to here if this rule does not match */

            char_literal29 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_formalParameterList980); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal29, NULL); }


             
            /* AST REWRITE
             * elements          : i2, i1
             * token labels      : i2, i1
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_i2;
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_i1;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_i2=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token i2", i2);
            	stream_i1=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token i1", i1);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 154:78: -> ^( FUNC_PARAMS ( $i1)? ( $i2)* )
            	{
            	    // .//LexWhenPred.g:154:81: ^( FUNC_PARAMS ( $i1)? ( $i2)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_PARAMS, (pANTLR3_UINT8)"FUNC_PARAMS"), root_1));

            	        // .//LexWhenPred.g:154:96: ( $i1)?
            	        {
            	        	if ( (stream_i1 != NULL && stream_i1->hasNext(stream_i1))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_i1 == NULL ? NULL : stream_i1->nextNode(stream_i1));

            	        	}
            	        	if ( stream_i1 != NULL) stream_i1->reset(stream_i1);

            	        }
            	        // .//LexWhenPred.g:154:101: ( $i2)*
            	        {
            	        	while ( (stream_i2 != NULL && stream_i2->hasNext(stream_i2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_i2 == NULL ? NULL : stream_i2->nextNode(stream_i2));

            	        	}
            	        	if (stream_i2 != NULL) stream_i2->reset(stream_i2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_i2 != NULL) stream_i2->free(stream_i2); 
            	if (stream_i1 != NULL) stream_i1->free(stream_i1); 
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalParameterListEx; /* Prevent compiler warnings */
    ruleformalParameterListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_129 != NULL) stream_129->free(stream_129);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(6, formalParameterList_StartIndex); }
    return retval;
}
/* $ANTLR end formalParameterList */

/** 
 * $ANTLR start functionBody
 * .//LexWhenPred.g:157:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static LexWhenPredParser_functionBody_return
functionBody(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_functionBody_return retval;
    ANTLR3_UINT32 functionBody_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal30;
    pANTLR3_COMMON_TOKEN    LTERM31;
    pANTLR3_COMMON_TOKEN    char_literal32;
    pANTLR3_COMMON_TOKEN    char_literal33;
    pANTLR3_COMMON_TOKEN    LTERM34;
    pANTLR3_COMMON_TOKEN    LTERM36;
    pANTLR3_COMMON_TOKEN    char_literal37;
    LexWhenPredParser_sourceElements_return sourceElements35;
    #undef	RETURN_TYPE_sourceElements35
    #define	RETURN_TYPE_sourceElements35 LexWhenPredParser_sourceElements_return

    pANTLR3_BASE_TREE char_literal30_tree;
    pANTLR3_BASE_TREE LTERM31_tree;
    pANTLR3_BASE_TREE char_literal32_tree;
    pANTLR3_BASE_TREE char_literal33_tree;
    pANTLR3_BASE_TREE LTERM34_tree;
    pANTLR3_BASE_TREE LTERM36_tree;
    pANTLR3_BASE_TREE char_literal37_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    functionBody_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(7)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal30       = NULL;
    LTERM31       = NULL;
    char_literal32       = NULL;
    char_literal33       = NULL;
    LTERM34       = NULL;
    LTERM36       = NULL;
    char_literal37       = NULL;
    sourceElements35.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal30_tree   = NULL;
    LTERM31_tree   = NULL;
    char_literal32_tree   = NULL;
    char_literal33_tree   = NULL;
    LTERM34_tree   = NULL;
    LTERM36_tree   = NULL;
    char_literal37_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:158:2: ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt22;

            alt22=2;

            alt22 = cdfa22.predict(ctx, RECOGNIZER, ISTREAM, &cdfa22);
            if  (HASEXCEPTION())
            {
                goto rulefunctionBodyEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt22) 
            {
        	case 1:
        	    // .//LexWhenPred.g:158:4: '{' ( LTERM )* '}'
        	    {
        	        char_literal30 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_functionBody1006); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal30, NULL); }


        	        // .//LexWhenPred.g:158:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt19=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA19_0 = LA(1);
        	                if ( (LA19_0 == LTERM) ) 
        	                {
        	                    alt19=1;
        	                }

        	            }
        	            switch (alt19) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM31 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1008); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM31, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop19;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop19: ; /* Jump out to here if this rule does not match */

        	        char_literal32 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_functionBody1011); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal32, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 158:19: -> ^( EMPTY_FUNC_BODY )
        	        	{
        	        	    // .//LexWhenPred.g:158:22: ^( EMPTY_FUNC_BODY )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EMPTY_FUNC_BODY, (pANTLR3_UINT8)"EMPTY_FUNC_BODY"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:159:4: '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}'
        	    {
        	        char_literal33 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_functionBody1022); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal33, NULL); }


        	        // .//LexWhenPred.g:159:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt20=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA20_0 = LA(1);
        	                if ( (LA20_0 == LTERM) ) 
        	                {
        	                    alt20=1;
        	                }

        	            }
        	            switch (alt20) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM34 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1024); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM34, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop20;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop20: ; /* Jump out to here if this rule does not match */

        	        // .//LexWhenPred.g:159:15: ( sourceElements -> sourceElements )
        	        // .//LexWhenPred.g:159:16: sourceElements
        	        {
        	            FOLLOWPUSH(FOLLOW_sourceElements_in_functionBody1028);
        	            sourceElements35=sourceElements(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulefunctionBodyEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements35.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : sourceElements
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 159:31: -> sourceElements
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//LexWhenPred.g:159:50: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt21=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA21_0 = LA(1);
        	                if ( (LA21_0 == LTERM) ) 
        	                {
        	                    alt21=1;
        	                }

        	            }
        	            switch (alt21) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM36 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1035); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM36, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop21;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop21: ; /* Jump out to here if this rule does not match */

        	        char_literal37 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_functionBody1038); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal37, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionBodyEx; /* Prevent compiler warnings */
    rulefunctionBodyEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(7, functionBody_StartIndex); }
    return retval;
}
/* $ANTLR end functionBody */

/** 
 * $ANTLR start statement
 * .//LexWhenPred.g:163:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement | msgSendStatement | msgRecvStatement );
 */
static LexWhenPredParser_statement_return
statement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_statement_return retval;
    ANTLR3_UINT32 statement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    LexWhenPredParser_statementBlock_return statementBlock38;
    #undef	RETURN_TYPE_statementBlock38
    #define	RETURN_TYPE_statementBlock38 LexWhenPredParser_statementBlock_return

    LexWhenPredParser_variableStatement_return variableStatement39;
    #undef	RETURN_TYPE_variableStatement39
    #define	RETURN_TYPE_variableStatement39 LexWhenPredParser_variableStatement_return

    LexWhenPredParser_emptyStatement_return emptyStatement40;
    #undef	RETURN_TYPE_emptyStatement40
    #define	RETURN_TYPE_emptyStatement40 LexWhenPredParser_emptyStatement_return

    LexWhenPredParser_expressionStatement_return expressionStatement41;
    #undef	RETURN_TYPE_expressionStatement41
    #define	RETURN_TYPE_expressionStatement41 LexWhenPredParser_expressionStatement_return

    LexWhenPredParser_ifStatement_return ifStatement42;
    #undef	RETURN_TYPE_ifStatement42
    #define	RETURN_TYPE_ifStatement42 LexWhenPredParser_ifStatement_return

    LexWhenPredParser_iterationStatement_return iterationStatement43;
    #undef	RETURN_TYPE_iterationStatement43
    #define	RETURN_TYPE_iterationStatement43 LexWhenPredParser_iterationStatement_return

    LexWhenPredParser_continueStatement_return continueStatement44;
    #undef	RETURN_TYPE_continueStatement44
    #define	RETURN_TYPE_continueStatement44 LexWhenPredParser_continueStatement_return

    LexWhenPredParser_breakStatement_return breakStatement45;
    #undef	RETURN_TYPE_breakStatement45
    #define	RETURN_TYPE_breakStatement45 LexWhenPredParser_breakStatement_return

    LexWhenPredParser_returnStatement_return returnStatement46;
    #undef	RETURN_TYPE_returnStatement46
    #define	RETURN_TYPE_returnStatement46 LexWhenPredParser_returnStatement_return

    LexWhenPredParser_withStatement_return withStatement47;
    #undef	RETURN_TYPE_withStatement47
    #define	RETURN_TYPE_withStatement47 LexWhenPredParser_withStatement_return

    LexWhenPredParser_labelledStatement_return labelledStatement48;
    #undef	RETURN_TYPE_labelledStatement48
    #define	RETURN_TYPE_labelledStatement48 LexWhenPredParser_labelledStatement_return

    LexWhenPredParser_switchStatement_return switchStatement49;
    #undef	RETURN_TYPE_switchStatement49
    #define	RETURN_TYPE_switchStatement49 LexWhenPredParser_switchStatement_return

    LexWhenPredParser_throwStatement_return throwStatement50;
    #undef	RETURN_TYPE_throwStatement50
    #define	RETURN_TYPE_throwStatement50 LexWhenPredParser_throwStatement_return

    LexWhenPredParser_whenStatement_return whenStatement51;
    #undef	RETURN_TYPE_whenStatement51
    #define	RETURN_TYPE_whenStatement51 LexWhenPredParser_whenStatement_return

    LexWhenPredParser_tryStatement_return tryStatement52;
    #undef	RETURN_TYPE_tryStatement52
    #define	RETURN_TYPE_tryStatement52 LexWhenPredParser_tryStatement_return

    LexWhenPredParser_msgSendStatement_return msgSendStatement53;
    #undef	RETURN_TYPE_msgSendStatement53
    #define	RETURN_TYPE_msgSendStatement53 LexWhenPredParser_msgSendStatement_return

    LexWhenPredParser_msgRecvStatement_return msgRecvStatement54;
    #undef	RETURN_TYPE_msgRecvStatement54
    #define	RETURN_TYPE_msgRecvStatement54 LexWhenPredParser_msgRecvStatement_return


    /* Initialize rule variables
     */
    statement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(8)) )
    {
    	retval.start = 0;

        return retval; 
    }
    statementBlock38.tree = NULL;

    variableStatement39.tree = NULL;

    emptyStatement40.tree = NULL;

    expressionStatement41.tree = NULL;

    ifStatement42.tree = NULL;

    iterationStatement43.tree = NULL;

    continueStatement44.tree = NULL;

    breakStatement45.tree = NULL;

    returnStatement46.tree = NULL;

    withStatement47.tree = NULL;

    labelledStatement48.tree = NULL;

    switchStatement49.tree = NULL;

    throwStatement50.tree = NULL;

    whenStatement51.tree = NULL;

    tryStatement52.tree = NULL;

    msgSendStatement53.tree = NULL;

    msgRecvStatement54.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:164:2: ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | whenStatement | tryStatement | msgSendStatement | msgRecvStatement )
            
            ANTLR3_UINT32 alt23;

            alt23=17;

            alt23 = cdfa23.predict(ctx, RECOGNIZER, ISTREAM, &cdfa23);
            if  (HASEXCEPTION())
            {
                goto rulestatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt23) 
            {
        	case 1:
        	    // .//LexWhenPred.g:164:4: statementBlock
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_statementBlock_in_statement1050);
        	        statementBlock38=statementBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statementBlock38.tree);

        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:165:4: variableStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableStatement_in_statement1055);
        	        variableStatement39=variableStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableStatement39.tree);

        	    }
        	    break;
        	case 3:
        	    // .//LexWhenPred.g:166:4: emptyStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_emptyStatement_in_statement1060);
        	        emptyStatement40=emptyStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, emptyStatement40.tree);

        	    }
        	    break;
        	case 4:
        	    // .//LexWhenPred.g:167:4: expressionStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionStatement_in_statement1065);
        	        expressionStatement41=expressionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionStatement41.tree);

        	    }
        	    break;
        	case 5:
        	    // .//LexWhenPred.g:168:4: ifStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement1070);
        	        ifStatement42=ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ifStatement42.tree);

        	    }
        	    break;
        	case 6:
        	    // .//LexWhenPred.g:169:4: iterationStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_iterationStatement_in_statement1075);
        	        iterationStatement43=iterationStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, iterationStatement43.tree);

        	    }
        	    break;
        	case 7:
        	    // .//LexWhenPred.g:170:4: continueStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_continueStatement_in_statement1080);
        	        continueStatement44=continueStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, continueStatement44.tree);

        	    }
        	    break;
        	case 8:
        	    // .//LexWhenPred.g:171:4: breakStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_breakStatement_in_statement1085);
        	        breakStatement45=breakStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, breakStatement45.tree);

        	    }
        	    break;
        	case 9:
        	    // .//LexWhenPred.g:172:4: returnStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement1090);
        	        returnStatement46=returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, returnStatement46.tree);

        	    }
        	    break;
        	case 10:
        	    // .//LexWhenPred.g:173:4: withStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_withStatement_in_statement1095);
        	        withStatement47=withStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, withStatement47.tree);

        	    }
        	    break;
        	case 11:
        	    // .//LexWhenPred.g:174:4: labelledStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_labelledStatement_in_statement1100);
        	        labelledStatement48=labelledStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, labelledStatement48.tree);

        	    }
        	    break;
        	case 12:
        	    // .//LexWhenPred.g:175:4: switchStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_switchStatement_in_statement1105);
        	        switchStatement49=switchStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switchStatement49.tree);

        	    }
        	    break;
        	case 13:
        	    // .//LexWhenPred.g:176:4: throwStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_throwStatement_in_statement1110);
        	        throwStatement50=throwStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, throwStatement50.tree);

        	    }
        	    break;
        	case 14:
        	    // .//LexWhenPred.g:177:11: whenStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_whenStatement_in_statement1122);
        	        whenStatement51=whenStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, whenStatement51.tree);

        	    }
        	    break;
        	case 15:
        	    // .//LexWhenPred.g:178:4: tryStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_tryStatement_in_statement1127);
        	        tryStatement52=tryStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tryStatement52.tree);

        	    }
        	    break;
        	case 16:
        	    // .//LexWhenPred.g:179:4: msgSendStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_msgSendStatement_in_statement1132);
        	        msgSendStatement53=msgSendStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, msgSendStatement53.tree);

        	    }
        	    break;
        	case 17:
        	    // .//LexWhenPred.g:180:4: msgRecvStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_msgRecvStatement_in_statement1137);
        	        msgRecvStatement54=msgRecvStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, msgRecvStatement54.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(8, statement_StartIndex); }
    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start statementBlock
 * .//LexWhenPred.g:183:1: statementBlock : ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static LexWhenPredParser_statementBlock_return
statementBlock(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_statementBlock_return retval;
    ANTLR3_UINT32 statementBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal55;
    pANTLR3_COMMON_TOKEN    LTERM56;
    pANTLR3_COMMON_TOKEN    char_literal57;
    pANTLR3_COMMON_TOKEN    char_literal58;
    pANTLR3_COMMON_TOKEN    LTERM59;
    pANTLR3_COMMON_TOKEN    LTERM61;
    pANTLR3_COMMON_TOKEN    char_literal62;
    LexWhenPredParser_statementList_return statementList60;
    #undef	RETURN_TYPE_statementList60
    #define	RETURN_TYPE_statementList60 LexWhenPredParser_statementList_return

    pANTLR3_BASE_TREE char_literal55_tree;
    pANTLR3_BASE_TREE LTERM56_tree;
    pANTLR3_BASE_TREE char_literal57_tree;
    pANTLR3_BASE_TREE char_literal58_tree;
    pANTLR3_BASE_TREE LTERM59_tree;
    pANTLR3_BASE_TREE LTERM61_tree;
    pANTLR3_BASE_TREE char_literal62_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    statementBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(9)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal55       = NULL;
    LTERM56       = NULL;
    char_literal57       = NULL;
    char_literal58       = NULL;
    LTERM59       = NULL;
    LTERM61       = NULL;
    char_literal62       = NULL;
    statementList60.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal55_tree   = NULL;
    LTERM56_tree   = NULL;
    char_literal57_tree   = NULL;
    char_literal58_tree   = NULL;
    LTERM59_tree   = NULL;
    LTERM61_tree   = NULL;
    char_literal62_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:184:2: ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt27;

            alt27=2;

            alt27 = cdfa27.predict(ctx, RECOGNIZER, ISTREAM, &cdfa27);
            if  (HASEXCEPTION())
            {
                goto rulestatementBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt27) 
            {
        	case 1:
        	    // .//LexWhenPred.g:184:4: '{' ( LTERM )* '}'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        char_literal55 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_statementBlock1149); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        char_literal55_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal55));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal55_tree);
        	        }

        	        // .//LexWhenPred.g:184:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt24=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA24_0 = LA(1);
        	                if ( (LA24_0 == LTERM) ) 
        	                {
        	                    alt24=1;
        	                }

        	            }
        	            switch (alt24) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM56 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1151); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        LTERM56_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, LTERM56));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, LTERM56_tree);
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop24;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop24: ; /* Jump out to here if this rule does not match */

        	        char_literal57 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_statementBlock1154); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        char_literal57_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal57));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal57_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:185:4: '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}'
        	    {
        	        char_literal58 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_statementBlock1159); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal58, NULL); }


        	        // .//LexWhenPred.g:185:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt25=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA25_0 = LA(1);
        	                if ( (LA25_0 == LTERM) ) 
        	                {
        	                    alt25=1;
        	                }

        	            }
        	            switch (alt25) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM59 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1161); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM59, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop25;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop25: ; /* Jump out to here if this rule does not match */

        	        // .//LexWhenPred.g:185:15: ( statementList -> statementList )
        	        // .//LexWhenPred.g:185:16: statementList
        	        {
        	            FOLLOWPUSH(FOLLOW_statementList_in_statementBlock1165);
        	            statementList60=statementList(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulestatementBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList60.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : statementList
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 185:29: -> statementList
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//LexWhenPred.g:185:46: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt26=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA26_0 = LA(1);
        	                if ( (LA26_0 == LTERM) ) 
        	                {
        	                    alt26=1;
        	                }

        	            }
        	            switch (alt26) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM61 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1170); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM61, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop26;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop26: ; /* Jump out to here if this rule does not match */

        	        char_literal62 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_statementBlock1173); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal62, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementBlockEx; /* Prevent compiler warnings */
    rulestatementBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(9, statementBlock_StartIndex); }
    return retval;
}
/* $ANTLR end statementBlock */

/** 
 * $ANTLR start statementList
 * .//LexWhenPred.g:188:1: statementList : statement ( ( LTERM )* statement )* -> ^( SLIST ( statement )+ ) ;
 */
static LexWhenPredParser_statementList_return
statementList(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_statementList_return retval;
    ANTLR3_UINT32 statementList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM64;
    LexWhenPredParser_statement_return statement63;
    #undef	RETURN_TYPE_statement63
    #define	RETURN_TYPE_statement63 LexWhenPredParser_statement_return

    LexWhenPredParser_statement_return statement65;
    #undef	RETURN_TYPE_statement65
    #define	RETURN_TYPE_statement65 LexWhenPredParser_statement_return

    pANTLR3_BASE_TREE LTERM64_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    statementList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(10)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM64       = NULL;
    statement63.tree = NULL;

    statement65.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM64_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:189:2: ( statement ( ( LTERM )* statement )* -> ^( SLIST ( statement )+ ) )
        // .//LexWhenPred.g:189:4: statement ( ( LTERM )* statement )*
        {
            FOLLOWPUSH(FOLLOW_statement_in_statementList1186);
            statement63=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestatementListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement63.tree, NULL); }

            // .//LexWhenPred.g:189:14: ( ( LTERM )* statement )*

            for (;;)
            {
                int alt29=2;
                alt29 = cdfa29.predict(ctx, RECOGNIZER, ISTREAM, &cdfa29);
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt29) 
                {
            	case 1:
            	    // .//LexWhenPred.g:189:15: ( LTERM )* statement
            	    {

            	        // .//LexWhenPred.g:189:15: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt28=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA28_0 = LA(1);
            	                if ( (LA28_0 == LTERM) ) 
            	                {
            	                    alt28=1;
            	                }

            	            }
            	            switch (alt28) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM64 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementList1189); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulestatementListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM64, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop28;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop28: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_statement_in_statementList1192);
            	        statement65=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement65.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop29;	/* break out of the loop */
            	    break;
                }
            }
            loop29: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 189:34: -> ^( SLIST ( statement )+ )
            	{
            	    // .//LexWhenPred.g:189:37: ^( SLIST ( statement )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SLIST, (pANTLR3_UINT8)"SLIST"), root_1));

            	        if ((stream_statement == NULL || !stream_statement->hasNext(stream_statement))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_statement->hasNext(stream_statement))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        	}
            	        	stream_statement->reset(stream_statement);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(10, statementList_StartIndex); }
    return retval;
}
/* $ANTLR end statementList */

/** 
 * $ANTLR start variableStatement
 * .//LexWhenPred.g:192:1: variableStatement : 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) ;
 */
static LexWhenPredParser_variableStatement_return
variableStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_variableStatement_return retval;
    ANTLR3_UINT32 variableStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal66;
    pANTLR3_COMMON_TOKEN    LTERM67;
    pANTLR3_COMMON_TOKEN    LTERM69;
    pANTLR3_COMMON_TOKEN    char_literal70;
    LexWhenPredParser_variableDeclarationList_return variableDeclarationList68;
    #undef	RETURN_TYPE_variableDeclarationList68
    #define	RETURN_TYPE_variableDeclarationList68 LexWhenPredParser_variableDeclarationList_return

    pANTLR3_BASE_TREE string_literal66_tree;
    pANTLR3_BASE_TREE LTERM67_tree;
    pANTLR3_BASE_TREE LTERM69_tree;
    pANTLR3_BASE_TREE char_literal70_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationList;
    /* Initialize rule variables
     */
    variableStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(11)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal66       = NULL;
    LTERM67       = NULL;
    LTERM69       = NULL;
    char_literal70       = NULL;
    variableDeclarationList68.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal66_tree   = NULL;
    LTERM67_tree   = NULL;
    LTERM69_tree   = NULL;
    char_literal70_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_variableDeclarationList   = NULL;
    #define CREATE_stream_variableDeclarationList  if (stream_variableDeclarationList == NULL) {stream_variableDeclarationList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationList"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:193:2: ( 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) )
        // .//LexWhenPred.g:193:4: 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' )
        {
            string_literal66 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_variableStatement1215); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, string_literal66, NULL); }


            // .//LexWhenPred.g:193:10: ( LTERM )*

            for (;;)
            {
                int alt30=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA30_0 = LA(1);
                    if ( (LA30_0 == LTERM) ) 
                    {
                        alt30=1;
                    }

                }
                switch (alt30) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM67 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1217); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM67, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop30;	/* break out of the loop */
            	    break;
                }
            }
            loop30: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_variableDeclarationList_in_variableStatement1220);
            variableDeclarationList68=variableDeclarationList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationList; stream_variableDeclarationList->add(stream_variableDeclarationList, variableDeclarationList68.tree, NULL); }

            // .//LexWhenPred.g:193:41: ( LTERM | ';' )
            {
                int alt31=2;

                {
                    int LA31_0 = LA(1);
                    if ( (LA31_0 == LTERM) ) 
                    {
                        alt31=1;
                    }
                    else if ( (LA31_0 == 133) ) 
                    {
                        alt31=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 31;
                        EXCEPTION->state        = 0;


                        goto rulevariableStatementEx;
                    }
                }
                switch (alt31) 
                {
            	case 1:
            	    // .//LexWhenPred.g:193:42: LTERM
            	    {
            	        LTERM69 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1223); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM69, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//LexWhenPred.g:193:50: ';'
            	    {
            	        char_literal70 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_variableStatement1227); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal70, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : variableDeclarationList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 193:55: -> ^( VARLIST variableDeclarationList )
            	{
            	    // .//LexWhenPred.g:193:58: ^( VARLIST variableDeclarationList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationList == NULL ? NULL : stream_variableDeclarationList->nextTree(stream_variableDeclarationList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableStatementEx; /* Prevent compiler warnings */
    rulevariableStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_variableDeclarationList != NULL) stream_variableDeclarationList->free(stream_variableDeclarationList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(11, variableStatement_StartIndex); }
    return retval;
}
/* $ANTLR end variableStatement */

/** 
 * $ANTLR start variableDeclarationList
 * .//LexWhenPred.g:196:1: variableDeclarationList : variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ ;
 */
static LexWhenPredParser_variableDeclarationList_return
variableDeclarationList(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_variableDeclarationList_return retval;
    ANTLR3_UINT32 variableDeclarationList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM72;
    pANTLR3_COMMON_TOKEN    char_literal73;
    pANTLR3_COMMON_TOKEN    LTERM74;
    LexWhenPredParser_variableDeclaration_return variableDeclaration71;
    #undef	RETURN_TYPE_variableDeclaration71
    #define	RETURN_TYPE_variableDeclaration71 LexWhenPredParser_variableDeclaration_return

    LexWhenPredParser_variableDeclaration_return variableDeclaration75;
    #undef	RETURN_TYPE_variableDeclaration75
    #define	RETURN_TYPE_variableDeclaration75 LexWhenPredParser_variableDeclaration_return

    pANTLR3_BASE_TREE LTERM72_tree;
    pANTLR3_BASE_TREE char_literal73_tree;
    pANTLR3_BASE_TREE LTERM74_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclaration;
    /* Initialize rule variables
     */
    variableDeclarationList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(12)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM72       = NULL;
    char_literal73       = NULL;
    LTERM74       = NULL;
    variableDeclaration71.tree = NULL;

    variableDeclaration75.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM72_tree   = NULL;
    char_literal73_tree   = NULL;
    LTERM74_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_variableDeclaration   = NULL;
    #define CREATE_stream_variableDeclaration  if (stream_variableDeclaration == NULL) {stream_variableDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclaration"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:197:2: ( variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ )
        // .//LexWhenPred.g:197:4: variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1249);
            variableDeclaration71=variableDeclaration(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration71.tree, NULL); }

            // .//LexWhenPred.g:197:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*

            for (;;)
            {
                int alt34=2;
                alt34 = cdfa34.predict(ctx, RECOGNIZER, ISTREAM, &cdfa34);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt34) 
                {
            	case 1:
            	    // .//LexWhenPred.g:197:25: ( LTERM )* ',' ( LTERM )* variableDeclaration
            	    {

            	        // .//LexWhenPred.g:197:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt32=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA32_0 = LA(1);
            	                if ( (LA32_0 == LTERM) ) 
            	                {
            	                    alt32=1;
            	                }

            	            }
            	            switch (alt32) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM72 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1252); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM72, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop32;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop32: ; /* Jump out to here if this rule does not match */

            	        char_literal73 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_variableDeclarationList1255); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal73, NULL); }


            	        // .//LexWhenPred.g:197:36: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt33=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA33_0 = LA(1);
            	                if ( (LA33_0 == LTERM) ) 
            	                {
            	                    alt33=1;
            	                }

            	            }
            	            switch (alt33) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM74 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1257); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM74, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop33;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop33: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1260);
            	        variableDeclaration75=variableDeclaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration75.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop34;	/* break out of the loop */
            	    break;
                }
            }
            loop34: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclaration
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 197:65: -> ( variableDeclaration )+
            	{
            	    if ((stream_variableDeclaration == NULL || !stream_variableDeclaration->hasNext(stream_variableDeclaration))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclaration->hasNext(stream_variableDeclaration))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclaration == NULL ? NULL : stream_variableDeclaration->nextTree(stream_variableDeclaration));

            	    	}
            	    	stream_variableDeclaration->reset(stream_variableDeclaration);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListEx; /* Prevent compiler warnings */
    rulevariableDeclarationListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_variableDeclaration != NULL) stream_variableDeclaration->free(stream_variableDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(12, variableDeclarationList_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationList */

/** 
 * $ANTLR start variableDeclarationListNoIn
 * .//LexWhenPred.g:200:1: variableDeclarationListNoIn : variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ ;
 */
static LexWhenPredParser_variableDeclarationListNoIn_return
variableDeclarationListNoIn(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_variableDeclarationListNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationListNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM77;
    pANTLR3_COMMON_TOKEN    char_literal78;
    pANTLR3_COMMON_TOKEN    LTERM79;
    LexWhenPredParser_variableDeclarationNoIn_return variableDeclarationNoIn76;
    #undef	RETURN_TYPE_variableDeclarationNoIn76
    #define	RETURN_TYPE_variableDeclarationNoIn76 LexWhenPredParser_variableDeclarationNoIn_return

    LexWhenPredParser_variableDeclarationNoIn_return variableDeclarationNoIn80;
    #undef	RETURN_TYPE_variableDeclarationNoIn80
    #define	RETURN_TYPE_variableDeclarationNoIn80 LexWhenPredParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE LTERM77_tree;
    pANTLR3_BASE_TREE char_literal78_tree;
    pANTLR3_BASE_TREE LTERM79_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    variableDeclarationListNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(13)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM77       = NULL;
    char_literal78       = NULL;
    LTERM79       = NULL;
    variableDeclarationNoIn76.tree = NULL;

    variableDeclarationNoIn80.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM77_tree   = NULL;
    char_literal78_tree   = NULL;
    LTERM79_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:201:2: ( variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ )
        // .//LexWhenPred.g:201:4: variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1279);
            variableDeclarationNoIn76=variableDeclarationNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn76.tree, NULL); }

            // .//LexWhenPred.g:201:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*

            for (;;)
            {
                int alt37=2;
                alt37 = cdfa37.predict(ctx, RECOGNIZER, ISTREAM, &cdfa37);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt37) 
                {
            	case 1:
            	    // .//LexWhenPred.g:201:29: ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn
            	    {

            	        // .//LexWhenPred.g:201:29: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt35=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA35_0 = LA(1);
            	                if ( (LA35_0 == LTERM) ) 
            	                {
            	                    alt35=1;
            	                }

            	            }
            	            switch (alt35) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM77 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1282); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM77, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop35;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop35: ; /* Jump out to here if this rule does not match */

            	        char_literal78 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_variableDeclarationListNoIn1285); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal78, NULL); }


            	        // .//LexWhenPred.g:201:40: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt36=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA36_0 = LA(1);
            	                if ( (LA36_0 == LTERM) ) 
            	                {
            	                    alt36=1;
            	                }

            	            }
            	            switch (alt36) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM79 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1287); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM79, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop36;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop36: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1290);
            	        variableDeclarationNoIn80=variableDeclarationNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn80.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop37;	/* break out of the loop */
            	    break;
                }
            }
            loop37: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclarationNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 201:73: -> ( variableDeclarationNoIn )+
            	{
            	    if ((stream_variableDeclarationNoIn == NULL || !stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

            	    	}
            	    	stream_variableDeclarationNoIn->reset(stream_variableDeclarationNoIn);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationListNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(13, variableDeclarationListNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationListNoIn */

/** 
 * $ANTLR start variableDeclaration
 * .//LexWhenPred.g:204:1: variableDeclaration : Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) ;
 */
static LexWhenPredParser_variableDeclaration_return
variableDeclaration(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_variableDeclaration_return retval;
    ANTLR3_UINT32 variableDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier81;
    pANTLR3_COMMON_TOKEN    LTERM82;
    LexWhenPredParser_initialiser_return initialiser83;
    #undef	RETURN_TYPE_initialiser83
    #define	RETURN_TYPE_initialiser83 LexWhenPredParser_initialiser_return

    pANTLR3_BASE_TREE Identifier81_tree;
    pANTLR3_BASE_TREE LTERM82_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiser;
    /* Initialize rule variables
     */
    variableDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(14)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier81       = NULL;
    LTERM82       = NULL;
    initialiser83.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier81_tree   = NULL;
    LTERM82_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiser   = NULL;
    #define CREATE_stream_initialiser  if (stream_initialiser == NULL) {stream_initialiser = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiser"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:205:2: ( Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) )
        // .//LexWhenPred.g:205:4: Identifier ( LTERM )* ( initialiser )?
        {
            Identifier81 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclaration1309); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier81, NULL); }


            // .//LexWhenPred.g:205:15: ( LTERM )*

            for (;;)
            {
                int alt38=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA38_0 = LA(1);
                    if ( (LA38_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA38_2 = LA(2);
                            if ( (synpred53_LexWhenPred(ctx)) ) 
                            {
                                alt38=1;
                            }

                        }
                    }

                }
                switch (alt38) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM82 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclaration1311); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM82, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop38;	/* break out of the loop */
            	    break;
                }
            }
            loop38: ; /* Jump out to here if this rule does not match */


            // .//LexWhenPred.g:205:22: ( initialiser )?
            {
                int alt39=2;
                {
                    int LA39_0 = LA(1);
                    if ( (LA39_0 == 134) ) 
                    {
                        alt39=1;
                    }
                }
                switch (alt39) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: initialiser
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiser_in_variableDeclaration1314);
            	        initialiser83=initialiser(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiser; stream_initialiser->add(stream_initialiser, initialiser83.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier, initialiser
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 205:35: -> ^( VAR Identifier ( initialiser )? )
            	{
            	    // .//LexWhenPred.g:205:38: ^( VAR Identifier ( initialiser )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//LexWhenPred.g:205:55: ( initialiser )?
            	        {
            	        	if ( (stream_initialiser != NULL && stream_initialiser->hasNext(stream_initialiser))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiser == NULL ? NULL : stream_initialiser->nextTree(stream_initialiser));

            	        	}
            	        	if ( stream_initialiser != NULL) stream_initialiser->reset(stream_initialiser);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationEx; /* Prevent compiler warnings */
    rulevariableDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiser != NULL) stream_initialiser->free(stream_initialiser);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(14, variableDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclaration */

/** 
 * $ANTLR start variableDeclarationNoIn
 * .//LexWhenPred.g:208:1: variableDeclarationNoIn : Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) ;
 */
static LexWhenPredParser_variableDeclarationNoIn_return
variableDeclarationNoIn(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_variableDeclarationNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier84;
    pANTLR3_COMMON_TOKEN    LTERM85;
    LexWhenPredParser_initialiserNoIn_return initialiserNoIn86;
    #undef	RETURN_TYPE_initialiserNoIn86
    #define	RETURN_TYPE_initialiserNoIn86 LexWhenPredParser_initialiserNoIn_return

    pANTLR3_BASE_TREE Identifier84_tree;
    pANTLR3_BASE_TREE LTERM85_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiserNoIn;
    /* Initialize rule variables
     */
    variableDeclarationNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(15)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier84       = NULL;
    LTERM85       = NULL;
    initialiserNoIn86.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier84_tree   = NULL;
    LTERM85_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiserNoIn   = NULL;
    #define CREATE_stream_initialiserNoIn  if (stream_initialiserNoIn == NULL) {stream_initialiserNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiserNoIn"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:209:2: ( Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) )
        // .//LexWhenPred.g:209:4: Identifier ( LTERM )* ( initialiserNoIn )?
        {
            Identifier84 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclarationNoIn1338); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier84, NULL); }


            // .//LexWhenPred.g:209:15: ( LTERM )*

            for (;;)
            {
                int alt40=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA40_0 = LA(1);
                    if ( (LA40_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA40_2 = LA(2);
                            if ( (synpred55_LexWhenPred(ctx)) ) 
                            {
                                alt40=1;
                            }

                        }
                    }

                }
                switch (alt40) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM85 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationNoIn1340); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM85, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop40;	/* break out of the loop */
            	    break;
                }
            }
            loop40: ; /* Jump out to here if this rule does not match */


            // .//LexWhenPred.g:209:22: ( initialiserNoIn )?
            {
                int alt41=2;
                {
                    int LA41_0 = LA(1);
                    if ( (LA41_0 == 134) ) 
                    {
                        alt41=1;
                    }
                }
                switch (alt41) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: initialiserNoIn
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1343);
            	        initialiserNoIn86=initialiserNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiserNoIn; stream_initialiserNoIn->add(stream_initialiserNoIn, initialiserNoIn86.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier, initialiserNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 209:39: -> ^( VAR Identifier ( initialiserNoIn )? )
            	{
            	    // .//LexWhenPred.g:209:43: ^( VAR Identifier ( initialiserNoIn )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//LexWhenPred.g:209:60: ( initialiserNoIn )?
            	        {
            	        	if ( (stream_initialiserNoIn != NULL && stream_initialiserNoIn->hasNext(stream_initialiserNoIn))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiserNoIn == NULL ? NULL : stream_initialiserNoIn->nextTree(stream_initialiserNoIn));

            	        	}
            	        	if ( stream_initialiserNoIn != NULL) stream_initialiserNoIn->reset(stream_initialiserNoIn);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiserNoIn != NULL) stream_initialiserNoIn->free(stream_initialiserNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(15, variableDeclarationNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationNoIn */

/** 
 * $ANTLR start initialiser
 * .//LexWhenPred.g:212:1: initialiser : '=' ( LTERM )* assignmentExpression -> assignmentExpression ;
 */
static LexWhenPredParser_initialiser_return
initialiser(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_initialiser_return retval;
    ANTLR3_UINT32 initialiser_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal87;
    pANTLR3_COMMON_TOKEN    LTERM88;
    LexWhenPredParser_assignmentExpression_return assignmentExpression89;
    #undef	RETURN_TYPE_assignmentExpression89
    #define	RETURN_TYPE_assignmentExpression89 LexWhenPredParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal87_tree;
    pANTLR3_BASE_TREE LTERM88_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_134;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    initialiser_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(16)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal87       = NULL;
    LTERM88       = NULL;
    assignmentExpression89.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal87_tree   = NULL;
    LTERM88_tree   = NULL;

    stream_134   = NULL;
    #define CREATE_stream_134  if (stream_134 == NULL) {stream_134 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 134"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:213:2: ( '=' ( LTERM )* assignmentExpression -> assignmentExpression )
        // .//LexWhenPred.g:213:4: '=' ( LTERM )* assignmentExpression
        {
            char_literal87 = (pANTLR3_COMMON_TOKEN) MATCHT(134, &FOLLOW_134_in_initialiser1368); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_134; stream_134->add(stream_134, char_literal87, NULL); }


            // .//LexWhenPred.g:213:8: ( LTERM )*

            for (;;)
            {
                int alt42=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA42_0 = LA(1);
                    if ( (LA42_0 == LTERM) ) 
                    {
                        alt42=1;
                    }

                }
                switch (alt42) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM88 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiser1370); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM88, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop42;	/* break out of the loop */
            	    break;
                }
            }
            loop42: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_initialiser1373);
            assignmentExpression89=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression89.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 213:36: -> assignmentExpression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserEx; /* Prevent compiler warnings */
    ruleinitialiserEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_134 != NULL) stream_134->free(stream_134);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(16, initialiser_StartIndex); }
    return retval;
}
/* $ANTLR end initialiser */

/** 
 * $ANTLR start initialiserNoIn
 * .//LexWhenPred.g:216:1: initialiserNoIn : '=' ( LTERM )* assignmentExpressionNoIn -> assignmentExpressionNoIn ;
 */
static LexWhenPredParser_initialiserNoIn_return
initialiserNoIn(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_initialiserNoIn_return retval;
    ANTLR3_UINT32 initialiserNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal90;
    pANTLR3_COMMON_TOKEN    LTERM91;
    LexWhenPredParser_assignmentExpressionNoIn_return assignmentExpressionNoIn92;
    #undef	RETURN_TYPE_assignmentExpressionNoIn92
    #define	RETURN_TYPE_assignmentExpressionNoIn92 LexWhenPredParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE char_literal90_tree;
    pANTLR3_BASE_TREE LTERM91_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_134;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    /* Initialize rule variables
     */
    initialiserNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(17)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal90       = NULL;
    LTERM91       = NULL;
    assignmentExpressionNoIn92.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal90_tree   = NULL;
    LTERM91_tree   = NULL;

    stream_134   = NULL;
    #define CREATE_stream_134  if (stream_134 == NULL) {stream_134 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 134"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:217:2: ( '=' ( LTERM )* assignmentExpressionNoIn -> assignmentExpressionNoIn )
        // .//LexWhenPred.g:217:4: '=' ( LTERM )* assignmentExpressionNoIn
        {
            char_literal90 = (pANTLR3_COMMON_TOKEN) MATCHT(134, &FOLLOW_134_in_initialiserNoIn1390); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_134; stream_134->add(stream_134, char_literal90, NULL); }


            // .//LexWhenPred.g:217:8: ( LTERM )*

            for (;;)
            {
                int alt43=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA43_0 = LA(1);
                    if ( (LA43_0 == LTERM) ) 
                    {
                        alt43=1;
                    }

                }
                switch (alt43) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM91 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiserNoIn1392); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM91, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop43;	/* break out of the loop */
            	    break;
                }
            }
            loop43: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1395);
            assignmentExpressionNoIn92=assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn92.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 217:40: -> assignmentExpressionNoIn
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserNoInEx; /* Prevent compiler warnings */
    ruleinitialiserNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_134 != NULL) stream_134->free(stream_134);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(17, initialiserNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end initialiserNoIn */

/** 
 * $ANTLR start emptyStatement
 * .//LexWhenPred.g:220:1: emptyStatement : ';' ;
 */
static LexWhenPredParser_emptyStatement_return
emptyStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_emptyStatement_return retval;
    ANTLR3_UINT32 emptyStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal93;

    pANTLR3_BASE_TREE char_literal93_tree;

    /* Initialize rule variables
     */
    emptyStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(18)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal93       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal93_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:221:2: ( ';' )
        // .//LexWhenPred.g:221:4: ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal93 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_emptyStatement1411); 
            if  (HASEXCEPTION())
            {
                goto ruleemptyStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal93_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal93));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal93_tree);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleemptyStatementEx; /* Prevent compiler warnings */
    ruleemptyStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(18, emptyStatement_StartIndex); }
    return retval;
}
/* $ANTLR end emptyStatement */

/** 
 * $ANTLR start expressionStatement
 * .//LexWhenPred.g:224:1: expressionStatement : expression ( LTERM | ';' ) -> expression ;
 */
static LexWhenPredParser_expressionStatement_return
expressionStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_expressionStatement_return retval;
    ANTLR3_UINT32 expressionStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM95;
    pANTLR3_COMMON_TOKEN    char_literal96;
    LexWhenPredParser_expression_return expression94;
    #undef	RETURN_TYPE_expression94
    #define	RETURN_TYPE_expression94 LexWhenPredParser_expression_return

    pANTLR3_BASE_TREE LTERM95_tree;
    pANTLR3_BASE_TREE char_literal96_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    expressionStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(19)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM95       = NULL;
    char_literal96       = NULL;
    expression94.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM95_tree   = NULL;
    char_literal96_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:225:2: ( expression ( LTERM | ';' ) -> expression )
        // .//LexWhenPred.g:225:4: expression ( LTERM | ';' )
        {
            FOLLOWPUSH(FOLLOW_expression_in_expressionStatement1423);
            expression94=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression94.tree, NULL); }

            // .//LexWhenPred.g:225:15: ( LTERM | ';' )
            {
                int alt44=2;

                {
                    int LA44_0 = LA(1);
                    if ( (LA44_0 == LTERM) ) 
                    {
                        alt44=1;
                    }
                    else if ( (LA44_0 == 133) ) 
                    {
                        alt44=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 44;
                        EXCEPTION->state        = 0;


                        goto ruleexpressionStatementEx;
                    }
                }
                switch (alt44) 
                {
            	case 1:
            	    // .//LexWhenPred.g:225:16: LTERM
            	    {
            	        LTERM95 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionStatement1426); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM95, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//LexWhenPred.g:225:24: ';'
            	    {
            	        char_literal96 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_expressionStatement1430); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal96, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 225:29: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionStatementEx; /* Prevent compiler warnings */
    ruleexpressionStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(19, expressionStatement_StartIndex); }
    return retval;
}
/* $ANTLR end expressionStatement */

/** 
 * $ANTLR start whenStatement
 * .//LexWhenPred.g:228:1: whenStatement : 'when' ( LTERM )* '(' ( LTERM )* whenPred ( LTERM )* ')' ( LTERM )* functionBody -> ^( WHEN whenPred functionBody ) ;
 */
static LexWhenPredParser_whenStatement_return
whenStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_whenStatement_return retval;
    ANTLR3_UINT32 whenStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal97;
    pANTLR3_COMMON_TOKEN    LTERM98;
    pANTLR3_COMMON_TOKEN    char_literal99;
    pANTLR3_COMMON_TOKEN    LTERM100;
    pANTLR3_COMMON_TOKEN    LTERM102;
    pANTLR3_COMMON_TOKEN    char_literal103;
    pANTLR3_COMMON_TOKEN    LTERM104;
    LexWhenPredParser_whenPred_return whenPred101;
    #undef	RETURN_TYPE_whenPred101
    #define	RETURN_TYPE_whenPred101 LexWhenPredParser_whenPred_return

    LexWhenPredParser_functionBody_return functionBody105;
    #undef	RETURN_TYPE_functionBody105
    #define	RETURN_TYPE_functionBody105 LexWhenPredParser_functionBody_return

    pANTLR3_BASE_TREE string_literal97_tree;
    pANTLR3_BASE_TREE LTERM98_tree;
    pANTLR3_BASE_TREE char_literal99_tree;
    pANTLR3_BASE_TREE LTERM100_tree;
    pANTLR3_BASE_TREE LTERM102_tree;
    pANTLR3_BASE_TREE char_literal103_tree;
    pANTLR3_BASE_TREE LTERM104_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_135;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_whenPred;
    /* Initialize rule variables
     */
    whenStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(20)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal97       = NULL;
    LTERM98       = NULL;
    char_literal99       = NULL;
    LTERM100       = NULL;
    LTERM102       = NULL;
    char_literal103       = NULL;
    LTERM104       = NULL;
    whenPred101.tree = NULL;

    functionBody105.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal97_tree   = NULL;
    LTERM98_tree   = NULL;
    char_literal99_tree   = NULL;
    LTERM100_tree   = NULL;
    LTERM102_tree   = NULL;
    char_literal103_tree   = NULL;
    LTERM104_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_135   = NULL;
    #define CREATE_stream_135  if (stream_135 == NULL) {stream_135 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 135"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_whenPred   = NULL;
    #define CREATE_stream_whenPred  if (stream_whenPred == NULL) {stream_whenPred = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule whenPred"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:230:5: ( 'when' ( LTERM )* '(' ( LTERM )* whenPred ( LTERM )* ')' ( LTERM )* functionBody -> ^( WHEN whenPred functionBody ) )
        // .//LexWhenPred.g:230:7: 'when' ( LTERM )* '(' ( LTERM )* whenPred ( LTERM )* ')' ( LTERM )* functionBody
        {
            string_literal97 = (pANTLR3_COMMON_TOKEN) MATCHT(135, &FOLLOW_135_in_whenStatement1450); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_135; stream_135->add(stream_135, string_literal97, NULL); }


            // .//LexWhenPred.g:230:14: ( LTERM )*

            for (;;)
            {
                int alt45=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA45_0 = LA(1);
                    if ( (LA45_0 == LTERM) ) 
                    {
                        alt45=1;
                    }

                }
                switch (alt45) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM98 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1452); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM98, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop45;	/* break out of the loop */
            	    break;
                }
            }
            loop45: ; /* Jump out to here if this rule does not match */

            char_literal99 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_whenStatement1455); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal99, NULL); }


            // .//LexWhenPred.g:230:25: ( LTERM )*

            for (;;)
            {
                int alt46=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA46_0 = LA(1);
                    if ( (LA46_0 == LTERM) ) 
                    {
                        alt46=1;
                    }

                }
                switch (alt46) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM100 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1457); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM100, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop46;	/* break out of the loop */
            	    break;
                }
            }
            loop46: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_whenPred_in_whenStatement1460);
            whenPred101=whenPred(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_whenPred; stream_whenPred->add(stream_whenPred, whenPred101.tree, NULL); }

            // .//LexWhenPred.g:230:41: ( LTERM )*

            for (;;)
            {
                int alt47=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA47_0 = LA(1);
                    if ( (LA47_0 == LTERM) ) 
                    {
                        alt47=1;
                    }

                }
                switch (alt47) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM102 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1462); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM102, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop47;	/* break out of the loop */
            	    break;
                }
            }
            loop47: ; /* Jump out to here if this rule does not match */

            char_literal103 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_whenStatement1465); 
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal103, NULL); }


            // .//LexWhenPred.g:230:52: ( LTERM )*

            for (;;)
            {
                int alt48=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA48_0 = LA(1);
                    if ( (LA48_0 == LTERM) ) 
                    {
                        alt48=1;
                    }

                }
                switch (alt48) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM104 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenStatement1467); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM104, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop48;	/* break out of the loop */
            	    break;
                }
            }
            loop48: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_whenStatement1470);
            functionBody105=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody105.tree, NULL); }

             
            /* AST REWRITE
             * elements          : functionBody, whenPred
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 230:72: -> ^( WHEN whenPred functionBody )
            	{
            	    // .//LexWhenPred.g:230:75: ^( WHEN whenPred functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN, (pANTLR3_UINT8)"WHEN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_whenPred == NULL ? NULL : stream_whenPred->nextTree(stream_whenPred));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenStatementEx; /* Prevent compiler warnings */
    rulewhenStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_135 != NULL) stream_135->free(stream_135);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_whenPred != NULL) stream_whenPred->free(stream_whenPred);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(20, whenStatement_StartIndex); }
    return retval;
}
/* $ANTLR end whenStatement */

/** 
 * $ANTLR start whenPred
 * .//LexWhenPred.g:235:1: whenPred : expression -> ^( WHEN_PRED expression ) ;
 */
static LexWhenPredParser_whenPred_return
whenPred(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_whenPred_return retval;
    ANTLR3_UINT32 whenPred_StartIndex;
    pANTLR3_BASE_TREE root_0;

    LexWhenPredParser_expression_return expression106;
    #undef	RETURN_TYPE_expression106
    #define	RETURN_TYPE_expression106 LexWhenPredParser_expression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    whenPred_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(21)) )
    {
    	retval.start = 0;

        return retval; 
    }
    expression106.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:236:5: ( expression -> ^( WHEN_PRED expression ) )
        // .//LexWhenPred.g:236:7: expression
        {
            FOLLOWPUSH(FOLLOW_expression_in_whenPred1499);
            expression106=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenPredEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression106.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 236:18: -> ^( WHEN_PRED expression )
            	{
            	    // .//LexWhenPred.g:236:21: ^( WHEN_PRED expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN_PRED, (pANTLR3_UINT8)"WHEN_PRED"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenPredEx; /* Prevent compiler warnings */
    rulewhenPredEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(21, whenPred_StartIndex); }
    return retval;
}
/* $ANTLR end whenPred */

/** 
 * $ANTLR start whenCheckedListFirst
 * .//LexWhenPred.g:239:1: whenCheckedListFirst : s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )? -> ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? ) ;
 */
static LexWhenPredParser_whenCheckedListFirst_return
whenCheckedListFirst(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_whenCheckedListFirst_return retval;
    ANTLR3_UINT32 whenCheckedListFirst_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM107;
    pANTLR3_COMMON_TOKEN    char_literal108;
    pANTLR3_COMMON_TOKEN    LTERM109;
    LexWhenPredParser_expression_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 LexWhenPredParser_expression_return

    LexWhenPredParser_whenCheckedListSubsequent_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 LexWhenPredParser_whenCheckedListSubsequent_return

    pANTLR3_BASE_TREE LTERM107_tree;
    pANTLR3_BASE_TREE char_literal108_tree;
    pANTLR3_BASE_TREE LTERM109_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_whenCheckedListSubsequent;
    /* Initialize rule variables
     */
    whenCheckedListFirst_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(22)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM107       = NULL;
    char_literal108       = NULL;
    LTERM109       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM107_tree   = NULL;
    char_literal108_tree   = NULL;
    LTERM109_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_whenCheckedListSubsequent   = NULL;
    #define CREATE_stream_whenCheckedListSubsequent  if (stream_whenCheckedListSubsequent == NULL) {stream_whenCheckedListSubsequent = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule whenCheckedListSubsequent"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:240:5: (s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )? -> ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? ) )
        // .//LexWhenPred.g:240:7: s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )?
        {
            FOLLOWPUSH(FOLLOW_expression_in_whenCheckedListFirst1526);
            s1=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListFirstEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, s1.tree, NULL); }

            // .//LexWhenPred.g:240:21: ( LTERM )*

            for (;;)
            {
                int alt49=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA49_0 = LA(1);
                    if ( (LA49_0 == LTERM) ) 
                    {
                        alt49=1;
                    }

                }
                switch (alt49) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM107 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListFirst1528); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListFirstEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM107, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop49;	/* break out of the loop */
            	    break;
                }
            }
            loop49: ; /* Jump out to here if this rule does not match */


            // .//LexWhenPred.g:240:28: ( ',' ( LTERM )* s2= whenCheckedListSubsequent )?
            {
                int alt51=2;
                {
                    int LA51_0 = LA(1);
                    if ( (LA51_0 == 128) ) 
                    {
                        alt51=1;
                    }
                }
                switch (alt51) 
                {
            	case 1:
            	    // .//LexWhenPred.g:240:29: ',' ( LTERM )* s2= whenCheckedListSubsequent
            	    {
            	        char_literal108 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_whenCheckedListFirst1532); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListFirstEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal108, NULL); }


            	        // .//LexWhenPred.g:240:33: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt50=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA50_0 = LA(1);
            	                if ( (LA50_0 == LTERM) ) 
            	                {
            	                    alt50=1;
            	                }

            	            }
            	            switch (alt50) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM109 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListFirst1534); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhenCheckedListFirstEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM109, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop50;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop50: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_whenCheckedListFirst1539);
            	        s2=whenCheckedListSubsequent(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListFirstEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_whenCheckedListSubsequent; stream_whenCheckedListSubsequent->add(stream_whenCheckedListSubsequent, s2.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : s1, s2
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 240:71: -> ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? )
            	{
            	    // .//LexWhenPred.g:240:77: ^( WHEN_CHECKED_LIST_FIRST $s1 ( $s2)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN_CHECKED_LIST_FIRST, (pANTLR3_UINT8)"WHEN_CHECKED_LIST_FIRST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//LexWhenPred.g:240:107: ( $s2)?
            	        {
            	        	if ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if ( stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenCheckedListFirstEx; /* Prevent compiler warnings */
    rulewhenCheckedListFirstEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_whenCheckedListSubsequent != NULL) stream_whenCheckedListSubsequent->free(stream_whenCheckedListSubsequent);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(22, whenCheckedListFirst_StartIndex); }
    return retval;
}
/* $ANTLR end whenCheckedListFirst */

/** 
 * $ANTLR start whenCheckedListSubsequent
 * .//LexWhenPred.g:243:1: whenCheckedListSubsequent : s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )* -> ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* ) ;
 */
static LexWhenPredParser_whenCheckedListSubsequent_return
whenCheckedListSubsequent(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_whenCheckedListSubsequent_return retval;
    ANTLR3_UINT32 whenCheckedListSubsequent_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM110;
    pANTLR3_COMMON_TOKEN    char_literal111;
    pANTLR3_COMMON_TOKEN    LTERM112;
    LexWhenPredParser_expression_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 LexWhenPredParser_expression_return

    LexWhenPredParser_whenCheckedListSubsequent_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 LexWhenPredParser_whenCheckedListSubsequent_return

    pANTLR3_BASE_TREE LTERM110_tree;
    pANTLR3_BASE_TREE char_literal111_tree;
    pANTLR3_BASE_TREE LTERM112_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_whenCheckedListSubsequent;
    /* Initialize rule variables
     */
    whenCheckedListSubsequent_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(23)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM110       = NULL;
    char_literal111       = NULL;
    LTERM112       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM110_tree   = NULL;
    char_literal111_tree   = NULL;
    LTERM112_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_whenCheckedListSubsequent   = NULL;
    #define CREATE_stream_whenCheckedListSubsequent  if (stream_whenCheckedListSubsequent == NULL) {stream_whenCheckedListSubsequent = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule whenCheckedListSubsequent"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:244:5: (s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )* -> ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* ) )
        // .//LexWhenPred.g:244:7: s1= expression ( LTERM )* ( ',' ( LTERM )* s2= whenCheckedListSubsequent )*
        {
            FOLLOWPUSH(FOLLOW_expression_in_whenCheckedListSubsequent1576);
            s1=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhenCheckedListSubsequentEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, s1.tree, NULL); }

            // .//LexWhenPred.g:244:21: ( LTERM )*

            for (;;)
            {
                int alt52=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA52_0 = LA(1);
                    if ( (LA52_0 == LTERM) ) 
                    {
                        alt52=1;
                    }

                }
                switch (alt52) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM110 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListSubsequent1578); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListSubsequentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM110, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop52;	/* break out of the loop */
            	    break;
                }
            }
            loop52: ; /* Jump out to here if this rule does not match */


            // .//LexWhenPred.g:244:28: ( ',' ( LTERM )* s2= whenCheckedListSubsequent )*

            for (;;)
            {
                int alt54=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA54_0 = LA(1);
                    if ( (LA54_0 == 128) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA54_2 = LA(2);
                            if ( (synpred69_LexWhenPred(ctx)) ) 
                            {
                                alt54=1;
                            }

                        }
                    }

                }
                switch (alt54) 
                {
            	case 1:
            	    // .//LexWhenPred.g:244:29: ',' ( LTERM )* s2= whenCheckedListSubsequent
            	    {
            	        char_literal111 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_whenCheckedListSubsequent1582); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListSubsequentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal111, NULL); }


            	        // .//LexWhenPred.g:244:33: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt53=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA53_0 = LA(1);
            	                if ( (LA53_0 == LTERM) ) 
            	                {
            	                    alt53=1;
            	                }

            	            }
            	            switch (alt53) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM112 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whenCheckedListSubsequent1584); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulewhenCheckedListSubsequentEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM112, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop53;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop53: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_whenCheckedListSubsequent1589);
            	        s2=whenCheckedListSubsequent(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhenCheckedListSubsequentEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_whenCheckedListSubsequent; stream_whenCheckedListSubsequent->add(stream_whenCheckedListSubsequent, s2.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop54;	/* break out of the loop */
            	    break;
                }
            }
            loop54: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : s2, s1
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 244:71: -> ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* )
            	{
            	    // .//LexWhenPred.g:244:74: ^( WHEN_CHECKED_LIST_SUBSEQUENT $s1 ( $s2)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHEN_CHECKED_LIST_SUBSEQUENT, (pANTLR3_UINT8)"WHEN_CHECKED_LIST_SUBSEQUENT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//LexWhenPred.g:244:109: ( $s2)*
            	        {
            	        	while ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if (stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhenCheckedListSubsequentEx; /* Prevent compiler warnings */
    rulewhenCheckedListSubsequentEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_whenCheckedListSubsequent != NULL) stream_whenCheckedListSubsequent->free(stream_whenCheckedListSubsequent);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(23, whenCheckedListSubsequent_StartIndex); }
    return retval;
}
/* $ANTLR end whenCheckedListSubsequent */

/** 
 * $ANTLR start ifStatement
 * .//LexWhenPred.g:248:1: ifStatement : 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) ;
 */
static LexWhenPredParser_ifStatement_return
ifStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_ifStatement_return retval;
    ANTLR3_UINT32 ifStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal113;
    pANTLR3_COMMON_TOKEN    LTERM114;
    pANTLR3_COMMON_TOKEN    char_literal115;
    pANTLR3_COMMON_TOKEN    LTERM116;
    pANTLR3_COMMON_TOKEN    LTERM118;
    pANTLR3_COMMON_TOKEN    char_literal119;
    pANTLR3_COMMON_TOKEN    LTERM120;
    pANTLR3_COMMON_TOKEN    LTERM121;
    pANTLR3_COMMON_TOKEN    string_literal122;
    pANTLR3_COMMON_TOKEN    LTERM123;
    LexWhenPredParser_statement_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 LexWhenPredParser_statement_return

    LexWhenPredParser_statement_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 LexWhenPredParser_statement_return

    LexWhenPredParser_expression_return expression117;
    #undef	RETURN_TYPE_expression117
    #define	RETURN_TYPE_expression117 LexWhenPredParser_expression_return

    pANTLR3_BASE_TREE string_literal113_tree;
    pANTLR3_BASE_TREE LTERM114_tree;
    pANTLR3_BASE_TREE char_literal115_tree;
    pANTLR3_BASE_TREE LTERM116_tree;
    pANTLR3_BASE_TREE LTERM118_tree;
    pANTLR3_BASE_TREE char_literal119_tree;
    pANTLR3_BASE_TREE LTERM120_tree;
    pANTLR3_BASE_TREE LTERM121_tree;
    pANTLR3_BASE_TREE string_literal122_tree;
    pANTLR3_BASE_TREE LTERM123_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    ifStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(24)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal113       = NULL;
    LTERM114       = NULL;
    char_literal115       = NULL;
    LTERM116       = NULL;
    LTERM118       = NULL;
    char_literal119       = NULL;
    LTERM120       = NULL;
    LTERM121       = NULL;
    string_literal122       = NULL;
    LTERM123       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    expression117.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal113_tree   = NULL;
    LTERM114_tree   = NULL;
    char_literal115_tree   = NULL;
    LTERM116_tree   = NULL;
    LTERM118_tree   = NULL;
    char_literal119_tree   = NULL;
    LTERM120_tree   = NULL;
    LTERM121_tree   = NULL;
    string_literal122_tree   = NULL;
    LTERM123_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:249:5: ( 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) )
        // .//LexWhenPred.g:249:7: 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
        {
            string_literal113 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_ifStatement1622); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, string_literal113, NULL); }


            // .//LexWhenPred.g:249:12: ( LTERM )*

            for (;;)
            {
                int alt55=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA55_0 = LA(1);
                    if ( (LA55_0 == LTERM) ) 
                    {
                        alt55=1;
                    }

                }
                switch (alt55) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM114 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1624); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM114, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop55;	/* break out of the loop */
            	    break;
                }
            }
            loop55: ; /* Jump out to here if this rule does not match */

            char_literal115 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_ifStatement1627); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal115, NULL); }


            // .//LexWhenPred.g:249:23: ( LTERM )*

            for (;;)
            {
                int alt56=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA56_0 = LA(1);
                    if ( (LA56_0 == LTERM) ) 
                    {
                        alt56=1;
                    }

                }
                switch (alt56) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM116 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1629); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM116, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop56;	/* break out of the loop */
            	    break;
                }
            }
            loop56: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_ifStatement1632);
            expression117=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression117.tree, NULL); }

            // .//LexWhenPred.g:249:41: ( LTERM )*

            for (;;)
            {
                int alt57=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA57_0 = LA(1);
                    if ( (LA57_0 == LTERM) ) 
                    {
                        alt57=1;
                    }

                }
                switch (alt57) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM118 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1634); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM118, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop57;	/* break out of the loop */
            	    break;
                }
            }
            loop57: ; /* Jump out to here if this rule does not match */

            char_literal119 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_ifStatement1637); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal119, NULL); }


            // .//LexWhenPred.g:249:52: ( LTERM )*

            for (;;)
            {
                int alt58=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA58_0 = LA(1);
                    if ( (LA58_0 == LTERM) ) 
                    {
                        alt58=1;
                    }

                }
                switch (alt58) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM120 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1639); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM120, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop58;	/* break out of the loop */
            	    break;
                }
            }
            loop58: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_ifStatement1644);
            s1=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s1.tree, NULL); }

            // .//LexWhenPred.g:249:72: ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
            {
                int alt61=2;
                {
                    int LA61_0 = LA(1);
                    if ( (LA61_0 == LTERM) ) 
                    {
                        {
                            int LA61_1 = LA(2);
                            if ( (synpred76_LexWhenPred(ctx)) ) 
                            {
                                alt61=1;
                            }
                        }
                    }
                    else if ( (LA61_0 == 137) ) 
                    {
                        {
                            int LA61_2 = LA(2);
                            if ( (synpred76_LexWhenPred(ctx)) ) 
                            {
                                alt61=1;
                            }
                        }
                    }
                }
                switch (alt61) 
                {
            	case 1:
            	    // .//LexWhenPred.g:249:73: ( LTERM )* 'else' ( LTERM )* s2= statement
            	    {

            	        // .//LexWhenPred.g:249:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt59=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA59_0 = LA(1);
            	                if ( (LA59_0 == LTERM) ) 
            	                {
            	                    alt59=1;
            	                }

            	            }
            	            switch (alt59) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM121 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1647); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM121, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop59;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop59: ; /* Jump out to here if this rule does not match */

            	        string_literal122 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_ifStatement1650); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, string_literal122, NULL); }


            	        // .//LexWhenPred.g:249:87: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt60=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA60_0 = LA(1);
            	                if ( (LA60_0 == LTERM) ) 
            	                {
            	                    alt60=1;
            	                }

            	            }
            	            switch (alt60) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM123 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1652); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM123, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop60;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop60: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1657);
            	        s2=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s2.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression, s1, s2
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 249:109: -> ^( IF expression $s1 ( $s2)? )
            	{
            	    // .//LexWhenPred.g:249:112: ^( IF expression $s1 ( $s2)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IF, (pANTLR3_UINT8)"IF"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//LexWhenPred.g:249:132: ( $s2)?
            	        {
            	        	if ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if ( stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(24, ifStatement_StartIndex); }
    return retval;
}
/* $ANTLR end ifStatement */

/** 
 * $ANTLR start iterationStatement
 * .//LexWhenPred.g:252:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
 */
static LexWhenPredParser_iterationStatement_return
iterationStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_iterationStatement_return retval;
    ANTLR3_UINT32 iterationStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    LexWhenPredParser_doWhileStatement_return doWhileStatement124;
    #undef	RETURN_TYPE_doWhileStatement124
    #define	RETURN_TYPE_doWhileStatement124 LexWhenPredParser_doWhileStatement_return

    LexWhenPredParser_whileStatement_return whileStatement125;
    #undef	RETURN_TYPE_whileStatement125
    #define	RETURN_TYPE_whileStatement125 LexWhenPredParser_whileStatement_return

    LexWhenPredParser_forStatement_return forStatement126;
    #undef	RETURN_TYPE_forStatement126
    #define	RETURN_TYPE_forStatement126 LexWhenPredParser_forStatement_return

    LexWhenPredParser_forInStatement_return forInStatement127;
    #undef	RETURN_TYPE_forInStatement127
    #define	RETURN_TYPE_forInStatement127 LexWhenPredParser_forInStatement_return


    /* Initialize rule variables
     */
    iterationStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(25)) )
    {
    	retval.start = 0;

        return retval; 
    }
    doWhileStatement124.tree = NULL;

    whileStatement125.tree = NULL;

    forStatement126.tree = NULL;

    forInStatement127.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:253:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
            
            ANTLR3_UINT32 alt62;

            alt62=4;

            switch ( LA(1) ) 
            {
            case 138:
            	{
            		alt62=1;
            	}
                break;
            case 139:
            	{
            		alt62=2;
            	}
                break;
            case 140:
            	{

            		{
            		    int LA62_3 = LA(2);
            		    if ( (synpred79_LexWhenPred(ctx)) ) 
            		    {
            		        alt62=3;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt62=4;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 62;
            		        EXCEPTION->state        = 3;


            		        goto ruleiterationStatementEx;
            		    }
            		}
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 62;
                EXCEPTION->state        = 0;


                goto ruleiterationStatementEx;
            }

            switch (alt62) 
            {
        	case 1:
        	    // .//LexWhenPred.g:253:4: doWhileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_doWhileStatement_in_iterationStatement1689);
        	        doWhileStatement124=doWhileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, doWhileStatement124.tree);

        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:254:4: whileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_whileStatement_in_iterationStatement1694);
        	        whileStatement125=whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, whileStatement125.tree);

        	    }
        	    break;
        	case 3:
        	    // .//LexWhenPred.g:255:4: forStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forStatement_in_iterationStatement1699);
        	        forStatement126=forStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forStatement126.tree);

        	    }
        	    break;
        	case 4:
        	    // .//LexWhenPred.g:256:4: forInStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forInStatement_in_iterationStatement1704);
        	        forInStatement127=forInStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forInStatement127.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleiterationStatementEx; /* Prevent compiler warnings */
    ruleiterationStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(25, iterationStatement_StartIndex); }
    return retval;
}
/* $ANTLR end iterationStatement */

/** 
 * $ANTLR start doWhileStatement
 * .//LexWhenPred.g:259:1: doWhileStatement : 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) ;
 */
static LexWhenPredParser_doWhileStatement_return
doWhileStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_doWhileStatement_return retval;
    ANTLR3_UINT32 doWhileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal128;
    pANTLR3_COMMON_TOKEN    LTERM129;
    pANTLR3_COMMON_TOKEN    LTERM131;
    pANTLR3_COMMON_TOKEN    string_literal132;
    pANTLR3_COMMON_TOKEN    LTERM133;
    pANTLR3_COMMON_TOKEN    char_literal134;
    pANTLR3_COMMON_TOKEN    char_literal136;
    pANTLR3_COMMON_TOKEN    LTERM137;
    pANTLR3_COMMON_TOKEN    char_literal138;
    LexWhenPredParser_statement_return statement130;
    #undef	RETURN_TYPE_statement130
    #define	RETURN_TYPE_statement130 LexWhenPredParser_statement_return

    LexWhenPredParser_expression_return expression135;
    #undef	RETURN_TYPE_expression135
    #define	RETURN_TYPE_expression135 LexWhenPredParser_expression_return

    pANTLR3_BASE_TREE string_literal128_tree;
    pANTLR3_BASE_TREE LTERM129_tree;
    pANTLR3_BASE_TREE LTERM131_tree;
    pANTLR3_BASE_TREE string_literal132_tree;
    pANTLR3_BASE_TREE LTERM133_tree;
    pANTLR3_BASE_TREE char_literal134_tree;
    pANTLR3_BASE_TREE char_literal136_tree;
    pANTLR3_BASE_TREE LTERM137_tree;
    pANTLR3_BASE_TREE char_literal138_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    doWhileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(26)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal128       = NULL;
    LTERM129       = NULL;
    LTERM131       = NULL;
    string_literal132       = NULL;
    LTERM133       = NULL;
    char_literal134       = NULL;
    char_literal136       = NULL;
    LTERM137       = NULL;
    char_literal138       = NULL;
    statement130.tree = NULL;

    expression135.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal128_tree   = NULL;
    LTERM129_tree   = NULL;
    LTERM131_tree   = NULL;
    string_literal132_tree   = NULL;
    LTERM133_tree   = NULL;
    char_literal134_tree   = NULL;
    char_literal136_tree   = NULL;
    LTERM137_tree   = NULL;
    char_literal138_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:260:2: ( 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) )
        // .//LexWhenPred.g:260:4: 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' )
        {
            string_literal128 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_doWhileStatement1716); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, string_literal128, NULL); }


            // .//LexWhenPred.g:260:9: ( LTERM )*

            for (;;)
            {
                int alt63=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA63_0 = LA(1);
                    if ( (LA63_0 == LTERM) ) 
                    {
                        alt63=1;
                    }

                }
                switch (alt63) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM129 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1718); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM129, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop63;	/* break out of the loop */
            	    break;
                }
            }
            loop63: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_doWhileStatement1721);
            statement130=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement130.tree, NULL); }

            // .//LexWhenPred.g:260:26: ( LTERM )*

            for (;;)
            {
                int alt64=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA64_0 = LA(1);
                    if ( (LA64_0 == LTERM) ) 
                    {
                        alt64=1;
                    }

                }
                switch (alt64) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM131 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1723); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM131, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop64;	/* break out of the loop */
            	    break;
                }
            }
            loop64: ; /* Jump out to here if this rule does not match */

            string_literal132 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_doWhileStatement1726); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, string_literal132, NULL); }


            // .//LexWhenPred.g:260:41: ( LTERM )*

            for (;;)
            {
                int alt65=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA65_0 = LA(1);
                    if ( (LA65_0 == LTERM) ) 
                    {
                        alt65=1;
                    }

                }
                switch (alt65) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM133 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1728); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM133, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop65;	/* break out of the loop */
            	    break;
                }
            }
            loop65: ; /* Jump out to here if this rule does not match */

            char_literal134 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_doWhileStatement1731); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal134, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_doWhileStatement1733);
            expression135=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression135.tree, NULL); }
            char_literal136 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_doWhileStatement1735); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal136, NULL); }


            // .//LexWhenPred.g:260:67: ( LTERM | ';' )
            {
                int alt66=2;

                {
                    int LA66_0 = LA(1);
                    if ( (LA66_0 == LTERM) ) 
                    {
                        alt66=1;
                    }
                    else if ( (LA66_0 == 133) ) 
                    {
                        alt66=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 66;
                        EXCEPTION->state        = 0;


                        goto ruledoWhileStatementEx;
                    }
                }
                switch (alt66) 
                {
            	case 1:
            	    // .//LexWhenPred.g:260:68: LTERM
            	    {
            	        LTERM137 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1738); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM137, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//LexWhenPred.g:260:76: ';'
            	    {
            	        char_literal138 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_doWhileStatement1742); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal138, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 260:81: -> ^( DO statement expression )
            	{
            	    // .//LexWhenPred.g:260:84: ^( DO statement expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DO, (pANTLR3_UINT8)"DO"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledoWhileStatementEx; /* Prevent compiler warnings */
    ruledoWhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(26, doWhileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end doWhileStatement */

/** 
 * $ANTLR start whileStatement
 * .//LexWhenPred.g:263:1: whileStatement : 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) ;
 */
static LexWhenPredParser_whileStatement_return
whileStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_whileStatement_return retval;
    ANTLR3_UINT32 whileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal139;
    pANTLR3_COMMON_TOKEN    LTERM140;
    pANTLR3_COMMON_TOKEN    char_literal141;
    pANTLR3_COMMON_TOKEN    LTERM142;
    pANTLR3_COMMON_TOKEN    LTERM144;
    pANTLR3_COMMON_TOKEN    char_literal145;
    pANTLR3_COMMON_TOKEN    LTERM146;
    LexWhenPredParser_expression_return expression143;
    #undef	RETURN_TYPE_expression143
    #define	RETURN_TYPE_expression143 LexWhenPredParser_expression_return

    LexWhenPredParser_statement_return statement147;
    #undef	RETURN_TYPE_statement147
    #define	RETURN_TYPE_statement147 LexWhenPredParser_statement_return

    pANTLR3_BASE_TREE string_literal139_tree;
    pANTLR3_BASE_TREE LTERM140_tree;
    pANTLR3_BASE_TREE char_literal141_tree;
    pANTLR3_BASE_TREE LTERM142_tree;
    pANTLR3_BASE_TREE LTERM144_tree;
    pANTLR3_BASE_TREE char_literal145_tree;
    pANTLR3_BASE_TREE LTERM146_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    whileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(27)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal139       = NULL;
    LTERM140       = NULL;
    char_literal141       = NULL;
    LTERM142       = NULL;
    LTERM144       = NULL;
    char_literal145       = NULL;
    LTERM146       = NULL;
    expression143.tree = NULL;

    statement147.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal139_tree   = NULL;
    LTERM140_tree   = NULL;
    char_literal141_tree   = NULL;
    LTERM142_tree   = NULL;
    LTERM144_tree   = NULL;
    char_literal145_tree   = NULL;
    LTERM146_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:264:2: ( 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) )
        // .//LexWhenPred.g:264:4: 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal139 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_whileStatement1768); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, string_literal139, NULL); }


            // .//LexWhenPred.g:264:12: ( LTERM )*

            for (;;)
            {
                int alt67=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA67_0 = LA(1);
                    if ( (LA67_0 == LTERM) ) 
                    {
                        alt67=1;
                    }

                }
                switch (alt67) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM140 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1770); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM140, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop67;	/* break out of the loop */
            	    break;
                }
            }
            loop67: ; /* Jump out to here if this rule does not match */

            char_literal141 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_whileStatement1773); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal141, NULL); }


            // .//LexWhenPred.g:264:23: ( LTERM )*

            for (;;)
            {
                int alt68=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA68_0 = LA(1);
                    if ( (LA68_0 == LTERM) ) 
                    {
                        alt68=1;
                    }

                }
                switch (alt68) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM142 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1775); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM142, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop68;	/* break out of the loop */
            	    break;
                }
            }
            loop68: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1778);
            expression143=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression143.tree, NULL); }

            // .//LexWhenPred.g:264:41: ( LTERM )*

            for (;;)
            {
                int alt69=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA69_0 = LA(1);
                    if ( (LA69_0 == LTERM) ) 
                    {
                        alt69=1;
                    }

                }
                switch (alt69) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM144 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1780); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM144, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop69;	/* break out of the loop */
            	    break;
                }
            }
            loop69: ; /* Jump out to here if this rule does not match */

            char_literal145 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_whileStatement1783); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal145, NULL); }


            // .//LexWhenPred.g:264:52: ( LTERM )*

            for (;;)
            {
                int alt70=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA70_0 = LA(1);
                    if ( (LA70_0 == LTERM) ) 
                    {
                        alt70=1;
                    }

                }
                switch (alt70) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM146 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1785); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM146, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop70;	/* break out of the loop */
            	    break;
                }
            }
            loop70: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_whileStatement1788);
            statement147=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement147.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 264:69: -> ^( WHILE expression statement )
            	{
            	    // .//LexWhenPred.g:264:72: ^( WHILE expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHILE, (pANTLR3_UINT8)"WHILE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(27, whileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end whileStatement */

/** 
 * $ANTLR start forStatement
 * .//LexWhenPred.g:267:1: forStatement : 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) ;
 */
static LexWhenPredParser_forStatement_return
forStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_forStatement_return retval;
    ANTLR3_UINT32 forStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal148;
    pANTLR3_COMMON_TOKEN    LTERM149;
    pANTLR3_COMMON_TOKEN    char_literal150;
    pANTLR3_COMMON_TOKEN    LTERM151;
    pANTLR3_COMMON_TOKEN    LTERM152;
    pANTLR3_COMMON_TOKEN    char_literal153;
    pANTLR3_COMMON_TOKEN    LTERM154;
    pANTLR3_COMMON_TOKEN    LTERM155;
    pANTLR3_COMMON_TOKEN    char_literal156;
    pANTLR3_COMMON_TOKEN    LTERM157;
    pANTLR3_COMMON_TOKEN    LTERM158;
    pANTLR3_COMMON_TOKEN    char_literal159;
    pANTLR3_COMMON_TOKEN    LTERM160;
    LexWhenPredParser_forStatementInitialiserPart_return init;
    #undef	RETURN_TYPE_init
    #define	RETURN_TYPE_init LexWhenPredParser_forStatementInitialiserPart_return

    LexWhenPredParser_expression_return cond;
    #undef	RETURN_TYPE_cond
    #define	RETURN_TYPE_cond LexWhenPredParser_expression_return

    LexWhenPredParser_expression_return iter;
    #undef	RETURN_TYPE_iter
    #define	RETURN_TYPE_iter LexWhenPredParser_expression_return

    LexWhenPredParser_statement_return statement161;
    #undef	RETURN_TYPE_statement161
    #define	RETURN_TYPE_statement161 LexWhenPredParser_statement_return

    pANTLR3_BASE_TREE string_literal148_tree;
    pANTLR3_BASE_TREE LTERM149_tree;
    pANTLR3_BASE_TREE char_literal150_tree;
    pANTLR3_BASE_TREE LTERM151_tree;
    pANTLR3_BASE_TREE LTERM152_tree;
    pANTLR3_BASE_TREE char_literal153_tree;
    pANTLR3_BASE_TREE LTERM154_tree;
    pANTLR3_BASE_TREE LTERM155_tree;
    pANTLR3_BASE_TREE char_literal156_tree;
    pANTLR3_BASE_TREE LTERM157_tree;
    pANTLR3_BASE_TREE LTERM158_tree;
    pANTLR3_BASE_TREE char_literal159_tree;
    pANTLR3_BASE_TREE LTERM160_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forStatementInitialiserPart;
    /* Initialize rule variables
     */
    forStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(28)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal148       = NULL;
    LTERM149       = NULL;
    char_literal150       = NULL;
    LTERM151       = NULL;
    LTERM152       = NULL;
    char_literal153       = NULL;
    LTERM154       = NULL;
    LTERM155       = NULL;
    char_literal156       = NULL;
    LTERM157       = NULL;
    LTERM158       = NULL;
    char_literal159       = NULL;
    LTERM160       = NULL;
    init.tree = NULL;

    cond.tree = NULL;

    iter.tree = NULL;

    statement161.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal148_tree   = NULL;
    LTERM149_tree   = NULL;
    char_literal150_tree   = NULL;
    LTERM151_tree   = NULL;
    LTERM152_tree   = NULL;
    char_literal153_tree   = NULL;
    LTERM154_tree   = NULL;
    LTERM155_tree   = NULL;
    char_literal156_tree   = NULL;
    LTERM157_tree   = NULL;
    LTERM158_tree   = NULL;
    char_literal159_tree   = NULL;
    LTERM160_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forStatementInitialiserPart   = NULL;
    #define CREATE_stream_forStatementInitialiserPart  if (stream_forStatementInitialiserPart == NULL) {stream_forStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:268:2: ( 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) )
        // .//LexWhenPred.g:268:4: 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal148 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_forStatement1811); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, string_literal148, NULL); }


            // .//LexWhenPred.g:268:10: ( LTERM )*

            for (;;)
            {
                int alt71=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA71_0 = LA(1);
                    if ( (LA71_0 == LTERM) ) 
                    {
                        alt71=1;
                    }

                }
                switch (alt71) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM149 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1813); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM149, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop71;	/* break out of the loop */
            	    break;
                }
            }
            loop71: ; /* Jump out to here if this rule does not match */

            char_literal150 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_forStatement1816); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal150, NULL); }


            // .//LexWhenPred.g:268:21: ( ( LTERM )* init= forStatementInitialiserPart )?
            {
                int alt73=2;
                alt73 = cdfa73.predict(ctx, RECOGNIZER, ISTREAM, &cdfa73);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt73) 
                {
            	case 1:
            	    // .//LexWhenPred.g:268:22: ( LTERM )* init= forStatementInitialiserPart
            	    {

            	        // .//LexWhenPred.g:268:22: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt72=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA72_0 = LA(1);
            	                if ( (LA72_0 == LTERM) ) 
            	                {
            	                    alt72=1;
            	                }

            	            }
            	            switch (alt72) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM151 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1819); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM151, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop72;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop72: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_forStatementInitialiserPart_in_forStatement1824);
            	        init=forStatementInitialiserPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_forStatementInitialiserPart; stream_forStatementInitialiserPart->add(stream_forStatementInitialiserPart, init.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//LexWhenPred.g:268:64: ( LTERM )*

            for (;;)
            {
                int alt74=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA74_0 = LA(1);
                    if ( (LA74_0 == LTERM) ) 
                    {
                        alt74=1;
                    }

                }
                switch (alt74) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM152 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1828); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM152, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop74;	/* break out of the loop */
            	    break;
                }
            }
            loop74: ; /* Jump out to here if this rule does not match */

            char_literal153 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_forStatement1831); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal153, NULL); }


            // .//LexWhenPred.g:268:75: ( ( LTERM )* cond= expression )?
            {
                int alt76=2;
                alt76 = cdfa76.predict(ctx, RECOGNIZER, ISTREAM, &cdfa76);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt76) 
                {
            	case 1:
            	    // .//LexWhenPred.g:268:76: ( LTERM )* cond= expression
            	    {

            	        // .//LexWhenPred.g:268:76: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt75=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA75_0 = LA(1);
            	                if ( (LA75_0 == LTERM) ) 
            	                {
            	                    alt75=1;
            	                }

            	            }
            	            switch (alt75) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM154 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1834); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM154, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop75;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop75: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1839);
            	        cond=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, cond.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//LexWhenPred.g:268:101: ( LTERM )*

            for (;;)
            {
                int alt77=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA77_0 = LA(1);
                    if ( (LA77_0 == LTERM) ) 
                    {
                        alt77=1;
                    }

                }
                switch (alt77) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM155 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1843); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM155, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop77;	/* break out of the loop */
            	    break;
                }
            }
            loop77: ; /* Jump out to here if this rule does not match */

            char_literal156 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_forStatement1846); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal156, NULL); }


            // .//LexWhenPred.g:268:112: ( ( LTERM )* iter= expression )?
            {
                int alt79=2;
                alt79 = cdfa79.predict(ctx, RECOGNIZER, ISTREAM, &cdfa79);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt79) 
                {
            	case 1:
            	    // .//LexWhenPred.g:268:113: ( LTERM )* iter= expression
            	    {

            	        // .//LexWhenPred.g:268:113: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt78=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA78_0 = LA(1);
            	                if ( (LA78_0 == LTERM) ) 
            	                {
            	                    alt78=1;
            	                }

            	            }
            	            switch (alt78) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM157 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1849); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM157, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop78;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop78: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1854);
            	        iter=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, iter.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//LexWhenPred.g:268:138: ( LTERM )*

            for (;;)
            {
                int alt80=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA80_0 = LA(1);
                    if ( (LA80_0 == LTERM) ) 
                    {
                        alt80=1;
                    }

                }
                switch (alt80) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM158 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1858); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM158, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop80;	/* break out of the loop */
            	    break;
                }
            }
            loop80: ; /* Jump out to here if this rule does not match */

            char_literal159 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_forStatement1861); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal159, NULL); }


            // .//LexWhenPred.g:268:149: ( LTERM )*

            for (;;)
            {
                int alt81=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA81_0 = LA(1);
                    if ( (LA81_0 == LTERM) ) 
                    {
                        alt81=1;
                    }

                }
                switch (alt81) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM160 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1863); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM160, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop81;	/* break out of the loop */
            	    break;
                }
            }
            loop81: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forStatement1866);
            statement161=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement161.tree, NULL); }

             
            /* AST REWRITE
             * elements          : iter, init, statement, cond
             * token labels      : 
             * rule labels       : retval, init, iter, cond
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_init;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_iter;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cond;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_init=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token init", init.tree != NULL ? init.tree : NULL);
            	stream_iter=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token iter", iter.tree != NULL ? iter.tree : NULL);
            	stream_cond=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token cond", cond.tree != NULL ? cond.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 268:166: -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	{
            	    // .//LexWhenPred.g:268:170: ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR"), root_1));

            	        // .//LexWhenPred.g:268:176: ( ^( FORINIT $init) )?
            	        {
            	        	if ( (stream_init != NULL && stream_init->hasNext(stream_init))  )
            	        	{
            	        		// .//LexWhenPred.g:268:176: ^( FORINIT $init)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORINIT, (pANTLR3_UINT8)"FORINIT"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_init == NULL ? NULL : stream_init->nextTree(stream_init));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_init != NULL) stream_init->reset(stream_init);

            	        }
            	        // .//LexWhenPred.g:268:196: ( ^( FORCOND $cond) )?
            	        {
            	        	if ( (stream_cond != NULL && stream_cond->hasNext(stream_cond))  )
            	        	{
            	        		// .//LexWhenPred.g:268:196: ^( FORCOND $cond)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORCOND, (pANTLR3_UINT8)"FORCOND"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_cond == NULL ? NULL : stream_cond->nextTree(stream_cond));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_cond != NULL) stream_cond->reset(stream_cond);

            	        }
            	        // .//LexWhenPred.g:268:215: ( ^( FORITER $iter) )?
            	        {
            	        	if ( (stream_iter != NULL && stream_iter->hasNext(stream_iter))  )
            	        	{
            	        		// .//LexWhenPred.g:268:215: ^( FORITER $iter)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORITER, (pANTLR3_UINT8)"FORITER"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_iter == NULL ? NULL : stream_iter->nextTree(stream_iter));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_iter != NULL) stream_iter->reset(stream_iter);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_init != NULL) stream_init->free(stream_init);
            	if (stream_iter != NULL) stream_iter->free(stream_iter);
            	if (stream_cond != NULL) stream_cond->free(stream_cond);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementEx; /* Prevent compiler warnings */
    ruleforStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forStatementInitialiserPart != NULL) stream_forStatementInitialiserPart->free(stream_forStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(28, forStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forStatement */

/** 
 * $ANTLR start forStatementInitialiserPart
 * .//LexWhenPred.g:271:1: forStatementInitialiserPart : ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) );
 */
static LexWhenPredParser_forStatementInitialiserPart_return
forStatementInitialiserPart(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_forStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal163;
    pANTLR3_COMMON_TOKEN    LTERM164;
    LexWhenPredParser_expressionNoIn_return expressionNoIn162;
    #undef	RETURN_TYPE_expressionNoIn162
    #define	RETURN_TYPE_expressionNoIn162 LexWhenPredParser_expressionNoIn_return

    LexWhenPredParser_variableDeclarationListNoIn_return variableDeclarationListNoIn165;
    #undef	RETURN_TYPE_variableDeclarationListNoIn165
    #define	RETURN_TYPE_variableDeclarationListNoIn165 LexWhenPredParser_variableDeclarationListNoIn_return

    pANTLR3_BASE_TREE string_literal163_tree;
    pANTLR3_BASE_TREE LTERM164_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationListNoIn;
    /* Initialize rule variables
     */
    forStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(29)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal163       = NULL;
    LTERM164       = NULL;
    expressionNoIn162.tree = NULL;

    variableDeclarationListNoIn165.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal163_tree   = NULL;
    LTERM164_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_variableDeclarationListNoIn   = NULL;
    #define CREATE_stream_variableDeclarationListNoIn  if (stream_variableDeclarationListNoIn == NULL) {stream_variableDeclarationListNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationListNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:272:2: ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) )
            
            ANTLR3_UINT32 alt83;

            alt83=2;


            {
                int LA83_0 = LA(1);
                if ( (((LA83_0 >= Identifier) && (LA83_0 <= NumericLiteral)) || ((LA83_0 >= 126) && (LA83_0 <= 127)) || LA83_0 == 130 || ((LA83_0 >= 156) && (LA83_0 <= 157)) || ((LA83_0 >= 189) && (LA83_0 <= 190)) || ((LA83_0 >= 194) && (LA83_0 <= 205))) ) 
                {
                    alt83=1;
                }
                else if ( (LA83_0 == 132) ) 
                {
                    alt83=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 83;
                    EXCEPTION->state        = 0;


                    goto ruleforStatementInitialiserPartEx;
                }
            }
            switch (alt83) 
            {
        	case 1:
        	    // .//LexWhenPred.g:272:4: expressionNoIn
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionNoIn_in_forStatementInitialiserPart1915);
        	        expressionNoIn162=expressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionNoIn162.tree);

        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:273:4: 'var' ( LTERM )* variableDeclarationListNoIn
        	    {
        	        string_literal163 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_forStatementInitialiserPart1920); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, string_literal163, NULL); }


        	        // .//LexWhenPred.g:273:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt82=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA82_0 = LA(1);
        	                if ( (LA82_0 == LTERM) ) 
        	                {
        	                    alt82=1;
        	                }

        	            }
        	            switch (alt82) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM164 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatementInitialiserPart1922); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM164, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop82;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop82: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1925);
        	        variableDeclarationListNoIn165=variableDeclarationListNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationListNoIn; stream_variableDeclarationListNoIn->add(stream_variableDeclarationListNoIn, variableDeclarationListNoIn165.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationListNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 273:45: -> ^( VARLIST variableDeclarationListNoIn )
        	        	{
        	        	    // .//LexWhenPred.g:273:48: ^( VARLIST variableDeclarationListNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationListNoIn == NULL ? NULL : stream_variableDeclarationListNoIn->nextTree(stream_variableDeclarationListNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_variableDeclarationListNoIn != NULL) stream_variableDeclarationListNoIn->free(stream_variableDeclarationListNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(29, forStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forStatementInitialiserPart */

/** 
 * $ANTLR start forInStatement
 * .//LexWhenPred.g:276:1: forInStatement : 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) ;
 */
static LexWhenPredParser_forInStatement_return
forInStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_forInStatement_return retval;
    ANTLR3_UINT32 forInStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal166;
    pANTLR3_COMMON_TOKEN    LTERM167;
    pANTLR3_COMMON_TOKEN    char_literal168;
    pANTLR3_COMMON_TOKEN    LTERM169;
    pANTLR3_COMMON_TOKEN    LTERM171;
    pANTLR3_COMMON_TOKEN    string_literal172;
    pANTLR3_COMMON_TOKEN    LTERM173;
    pANTLR3_COMMON_TOKEN    LTERM175;
    pANTLR3_COMMON_TOKEN    char_literal176;
    pANTLR3_COMMON_TOKEN    LTERM177;
    LexWhenPredParser_forInStatementInitialiserPart_return forInStatementInitialiserPart170;
    #undef	RETURN_TYPE_forInStatementInitialiserPart170
    #define	RETURN_TYPE_forInStatementInitialiserPart170 LexWhenPredParser_forInStatementInitialiserPart_return

    LexWhenPredParser_expression_return expression174;
    #undef	RETURN_TYPE_expression174
    #define	RETURN_TYPE_expression174 LexWhenPredParser_expression_return

    LexWhenPredParser_statement_return statement178;
    #undef	RETURN_TYPE_statement178
    #define	RETURN_TYPE_statement178 LexWhenPredParser_statement_return

    pANTLR3_BASE_TREE string_literal166_tree;
    pANTLR3_BASE_TREE LTERM167_tree;
    pANTLR3_BASE_TREE char_literal168_tree;
    pANTLR3_BASE_TREE LTERM169_tree;
    pANTLR3_BASE_TREE LTERM171_tree;
    pANTLR3_BASE_TREE string_literal172_tree;
    pANTLR3_BASE_TREE LTERM173_tree;
    pANTLR3_BASE_TREE LTERM175_tree;
    pANTLR3_BASE_TREE char_literal176_tree;
    pANTLR3_BASE_TREE LTERM177_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forInStatementInitialiserPart;
    /* Initialize rule variables
     */
    forInStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(30)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal166       = NULL;
    LTERM167       = NULL;
    char_literal168       = NULL;
    LTERM169       = NULL;
    LTERM171       = NULL;
    string_literal172       = NULL;
    LTERM173       = NULL;
    LTERM175       = NULL;
    char_literal176       = NULL;
    LTERM177       = NULL;
    forInStatementInitialiserPart170.tree = NULL;

    expression174.tree = NULL;

    statement178.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal166_tree   = NULL;
    LTERM167_tree   = NULL;
    char_literal168_tree   = NULL;
    LTERM169_tree   = NULL;
    LTERM171_tree   = NULL;
    string_literal172_tree   = NULL;
    LTERM173_tree   = NULL;
    LTERM175_tree   = NULL;
    char_literal176_tree   = NULL;
    LTERM177_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forInStatementInitialiserPart   = NULL;
    #define CREATE_stream_forInStatementInitialiserPart  if (stream_forInStatementInitialiserPart == NULL) {stream_forInStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forInStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:277:2: ( 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) )
        // .//LexWhenPred.g:277:4: 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal166 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_forInStatement1945); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, string_literal166, NULL); }


            // .//LexWhenPred.g:277:10: ( LTERM )*

            for (;;)
            {
                int alt84=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA84_0 = LA(1);
                    if ( (LA84_0 == LTERM) ) 
                    {
                        alt84=1;
                    }

                }
                switch (alt84) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM167 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1947); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM167, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop84;	/* break out of the loop */
            	    break;
                }
            }
            loop84: ; /* Jump out to here if this rule does not match */

            char_literal168 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_forInStatement1950); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal168, NULL); }


            // .//LexWhenPred.g:277:21: ( LTERM )*

            for (;;)
            {
                int alt85=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA85_0 = LA(1);
                    if ( (LA85_0 == LTERM) ) 
                    {
                        alt85=1;
                    }

                }
                switch (alt85) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM169 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1952); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM169, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop85;	/* break out of the loop */
            	    break;
                }
            }
            loop85: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_forInStatementInitialiserPart_in_forInStatement1955);
            forInStatementInitialiserPart170=forInStatementInitialiserPart(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_forInStatementInitialiserPart; stream_forInStatementInitialiserPart->add(stream_forInStatementInitialiserPart, forInStatementInitialiserPart170.tree, NULL); }

            // .//LexWhenPred.g:277:58: ( LTERM )*

            for (;;)
            {
                int alt86=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA86_0 = LA(1);
                    if ( (LA86_0 == LTERM) ) 
                    {
                        alt86=1;
                    }

                }
                switch (alt86) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM171 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1957); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM171, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop86;	/* break out of the loop */
            	    break;
                }
            }
            loop86: ; /* Jump out to here if this rule does not match */

            string_literal172 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_forInStatement1960); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, string_literal172, NULL); }


            // .//LexWhenPred.g:277:70: ( LTERM )*

            for (;;)
            {
                int alt87=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA87_0 = LA(1);
                    if ( (LA87_0 == LTERM) ) 
                    {
                        alt87=1;
                    }

                }
                switch (alt87) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM173 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1962); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM173, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop87;	/* break out of the loop */
            	    break;
                }
            }
            loop87: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_forInStatement1965);
            expression174=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression174.tree, NULL); }

            // .//LexWhenPred.g:277:88: ( LTERM )*

            for (;;)
            {
                int alt88=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA88_0 = LA(1);
                    if ( (LA88_0 == LTERM) ) 
                    {
                        alt88=1;
                    }

                }
                switch (alt88) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM175 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1967); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM175, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop88;	/* break out of the loop */
            	    break;
                }
            }
            loop88: ; /* Jump out to here if this rule does not match */

            char_literal176 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_forInStatement1970); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal176, NULL); }


            // .//LexWhenPred.g:277:99: ( LTERM )*

            for (;;)
            {
                int alt89=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA89_0 = LA(1);
                    if ( (LA89_0 == LTERM) ) 
                    {
                        alt89=1;
                    }

                }
                switch (alt89) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM177 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1972); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM177, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop89;	/* break out of the loop */
            	    break;
                }
            }
            loop89: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forInStatement1975);
            statement178=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement178.tree, NULL); }

             
            /* AST REWRITE
             * elements          : forInStatementInitialiserPart, statement, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 277:116: -> ^( FORIN forInStatementInitialiserPart expression statement )
            	{
            	    // .//LexWhenPred.g:277:119: ^( FORIN forInStatementInitialiserPart expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORIN, (pANTLR3_UINT8)"FORIN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_forInStatementInitialiserPart == NULL ? NULL : stream_forInStatementInitialiserPart->nextTree(stream_forInStatementInitialiserPart));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementEx; /* Prevent compiler warnings */
    ruleforInStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forInStatementInitialiserPart != NULL) stream_forInStatementInitialiserPart->free(stream_forInStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(30, forInStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatement */

/** 
 * $ANTLR start forInStatementInitialiserPart
 * .//LexWhenPred.g:280:1: forInStatementInitialiserPart : ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) );
 */
static LexWhenPredParser_forInStatementInitialiserPart_return
forInStatementInitialiserPart(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_forInStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forInStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal180;
    pANTLR3_COMMON_TOKEN    LTERM181;
    LexWhenPredParser_leftHandSideExpression_return leftHandSideExpression179;
    #undef	RETURN_TYPE_leftHandSideExpression179
    #define	RETURN_TYPE_leftHandSideExpression179 LexWhenPredParser_leftHandSideExpression_return

    LexWhenPredParser_variableDeclarationNoIn_return variableDeclarationNoIn182;
    #undef	RETURN_TYPE_variableDeclarationNoIn182
    #define	RETURN_TYPE_variableDeclarationNoIn182 LexWhenPredParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE string_literal180_tree;
    pANTLR3_BASE_TREE LTERM181_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    forInStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(31)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal180       = NULL;
    LTERM181       = NULL;
    leftHandSideExpression179.tree = NULL;

    variableDeclarationNoIn182.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal180_tree   = NULL;
    LTERM181_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:281:2: ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) )
            
            ANTLR3_UINT32 alt91;

            alt91=2;


            {
                int LA91_0 = LA(1);
                if ( (((LA91_0 >= Identifier) && (LA91_0 <= NumericLiteral)) || ((LA91_0 >= 126) && (LA91_0 <= 127)) || LA91_0 == 130 || ((LA91_0 >= 156) && (LA91_0 <= 157)) || ((LA91_0 >= 201) && (LA91_0 <= 205))) ) 
                {
                    alt91=1;
                }
                else if ( (LA91_0 == 132) ) 
                {
                    alt91=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 91;
                    EXCEPTION->state        = 0;


                    goto ruleforInStatementInitialiserPartEx;
                }
            }
            switch (alt91) 
            {
        	case 1:
        	    // .//LexWhenPred.g:281:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1999);
        	        leftHandSideExpression179=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression179.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 281:27: -> leftHandSideExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:282:4: 'var' ( LTERM )* variableDeclarationNoIn
        	    {
        	        string_literal180 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_forInStatementInitialiserPart2008); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, string_literal180, NULL); }


        	        // .//LexWhenPred.g:282:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt90=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA90_0 = LA(1);
        	                if ( (LA90_0 == LTERM) ) 
        	                {
        	                    alt90=1;
        	                }

        	            }
        	            switch (alt90) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM181 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatementInitialiserPart2010); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforInStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM181, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop90;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop90: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart2013);
        	        variableDeclarationNoIn182=variableDeclarationNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn182.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 282:41: -> ^( VAR variableDeclarationNoIn )
        	        	{
        	        	    // .//LexWhenPred.g:282:44: ^( VAR variableDeclarationNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforInStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(31, forInStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatementInitialiserPart */

/** 
 * $ANTLR start continueStatement
 * .//LexWhenPred.g:285:1: continueStatement : 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) ;
 */
static LexWhenPredParser_continueStatement_return
continueStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_continueStatement_return retval;
    ANTLR3_UINT32 continueStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal183;
    pANTLR3_COMMON_TOKEN    Identifier184;
    pANTLR3_COMMON_TOKEN    LTERM185;
    pANTLR3_COMMON_TOKEN    char_literal186;

    pANTLR3_BASE_TREE string_literal183_tree;
    pANTLR3_BASE_TREE Identifier184_tree;
    pANTLR3_BASE_TREE LTERM185_tree;
    pANTLR3_BASE_TREE char_literal186_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;

    /* Initialize rule variables
     */
    continueStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(32)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal183       = NULL;
    Identifier184       = NULL;
    LTERM185       = NULL;
    char_literal186       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal183_tree   = NULL;
    Identifier184_tree   = NULL;
    LTERM185_tree   = NULL;
    char_literal186_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:286:2: ( 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) )
        // .//LexWhenPred.g:286:4: 'continue' ( Identifier )? ( LTERM | ';' )
        {
            string_literal183 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_continueStatement2032); 
            if  (HASEXCEPTION())
            {
                goto rulecontinueStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, string_literal183, NULL); }


            // .//LexWhenPred.g:286:15: ( Identifier )?
            {
                int alt92=2;
                {
                    int LA92_0 = LA(1);
                    if ( (LA92_0 == Identifier) ) 
                    {
                        alt92=1;
                    }
                }
                switch (alt92) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: Identifier
            	    {
            	        Identifier184 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_continueStatement2034); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier184, NULL); }


            	    }
            	    break;

                }
            }

            // .//LexWhenPred.g:286:27: ( LTERM | ';' )
            {
                int alt93=2;

                {
                    int LA93_0 = LA(1);
                    if ( (LA93_0 == LTERM) ) 
                    {
                        alt93=1;
                    }
                    else if ( (LA93_0 == 133) ) 
                    {
                        alt93=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 93;
                        EXCEPTION->state        = 0;


                        goto rulecontinueStatementEx;
                    }
                }
                switch (alt93) 
                {
            	case 1:
            	    // .//LexWhenPred.g:286:28: LTERM
            	    {
            	        LTERM185 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_continueStatement2038); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM185, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//LexWhenPred.g:286:36: ';'
            	    {
            	        char_literal186 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_continueStatement2042); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal186, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 286:42: -> ^( CONTINUE ( Identifier )? )
            	{
            	    // .//LexWhenPred.g:286:45: ^( CONTINUE ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTINUE, (pANTLR3_UINT8)"CONTINUE"), root_1));

            	        // .//LexWhenPred.g:286:56: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontinueStatementEx; /* Prevent compiler warnings */
    rulecontinueStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_142 != NULL) stream_142->free(stream_142);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(32, continueStatement_StartIndex); }
    return retval;
}
/* $ANTLR end continueStatement */

/** 
 * $ANTLR start breakStatement
 * .//LexWhenPred.g:289:1: breakStatement : 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) ;
 */
static LexWhenPredParser_breakStatement_return
breakStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_breakStatement_return retval;
    ANTLR3_UINT32 breakStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal187;
    pANTLR3_COMMON_TOKEN    Identifier188;
    pANTLR3_COMMON_TOKEN    LTERM189;
    pANTLR3_COMMON_TOKEN    char_literal190;

    pANTLR3_BASE_TREE string_literal187_tree;
    pANTLR3_BASE_TREE Identifier188_tree;
    pANTLR3_BASE_TREE LTERM189_tree;
    pANTLR3_BASE_TREE char_literal190_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    breakStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(33)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal187       = NULL;
    Identifier188       = NULL;
    LTERM189       = NULL;
    char_literal190       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal187_tree   = NULL;
    Identifier188_tree   = NULL;
    LTERM189_tree   = NULL;
    char_literal190_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:290:2: ( 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) )
        // .//LexWhenPred.g:290:4: 'break' ( Identifier )? ( LTERM | ';' )
        {
            string_literal187 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_breakStatement2064); 
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, string_literal187, NULL); }


            // .//LexWhenPred.g:290:12: ( Identifier )?
            {
                int alt94=2;
                {
                    int LA94_0 = LA(1);
                    if ( (LA94_0 == Identifier) ) 
                    {
                        alt94=1;
                    }
                }
                switch (alt94) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: Identifier
            	    {
            	        Identifier188 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_breakStatement2066); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier188, NULL); }


            	    }
            	    break;

                }
            }

            // .//LexWhenPred.g:290:24: ( LTERM | ';' )
            {
                int alt95=2;

                {
                    int LA95_0 = LA(1);
                    if ( (LA95_0 == LTERM) ) 
                    {
                        alt95=1;
                    }
                    else if ( (LA95_0 == 133) ) 
                    {
                        alt95=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 95;
                        EXCEPTION->state        = 0;


                        goto rulebreakStatementEx;
                    }
                }
                switch (alt95) 
                {
            	case 1:
            	    // .//LexWhenPred.g:290:25: LTERM
            	    {
            	        LTERM189 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_breakStatement2070); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM189, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//LexWhenPred.g:290:33: ';'
            	    {
            	        char_literal190 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_breakStatement2074); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal190, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 290:38: -> ^( BREAK ( Identifier )? )
            	{
            	    // .//LexWhenPred.g:290:41: ^( BREAK ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BREAK, (pANTLR3_UINT8)"BREAK"), root_1));

            	        // .//LexWhenPred.g:290:49: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(33, breakStatement_StartIndex); }
    return retval;
}
/* $ANTLR end breakStatement */

/** 
 * $ANTLR start returnStatement
 * .//LexWhenPred.g:293:1: returnStatement : 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) ;
 */
static LexWhenPredParser_returnStatement_return
returnStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_returnStatement_return retval;
    ANTLR3_UINT32 returnStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal191;
    pANTLR3_COMMON_TOKEN    LTERM193;
    pANTLR3_COMMON_TOKEN    char_literal194;
    LexWhenPredParser_expression_return expression192;
    #undef	RETURN_TYPE_expression192
    #define	RETURN_TYPE_expression192 LexWhenPredParser_expression_return

    pANTLR3_BASE_TREE string_literal191_tree;
    pANTLR3_BASE_TREE LTERM193_tree;
    pANTLR3_BASE_TREE char_literal194_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    returnStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(34)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal191       = NULL;
    LTERM193       = NULL;
    char_literal194       = NULL;
    expression192.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal191_tree   = NULL;
    LTERM193_tree   = NULL;
    char_literal194_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:294:2: ( 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) )
        // .//LexWhenPred.g:294:4: 'return' ( expression )? ( LTERM | ';' )
        {
            string_literal191 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_returnStatement2095); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, string_literal191, NULL); }


            // .//LexWhenPred.g:294:13: ( expression )?
            {
                int alt96=2;
                {
                    int LA96_0 = LA(1);
                    if ( (((LA96_0 >= Identifier) && (LA96_0 <= NumericLiteral)) || ((LA96_0 >= 126) && (LA96_0 <= 127)) || LA96_0 == 130 || ((LA96_0 >= 156) && (LA96_0 <= 157)) || ((LA96_0 >= 189) && (LA96_0 <= 190)) || ((LA96_0 >= 194) && (LA96_0 <= 205))) ) 
                    {
                        alt96=1;
                    }
                }
                switch (alt96) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2097);
            	        expression192=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression192.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//LexWhenPred.g:294:25: ( LTERM | ';' )
            {
                int alt97=2;

                {
                    int LA97_0 = LA(1);
                    if ( (LA97_0 == LTERM) ) 
                    {
                        alt97=1;
                    }
                    else if ( (LA97_0 == 133) ) 
                    {
                        alt97=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 97;
                        EXCEPTION->state        = 0;


                        goto rulereturnStatementEx;
                    }
                }
                switch (alt97) 
                {
            	case 1:
            	    // .//LexWhenPred.g:294:26: LTERM
            	    {
            	        LTERM193 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_returnStatement2101); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM193, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//LexWhenPred.g:294:34: ';'
            	    {
            	        char_literal194 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_returnStatement2105); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal194, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 294:39: -> ^( RETURN ( expression )? )
            	{
            	    // .//LexWhenPred.g:294:42: ^( RETURN ( expression )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RETURN, (pANTLR3_UINT8)"RETURN"), root_1));

            	        // .//LexWhenPred.g:294:51: ( expression )?
            	        {
            	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        	}
            	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(34, returnStatement_StartIndex); }
    return retval;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start withStatement
 * .//LexWhenPred.g:297:1: withStatement : 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) ;
 */
static LexWhenPredParser_withStatement_return
withStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_withStatement_return retval;
    ANTLR3_UINT32 withStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal195;
    pANTLR3_COMMON_TOKEN    LTERM196;
    pANTLR3_COMMON_TOKEN    char_literal197;
    pANTLR3_COMMON_TOKEN    LTERM198;
    pANTLR3_COMMON_TOKEN    LTERM200;
    pANTLR3_COMMON_TOKEN    char_literal201;
    pANTLR3_COMMON_TOKEN    LTERM202;
    LexWhenPredParser_expression_return expression199;
    #undef	RETURN_TYPE_expression199
    #define	RETURN_TYPE_expression199 LexWhenPredParser_expression_return

    LexWhenPredParser_statement_return statement203;
    #undef	RETURN_TYPE_statement203
    #define	RETURN_TYPE_statement203 LexWhenPredParser_statement_return

    pANTLR3_BASE_TREE string_literal195_tree;
    pANTLR3_BASE_TREE LTERM196_tree;
    pANTLR3_BASE_TREE char_literal197_tree;
    pANTLR3_BASE_TREE LTERM198_tree;
    pANTLR3_BASE_TREE LTERM200_tree;
    pANTLR3_BASE_TREE char_literal201_tree;
    pANTLR3_BASE_TREE LTERM202_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    withStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(35)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal195       = NULL;
    LTERM196       = NULL;
    char_literal197       = NULL;
    LTERM198       = NULL;
    LTERM200       = NULL;
    char_literal201       = NULL;
    LTERM202       = NULL;
    expression199.tree = NULL;

    statement203.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal195_tree   = NULL;
    LTERM196_tree   = NULL;
    char_literal197_tree   = NULL;
    LTERM198_tree   = NULL;
    LTERM200_tree   = NULL;
    char_literal201_tree   = NULL;
    LTERM202_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:298:2: ( 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) )
        // .//LexWhenPred.g:298:4: 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal195 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_withStatement2127); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, string_literal195, NULL); }


            // .//LexWhenPred.g:298:11: ( LTERM )*

            for (;;)
            {
                int alt98=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA98_0 = LA(1);
                    if ( (LA98_0 == LTERM) ) 
                    {
                        alt98=1;
                    }

                }
                switch (alt98) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM196 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2129); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM196, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop98;	/* break out of the loop */
            	    break;
                }
            }
            loop98: ; /* Jump out to here if this rule does not match */

            char_literal197 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_withStatement2132); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal197, NULL); }


            // .//LexWhenPred.g:298:22: ( LTERM )*

            for (;;)
            {
                int alt99=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA99_0 = LA(1);
                    if ( (LA99_0 == LTERM) ) 
                    {
                        alt99=1;
                    }

                }
                switch (alt99) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM198 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2134); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM198, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop99;	/* break out of the loop */
            	    break;
                }
            }
            loop99: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_withStatement2137);
            expression199=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression199.tree, NULL); }

            // .//LexWhenPred.g:298:40: ( LTERM )*

            for (;;)
            {
                int alt100=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA100_0 = LA(1);
                    if ( (LA100_0 == LTERM) ) 
                    {
                        alt100=1;
                    }

                }
                switch (alt100) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM200 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2139); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM200, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop100;	/* break out of the loop */
            	    break;
                }
            }
            loop100: ; /* Jump out to here if this rule does not match */

            char_literal201 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_withStatement2142); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal201, NULL); }


            // .//LexWhenPred.g:298:51: ( LTERM )*

            for (;;)
            {
                int alt101=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA101_0 = LA(1);
                    if ( (LA101_0 == LTERM) ) 
                    {
                        alt101=1;
                    }

                }
                switch (alt101) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM202 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2144); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM202, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop101;	/* break out of the loop */
            	    break;
                }
            }
            loop101: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_withStatement2147);
            statement203=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement203.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 298:68: -> ^( WITH expression statement )
            	{
            	    // .//LexWhenPred.g:298:71: ^( WITH expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WITH, (pANTLR3_UINT8)"WITH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithStatementEx; /* Prevent compiler warnings */
    rulewithStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(35, withStatement_StartIndex); }
    return retval;
}
/* $ANTLR end withStatement */

/** 
 * $ANTLR start labelledStatement
 * .//LexWhenPred.g:301:1: labelledStatement : Identifier ( LTERM )* ':' ( LTERM )* statement -> ^( LABEL Identifier statement ) ;
 */
static LexWhenPredParser_labelledStatement_return
labelledStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_labelledStatement_return retval;
    ANTLR3_UINT32 labelledStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier204;
    pANTLR3_COMMON_TOKEN    LTERM205;
    pANTLR3_COMMON_TOKEN    char_literal206;
    pANTLR3_COMMON_TOKEN    LTERM207;
    LexWhenPredParser_statement_return statement208;
    #undef	RETURN_TYPE_statement208
    #define	RETURN_TYPE_statement208 LexWhenPredParser_statement_return

    pANTLR3_BASE_TREE Identifier204_tree;
    pANTLR3_BASE_TREE LTERM205_tree;
    pANTLR3_BASE_TREE char_literal206_tree;
    pANTLR3_BASE_TREE LTERM207_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    labelledStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(36)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier204       = NULL;
    LTERM205       = NULL;
    char_literal206       = NULL;
    LTERM207       = NULL;
    statement208.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier204_tree   = NULL;
    LTERM205_tree   = NULL;
    char_literal206_tree   = NULL;
    LTERM207_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:302:2: ( Identifier ( LTERM )* ':' ( LTERM )* statement -> ^( LABEL Identifier statement ) )
        // .//LexWhenPred.g:302:4: Identifier ( LTERM )* ':' ( LTERM )* statement
        {
            Identifier204 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_labelledStatement2168); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier204, NULL); }


            // .//LexWhenPred.g:302:15: ( LTERM )*

            for (;;)
            {
                int alt102=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA102_0 = LA(1);
                    if ( (LA102_0 == LTERM) ) 
                    {
                        alt102=1;
                    }

                }
                switch (alt102) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM205 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_labelledStatement2170); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelabelledStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM205, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop102;	/* break out of the loop */
            	    break;
                }
            }
            loop102: ; /* Jump out to here if this rule does not match */

            char_literal206 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_labelledStatement2173); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal206, NULL); }


            // .//LexWhenPred.g:302:26: ( LTERM )*

            for (;;)
            {
                int alt103=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA103_0 = LA(1);
                    if ( (LA103_0 == LTERM) ) 
                    {
                        alt103=1;
                    }

                }
                switch (alt103) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM207 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_labelledStatement2175); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelabelledStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM207, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop103;	/* break out of the loop */
            	    break;
                }
            }
            loop103: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_labelledStatement2178);
            statement208=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement208.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 302:43: -> ^( LABEL Identifier statement )
            	{
            	    // .//LexWhenPred.g:302:46: ^( LABEL Identifier statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LABEL, (pANTLR3_UINT8)"LABEL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelabelledStatementEx; /* Prevent compiler warnings */
    rulelabelledStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(36, labelledStatement_StartIndex); }
    return retval;
}
/* $ANTLR end labelledStatement */

/** 
 * $ANTLR start switchStatement
 * .//LexWhenPred.g:305:1: switchStatement : 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) ;
 */
static LexWhenPredParser_switchStatement_return
switchStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_switchStatement_return retval;
    ANTLR3_UINT32 switchStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal209;
    pANTLR3_COMMON_TOKEN    LTERM210;
    pANTLR3_COMMON_TOKEN    char_literal211;
    pANTLR3_COMMON_TOKEN    LTERM212;
    pANTLR3_COMMON_TOKEN    LTERM214;
    pANTLR3_COMMON_TOKEN    char_literal215;
    pANTLR3_COMMON_TOKEN    LTERM216;
    LexWhenPredParser_expression_return expression213;
    #undef	RETURN_TYPE_expression213
    #define	RETURN_TYPE_expression213 LexWhenPredParser_expression_return

    LexWhenPredParser_caseBlock_return caseBlock217;
    #undef	RETURN_TYPE_caseBlock217
    #define	RETURN_TYPE_caseBlock217 LexWhenPredParser_caseBlock_return

    pANTLR3_BASE_TREE string_literal209_tree;
    pANTLR3_BASE_TREE LTERM210_tree;
    pANTLR3_BASE_TREE char_literal211_tree;
    pANTLR3_BASE_TREE LTERM212_tree;
    pANTLR3_BASE_TREE LTERM214_tree;
    pANTLR3_BASE_TREE char_literal215_tree;
    pANTLR3_BASE_TREE LTERM216_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseBlock;
    /* Initialize rule variables
     */
    switchStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(37)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal209       = NULL;
    LTERM210       = NULL;
    char_literal211       = NULL;
    LTERM212       = NULL;
    LTERM214       = NULL;
    char_literal215       = NULL;
    LTERM216       = NULL;
    expression213.tree = NULL;

    caseBlock217.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal209_tree   = NULL;
    LTERM210_tree   = NULL;
    char_literal211_tree   = NULL;
    LTERM212_tree   = NULL;
    LTERM214_tree   = NULL;
    char_literal215_tree   = NULL;
    LTERM216_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_caseBlock   = NULL;
    #define CREATE_stream_caseBlock  if (stream_caseBlock == NULL) {stream_caseBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseBlock"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:306:2: ( 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) )
        // .//LexWhenPred.g:306:4: 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock
        {
            string_literal209 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_switchStatement2201); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, string_literal209, NULL); }


            // .//LexWhenPred.g:306:13: ( LTERM )*

            for (;;)
            {
                int alt104=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA104_0 = LA(1);
                    if ( (LA104_0 == LTERM) ) 
                    {
                        alt104=1;
                    }

                }
                switch (alt104) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM210 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2203); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM210, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop104;	/* break out of the loop */
            	    break;
                }
            }
            loop104: ; /* Jump out to here if this rule does not match */

            char_literal211 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_switchStatement2206); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal211, NULL); }


            // .//LexWhenPred.g:306:24: ( LTERM )*

            for (;;)
            {
                int alt105=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA105_0 = LA(1);
                    if ( (LA105_0 == LTERM) ) 
                    {
                        alt105=1;
                    }

                }
                switch (alt105) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM212 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2208); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM212, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop105;	/* break out of the loop */
            	    break;
                }
            }
            loop105: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_switchStatement2211);
            expression213=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression213.tree, NULL); }

            // .//LexWhenPred.g:306:42: ( LTERM )*

            for (;;)
            {
                int alt106=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA106_0 = LA(1);
                    if ( (LA106_0 == LTERM) ) 
                    {
                        alt106=1;
                    }

                }
                switch (alt106) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM214 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2213); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM214, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop106;	/* break out of the loop */
            	    break;
                }
            }
            loop106: ; /* Jump out to here if this rule does not match */

            char_literal215 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_switchStatement2216); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal215, NULL); }


            // .//LexWhenPred.g:306:53: ( LTERM )*

            for (;;)
            {
                int alt107=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA107_0 = LA(1);
                    if ( (LA107_0 == LTERM) ) 
                    {
                        alt107=1;
                    }

                }
                switch (alt107) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM216 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2218); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM216, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop107;	/* break out of the loop */
            	    break;
                }
            }
            loop107: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_caseBlock_in_switchStatement2221);
            caseBlock217=caseBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_caseBlock; stream_caseBlock->add(stream_caseBlock, caseBlock217.tree, NULL); }

             
            /* AST REWRITE
             * elements          : caseBlock, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 306:70: -> ^( SWITCH expression caseBlock )
            	{
            	    // .//LexWhenPred.g:306:73: ^( SWITCH expression caseBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SWITCH, (pANTLR3_UINT8)"SWITCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_caseBlock == NULL ? NULL : stream_caseBlock->nextTree(stream_caseBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitchStatementEx; /* Prevent compiler warnings */
    ruleswitchStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_caseBlock != NULL) stream_caseBlock->free(stream_caseBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(37, switchStatement_StartIndex); }
    return retval;
}
/* $ANTLR end switchStatement */

/** 
 * $ANTLR start caseBlock
 * .//LexWhenPred.g:309:1: caseBlock : '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}' -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )? ;
 */
static LexWhenPredParser_caseBlock_return
caseBlock(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_caseBlock_return retval;
    ANTLR3_UINT32 caseBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal218;
    pANTLR3_COMMON_TOKEN    LTERM219;
    pANTLR3_COMMON_TOKEN    LTERM220;
    pANTLR3_COMMON_TOKEN    LTERM222;
    pANTLR3_COMMON_TOKEN    LTERM223;
    pANTLR3_COMMON_TOKEN    char_literal224;
    LexWhenPredParser_caseClause_return case1;
    #undef	RETURN_TYPE_case1
    #define	RETURN_TYPE_case1 LexWhenPredParser_caseClause_return

    LexWhenPredParser_caseClause_return case2;
    #undef	RETURN_TYPE_case2
    #define	RETURN_TYPE_case2 LexWhenPredParser_caseClause_return

    LexWhenPredParser_defaultClause_return defaultClause221;
    #undef	RETURN_TYPE_defaultClause221
    #define	RETURN_TYPE_defaultClause221 LexWhenPredParser_defaultClause_return

    pANTLR3_BASE_TREE char_literal218_tree;
    pANTLR3_BASE_TREE LTERM219_tree;
    pANTLR3_BASE_TREE LTERM220_tree;
    pANTLR3_BASE_TREE LTERM222_tree;
    pANTLR3_BASE_TREE LTERM223_tree;
    pANTLR3_BASE_TREE char_literal224_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_defaultClause;
    /* Initialize rule variables
     */
    caseBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(38)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal218       = NULL;
    LTERM219       = NULL;
    LTERM220       = NULL;
    LTERM222       = NULL;
    LTERM223       = NULL;
    char_literal224       = NULL;
    case1.tree = NULL;

    case2.tree = NULL;

    defaultClause221.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal218_tree   = NULL;
    LTERM219_tree   = NULL;
    LTERM220_tree   = NULL;
    LTERM222_tree   = NULL;
    LTERM223_tree   = NULL;
    char_literal224_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_caseClause   = NULL;
    #define CREATE_stream_caseClause  if (stream_caseClause == NULL) {stream_caseClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClause"); }
    stream_defaultClause   = NULL;
    #define CREATE_stream_defaultClause  if (stream_defaultClause == NULL) {stream_defaultClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule defaultClause"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:310:2: ( '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}' -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )? )
        // .//LexWhenPred.g:310:4: '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}'
        {
            char_literal218 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_caseBlock2243); 
            if  (HASEXCEPTION())
            {
                goto rulecaseBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal218, NULL); }


            // .//LexWhenPred.g:310:8: ( ( LTERM )* case1= caseClause )*

            for (;;)
            {
                int alt109=2;
                alt109 = cdfa109.predict(ctx, RECOGNIZER, ISTREAM, &cdfa109);
                if  (HASEXCEPTION())
                {
                    goto rulecaseBlockEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt109) 
                {
            	case 1:
            	    // .//LexWhenPred.g:310:9: ( LTERM )* case1= caseClause
            	    {

            	        // .//LexWhenPred.g:310:9: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt108=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA108_0 = LA(1);
            	                if ( (LA108_0 == LTERM) ) 
            	                {
            	                    alt108=1;
            	                }

            	            }
            	            switch (alt108) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM219 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2246); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM219, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop108;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop108: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2251);
            	        case1=caseClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, case1.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop109;	/* break out of the loop */
            	    break;
                }
            }
            loop109: ; /* Jump out to here if this rule does not match */


            // .//LexWhenPred.g:310:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?
            {
                int alt113=2;
                alt113 = cdfa113.predict(ctx, RECOGNIZER, ISTREAM, &cdfa113);
                if  (HASEXCEPTION())
                {
                    goto rulecaseBlockEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt113) 
                {
            	case 1:
            	    // .//LexWhenPred.g:310:36: ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )*
            	    {

            	        // .//LexWhenPred.g:310:36: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt110=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA110_0 = LA(1);
            	                if ( (LA110_0 == LTERM) ) 
            	                {
            	                    alt110=1;
            	                }

            	            }
            	            switch (alt110) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM220 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2256); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM220, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop110;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop110: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseBlock2259);
            	        defaultClause221=defaultClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_defaultClause; stream_defaultClause->add(stream_defaultClause, defaultClause221.tree, NULL); }

            	        // .//LexWhenPred.g:310:57: ( ( LTERM )* case2= caseClause )*

            	        for (;;)
            	        {
            	            int alt112=2;
            	            alt112 = cdfa112.predict(ctx, RECOGNIZER, ISTREAM, &cdfa112);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulecaseBlockEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt112) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:310:58: ( LTERM )* case2= caseClause
            	        	    {

            	        	        // .//LexWhenPred.g:310:58: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt111=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA111_0 = LA(1);
            	        	                if ( (LA111_0 == LTERM) ) 
            	        	                {
            	        	                    alt111=1;
            	        	                }

            	        	            }
            	        	            switch (alt111) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM222 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2262); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto rulecaseBlockEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM222, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop111;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop111: ; /* Jump out to here if this rule does not match */

            	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2267);
            	        	        case2=caseClause(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, case2.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop112;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop112: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // .//LexWhenPred.g:310:86: ( LTERM )*

            for (;;)
            {
                int alt114=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA114_0 = LA(1);
                    if ( (LA114_0 == LTERM) ) 
                    {
                        alt114=1;
                    }

                }
                switch (alt114) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM223 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2273); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM223, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop114;	/* break out of the loop */
            	    break;
                }
            }
            loop114: ; /* Jump out to here if this rule does not match */

            char_literal224 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_caseBlock2276); 
            if  (HASEXCEPTION())
            {
                goto rulecaseBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal224, NULL); }


             
            /* AST REWRITE
             * elements          : defaultClause, case2, case1
             * token labels      : 
             * rule labels       : case2, retval, case1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case1;

            	stream_case2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token case2", case2.tree != NULL ? case2.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_case1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token case1", case1.tree != NULL ? case1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 310:97: -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )?
            	{
            	    // .//LexWhenPred.g:310:101: ( ^( $case1) )*
            	    {
            	    	while ( (stream_case1 != NULL && stream_case1->hasNext(stream_case1))  )
            	    	{
            	    		// .//LexWhenPred.g:310:101: ^( $case1)
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_case1 == NULL ? NULL : stream_case1->nextNode(stream_case1), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if (stream_case1 != NULL) stream_case1->reset(stream_case1);

            	    }
            	    // .//LexWhenPred.g:310:112: ( ( ^( defaultClause ) )* )?
            	    {
            	    	if ( (stream_defaultClause != NULL && stream_defaultClause->hasNext(stream_defaultClause))  )
            	    	{
            	    		// .//LexWhenPred.g:310:113: ( ^( defaultClause ) )*
            	    		{
            	    			while ( (stream_defaultClause != NULL && stream_defaultClause->hasNext(stream_defaultClause))  )
            	    			{
            	    				// .//LexWhenPred.g:310:113: ^( defaultClause )
            	    				{
            	    				    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    				    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_defaultClause == NULL ? NULL : stream_defaultClause->nextNode(stream_defaultClause), root_1));

            	    				    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    				}

            	    			}
            	    			if (stream_defaultClause != NULL) stream_defaultClause->reset(stream_defaultClause);

            	    		}

            	    	}
            	    	if ( stream_defaultClause != NULL) stream_defaultClause->reset(stream_defaultClause);

            	    }
            	    // .//LexWhenPred.g:310:133: ( ( ^( $case2) )* )?
            	    {
            	    	if ( (stream_case2 != NULL && stream_case2->hasNext(stream_case2))  )
            	    	{
            	    		// .//LexWhenPred.g:310:134: ( ^( $case2) )*
            	    		{
            	    			while ( (stream_case2 != NULL && stream_case2->hasNext(stream_case2))  )
            	    			{
            	    				// .//LexWhenPred.g:310:134: ^( $case2)
            	    				{
            	    				    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    				    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_case2 == NULL ? NULL : stream_case2->nextNode(stream_case2), root_1));

            	    				    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    				}

            	    			}
            	    			if (stream_case2 != NULL) stream_case2->reset(stream_case2);

            	    		}

            	    	}
            	    	if ( stream_case2 != NULL) stream_case2->reset(stream_case2);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_case2 != NULL) stream_case2->free(stream_case2);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_case1 != NULL) stream_case1->free(stream_case1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseBlockEx; /* Prevent compiler warnings */
    rulecaseBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_caseClause != NULL) stream_caseClause->free(stream_caseClause);
        if (stream_defaultClause != NULL) stream_defaultClause->free(stream_defaultClause);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(38, caseBlock_StartIndex); }
    return retval;
}
/* $ANTLR end caseBlock */

/** 
 * $ANTLR start caseClause
 * .//LexWhenPred.g:313:1: caseClause : 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( CASE expression ( statementList )? ) ;
 */
static LexWhenPredParser_caseClause_return
caseClause(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_caseClause_return retval;
    ANTLR3_UINT32 caseClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal225;
    pANTLR3_COMMON_TOKEN    LTERM226;
    pANTLR3_COMMON_TOKEN    LTERM228;
    pANTLR3_COMMON_TOKEN    char_literal229;
    pANTLR3_COMMON_TOKEN    LTERM230;
    LexWhenPredParser_expression_return expression227;
    #undef	RETURN_TYPE_expression227
    #define	RETURN_TYPE_expression227 LexWhenPredParser_expression_return

    LexWhenPredParser_statementList_return statementList231;
    #undef	RETURN_TYPE_statementList231
    #define	RETURN_TYPE_statementList231 LexWhenPredParser_statementList_return

    pANTLR3_BASE_TREE string_literal225_tree;
    pANTLR3_BASE_TREE LTERM226_tree;
    pANTLR3_BASE_TREE LTERM228_tree;
    pANTLR3_BASE_TREE char_literal229_tree;
    pANTLR3_BASE_TREE LTERM230_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_148;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    caseClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(39)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal225       = NULL;
    LTERM226       = NULL;
    LTERM228       = NULL;
    char_literal229       = NULL;
    LTERM230       = NULL;
    expression227.tree = NULL;

    statementList231.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal225_tree   = NULL;
    LTERM226_tree   = NULL;
    LTERM228_tree   = NULL;
    char_literal229_tree   = NULL;
    LTERM230_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_148   = NULL;
    #define CREATE_stream_148  if (stream_148 == NULL) {stream_148 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 148"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:314:2: ( 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( CASE expression ( statementList )? ) )
        // .//LexWhenPred.g:314:4: 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )?
        {
            string_literal225 = (pANTLR3_COMMON_TOKEN) MATCHT(148, &FOLLOW_148_in_caseClause2313); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_148; stream_148->add(stream_148, string_literal225, NULL); }


            // .//LexWhenPred.g:314:11: ( LTERM )*

            for (;;)
            {
                int alt115=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA115_0 = LA(1);
                    if ( (LA115_0 == LTERM) ) 
                    {
                        alt115=1;
                    }

                }
                switch (alt115) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM226 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2315); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM226, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop115;	/* break out of the loop */
            	    break;
                }
            }
            loop115: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_caseClause2318);
            expression227=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression227.tree, NULL); }

            // .//LexWhenPred.g:314:29: ( LTERM )*

            for (;;)
            {
                int alt116=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA116_0 = LA(1);
                    if ( (LA116_0 == LTERM) ) 
                    {
                        alt116=1;
                    }

                }
                switch (alt116) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM228 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2320); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM228, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop116;	/* break out of the loop */
            	    break;
                }
            }
            loop116: ; /* Jump out to here if this rule does not match */

            char_literal229 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_caseClause2323); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal229, NULL); }


            // .//LexWhenPred.g:314:40: ( LTERM )*

            for (;;)
            {
                int alt117=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA117_0 = LA(1);
                    if ( (LA117_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA117_2 = LA(2);
                            if ( (synpred134_LexWhenPred(ctx)) ) 
                            {
                                alt117=1;
                            }

                        }
                    }

                }
                switch (alt117) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM230 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2325); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM230, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop117;	/* break out of the loop */
            	    break;
                }
            }
            loop117: ; /* Jump out to here if this rule does not match */


            // .//LexWhenPred.g:314:47: ( statementList )?
            {
                int alt118=2;
                {
                    int LA118_0 = LA(1);
                    if ( (((LA118_0 >= Identifier) && (LA118_0 <= NumericLiteral)) || ((LA118_0 >= 126) && (LA118_0 <= 127)) || LA118_0 == 130 || ((LA118_0 >= 132) && (LA118_0 <= 133)) || ((LA118_0 >= 135) && (LA118_0 <= 136)) || ((LA118_0 >= 138) && (LA118_0 <= 140)) || ((LA118_0 >= 142) && (LA118_0 <= 145)) || LA118_0 == 147 || ((LA118_0 >= 150) && (LA118_0 <= 151)) || ((LA118_0 >= 156) && (LA118_0 <= 157)) || ((LA118_0 >= 189) && (LA118_0 <= 190)) || ((LA118_0 >= 194) && (LA118_0 <= 205))) ) 
                    {
                        alt118=1;
                    }
                }
                switch (alt118) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2328);
            	        statementList231=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList231.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : statementList, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 314:62: -> ^( CASE expression ( statementList )? )
            	{
            	    // .//LexWhenPred.g:314:65: ^( CASE expression ( statementList )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        // .//LexWhenPred.g:314:84: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseEx; /* Prevent compiler warnings */
    rulecaseClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_148 != NULL) stream_148->free(stream_148);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(39, caseClause_StartIndex); }
    return retval;
}
/* $ANTLR end caseClause */

/** 
 * $ANTLR start defaultClause
 * .//LexWhenPred.g:317:1: defaultClause : 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( DEFAULT ( statementList )? ) ;
 */
static LexWhenPredParser_defaultClause_return
defaultClause(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_defaultClause_return retval;
    ANTLR3_UINT32 defaultClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal232;
    pANTLR3_COMMON_TOKEN    LTERM233;
    pANTLR3_COMMON_TOKEN    char_literal234;
    pANTLR3_COMMON_TOKEN    LTERM235;
    LexWhenPredParser_statementList_return statementList236;
    #undef	RETURN_TYPE_statementList236
    #define	RETURN_TYPE_statementList236 LexWhenPredParser_statementList_return

    pANTLR3_BASE_TREE string_literal232_tree;
    pANTLR3_BASE_TREE LTERM233_tree;
    pANTLR3_BASE_TREE char_literal234_tree;
    pANTLR3_BASE_TREE LTERM235_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_149;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    defaultClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(40)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal232       = NULL;
    LTERM233       = NULL;
    char_literal234       = NULL;
    LTERM235       = NULL;
    statementList236.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal232_tree   = NULL;
    LTERM233_tree   = NULL;
    char_literal234_tree   = NULL;
    LTERM235_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_149   = NULL;
    #define CREATE_stream_149  if (stream_149 == NULL) {stream_149 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 149"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:318:2: ( 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( DEFAULT ( statementList )? ) )
        // .//LexWhenPred.g:318:4: 'default' ( LTERM )* ':' ( LTERM )* ( statementList )?
        {
            string_literal232 = (pANTLR3_COMMON_TOKEN) MATCHT(149, &FOLLOW_149_in_defaultClause2353); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_149; stream_149->add(stream_149, string_literal232, NULL); }


            // .//LexWhenPred.g:318:14: ( LTERM )*

            for (;;)
            {
                int alt119=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA119_0 = LA(1);
                    if ( (LA119_0 == LTERM) ) 
                    {
                        alt119=1;
                    }

                }
                switch (alt119) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM233 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2355); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM233, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop119;	/* break out of the loop */
            	    break;
                }
            }
            loop119: ; /* Jump out to here if this rule does not match */

            char_literal234 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_defaultClause2358); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal234, NULL); }


            // .//LexWhenPred.g:318:25: ( LTERM )*

            for (;;)
            {
                int alt120=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA120_0 = LA(1);
                    if ( (LA120_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA120_2 = LA(2);
                            if ( (synpred137_LexWhenPred(ctx)) ) 
                            {
                                alt120=1;
                            }

                        }
                    }

                }
                switch (alt120) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM235 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2360); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM235, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop120;	/* break out of the loop */
            	    break;
                }
            }
            loop120: ; /* Jump out to here if this rule does not match */


            // .//LexWhenPred.g:318:32: ( statementList )?
            {
                int alt121=2;
                {
                    int LA121_0 = LA(1);
                    if ( (((LA121_0 >= Identifier) && (LA121_0 <= NumericLiteral)) || ((LA121_0 >= 126) && (LA121_0 <= 127)) || LA121_0 == 130 || ((LA121_0 >= 132) && (LA121_0 <= 133)) || ((LA121_0 >= 135) && (LA121_0 <= 136)) || ((LA121_0 >= 138) && (LA121_0 <= 140)) || ((LA121_0 >= 142) && (LA121_0 <= 145)) || LA121_0 == 147 || ((LA121_0 >= 150) && (LA121_0 <= 151)) || ((LA121_0 >= 156) && (LA121_0 <= 157)) || ((LA121_0 >= 189) && (LA121_0 <= 190)) || ((LA121_0 >= 194) && (LA121_0 <= 205))) ) 
                    {
                        alt121=1;
                    }
                }
                switch (alt121) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_defaultClause2363);
            	        statementList236=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList236.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : statementList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 318:47: -> ^( DEFAULT ( statementList )? )
            	{
            	    // .//LexWhenPred.g:318:50: ^( DEFAULT ( statementList )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DEFAULT, (pANTLR3_UINT8)"DEFAULT"), root_1));

            	        // .//LexWhenPred.g:318:60: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledefaultClauseEx; /* Prevent compiler warnings */
    ruledefaultClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_149 != NULL) stream_149->free(stream_149);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(40, defaultClause_StartIndex); }
    return retval;
}
/* $ANTLR end defaultClause */

/** 
 * $ANTLR start throwStatement
 * .//LexWhenPred.g:321:1: throwStatement : 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) ;
 */
static LexWhenPredParser_throwStatement_return
throwStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_throwStatement_return retval;
    ANTLR3_UINT32 throwStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal237;
    pANTLR3_COMMON_TOKEN    LTERM239;
    pANTLR3_COMMON_TOKEN    char_literal240;
    LexWhenPredParser_expression_return expression238;
    #undef	RETURN_TYPE_expression238
    #define	RETURN_TYPE_expression238 LexWhenPredParser_expression_return

    pANTLR3_BASE_TREE string_literal237_tree;
    pANTLR3_BASE_TREE LTERM239_tree;
    pANTLR3_BASE_TREE char_literal240_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_150;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    throwStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(41)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal237       = NULL;
    LTERM239       = NULL;
    char_literal240       = NULL;
    expression238.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal237_tree   = NULL;
    LTERM239_tree   = NULL;
    char_literal240_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_150   = NULL;
    #define CREATE_stream_150  if (stream_150 == NULL) {stream_150 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 150"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:322:2: ( 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) )
        // .//LexWhenPred.g:322:4: 'throw' expression ( LTERM | ';' )
        {
            string_literal237 = (pANTLR3_COMMON_TOKEN) MATCHT(150, &FOLLOW_150_in_throwStatement2385); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_150; stream_150->add(stream_150, string_literal237, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_throwStatement2387);
            expression238=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression238.tree, NULL); }

            // .//LexWhenPred.g:322:23: ( LTERM | ';' )
            {
                int alt122=2;

                {
                    int LA122_0 = LA(1);
                    if ( (LA122_0 == LTERM) ) 
                    {
                        alt122=1;
                    }
                    else if ( (LA122_0 == 133) ) 
                    {
                        alt122=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 122;
                        EXCEPTION->state        = 0;


                        goto rulethrowStatementEx;
                    }
                }
                switch (alt122) 
                {
            	case 1:
            	    // .//LexWhenPred.g:322:24: LTERM
            	    {
            	        LTERM239 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_throwStatement2390); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM239, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//LexWhenPred.g:322:32: ';'
            	    {
            	        char_literal240 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_throwStatement2394); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal240, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 322:37: -> ^( THROW expression )
            	{
            	    // .//LexWhenPred.g:322:40: ^( THROW expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, THROW, (pANTLR3_UINT8)"THROW"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulethrowStatementEx; /* Prevent compiler warnings */
    rulethrowStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_150 != NULL) stream_150->free(stream_150);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(41, throwStatement_StartIndex); }
    return retval;
}
/* $ANTLR end throwStatement */

/** 
 * $ANTLR start tryStatement
 * .//LexWhenPred.g:325:1: tryStatement : ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) ) ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? ) ;
 */
static LexWhenPredParser_tryStatement_return
tryStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_tryStatement_return retval;
    ANTLR3_UINT32 tryStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal241;
    pANTLR3_COMMON_TOKEN    LTERM242;
    pANTLR3_COMMON_TOKEN    LTERM244;
    pANTLR3_COMMON_TOKEN    LTERM247;
    LexWhenPredParser_statementBlock_return statementBlock243;
    #undef	RETURN_TYPE_statementBlock243
    #define	RETURN_TYPE_statementBlock243 LexWhenPredParser_statementBlock_return

    LexWhenPredParser_finallyClause_return finallyClause245;
    #undef	RETURN_TYPE_finallyClause245
    #define	RETURN_TYPE_finallyClause245 LexWhenPredParser_finallyClause_return

    LexWhenPredParser_catchClause_return catchClause246;
    #undef	RETURN_TYPE_catchClause246
    #define	RETURN_TYPE_catchClause246 LexWhenPredParser_catchClause_return

    LexWhenPredParser_finallyClause_return finallyClause248;
    #undef	RETURN_TYPE_finallyClause248
    #define	RETURN_TYPE_finallyClause248 LexWhenPredParser_finallyClause_return

    pANTLR3_BASE_TREE string_literal241_tree;
    pANTLR3_BASE_TREE LTERM242_tree;
    pANTLR3_BASE_TREE LTERM244_tree;
    pANTLR3_BASE_TREE LTERM247_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_151;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_finallyClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_catchClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    tryStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(42)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal241       = NULL;
    LTERM242       = NULL;
    LTERM244       = NULL;
    LTERM247       = NULL;
    statementBlock243.tree = NULL;

    finallyClause245.tree = NULL;

    catchClause246.tree = NULL;

    finallyClause248.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal241_tree   = NULL;
    LTERM242_tree   = NULL;
    LTERM244_tree   = NULL;
    LTERM247_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_151   = NULL;
    #define CREATE_stream_151  if (stream_151 == NULL) {stream_151 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 151"); } 
    stream_finallyClause   = NULL;
    #define CREATE_stream_finallyClause  if (stream_finallyClause == NULL) {stream_finallyClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule finallyClause"); }
    stream_catchClause   = NULL;
    #define CREATE_stream_catchClause  if (stream_catchClause == NULL) {stream_catchClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule catchClause"); }
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:326:2: ( ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) ) ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? ) )
        // .//LexWhenPred.g:326:4: ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) ) ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? )
        {
            // .//LexWhenPred.g:326:4: ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) )
            // .//LexWhenPred.g:326:5: 'try' ( LTERM )* statementBlock ( LTERM )*
            {
                string_literal241 = (pANTLR3_COMMON_TOKEN) MATCHT(151, &FOLLOW_151_in_tryStatement2415); 
                if  (HASEXCEPTION())
                {
                    goto ruletryStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_151; stream_151->add(stream_151, string_literal241, NULL); }


                // .//LexWhenPred.g:326:11: ( LTERM )*

                for (;;)
                {
                    int alt123=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA123_0 = LA(1);
                        if ( (LA123_0 == LTERM) ) 
                        {
                            alt123=1;
                        }

                    }
                    switch (alt123) 
                    {
                	case 1:
                	    // .//LexWhenPred.g:0:0: LTERM
                	    {
                	        LTERM242 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2417); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruletryStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM242, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop123;	/* break out of the loop */
                	    break;
                    }
                }
                loop123: ; /* Jump out to here if this rule does not match */

                FOLLOWPUSH(FOLLOW_statementBlock_in_tryStatement2420);
                statementBlock243=statementBlock(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruletryStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock243.tree, NULL); }

                // .//LexWhenPred.g:326:33: ( LTERM )*

                for (;;)
                {
                    int alt124=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA124_0 = LA(1);
                        if ( (LA124_0 == LTERM) ) 
                        {
                            alt124=1;
                        }

                    }
                    switch (alt124) 
                    {
                	case 1:
                	    // .//LexWhenPred.g:0:0: LTERM
                	    {
                	        LTERM244 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2422); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruletryStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM244, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop124;	/* break out of the loop */
                	    break;
                    }
                }
                loop124: ; /* Jump out to here if this rule does not match */


                 
                /* AST REWRITE
                 * elements          : statementBlock
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 326:40: -> ^( TRY statementBlock )
                	{
                	    // .//LexWhenPred.g:326:43: ^( TRY statementBlock )
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRY, (pANTLR3_UINT8)"TRY"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:326:65: ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? )
            {
                int alt127=2;

                {
                    int LA127_0 = LA(1);
                    if ( (LA127_0 == 153) ) 
                    {
                        alt127=1;
                    }
                    else if ( (LA127_0 == 152) ) 
                    {
                        alt127=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 127;
                        EXCEPTION->state        = 0;


                        goto ruletryStatementEx;
                    }
                }
                switch (alt127) 
                {
            	case 1:
            	    // .//LexWhenPred.g:326:66: finallyClause
            	    {
            	        FOLLOWPUSH(FOLLOW_finallyClause_in_tryStatement2434);
            	        finallyClause245=finallyClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyClause; stream_finallyClause->add(stream_finallyClause, finallyClause245.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : tryStatement, finallyClause
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 326:80: -> ^( $tryStatement finallyClause )
            	        	{
            	        	    // .//LexWhenPred.g:326:83: ^( $tryStatement finallyClause )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_finallyClause == NULL ? NULL : stream_finallyClause->nextTree(stream_finallyClause));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // .//LexWhenPred.g:326:115: catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?
            	    {
            	        FOLLOWPUSH(FOLLOW_catchClause_in_tryStatement2446);
            	        catchClause246=catchClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_catchClause; stream_catchClause->add(stream_catchClause, catchClause246.tree, NULL); }

            	        // .//LexWhenPred.g:326:127: ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?
            	        {
            	            int alt126=2;
            	            alt126 = cdfa126.predict(ctx, RECOGNIZER, ISTREAM, &cdfa126);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruletryStatementEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt126) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:326:128: ( LTERM )* finallyClause
            	        	    {

            	        	        // .//LexWhenPred.g:326:128: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt125=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA125_0 = LA(1);
            	        	                if ( (LA125_0 == LTERM) ) 
            	        	                {
            	        	                    alt125=1;
            	        	                }

            	        	            }
            	        	            switch (alt125) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM247 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2449); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruletryStatementEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM247, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop125;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop125: ; /* Jump out to here if this rule does not match */

            	        	        FOLLOWPUSH(FOLLOW_finallyClause_in_tryStatement2452);
            	        	        finallyClause248=finallyClause(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruletryStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyClause; stream_finallyClause->add(stream_finallyClause, finallyClause248.tree, NULL); }

            	        	         
            	        	        /* AST REWRITE
            	        	         * elements          : tryStatement, catchClause, finallyClause
            	        	         * token labels      : 
            	        	         * rule labels       : retval
            	        	         * token list labels : 
            	        	         * rule list labels  : 
            	        	         */
            	        	        if ( BACKTRACKING==0 ) 
            	        	        {
            	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        	retval.tree    = root_0;
            	        	        	// 326:149: -> ^( $tryStatement catchClause finallyClause )
            	        	        	{
            	        	        	    // .//LexWhenPred.g:326:152: ^( $tryStatement catchClause finallyClause )
            	        	        	    {
            	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_catchClause == NULL ? NULL : stream_catchClause->nextTree(stream_catchClause));
            	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_finallyClause == NULL ? NULL : stream_finallyClause->nextTree(stream_finallyClause));

            	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	        	    }

            	        	        	}

            	        	        	retval.tree = root_0; // set result root
            	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        	        }
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletryStatementEx; /* Prevent compiler warnings */
    ruletryStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_151 != NULL) stream_151->free(stream_151);
        if (stream_finallyClause != NULL) stream_finallyClause->free(stream_finallyClause);
        if (stream_catchClause != NULL) stream_catchClause->free(stream_catchClause);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(42, tryStatement_StartIndex); }
    return retval;
}
/* $ANTLR end tryStatement */

/** 
 * $ANTLR start catchClause
 * .//LexWhenPred.g:329:1: catchClause : 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) ;
 */
static LexWhenPredParser_catchClause_return
catchClause(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_catchClause_return retval;
    ANTLR3_UINT32 catchClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal249;
    pANTLR3_COMMON_TOKEN    LTERM250;
    pANTLR3_COMMON_TOKEN    char_literal251;
    pANTLR3_COMMON_TOKEN    LTERM252;
    pANTLR3_COMMON_TOKEN    Identifier253;
    pANTLR3_COMMON_TOKEN    LTERM254;
    pANTLR3_COMMON_TOKEN    char_literal255;
    pANTLR3_COMMON_TOKEN    LTERM256;
    LexWhenPredParser_statementBlock_return statementBlock257;
    #undef	RETURN_TYPE_statementBlock257
    #define	RETURN_TYPE_statementBlock257 LexWhenPredParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal249_tree;
    pANTLR3_BASE_TREE LTERM250_tree;
    pANTLR3_BASE_TREE char_literal251_tree;
    pANTLR3_BASE_TREE LTERM252_tree;
    pANTLR3_BASE_TREE Identifier253_tree;
    pANTLR3_BASE_TREE LTERM254_tree;
    pANTLR3_BASE_TREE char_literal255_tree;
    pANTLR3_BASE_TREE LTERM256_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_152;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    catchClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(43)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal249       = NULL;
    LTERM250       = NULL;
    char_literal251       = NULL;
    LTERM252       = NULL;
    Identifier253       = NULL;
    LTERM254       = NULL;
    char_literal255       = NULL;
    LTERM256       = NULL;
    statementBlock257.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal249_tree   = NULL;
    LTERM250_tree   = NULL;
    char_literal251_tree   = NULL;
    LTERM252_tree   = NULL;
    Identifier253_tree   = NULL;
    LTERM254_tree   = NULL;
    char_literal255_tree   = NULL;
    LTERM256_tree   = NULL;

    stream_152   = NULL;
    #define CREATE_stream_152  if (stream_152 == NULL) {stream_152 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 152"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:330:2: ( 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) )
        // .//LexWhenPred.g:330:4: 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock
        {
            string_literal249 = (pANTLR3_COMMON_TOKEN) MATCHT(152, &FOLLOW_152_in_catchClause2485); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_152; stream_152->add(stream_152, string_literal249, NULL); }


            // .//LexWhenPred.g:330:12: ( LTERM )*

            for (;;)
            {
                int alt128=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA128_0 = LA(1);
                    if ( (LA128_0 == LTERM) ) 
                    {
                        alt128=1;
                    }

                }
                switch (alt128) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM250 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2487); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM250, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop128;	/* break out of the loop */
            	    break;
                }
            }
            loop128: ; /* Jump out to here if this rule does not match */

            char_literal251 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_catchClause2490); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal251, NULL); }


            // .//LexWhenPred.g:330:23: ( LTERM )*

            for (;;)
            {
                int alt129=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA129_0 = LA(1);
                    if ( (LA129_0 == LTERM) ) 
                    {
                        alt129=1;
                    }

                }
                switch (alt129) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM252 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2492); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM252, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop129;	/* break out of the loop */
            	    break;
                }
            }
            loop129: ; /* Jump out to here if this rule does not match */

            Identifier253 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_catchClause2495); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier253, NULL); }


            // .//LexWhenPred.g:330:41: ( LTERM )*

            for (;;)
            {
                int alt130=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA130_0 = LA(1);
                    if ( (LA130_0 == LTERM) ) 
                    {
                        alt130=1;
                    }

                }
                switch (alt130) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM254 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2497); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM254, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop130;	/* break out of the loop */
            	    break;
                }
            }
            loop130: ; /* Jump out to here if this rule does not match */

            char_literal255 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_catchClause2500); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal255, NULL); }


            // .//LexWhenPred.g:330:52: ( LTERM )*

            for (;;)
            {
                int alt131=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA131_0 = LA(1);
                    if ( (LA131_0 == LTERM) ) 
                    {
                        alt131=1;
                    }

                }
                switch (alt131) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM256 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2502); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM256, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop131;	/* break out of the loop */
            	    break;
                }
            }
            loop131: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_catchClause2505);
            statementBlock257=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock257.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 330:74: -> ^( CATCH Identifier statementBlock )
            	{
            	    // .//LexWhenPred.g:330:77: ^( CATCH Identifier statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CATCH, (pANTLR3_UINT8)"CATCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchClauseEx; /* Prevent compiler warnings */
    rulecatchClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_152 != NULL) stream_152->free(stream_152);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(43, catchClause_StartIndex); }
    return retval;
}
/* $ANTLR end catchClause */

/** 
 * $ANTLR start finallyClause
 * .//LexWhenPred.g:333:1: finallyClause : 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) ;
 */
static LexWhenPredParser_finallyClause_return
finallyClause(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_finallyClause_return retval;
    ANTLR3_UINT32 finallyClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal258;
    pANTLR3_COMMON_TOKEN    LTERM259;
    LexWhenPredParser_statementBlock_return statementBlock260;
    #undef	RETURN_TYPE_statementBlock260
    #define	RETURN_TYPE_statementBlock260 LexWhenPredParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal258_tree;
    pANTLR3_BASE_TREE LTERM259_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_153;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    finallyClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(44)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal258       = NULL;
    LTERM259       = NULL;
    statementBlock260.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal258_tree   = NULL;
    LTERM259_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_153   = NULL;
    #define CREATE_stream_153  if (stream_153 == NULL) {stream_153 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 153"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:334:2: ( 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) )
        // .//LexWhenPred.g:334:4: 'finally' ( LTERM )* statementBlock
        {
            string_literal258 = (pANTLR3_COMMON_TOKEN) MATCHT(153, &FOLLOW_153_in_finallyClause2527); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_153; stream_153->add(stream_153, string_literal258, NULL); }


            // .//LexWhenPred.g:334:14: ( LTERM )*

            for (;;)
            {
                int alt132=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA132_0 = LA(1);
                    if ( (LA132_0 == LTERM) ) 
                    {
                        alt132=1;
                    }

                }
                switch (alt132) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM259 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_finallyClause2529); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefinallyClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM259, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop132;	/* break out of the loop */
            	    break;
                }
            }
            loop132: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyClause2532);
            statementBlock260=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock260.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 334:36: -> ^( FINALLY statementBlock )
            	{
            	    // .//LexWhenPred.g:334:39: ^( FINALLY statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FINALLY, (pANTLR3_UINT8)"FINALLY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyClauseEx; /* Prevent compiler warnings */
    rulefinallyClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_153 != NULL) stream_153->free(stream_153);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(44, finallyClause_StartIndex); }
    return retval;
}
/* $ANTLR end finallyClause */

/** 
 * $ANTLR start msgSendStatement
 * .//LexWhenPred.g:338:1: msgSendStatement : (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )? ;
 */
static LexWhenPredParser_msgSendStatement_return
msgSendStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_msgSendStatement_return retval;
    ANTLR3_UINT32 msgSendStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM261;
    pANTLR3_COMMON_TOKEN    string_literal262;
    pANTLR3_COMMON_TOKEN    LTERM263;
    pANTLR3_COMMON_TOKEN    char_literal264;
    pANTLR3_COMMON_TOKEN    string_literal265;
    LexWhenPredParser_leftHandSideExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 LexWhenPredParser_leftHandSideExpression_return

    LexWhenPredParser_leftHandSideExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 LexWhenPredParser_leftHandSideExpression_return

    LexWhenPredParser_memberExpression_return memberExpression266;
    #undef	RETURN_TYPE_memberExpression266
    #define	RETURN_TYPE_memberExpression266 LexWhenPredParser_memberExpression_return

    pANTLR3_BASE_TREE LTERM261_tree;
    pANTLR3_BASE_TREE string_literal262_tree;
    pANTLR3_BASE_TREE LTERM263_tree;
    pANTLR3_BASE_TREE char_literal264_tree;
    pANTLR3_BASE_TREE string_literal265_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_154;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    msgSendStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(45)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM261       = NULL;
    string_literal262       = NULL;
    LTERM263       = NULL;
    char_literal264       = NULL;
    string_literal265       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    memberExpression266.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM261_tree   = NULL;
    string_literal262_tree   = NULL;
    LTERM263_tree   = NULL;
    char_literal264_tree   = NULL;
    string_literal265_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_154   = NULL;
    #define CREATE_stream_154  if (stream_154 == NULL) {stream_154 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 154"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:339:2: ( (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )? )
        // .//LexWhenPred.g:339:4: (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )?
        {
            // .//LexWhenPred.g:339:4: (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) )
            // .//LexWhenPred.g:339:5: e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' )
            {
                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement2557);
                e1=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e1.tree, NULL); }

                // .//LexWhenPred.g:339:32: ( LTERM )*

                for (;;)
                {
                    int alt133=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA133_0 = LA(1);
                        if ( (LA133_0 == LTERM) ) 
                        {
                            alt133=1;
                        }

                    }
                    switch (alt133) 
                    {
                	case 1:
                	    // .//LexWhenPred.g:0:0: LTERM
                	    {
                	        LTERM261 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSendStatement2560); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM261, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop133;	/* break out of the loop */
                	    break;
                    }
                }
                loop133: ; /* Jump out to here if this rule does not match */

                string_literal262 = (pANTLR3_COMMON_TOKEN) MATCHT(154, &FOLLOW_154_in_msgSendStatement2563); 
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_154; stream_154->add(stream_154, string_literal262, NULL); }

                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement2568);
                e2=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

                // .//LexWhenPred.g:339:71: ( LTERM | ';' )
                {
                    int alt134=2;

                    {
                        int LA134_0 = LA(1);
                        if ( (LA134_0 == LTERM) ) 
                        {
                            alt134=1;
                        }
                        else if ( (LA134_0 == 133) ) 
                        {
                            alt134=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 134;
                            EXCEPTION->state        = 0;


                            goto rulemsgSendStatementEx;
                        }
                    }
                    switch (alt134) 
                    {
                	case 1:
                	    // .//LexWhenPred.g:339:72: LTERM
                	    {
                	        LTERM263 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSendStatement2571); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM263, NULL); }


                	    }
                	    break;
                	case 2:
                	    // .//LexWhenPred.g:339:80: ';'
                	    {
                	        char_literal264 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_msgSendStatement2575); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal264, NULL); }


                	    }
                	    break;

                    }
                }

                 
                /* AST REWRITE
                 * elements          : e2, e1
                 * token labels      : 
                 * rule labels       : retval, e1, e2
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
                	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 339:85: -> ^( MESSAGE_SEND $e1 $e2)
                	{
                	    // .//LexWhenPred.g:339:88: ^( MESSAGE_SEND $e1 $e2)
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_SEND, (pANTLR3_UINT8)"MESSAGE_SEND"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_e1 != NULL) stream_e1->free(stream_e1);
                	if (stream_e2 != NULL) stream_e2->free(stream_e2);


                }
            }


            // .//LexWhenPred.g:339:114: ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )?
            {
                int alt135=2;
                {
                    int LA135_0 = LA(1);
                    if ( (LA135_0 == 154) ) 
                    {
                        alt135=1;
                    }
                }
                switch (alt135) 
                {
            	case 1:
            	    // .//LexWhenPred.g:339:116: '->' memberExpression
            	    {
            	        string_literal265 = (pANTLR3_COMMON_TOKEN) MATCHT(154, &FOLLOW_154_in_msgSendStatement2594); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSendStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_154; stream_154->add(stream_154, string_literal265, NULL); }

            	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgSendStatement2596);
            	        memberExpression266=memberExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSendStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression266.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : memberExpression, msgSendStatement
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 339:138: -> ^( $msgSendStatement memberExpression )
            	        	{
            	        	    // .//LexWhenPred.g:339:141: ^( $msgSendStatement memberExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSendStatementEx; /* Prevent compiler warnings */
    rulemsgSendStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_154 != NULL) stream_154->free(stream_154);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(45, msgSendStatement_StartIndex); }
    return retval;
}
/* $ANTLR end msgSendStatement */

/** 
 * $ANTLR start msgRecvStatement
 * .//LexWhenPred.g:346:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );
 */
static LexWhenPredParser_msgRecvStatement_return
msgRecvStatement(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_msgRecvStatement_return retval;
    ANTLR3_UINT32 msgRecvStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM267;
    pANTLR3_COMMON_TOKEN    string_literal268;
    pANTLR3_COMMON_TOKEN    LTERM269;
    pANTLR3_COMMON_TOKEN    char_literal270;
    pANTLR3_COMMON_TOKEN    LTERM271;
    pANTLR3_COMMON_TOKEN    string_literal272;
    pANTLR3_COMMON_TOKEN    LTERM273;
    pANTLR3_COMMON_TOKEN    string_literal274;
    pANTLR3_COMMON_TOKEN    LTERM275;
    pANTLR3_COMMON_TOKEN    char_literal276;
    LexWhenPredParser_memberExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 LexWhenPredParser_memberExpression_return

    LexWhenPredParser_leftHandSideExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 LexWhenPredParser_leftHandSideExpression_return

    LexWhenPredParser_memberExpression_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 LexWhenPredParser_memberExpression_return

    pANTLR3_BASE_TREE LTERM267_tree;
    pANTLR3_BASE_TREE string_literal268_tree;
    pANTLR3_BASE_TREE LTERM269_tree;
    pANTLR3_BASE_TREE char_literal270_tree;
    pANTLR3_BASE_TREE LTERM271_tree;
    pANTLR3_BASE_TREE string_literal272_tree;
    pANTLR3_BASE_TREE LTERM273_tree;
    pANTLR3_BASE_TREE string_literal274_tree;
    pANTLR3_BASE_TREE LTERM275_tree;
    pANTLR3_BASE_TREE char_literal276_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    msgRecvStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(46)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM267       = NULL;
    string_literal268       = NULL;
    LTERM269       = NULL;
    char_literal270       = NULL;
    LTERM271       = NULL;
    string_literal272       = NULL;
    LTERM273       = NULL;
    string_literal274       = NULL;
    LTERM275       = NULL;
    char_literal276       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    e3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM267_tree   = NULL;
    string_literal268_tree   = NULL;
    LTERM269_tree   = NULL;
    char_literal270_tree   = NULL;
    LTERM271_tree   = NULL;
    string_literal272_tree   = NULL;
    LTERM273_tree   = NULL;
    string_literal274_tree   = NULL;
    LTERM275_tree   = NULL;
    char_literal276_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:347:2: (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) )
            
            ANTLR3_UINT32 alt141;

            alt141=2;

            alt141 = cdfa141.predict(ctx, RECOGNIZER, ISTREAM, &cdfa141);
            if  (HASEXCEPTION())
            {
                goto rulemsgRecvStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt141) 
            {
        	case 1:
        	    // .//LexWhenPred.g:347:4: e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' )
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgRecvStatement2624);
        	        e1=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, e1.tree, NULL); }

        	        // .//LexWhenPred.g:347:24: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt136=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA136_0 = LA(1);
        	                if ( (LA136_0 == LTERM) ) 
        	                {
        	                    alt136=1;
        	                }

        	            }
        	            switch (alt136) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM267 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2626); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM267, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop136;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop136: ; /* Jump out to here if this rule does not match */

        	        string_literal268 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_msgRecvStatement2628); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, string_literal268, NULL); }

        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement2632);
        	        e2=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

        	        // .//LexWhenPred.g:347:61: ( LTERM | ';' )
        	        {
        	            int alt137=2;

        	            {
        	                int LA137_0 = LA(1);
        	                if ( (LA137_0 == LTERM) ) 
        	                {
        	                    alt137=1;
        	                }
        	                else if ( (LA137_0 == 133) ) 
        	                {
        	                    alt137=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 137;
        	                    EXCEPTION->state        = 0;


        	                    goto rulemsgRecvStatementEx;
        	                }
        	            }
        	            switch (alt137) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:347:62: LTERM
        	        	    {
        	        	        LTERM269 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2635); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM269, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//LexWhenPred.g:347:70: ';'
        	        	    {
        	        	        char_literal270 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_msgRecvStatement2639); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal270, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : e1, e2
        	         * token labels      : 
        	         * rule labels       : retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 347:76: -> ^( MESSAGE_RECV $e1 $e2)
        	        	{
        	        	    // .//LexWhenPred.g:347:79: ^( MESSAGE_RECV $e1 $e2)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV, (pANTLR3_UINT8)"MESSAGE_RECV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:348:4: e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' )
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgRecvStatement2660);
        	        e1=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, e1.tree, NULL); }

        	        // .//LexWhenPred.g:348:24: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt138=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA138_0 = LA(1);
        	                if ( (LA138_0 == LTERM) ) 
        	                {
        	                    alt138=1;
        	                }

        	            }
        	            switch (alt138) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM271 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2662); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM271, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop138;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop138: ; /* Jump out to here if this rule does not match */

        	        string_literal272 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_msgRecvStatement2664); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, string_literal272, NULL); }

        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement2668);
        	        e2=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

        	        // .//LexWhenPred.g:348:61: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt139=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA139_0 = LA(1);
        	                if ( (LA139_0 == LTERM) ) 
        	                {
        	                    alt139=1;
        	                }

        	            }
        	            switch (alt139) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM273 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2670); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM273, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop139;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop139: ; /* Jump out to here if this rule does not match */

        	        string_literal274 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_msgRecvStatement2673); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, string_literal274, NULL); }

        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgRecvStatement2677);
        	        e3=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, e3.tree, NULL); }

        	        // .//LexWhenPred.g:348:93: ( LTERM | ';' )
        	        {
        	            int alt140=2;

        	            {
        	                int LA140_0 = LA(1);
        	                if ( (LA140_0 == LTERM) ) 
        	                {
        	                    alt140=1;
        	                }
        	                else if ( (LA140_0 == 133) ) 
        	                {
        	                    alt140=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 140;
        	                    EXCEPTION->state        = 0;


        	                    goto rulemsgRecvStatementEx;
        	                }
        	            }
        	            switch (alt140) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:348:94: LTERM
        	        	    {
        	        	        LTERM275 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2680); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM275, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//LexWhenPred.g:348:102: ';'
        	        	    {
        	        	        char_literal276 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_msgRecvStatement2684); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, char_literal276, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : e3, e1, e2
        	         * token labels      : 
        	         * rule labels       : e3, retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 348:107: -> ^( MESSAGE_RECV $e1 $e2 $e3)
        	        	{
        	        	    // .//LexWhenPred.g:348:110: ^( MESSAGE_RECV $e1 $e2 $e3)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV, (pANTLR3_UINT8)"MESSAGE_RECV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvStatementEx; /* Prevent compiler warnings */
    rulemsgRecvStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(46, msgRecvStatement_StartIndex); }
    return retval;
}
/* $ANTLR end msgRecvStatement */

/** 
 * $ANTLR start expression
 * .//LexWhenPred.g:352:1: expression : assignmentExpression ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* -> ^( EXPR_LIST ( assignmentExpression )+ ) ;
 */
static LexWhenPredParser_expression_return
expression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_expression_return retval;
    ANTLR3_UINT32 expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM278;
    pANTLR3_COMMON_TOKEN    char_literal279;
    pANTLR3_COMMON_TOKEN    LTERM280;
    LexWhenPredParser_assignmentExpression_return assignmentExpression277;
    #undef	RETURN_TYPE_assignmentExpression277
    #define	RETURN_TYPE_assignmentExpression277 LexWhenPredParser_assignmentExpression_return

    LexWhenPredParser_assignmentExpression_return assignmentExpression281;
    #undef	RETURN_TYPE_assignmentExpression281
    #define	RETURN_TYPE_assignmentExpression281 LexWhenPredParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM278_tree;
    pANTLR3_BASE_TREE char_literal279_tree;
    pANTLR3_BASE_TREE LTERM280_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(47)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM278       = NULL;
    char_literal279       = NULL;
    LTERM280       = NULL;
    assignmentExpression277.tree = NULL;

    assignmentExpression281.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM278_tree   = NULL;
    char_literal279_tree   = NULL;
    LTERM280_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:353:2: ( assignmentExpression ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* -> ^( EXPR_LIST ( assignmentExpression )+ ) )
        // .//LexWhenPred.g:353:4: assignmentExpression ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
        {
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression2711);
            assignmentExpression277=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression277.tree, NULL); }

            // .//LexWhenPred.g:353:25: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*

            for (;;)
            {
                int alt144=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA144_0 = LA(1);
                    if ( (LA144_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA144_1 = LA(2);
                            if ( (synpred161_LexWhenPred(ctx)) ) 
                            {
                                alt144=1;
                            }

                        }
                    }
                    else if ( (LA144_0 == 128) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA144_4 = LA(2);
                            if ( (synpred161_LexWhenPred(ctx)) ) 
                            {
                                alt144=1;
                            }

                        }
                    }

                }
                switch (alt144) 
                {
            	case 1:
            	    // .//LexWhenPred.g:353:26: ( LTERM )* ',' ( LTERM )* assignmentExpression
            	    {

            	        // .//LexWhenPred.g:353:26: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt142=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA142_0 = LA(1);
            	                if ( (LA142_0 == LTERM) ) 
            	                {
            	                    alt142=1;
            	                }

            	            }
            	            switch (alt142) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM278 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expression2714); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM278, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop142;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop142: ; /* Jump out to here if this rule does not match */

            	        char_literal279 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_expression2717); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal279, NULL); }


            	        // .//LexWhenPred.g:353:37: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt143=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA143_0 = LA(1);
            	                if ( (LA143_0 == LTERM) ) 
            	                {
            	                    alt143=1;
            	                }

            	            }
            	            switch (alt143) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM280 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expression2719); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM280, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop143;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop143: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression2722);
            	        assignmentExpression281=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression281.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop144;	/* break out of the loop */
            	    break;
                }
            }
            loop144: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 353:67: -> ^( EXPR_LIST ( assignmentExpression )+ )
            	{
            	    // .//LexWhenPred.g:353:71: ^( EXPR_LIST ( assignmentExpression )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR_LIST, (pANTLR3_UINT8)"EXPR_LIST"), root_1));

            	        if ((stream_assignmentExpression == NULL || !stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_assignmentExpression->hasNext(stream_assignmentExpression))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        	}
            	        	stream_assignmentExpression->reset(stream_assignmentExpression);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(47, expression_StartIndex); }
    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start expressionNoIn
 * .//LexWhenPred.g:356:1: expressionNoIn : assignmentExpressionNoIn ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )* -> ^( EXPR_LIST ( assignmentExpressionNoIn )+ ) ;
 */
static LexWhenPredParser_expressionNoIn_return
expressionNoIn(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_expressionNoIn_return retval;
    ANTLR3_UINT32 expressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM283;
    pANTLR3_COMMON_TOKEN    char_literal284;
    pANTLR3_COMMON_TOKEN    LTERM285;
    LexWhenPredParser_assignmentExpressionNoIn_return assignmentExpressionNoIn282;
    #undef	RETURN_TYPE_assignmentExpressionNoIn282
    #define	RETURN_TYPE_assignmentExpressionNoIn282 LexWhenPredParser_assignmentExpressionNoIn_return

    LexWhenPredParser_assignmentExpressionNoIn_return assignmentExpressionNoIn286;
    #undef	RETURN_TYPE_assignmentExpressionNoIn286
    #define	RETURN_TYPE_assignmentExpressionNoIn286 LexWhenPredParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM283_tree;
    pANTLR3_BASE_TREE char_literal284_tree;
    pANTLR3_BASE_TREE LTERM285_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    /* Initialize rule variables
     */
    expressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(48)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM283       = NULL;
    char_literal284       = NULL;
    LTERM285       = NULL;
    assignmentExpressionNoIn282.tree = NULL;

    assignmentExpressionNoIn286.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM283_tree   = NULL;
    char_literal284_tree   = NULL;
    LTERM285_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:357:2: ( assignmentExpressionNoIn ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )* -> ^( EXPR_LIST ( assignmentExpressionNoIn )+ ) )
        // .//LexWhenPred.g:357:4: assignmentExpressionNoIn ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*
        {
            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2746);
            assignmentExpressionNoIn282=assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn282.tree, NULL); }

            // .//LexWhenPred.g:357:29: ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*

            for (;;)
            {
                int alt147=2;
                alt147 = cdfa147.predict(ctx, RECOGNIZER, ISTREAM, &cdfa147);
                if  (HASEXCEPTION())
                {
                    goto ruleexpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt147) 
                {
            	case 1:
            	    // .//LexWhenPred.g:357:30: ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn
            	    {

            	        // .//LexWhenPred.g:357:30: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt145=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA145_0 = LA(1);
            	                if ( (LA145_0 == LTERM) ) 
            	                {
            	                    alt145=1;
            	                }

            	            }
            	            switch (alt145) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM283 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionNoIn2749); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM283, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop145;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop145: ; /* Jump out to here if this rule does not match */

            	        char_literal284 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_expressionNoIn2752); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal284, NULL); }


            	        // .//LexWhenPred.g:357:41: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt146=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA146_0 = LA(1);
            	                if ( (LA146_0 == LTERM) ) 
            	                {
            	                    alt146=1;
            	                }

            	            }
            	            switch (alt146) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM285 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionNoIn2754); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM285, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop146;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop146: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2757);
            	        assignmentExpressionNoIn286=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn286.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop147;	/* break out of the loop */
            	    break;
                }
            }
            loop147: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : assignmentExpressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 357:75: -> ^( EXPR_LIST ( assignmentExpressionNoIn )+ )
            	{
            	    // .//LexWhenPred.g:357:78: ^( EXPR_LIST ( assignmentExpressionNoIn )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR_LIST, (pANTLR3_UINT8)"EXPR_LIST"), root_1));

            	        if ((stream_assignmentExpressionNoIn == NULL || !stream_assignmentExpressionNoIn->hasNext(stream_assignmentExpressionNoIn))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_assignmentExpressionNoIn->hasNext(stream_assignmentExpressionNoIn))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

            	        	}
            	        	stream_assignmentExpressionNoIn->reset(stream_assignmentExpressionNoIn);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionNoInEx; /* Prevent compiler warnings */
    ruleexpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(48, expressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end expressionNoIn */

/** 
 * $ANTLR start assignmentExpression
 * .//LexWhenPred.g:361:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static LexWhenPredParser_assignmentExpression_return
assignmentExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_assignmentExpression_return retval;
    ANTLR3_UINT32 assignmentExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM289;
    pANTLR3_COMMON_TOKEN    LTERM291;
    LexWhenPredParser_conditionalExpression_return conditionalExpression287;
    #undef	RETURN_TYPE_conditionalExpression287
    #define	RETURN_TYPE_conditionalExpression287 LexWhenPredParser_conditionalExpression_return

    LexWhenPredParser_leftHandSideExpression_return leftHandSideExpression288;
    #undef	RETURN_TYPE_leftHandSideExpression288
    #define	RETURN_TYPE_leftHandSideExpression288 LexWhenPredParser_leftHandSideExpression_return

    LexWhenPredParser_assignmentOperator_return assignmentOperator290;
    #undef	RETURN_TYPE_assignmentOperator290
    #define	RETURN_TYPE_assignmentOperator290 LexWhenPredParser_assignmentOperator_return

    LexWhenPredParser_assignmentExpression_return assignmentExpression292;
    #undef	RETURN_TYPE_assignmentExpression292
    #define	RETURN_TYPE_assignmentExpression292 LexWhenPredParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM289_tree;
    pANTLR3_BASE_TREE LTERM291_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_conditionalExpression;
    /* Initialize rule variables
     */
    assignmentExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(49)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM289       = NULL;
    LTERM291       = NULL;
    conditionalExpression287.tree = NULL;

    leftHandSideExpression288.tree = NULL;

    assignmentOperator290.tree = NULL;

    assignmentExpression292.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM289_tree   = NULL;
    LTERM291_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }
    stream_conditionalExpression   = NULL;
    #define CREATE_stream_conditionalExpression  if (stream_conditionalExpression == NULL) {stream_conditionalExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule conditionalExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:362:2: ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt150;

            alt150=2;

            alt150 = cdfa150.predict(ctx, RECOGNIZER, ISTREAM, &cdfa150);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt150) 
            {
        	case 1:
        	    // .//LexWhenPred.g:362:4: conditionalExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpression2781);
        	        conditionalExpression287=conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_conditionalExpression; stream_conditionalExpression->add(stream_conditionalExpression, conditionalExpression287.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : conditionalExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 362:26: -> ^( COND_EXPR conditionalExpression )
        	        	{
        	        	    // .//LexWhenPred.g:362:29: ^( COND_EXPR conditionalExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND_EXPR, (pANTLR3_UINT8)"COND_EXPR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditionalExpression == NULL ? NULL : stream_conditionalExpression->nextTree(stream_conditionalExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:363:4: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression2794);
        	        leftHandSideExpression288=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression288.tree, NULL); }

        	        // .//LexWhenPred.g:363:27: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt148=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA148_0 = LA(1);
        	                if ( (LA148_0 == LTERM) ) 
        	                {
        	                    alt148=1;
        	                }

        	            }
        	            switch (alt148) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM289 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2796); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM289, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop148;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop148: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpression2799);
        	        assignmentOperator290=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator290.tree, NULL); }

        	        // .//LexWhenPred.g:363:53: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt149=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA149_0 = LA(1);
        	                if ( (LA149_0 == LTERM) ) 
        	                {
        	                    alt149=1;
        	                }

        	            }
        	            switch (alt149) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM291 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2801); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM291, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop149;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop149: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpression2804);
        	        assignmentExpression292=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression292.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression, assignmentOperator, assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 363:81: -> ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	{
        	        	    // .//LexWhenPred.g:363:85: ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionEx; /* Prevent compiler warnings */
    ruleassignmentExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
        if (stream_conditionalExpression != NULL) stream_conditionalExpression->free(stream_conditionalExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(49, assignmentExpression_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpression */

/** 
 * $ANTLR start assignmentExpressionNoIn
 * .//LexWhenPred.g:366:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static LexWhenPredParser_assignmentExpressionNoIn_return
assignmentExpressionNoIn(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_assignmentExpressionNoIn_return retval;
    ANTLR3_UINT32 assignmentExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM295;
    pANTLR3_COMMON_TOKEN    LTERM297;
    LexWhenPredParser_conditionalExpressionNoIn_return conditionalExpressionNoIn293;
    #undef	RETURN_TYPE_conditionalExpressionNoIn293
    #define	RETURN_TYPE_conditionalExpressionNoIn293 LexWhenPredParser_conditionalExpressionNoIn_return

    LexWhenPredParser_leftHandSideExpression_return leftHandSideExpression294;
    #undef	RETURN_TYPE_leftHandSideExpression294
    #define	RETURN_TYPE_leftHandSideExpression294 LexWhenPredParser_leftHandSideExpression_return

    LexWhenPredParser_assignmentOperator_return assignmentOperator296;
    #undef	RETURN_TYPE_assignmentOperator296
    #define	RETURN_TYPE_assignmentOperator296 LexWhenPredParser_assignmentOperator_return

    LexWhenPredParser_assignmentExpressionNoIn_return assignmentExpressionNoIn298;
    #undef	RETURN_TYPE_assignmentExpressionNoIn298
    #define	RETURN_TYPE_assignmentExpressionNoIn298 LexWhenPredParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM295_tree;
    pANTLR3_BASE_TREE LTERM297_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_conditionalExpressionNoIn;
    /* Initialize rule variables
     */
    assignmentExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(50)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM295       = NULL;
    LTERM297       = NULL;
    conditionalExpressionNoIn293.tree = NULL;

    leftHandSideExpression294.tree = NULL;

    assignmentOperator296.tree = NULL;

    assignmentExpressionNoIn298.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM295_tree   = NULL;
    LTERM297_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_conditionalExpressionNoIn   = NULL;
    #define CREATE_stream_conditionalExpressionNoIn  if (stream_conditionalExpressionNoIn == NULL) {stream_conditionalExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule conditionalExpressionNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:367:2: ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) )
            
            ANTLR3_UINT32 alt153;

            alt153=2;

            alt153 = cdfa153.predict(ctx, RECOGNIZER, ISTREAM, &cdfa153);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt153) 
            {
        	case 1:
        	    // .//LexWhenPred.g:367:4: conditionalExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2828);
        	        conditionalExpressionNoIn293=conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_conditionalExpressionNoIn; stream_conditionalExpressionNoIn->add(stream_conditionalExpressionNoIn, conditionalExpressionNoIn293.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : conditionalExpressionNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 367:30: -> ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	        	{
        	        	    // .//LexWhenPred.g:367:33: ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND_EXPR_NOIN, (pANTLR3_UINT8)"COND_EXPR_NOIN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditionalExpressionNoIn == NULL ? NULL : stream_conditionalExpressionNoIn->nextTree(stream_conditionalExpressionNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:368:4: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2841);
        	        leftHandSideExpression294=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression294.tree, NULL); }

        	        // .//LexWhenPred.g:368:27: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt151=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA151_0 = LA(1);
        	                if ( (LA151_0 == LTERM) ) 
        	                {
        	                    alt151=1;
        	                }

        	            }
        	            switch (alt151) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM295 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn2843); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM295, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop151;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop151: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2846);
        	        assignmentOperator296=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator296.tree, NULL); }

        	        // .//LexWhenPred.g:368:53: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt152=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA152_0 = LA(1);
        	                if ( (LA152_0 == LTERM) ) 
        	                {
        	                    alt152=1;
        	                }

        	            }
        	            switch (alt152) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM297 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn2848); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM297, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop152;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop152: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2851);
        	        assignmentExpressionNoIn298=assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn298.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : assignmentOperator, leftHandSideExpression, assignmentExpressionNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 368:85: -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	{
        	        	    // .//LexWhenPred.g:368:89: ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionNoInEx; /* Prevent compiler warnings */
    ruleassignmentExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_conditionalExpressionNoIn != NULL) stream_conditionalExpressionNoIn->free(stream_conditionalExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(50, assignmentExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpressionNoIn */

/** 
 * $ANTLR start leftHandSideExpression
 * .//LexWhenPred.g:371:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static LexWhenPredParser_leftHandSideExpression_return
leftHandSideExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_leftHandSideExpression_return retval;
    ANTLR3_UINT32 leftHandSideExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    LexWhenPredParser_callExpression_return callExpression299;
    #undef	RETURN_TYPE_callExpression299
    #define	RETURN_TYPE_callExpression299 LexWhenPredParser_callExpression_return

    LexWhenPredParser_newExpression_return newExpression300;
    #undef	RETURN_TYPE_newExpression300
    #define	RETURN_TYPE_newExpression300 LexWhenPredParser_newExpression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_callExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    leftHandSideExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(51)) )
    {
    	retval.start = 0;

        return retval; 
    }
    callExpression299.tree = NULL;

    newExpression300.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_callExpression   = NULL;
    #define CREATE_stream_callExpression  if (stream_callExpression == NULL) {stream_callExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule callExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:372:2: ( callExpression -> callExpression | newExpression -> newExpression )
            
            ANTLR3_UINT32 alt154;

            alt154=2;

            alt154 = cdfa154.predict(ctx, RECOGNIZER, ISTREAM, &cdfa154);
            if  (HASEXCEPTION())
            {
                goto ruleleftHandSideExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt154) 
            {
        	case 1:
        	    // .//LexWhenPred.g:372:4: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_leftHandSideExpression2876);
        	        callExpression299=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_callExpression; stream_callExpression->add(stream_callExpression, callExpression299.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : callExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 372:19: -> callExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_callExpression == NULL ? NULL : stream_callExpression->nextTree(stream_callExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:373:4: newExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_newExpression_in_leftHandSideExpression2885);
        	        newExpression300=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression300.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 373:18: -> newExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleleftHandSideExpressionEx; /* Prevent compiler warnings */
    ruleleftHandSideExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_callExpression != NULL) stream_callExpression->free(stream_callExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(51, leftHandSideExpression_StartIndex); }
    return retval;
}
/* $ANTLR end leftHandSideExpression */

/** 
 * $ANTLR start newExpression
 * .//LexWhenPred.g:376:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static LexWhenPredParser_newExpression_return
newExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_newExpression_return retval;
    ANTLR3_UINT32 newExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal302;
    pANTLR3_COMMON_TOKEN    LTERM303;
    LexWhenPredParser_memberExpression_return memberExpression301;
    #undef	RETURN_TYPE_memberExpression301
    #define	RETURN_TYPE_memberExpression301 LexWhenPredParser_memberExpression_return

    LexWhenPredParser_newExpression_return newExpression304;
    #undef	RETURN_TYPE_newExpression304
    #define	RETURN_TYPE_newExpression304 LexWhenPredParser_newExpression_return

    pANTLR3_BASE_TREE string_literal302_tree;
    pANTLR3_BASE_TREE LTERM303_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_156;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    newExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(52)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal302       = NULL;
    LTERM303       = NULL;
    memberExpression301.tree = NULL;

    newExpression304.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal302_tree   = NULL;
    LTERM303_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_156   = NULL;
    #define CREATE_stream_156  if (stream_156 == NULL) {stream_156 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 156"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:377:2: ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) )
            
            ANTLR3_UINT32 alt156;

            alt156=2;

            alt156 = cdfa156.predict(ctx, RECOGNIZER, ISTREAM, &cdfa156);
            if  (HASEXCEPTION())
            {
                goto rulenewExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt156) 
            {
        	case 1:
        	    // .//LexWhenPred.g:377:4: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_newExpression2901);
        	        memberExpression301=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression301.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : memberExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 377:21: -> memberExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:378:4: 'new' ( LTERM )* newExpression
        	    {
        	        string_literal302 = (pANTLR3_COMMON_TOKEN) MATCHT(156, &FOLLOW_156_in_newExpression2910); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_156; stream_156->add(stream_156, string_literal302, NULL); }


        	        // .//LexWhenPred.g:378:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt155=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA155_0 = LA(1);
        	                if ( (LA155_0 == LTERM) ) 
        	                {
        	                    alt155=1;
        	                }

        	            }
        	            switch (alt155) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM303 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_newExpression2912); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenewExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM303, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop155;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop155: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_newExpression_in_newExpression2915);
        	        newExpression304=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression304.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 378:31: -> ^( NEW newExpression )
        	        	{
        	        	    // .//LexWhenPred.g:378:34: ^( NEW newExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenewExpressionEx; /* Prevent compiler warnings */
    rulenewExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_156 != NULL) stream_156->free(stream_156);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(52, newExpression_StartIndex); }
    return retval;
}
/* $ANTLR end newExpression */

/** 
 * $ANTLR start indexSuffix1
 * .//LexWhenPred.g:382:1: indexSuffix1 : '[' ( LTERM )* expression ( LTERM )* ']' -> expression ;
 */
static LexWhenPredParser_indexSuffix1_return
indexSuffix1(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_indexSuffix1_return retval;
    ANTLR3_UINT32 indexSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal305;
    pANTLR3_COMMON_TOKEN    LTERM306;
    pANTLR3_COMMON_TOKEN    LTERM308;
    pANTLR3_COMMON_TOKEN    char_literal309;
    LexWhenPredParser_expression_return expression307;
    #undef	RETURN_TYPE_expression307
    #define	RETURN_TYPE_expression307 LexWhenPredParser_expression_return

    pANTLR3_BASE_TREE char_literal305_tree;
    pANTLR3_BASE_TREE LTERM306_tree;
    pANTLR3_BASE_TREE LTERM308_tree;
    pANTLR3_BASE_TREE char_literal309_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(53)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal305       = NULL;
    LTERM306       = NULL;
    LTERM308       = NULL;
    char_literal309       = NULL;
    expression307.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal305_tree   = NULL;
    LTERM306_tree   = NULL;
    LTERM308_tree   = NULL;
    char_literal309_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:383:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> expression )
        // .//LexWhenPred.g:383:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal305 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_indexSuffix12937); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, char_literal305, NULL); }


            // .//LexWhenPred.g:383:8: ( LTERM )*

            for (;;)
            {
                int alt157=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA157_0 = LA(1);
                    if ( (LA157_0 == LTERM) ) 
                    {
                        alt157=1;
                    }

                }
                switch (alt157) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM306 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix12939); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM306, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop157;	/* break out of the loop */
            	    break;
                }
            }
            loop157: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix12942);
            expression307=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression307.tree, NULL); }

            // .//LexWhenPred.g:383:26: ( LTERM )*

            for (;;)
            {
                int alt158=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA158_0 = LA(1);
                    if ( (LA158_0 == LTERM) ) 
                    {
                        alt158=1;
                    }

                }
                switch (alt158) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM308 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix12944); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM308, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop158;	/* break out of the loop */
            	    break;
                }
            }
            loop158: ; /* Jump out to here if this rule does not match */

            char_literal309 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_indexSuffix12947); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal309, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 383:37: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffix1Ex; /* Prevent compiler warnings */
    ruleindexSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_157 != NULL) stream_157->free(stream_157);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(53, indexSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix1 */

/** 
 * $ANTLR start propertyReferenceSuffix1
 * .//LexWhenPred.g:387:1: propertyReferenceSuffix1 : '.' ( LTERM )* Identifier -> Identifier ;
 */
static LexWhenPredParser_propertyReferenceSuffix1_return
propertyReferenceSuffix1(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_propertyReferenceSuffix1_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal310;
    pANTLR3_COMMON_TOKEN    LTERM311;
    pANTLR3_COMMON_TOKEN    Identifier312;

    pANTLR3_BASE_TREE char_literal310_tree;
    pANTLR3_BASE_TREE LTERM311_tree;
    pANTLR3_BASE_TREE Identifier312_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    propertyReferenceSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(54)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal310       = NULL;
    LTERM311       = NULL;
    Identifier312       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal310_tree   = NULL;
    LTERM311_tree   = NULL;
    Identifier312_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:388:2: ( '.' ( LTERM )* Identifier -> Identifier )
        // .//LexWhenPred.g:388:4: '.' ( LTERM )* Identifier
        {
            char_literal310 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_propertyReferenceSuffix12964); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, char_literal310, NULL); }


            // .//LexWhenPred.g:388:8: ( LTERM )*

            for (;;)
            {
                int alt159=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA159_0 = LA(1);
                    if ( (LA159_0 == LTERM) ) 
                    {
                        alt159=1;
                    }

                }
                switch (alt159) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM311 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix12966); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM311, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop159;	/* break out of the loop */
            	    break;
                }
            }
            loop159: ; /* Jump out to here if this rule does not match */

            Identifier312 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix12969); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier312, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 388:26: -> Identifier
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffix1Ex; /* Prevent compiler warnings */
    rulepropertyReferenceSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(54, propertyReferenceSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix1 */

/** 
 * $ANTLR start memberExpression
 * .//LexWhenPred.g:392:1: memberExpression : ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* );
 */
static LexWhenPredParser_memberExpression_return
memberExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_memberExpression_return retval;
    ANTLR3_UINT32 memberExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM314;
    pANTLR3_COMMON_TOKEN    LTERM316;
    pANTLR3_COMMON_TOKEN    LTERM319;
    pANTLR3_COMMON_TOKEN    LTERM321;
    pANTLR3_COMMON_TOKEN    string_literal323;
    pANTLR3_COMMON_TOKEN    LTERM324;
    pANTLR3_COMMON_TOKEN    LTERM325;
    pANTLR3_COMMON_TOKEN    LTERM327;
    pANTLR3_COMMON_TOKEN    LTERM329;
    LexWhenPredParser_memberExpression_return expr;
    #undef	RETURN_TYPE_expr
    #define	RETURN_TYPE_expr LexWhenPredParser_memberExpression_return

    LexWhenPredParser_primaryExpression_return primaryExpression313;
    #undef	RETURN_TYPE_primaryExpression313
    #define	RETURN_TYPE_primaryExpression313 LexWhenPredParser_primaryExpression_return

    LexWhenPredParser_propertyReferenceSuffix1_return propertyReferenceSuffix1315;
    #undef	RETURN_TYPE_propertyReferenceSuffix1315
    #define	RETURN_TYPE_propertyReferenceSuffix1315 LexWhenPredParser_propertyReferenceSuffix1_return

    LexWhenPredParser_indexSuffix1_return indexSuffix1317;
    #undef	RETURN_TYPE_indexSuffix1317
    #define	RETURN_TYPE_indexSuffix1317 LexWhenPredParser_indexSuffix1_return

    LexWhenPredParser_functionExpression_return functionExpression318;
    #undef	RETURN_TYPE_functionExpression318
    #define	RETURN_TYPE_functionExpression318 LexWhenPredParser_functionExpression_return

    LexWhenPredParser_propertyReferenceSuffix1_return propertyReferenceSuffix1320;
    #undef	RETURN_TYPE_propertyReferenceSuffix1320
    #define	RETURN_TYPE_propertyReferenceSuffix1320 LexWhenPredParser_propertyReferenceSuffix1_return

    LexWhenPredParser_indexSuffix1_return indexSuffix1322;
    #undef	RETURN_TYPE_indexSuffix1322
    #define	RETURN_TYPE_indexSuffix1322 LexWhenPredParser_indexSuffix1_return

    LexWhenPredParser_arguments_return arguments326;
    #undef	RETURN_TYPE_arguments326
    #define	RETURN_TYPE_arguments326 LexWhenPredParser_arguments_return

    LexWhenPredParser_propertyReferenceSuffix1_return propertyReferenceSuffix1328;
    #undef	RETURN_TYPE_propertyReferenceSuffix1328
    #define	RETURN_TYPE_propertyReferenceSuffix1328 LexWhenPredParser_propertyReferenceSuffix1_return

    LexWhenPredParser_indexSuffix1_return indexSuffix1330;
    #undef	RETURN_TYPE_indexSuffix1330
    #define	RETURN_TYPE_indexSuffix1330 LexWhenPredParser_indexSuffix1_return

    pANTLR3_BASE_TREE LTERM314_tree;
    pANTLR3_BASE_TREE LTERM316_tree;
    pANTLR3_BASE_TREE LTERM319_tree;
    pANTLR3_BASE_TREE LTERM321_tree;
    pANTLR3_BASE_TREE string_literal323_tree;
    pANTLR3_BASE_TREE LTERM324_tree;
    pANTLR3_BASE_TREE LTERM325_tree;
    pANTLR3_BASE_TREE LTERM327_tree;
    pANTLR3_BASE_TREE LTERM329_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_156;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primaryExpression;
    /* Initialize rule variables
     */
    memberExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(55)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM314       = NULL;
    LTERM316       = NULL;
    LTERM319       = NULL;
    LTERM321       = NULL;
    string_literal323       = NULL;
    LTERM324       = NULL;
    LTERM325       = NULL;
    LTERM327       = NULL;
    LTERM329       = NULL;
    expr.tree = NULL;

    primaryExpression313.tree = NULL;

    propertyReferenceSuffix1315.tree = NULL;

    indexSuffix1317.tree = NULL;

    functionExpression318.tree = NULL;

    propertyReferenceSuffix1320.tree = NULL;

    indexSuffix1322.tree = NULL;

    arguments326.tree = NULL;

    propertyReferenceSuffix1328.tree = NULL;

    indexSuffix1330.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM314_tree   = NULL;
    LTERM316_tree   = NULL;
    LTERM319_tree   = NULL;
    LTERM321_tree   = NULL;
    string_literal323_tree   = NULL;
    LTERM324_tree   = NULL;
    LTERM325_tree   = NULL;
    LTERM327_tree   = NULL;
    LTERM329_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_156   = NULL;
    #define CREATE_stream_156  if (stream_156 == NULL) {stream_156 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 156"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_functionExpression   = NULL;
    #define CREATE_stream_functionExpression  if (stream_functionExpression == NULL) {stream_functionExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }
    stream_primaryExpression   = NULL;
    #define CREATE_stream_primaryExpression  if (stream_primaryExpression == NULL) {stream_primaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primaryExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:393:2: ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* )
            
            ANTLR3_UINT32 alt171;

            alt171=3;

            switch ( LA(1) ) 
            {
            case Identifier:
            case StringLiteral:
            case NumericLiteral:
            case 127:
            case 130:
            case 157:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            	{
            		alt171=1;
            	}
                break;
            case 126:
            	{
            		alt171=2;
            	}
                break;
            case 156:
            	{
            		alt171=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 171;
                EXCEPTION->state        = 0;


                goto rulememberExpressionEx;
            }

            switch (alt171) 
            {
        	case 1:
        	    // .//LexWhenPred.g:393:4: ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//LexWhenPred.g:393:4: ( primaryExpression -> primaryExpression )
        	        // .//LexWhenPred.g:393:5: primaryExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_primaryExpression_in_memberExpression2986);
        	            primaryExpression313=primaryExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_primaryExpression; stream_primaryExpression->add(stream_primaryExpression, primaryExpression313.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : primaryExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 393:23: -> primaryExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_primaryExpression == NULL ? NULL : stream_primaryExpression->nextTree(stream_primaryExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//LexWhenPred.g:393:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt162=3;
        	            alt162 = cdfa162.predict(ctx, RECOGNIZER, ISTREAM, &cdfa162);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt162) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:393:47: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//LexWhenPred.g:393:47: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt160=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA160_0 = LA(1);
        	        	                if ( (LA160_0 == LTERM) ) 
        	        	                {
        	        	                    alt160=1;
        	        	                }

        	        	            }
        	        	            switch (alt160) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM314 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression2995); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM314, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop160;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop160: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression2998);
        	        	        propertyReferenceSuffix1315=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1315.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : propertyReferenceSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 393:79: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//LexWhenPred.g:393:82: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//LexWhenPred.g:393:136: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//LexWhenPred.g:393:136: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt161=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA161_0 = LA(1);
        	        	                if ( (LA161_0 == LTERM) ) 
        	        	                {
        	        	                    alt161=1;
        	        	                }

        	        	            }
        	        	            switch (alt161) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM316 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3015); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM316, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop161;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop161: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3018);
        	        	        indexSuffix1317=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1317.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, indexSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 393:156: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//LexWhenPred.g:393:159: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop162;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop162: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:394:4: ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//LexWhenPred.g:394:4: ( functionExpression -> functionExpression )
        	        // .//LexWhenPred.g:394:5: functionExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_functionExpression_in_memberExpression3037);
        	            functionExpression318=functionExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_functionExpression; stream_functionExpression->add(stream_functionExpression, functionExpression318.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : functionExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 394:24: -> functionExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionExpression == NULL ? NULL : stream_functionExpression->nextTree(stream_functionExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//LexWhenPred.g:394:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt165=3;
        	            alt165 = cdfa165.predict(ctx, RECOGNIZER, ISTREAM, &cdfa165);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt165) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:394:48: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//LexWhenPred.g:394:48: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt163=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA163_0 = LA(1);
        	        	                if ( (LA163_0 == LTERM) ) 
        	        	                {
        	        	                    alt163=1;
        	        	                }

        	        	            }
        	        	            switch (alt163) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM319 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3045); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM319, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop163;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop163: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3048);
        	        	        propertyReferenceSuffix1320=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1320.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : propertyReferenceSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 394:80: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//LexWhenPred.g:394:83: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//LexWhenPred.g:394:136: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//LexWhenPred.g:394:136: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt164=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA164_0 = LA(1);
        	        	                if ( (LA164_0 == LTERM) ) 
        	        	                {
        	        	                    alt164=1;
        	        	                }

        	        	            }
        	        	            switch (alt164) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM321 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3064); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM321, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop164;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop164: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3067);
        	        	        indexSuffix1322=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1322.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, indexSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 394:156: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//LexWhenPred.g:394:159: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop165;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop165: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 3:
        	    // .//LexWhenPred.g:395:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//LexWhenPred.g:395:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) )
        	        // .//LexWhenPred.g:395:5: 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments
        	        {
        	            string_literal323 = (pANTLR3_COMMON_TOKEN) MATCHT(156, &FOLLOW_156_in_memberExpression3086); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            } 
        	            if ( BACKTRACKING==0 ) { CREATE_stream_156; stream_156->add(stream_156, string_literal323, NULL); }


        	            // .//LexWhenPred.g:395:11: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt166=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA166_0 = LA(1);
        	                    if ( (LA166_0 == LTERM) ) 
        	                    {
        	                        alt166=1;
        	                    }

        	                }
        	                switch (alt166) 
        	                {
        	            	case 1:
        	            	    // .//LexWhenPred.g:0:0: LTERM
        	            	    {
        	            	        LTERM324 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3088); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM324, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop166;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop166: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression3093);
        	            expr=memberExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, expr.tree, NULL); }

        	            // .//LexWhenPred.g:395:40: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt167=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA167_0 = LA(1);
        	                    if ( (LA167_0 == LTERM) ) 
        	                    {
        	                        alt167=1;
        	                    }

        	                }
        	                switch (alt167) 
        	                {
        	            	case 1:
        	            	    // .//LexWhenPred.g:0:0: LTERM
        	            	    {
        	            	        LTERM325 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3095); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM325, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop167;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop167: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_arguments_in_memberExpression3098);
        	            arguments326=arguments(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments326.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : expr, arguments
        	             * token labels      : 
        	             * rule labels       : retval, expr
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	            	stream_expr=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr", expr.tree != NULL ? expr.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 395:57: -> ^( NEW $expr arguments )
        	            	{
        	            	    // .//LexWhenPred.g:395:60: ^( NEW $expr arguments )
        	            	    {
        	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));
        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	            	    }

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	            	if (stream_expr != NULL) stream_expr->free(stream_expr);


        	            }
        	        }


        	        // .//LexWhenPred.g:395:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt170=3;
        	            alt170 = cdfa170.predict(ctx, RECOGNIZER, ISTREAM, &cdfa170);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt170) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:395:85: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//LexWhenPred.g:395:85: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt168=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA168_0 = LA(1);
        	        	                if ( (LA168_0 == LTERM) ) 
        	        	                {
        	        	                    alt168=1;
        	        	                }

        	        	            }
        	        	            switch (alt168) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM327 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3113); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM327, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop168;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop168: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3116);
        	        	        propertyReferenceSuffix1328=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1328.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 395:117: -> ^( DOT $memberExpression)
        	        	        	{
        	        	        	    // .//LexWhenPred.g:395:120: ^( DOT $memberExpression)
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//LexWhenPred.g:395:147: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//LexWhenPred.g:395:147: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt169=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA169_0 = LA(1);
        	        	                if ( (LA169_0 == LTERM) ) 
        	        	                {
        	        	                    alt169=1;
        	        	                }

        	        	            }
        	        	            switch (alt169) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM329 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3129); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM329, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop169;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop169: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3132);
        	        	        indexSuffix1330=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1330.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, indexSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 395:167: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//LexWhenPred.g:395:170: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop170;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop170: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionEx; /* Prevent compiler warnings */
    rulememberExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_156 != NULL) stream_156->free(stream_156);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_functionExpression != NULL) stream_functionExpression->free(stream_functionExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
        if (stream_primaryExpression != NULL) stream_primaryExpression->free(stream_primaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(55, memberExpression_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpression */

/** 
 * $ANTLR start memberExpressionSuffix
 * .//LexWhenPred.g:398:1: memberExpressionSuffix : ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static LexWhenPredParser_memberExpressionSuffix_return
memberExpressionSuffix(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_memberExpressionSuffix_return retval;
    ANTLR3_UINT32 memberExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    LexWhenPredParser_indexSuffix_return indexSuffix331;
    #undef	RETURN_TYPE_indexSuffix331
    #define	RETURN_TYPE_indexSuffix331 LexWhenPredParser_indexSuffix_return

    LexWhenPredParser_propertyReferenceSuffix_return propertyReferenceSuffix332;
    #undef	RETURN_TYPE_propertyReferenceSuffix332
    #define	RETURN_TYPE_propertyReferenceSuffix332 LexWhenPredParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    memberExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(56)) )
    {
    	retval.start = 0;

        return retval; 
    }
    indexSuffix331.tree = NULL;

    propertyReferenceSuffix332.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:399:2: ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt172;

            alt172=2;


            {
                int LA172_0 = LA(1);
                if ( (LA172_0 == 157) ) 
                {
                    alt172=1;
                }
                else if ( (LA172_0 == 159) ) 
                {
                    alt172=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 172;
                    EXCEPTION->state        = 0;


                    goto rulememberExpressionSuffixEx;
                }
            }
            switch (alt172) 
            {
        	case 1:
        	    // .//LexWhenPred.g:399:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_memberExpressionSuffix3167);
        	        indexSuffix331=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix331.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 399:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:400:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3177);
        	        propertyReferenceSuffix332=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix332.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 400:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionSuffixEx; /* Prevent compiler warnings */
    rulememberExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(56, memberExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpressionSuffix */

/** 
 * $ANTLR start callExpression
 * .//LexWhenPred.g:403:1: callExpression : ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* ;
 */
static LexWhenPredParser_callExpression_return
callExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_callExpression_return retval;
    ANTLR3_UINT32 callExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM334;
    pANTLR3_COMMON_TOKEN    LTERM336;
    pANTLR3_COMMON_TOKEN    LTERM338;
    pANTLR3_COMMON_TOKEN    LTERM340;
    LexWhenPredParser_memberExpression_return memberExpression333;
    #undef	RETURN_TYPE_memberExpression333
    #define	RETURN_TYPE_memberExpression333 LexWhenPredParser_memberExpression_return

    LexWhenPredParser_arguments_return arguments335;
    #undef	RETURN_TYPE_arguments335
    #define	RETURN_TYPE_arguments335 LexWhenPredParser_arguments_return

    LexWhenPredParser_arguments_return arguments337;
    #undef	RETURN_TYPE_arguments337
    #define	RETURN_TYPE_arguments337 LexWhenPredParser_arguments_return

    LexWhenPredParser_indexSuffix1_return indexSuffix1339;
    #undef	RETURN_TYPE_indexSuffix1339
    #define	RETURN_TYPE_indexSuffix1339 LexWhenPredParser_indexSuffix1_return

    LexWhenPredParser_propertyReferenceSuffix1_return propertyReferenceSuffix1341;
    #undef	RETURN_TYPE_propertyReferenceSuffix1341
    #define	RETURN_TYPE_propertyReferenceSuffix1341 LexWhenPredParser_propertyReferenceSuffix1_return

    pANTLR3_BASE_TREE LTERM334_tree;
    pANTLR3_BASE_TREE LTERM336_tree;
    pANTLR3_BASE_TREE LTERM338_tree;
    pANTLR3_BASE_TREE LTERM340_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    /* Initialize rule variables
     */
    callExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(57)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM334       = NULL;
    LTERM336       = NULL;
    LTERM338       = NULL;
    LTERM340       = NULL;
    memberExpression333.tree = NULL;

    arguments335.tree = NULL;

    arguments337.tree = NULL;

    indexSuffix1339.tree = NULL;

    propertyReferenceSuffix1341.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM334_tree   = NULL;
    LTERM336_tree   = NULL;
    LTERM338_tree   = NULL;
    LTERM340_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:404:5: ( ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* )
        // .//LexWhenPred.g:404:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
        {
            // .//LexWhenPred.g:404:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) )
            // .//LexWhenPred.g:404:8: memberExpression ( LTERM )* arguments
            {
                FOLLOWPUSH(FOLLOW_memberExpression_in_callExpression3197);
                memberExpression333=memberExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression333.tree, NULL); }

                // .//LexWhenPred.g:404:25: ( LTERM )*

                for (;;)
                {
                    int alt173=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA173_0 = LA(1);
                        if ( (LA173_0 == LTERM) ) 
                        {
                            alt173=1;
                        }

                    }
                    switch (alt173) 
                    {
                	case 1:
                	    // .//LexWhenPred.g:0:0: LTERM
                	    {
                	        LTERM334 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3199); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecallExpressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM334, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop173;	/* break out of the loop */
                	    break;
                    }
                }
                loop173: ; /* Jump out to here if this rule does not match */

                FOLLOWPUSH(FOLLOW_arguments_in_callExpression3202);
                arguments335=arguments(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments335.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : memberExpression, arguments
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 404:42: -> ^( CALL memberExpression arguments )
                	{
                	    // .//LexWhenPred.g:404:45: ^( CALL memberExpression arguments )
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:404:81: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*

            for (;;)
            {
                int alt177=4;
                alt177 = cdfa177.predict(ctx, RECOGNIZER, ISTREAM, &cdfa177);
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt177) 
                {
            	case 1:
            	    // .//LexWhenPred.g:404:82: ( LTERM )* arguments
            	    {

            	        // .//LexWhenPred.g:404:82: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt174=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA174_0 = LA(1);
            	                if ( (LA174_0 == LTERM) ) 
            	                {
            	                    alt174=1;
            	                }

            	            }
            	            switch (alt174) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM336 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3216); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM336, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop174;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop174: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression3219);
            	        arguments337=arguments(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments337.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : arguments
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 404:99: -> arguments
            	        	{
            	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // .//LexWhenPred.g:404:114: ( LTERM )* indexSuffix1
            	    {

            	        // .//LexWhenPred.g:404:114: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt175=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA175_0 = LA(1);
            	                if ( (LA175_0 == LTERM) ) 
            	                {
            	                    alt175=1;
            	                }

            	            }
            	            switch (alt175) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM338 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3227); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM338, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop175;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop175: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_callExpression3230);
            	        indexSuffix1339=indexSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1339.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : indexSuffix1, callExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 404:134: -> ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	{
            	        	    // .//LexWhenPred.g:404:137: ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 3:
            	    // .//LexWhenPred.g:404:183: ( LTERM )* propertyReferenceSuffix1
            	    {

            	        // .//LexWhenPred.g:404:183: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt176=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA176_0 = LA(1);
            	                if ( (LA176_0 == LTERM) ) 
            	                {
            	                    alt176=1;
            	                }

            	            }
            	            switch (alt176) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM340 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3245); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM340, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop176;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop176: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_callExpression3248);
            	        propertyReferenceSuffix1341=propertyReferenceSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1341.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : propertyReferenceSuffix1, callExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 404:215: -> ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	{
            	        	    // .//LexWhenPred.g:404:218: ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop177;	/* break out of the loop */
            	    break;
                }
            }
            loop177: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionEx; /* Prevent compiler warnings */
    rulecallExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(57, callExpression_StartIndex); }
    return retval;
}
/* $ANTLR end callExpression */

/** 
 * $ANTLR start callExpressionSuffix
 * .//LexWhenPred.g:407:1: callExpressionSuffix : ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static LexWhenPredParser_callExpressionSuffix_return
callExpressionSuffix(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_callExpressionSuffix_return retval;
    ANTLR3_UINT32 callExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    LexWhenPredParser_arguments_return arguments342;
    #undef	RETURN_TYPE_arguments342
    #define	RETURN_TYPE_arguments342 LexWhenPredParser_arguments_return

    LexWhenPredParser_indexSuffix_return indexSuffix343;
    #undef	RETURN_TYPE_indexSuffix343
    #define	RETURN_TYPE_indexSuffix343 LexWhenPredParser_indexSuffix_return

    LexWhenPredParser_propertyReferenceSuffix_return propertyReferenceSuffix344;
    #undef	RETURN_TYPE_propertyReferenceSuffix344
    #define	RETURN_TYPE_propertyReferenceSuffix344 LexWhenPredParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    callExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(58)) )
    {
    	retval.start = 0;

        return retval; 
    }
    arguments342.tree = NULL;

    indexSuffix343.tree = NULL;

    propertyReferenceSuffix344.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:408:2: ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt178;

            alt178=3;

            switch ( LA(1) ) 
            {
            case 127:
            	{
            		alt178=1;
            	}
                break;
            case 157:
            	{
            		alt178=2;
            	}
                break;
            case 159:
            	{
            		alt178=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 178;
                EXCEPTION->state        = 0;


                goto rulecallExpressionSuffixEx;
            }

            switch (alt178) 
            {
        	case 1:
        	    // .//LexWhenPred.g:408:4: arguments
        	    {
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpressionSuffix3275);
        	        arguments342=arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments342.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : arguments
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 408:14: -> arguments
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:409:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_callExpressionSuffix3284);
        	        indexSuffix343=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix343.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 409:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//LexWhenPred.g:410:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3293);
        	        propertyReferenceSuffix344=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix344.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 410:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionSuffixEx; /* Prevent compiler warnings */
    rulecallExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(58, callExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end callExpressionSuffix */

/** 
 * $ANTLR start arguments
 * .//LexWhenPred.g:413:1: arguments : '(' ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )? ( LTERM )* ')' -> ^( ARGLIST ( assignmentExpression )* ) ;
 */
static LexWhenPredParser_arguments_return
arguments(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_arguments_return retval;
    ANTLR3_UINT32 arguments_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal345;
    pANTLR3_COMMON_TOKEN    LTERM346;
    pANTLR3_COMMON_TOKEN    LTERM348;
    pANTLR3_COMMON_TOKEN    char_literal349;
    pANTLR3_COMMON_TOKEN    LTERM350;
    pANTLR3_COMMON_TOKEN    LTERM352;
    pANTLR3_COMMON_TOKEN    char_literal353;
    LexWhenPredParser_assignmentExpression_return assignmentExpression347;
    #undef	RETURN_TYPE_assignmentExpression347
    #define	RETURN_TYPE_assignmentExpression347 LexWhenPredParser_assignmentExpression_return

    LexWhenPredParser_assignmentExpression_return assignmentExpression351;
    #undef	RETURN_TYPE_assignmentExpression351
    #define	RETURN_TYPE_assignmentExpression351 LexWhenPredParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal345_tree;
    pANTLR3_BASE_TREE LTERM346_tree;
    pANTLR3_BASE_TREE LTERM348_tree;
    pANTLR3_BASE_TREE char_literal349_tree;
    pANTLR3_BASE_TREE LTERM350_tree;
    pANTLR3_BASE_TREE LTERM352_tree;
    pANTLR3_BASE_TREE char_literal353_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    arguments_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(59)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal345       = NULL;
    LTERM346       = NULL;
    LTERM348       = NULL;
    char_literal349       = NULL;
    LTERM350       = NULL;
    LTERM352       = NULL;
    char_literal353       = NULL;
    assignmentExpression347.tree = NULL;

    assignmentExpression351.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal345_tree   = NULL;
    LTERM346_tree   = NULL;
    LTERM348_tree   = NULL;
    char_literal349_tree   = NULL;
    LTERM350_tree   = NULL;
    LTERM352_tree   = NULL;
    char_literal353_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:414:2: ( '(' ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )? ( LTERM )* ')' -> ^( ARGLIST ( assignmentExpression )* ) )
        // .//LexWhenPred.g:414:4: '(' ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )? ( LTERM )* ')'
        {
            char_literal345 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_arguments3308); 
            if  (HASEXCEPTION())
            {
                goto ruleargumentsEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal345, NULL); }


            // .//LexWhenPred.g:414:8: ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )?
            {
                int alt183=2;
                alt183 = cdfa183.predict(ctx, RECOGNIZER, ISTREAM, &cdfa183);
                if  (HASEXCEPTION())
                {
                    goto ruleargumentsEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt183) 
                {
            	case 1:
            	    // .//LexWhenPred.g:414:9: ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
            	    {

            	        // .//LexWhenPred.g:414:9: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt179=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA179_0 = LA(1);
            	                if ( (LA179_0 == LTERM) ) 
            	                {
            	                    alt179=1;
            	                }

            	            }
            	            switch (alt179) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM346 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3311); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleargumentsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM346, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop179;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop179: ; /* Jump out to here if this rule does not match */

            	        // .//LexWhenPred.g:414:16: ( assignmentExpression )
            	        // .//LexWhenPred.g:414:17: assignmentExpression
            	        {
            	            FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments3315);
            	            assignmentExpression347=assignmentExpression(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleargumentsEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression347.tree, NULL); }

            	        }


            	        // .//LexWhenPred.g:414:39: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*

            	        for (;;)
            	        {
            	            int alt182=2;
            	            alt182 = cdfa182.predict(ctx, RECOGNIZER, ISTREAM, &cdfa182);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleargumentsEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt182) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:414:40: ( LTERM )* ',' ( LTERM )* assignmentExpression
            	        	    {

            	        	        // .//LexWhenPred.g:414:40: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt180=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA180_0 = LA(1);
            	        	                if ( (LA180_0 == LTERM) ) 
            	        	                {
            	        	                    alt180=1;
            	        	                }

            	        	            }
            	        	            switch (alt180) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM348 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3319); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleargumentsEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM348, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop180;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop180: ; /* Jump out to here if this rule does not match */

            	        	        char_literal349 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_arguments3322); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleargumentsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal349, NULL); }


            	        	        // .//LexWhenPred.g:414:51: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt181=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA181_0 = LA(1);
            	        	                if ( (LA181_0 == LTERM) ) 
            	        	                {
            	        	                    alt181=1;
            	        	                }

            	        	            }
            	        	            switch (alt181) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM350 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3324); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleargumentsEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM350, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop181;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop181: ; /* Jump out to here if this rule does not match */

            	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments3327);
            	        	        assignmentExpression351=assignmentExpression(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleargumentsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression351.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop182;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop182: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // .//LexWhenPred.g:414:83: ( LTERM )*

            for (;;)
            {
                int alt184=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA184_0 = LA(1);
                    if ( (LA184_0 == LTERM) ) 
                    {
                        alt184=1;
                    }

                }
                switch (alt184) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM352 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3333); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargumentsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM352, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop184;	/* break out of the loop */
            	    break;
                }
            }
            loop184: ; /* Jump out to here if this rule does not match */

            char_literal353 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_arguments3336); 
            if  (HASEXCEPTION())
            {
                goto ruleargumentsEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal353, NULL); }


             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 414:94: -> ^( ARGLIST ( assignmentExpression )* )
            	{
            	    // .//LexWhenPred.g:414:97: ^( ARGLIST ( assignmentExpression )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGLIST, (pANTLR3_UINT8)"ARGLIST"), root_1));

            	        // .//LexWhenPred.g:414:107: ( assignmentExpression )*
            	        {
            	        	while ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        	}
            	        	if (stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleargumentsEx; /* Prevent compiler warnings */
    ruleargumentsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(59, arguments_StartIndex); }
    return retval;
}
/* $ANTLR end arguments */

/** 
 * $ANTLR start indexSuffix
 * .//LexWhenPred.g:418:1: indexSuffix : '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) ;
 */
static LexWhenPredParser_indexSuffix_return
indexSuffix(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_indexSuffix_return retval;
    ANTLR3_UINT32 indexSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal354;
    pANTLR3_COMMON_TOKEN    LTERM355;
    pANTLR3_COMMON_TOKEN    LTERM357;
    pANTLR3_COMMON_TOKEN    char_literal358;
    LexWhenPredParser_expression_return expression356;
    #undef	RETURN_TYPE_expression356
    #define	RETURN_TYPE_expression356 LexWhenPredParser_expression_return

    pANTLR3_BASE_TREE char_literal354_tree;
    pANTLR3_BASE_TREE LTERM355_tree;
    pANTLR3_BASE_TREE LTERM357_tree;
    pANTLR3_BASE_TREE char_literal358_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(60)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal354       = NULL;
    LTERM355       = NULL;
    LTERM357       = NULL;
    char_literal358       = NULL;
    expression356.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal354_tree   = NULL;
    LTERM355_tree   = NULL;
    LTERM357_tree   = NULL;
    char_literal358_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:419:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) )
        // .//LexWhenPred.g:419:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal354 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_indexSuffix3359); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, char_literal354, NULL); }


            // .//LexWhenPred.g:419:8: ( LTERM )*

            for (;;)
            {
                int alt185=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA185_0 = LA(1);
                    if ( (LA185_0 == LTERM) ) 
                    {
                        alt185=1;
                    }

                }
                switch (alt185) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM355 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3361); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM355, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop185;	/* break out of the loop */
            	    break;
                }
            }
            loop185: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix3364);
            expression356=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression356.tree, NULL); }

            // .//LexWhenPred.g:419:26: ( LTERM )*

            for (;;)
            {
                int alt186=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA186_0 = LA(1);
                    if ( (LA186_0 == LTERM) ) 
                    {
                        alt186=1;
                    }

                }
                switch (alt186) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM357 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3366); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM357, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop186;	/* break out of the loop */
            	    break;
                }
            }
            loop186: ; /* Jump out to here if this rule does not match */

            char_literal358 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_indexSuffix3369); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal358, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 419:37: -> ^( ARRAY_INDEX expression )
            	{
            	    // .//LexWhenPred.g:419:40: ^( ARRAY_INDEX expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffixEx; /* Prevent compiler warnings */
    ruleindexSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_157 != NULL) stream_157->free(stream_157);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(60, indexSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix */

/** 
 * $ANTLR start propertyReferenceSuffix
 * .//LexWhenPred.g:422:1: propertyReferenceSuffix : '.' ( LTERM )* Identifier -> ^( DOT Identifier ) ;
 */
static LexWhenPredParser_propertyReferenceSuffix_return
propertyReferenceSuffix(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_propertyReferenceSuffix_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal359;
    pANTLR3_COMMON_TOKEN    LTERM360;
    pANTLR3_COMMON_TOKEN    Identifier361;

    pANTLR3_BASE_TREE char_literal359_tree;
    pANTLR3_BASE_TREE LTERM360_tree;
    pANTLR3_BASE_TREE Identifier361_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    propertyReferenceSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(61)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal359       = NULL;
    LTERM360       = NULL;
    Identifier361       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal359_tree   = NULL;
    LTERM360_tree   = NULL;
    Identifier361_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:423:2: ( '.' ( LTERM )* Identifier -> ^( DOT Identifier ) )
        // .//LexWhenPred.g:423:4: '.' ( LTERM )* Identifier
        {
            char_literal359 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_propertyReferenceSuffix3390); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, char_literal359, NULL); }


            // .//LexWhenPred.g:423:8: ( LTERM )*

            for (;;)
            {
                int alt187=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA187_0 = LA(1);
                    if ( (LA187_0 == LTERM) ) 
                    {
                        alt187=1;
                    }

                }
                switch (alt187) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM360 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix3392); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM360, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop187;	/* break out of the loop */
            	    break;
                }
            }
            loop187: ; /* Jump out to here if this rule does not match */

            Identifier361 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix3395); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier361, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 423:26: -> ^( DOT Identifier )
            	{
            	    // .//LexWhenPred.g:423:29: ^( DOT Identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffixEx; /* Prevent compiler warnings */
    rulepropertyReferenceSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(61, propertyReferenceSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix */

/** 
 * $ANTLR start assignmentOperator
 * .//LexWhenPred.g:427:1: assignmentOperator : ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '<<=' -> ^( LEFT_SHIFT_ASSIGN ) | '>>=' -> ^( RIGHT_SHIFT_ASSIGN ) | '>>>=' -> ^( TRIPLE_SHIFT_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) );
 */
static LexWhenPredParser_assignmentOperator_return
assignmentOperator(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_assignmentOperator_return retval;
    ANTLR3_UINT32 assignmentOperator_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal362;
    pANTLR3_COMMON_TOKEN    string_literal363;
    pANTLR3_COMMON_TOKEN    string_literal364;
    pANTLR3_COMMON_TOKEN    string_literal365;
    pANTLR3_COMMON_TOKEN    string_literal366;
    pANTLR3_COMMON_TOKEN    string_literal367;
    pANTLR3_COMMON_TOKEN    string_literal368;
    pANTLR3_COMMON_TOKEN    string_literal369;
    pANTLR3_COMMON_TOKEN    string_literal370;
    pANTLR3_COMMON_TOKEN    string_literal371;
    pANTLR3_COMMON_TOKEN    string_literal372;
    pANTLR3_COMMON_TOKEN    string_literal373;

    pANTLR3_BASE_TREE char_literal362_tree;
    pANTLR3_BASE_TREE string_literal363_tree;
    pANTLR3_BASE_TREE string_literal364_tree;
    pANTLR3_BASE_TREE string_literal365_tree;
    pANTLR3_BASE_TREE string_literal366_tree;
    pANTLR3_BASE_TREE string_literal367_tree;
    pANTLR3_BASE_TREE string_literal368_tree;
    pANTLR3_BASE_TREE string_literal369_tree;
    pANTLR3_BASE_TREE string_literal370_tree;
    pANTLR3_BASE_TREE string_literal371_tree;
    pANTLR3_BASE_TREE string_literal372_tree;
    pANTLR3_BASE_TREE string_literal373_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_170;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_161;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_134;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_162;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_163;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_164;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_169;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_166;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_165;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_168;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_167;

    /* Initialize rule variables
     */
    assignmentOperator_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(62)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal362       = NULL;
    string_literal363       = NULL;
    string_literal364       = NULL;
    string_literal365       = NULL;
    string_literal366       = NULL;
    string_literal367       = NULL;
    string_literal368       = NULL;
    string_literal369       = NULL;
    string_literal370       = NULL;
    string_literal371       = NULL;
    string_literal372       = NULL;
    string_literal373       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal362_tree   = NULL;
    string_literal363_tree   = NULL;
    string_literal364_tree   = NULL;
    string_literal365_tree   = NULL;
    string_literal366_tree   = NULL;
    string_literal367_tree   = NULL;
    string_literal368_tree   = NULL;
    string_literal369_tree   = NULL;
    string_literal370_tree   = NULL;
    string_literal371_tree   = NULL;
    string_literal372_tree   = NULL;
    string_literal373_tree   = NULL;

    stream_170   = NULL;
    #define CREATE_stream_170  if (stream_170 == NULL) {stream_170 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 170"); } 
    stream_161   = NULL;
    #define CREATE_stream_161  if (stream_161 == NULL) {stream_161 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 161"); } 
    stream_134   = NULL;
    #define CREATE_stream_134  if (stream_134 == NULL) {stream_134 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 134"); } 
    stream_162   = NULL;
    #define CREATE_stream_162  if (stream_162 == NULL) {stream_162 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 162"); } 
    stream_163   = NULL;
    #define CREATE_stream_163  if (stream_163 == NULL) {stream_163 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 163"); } 
    stream_164   = NULL;
    #define CREATE_stream_164  if (stream_164 == NULL) {stream_164 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 164"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_169   = NULL;
    #define CREATE_stream_169  if (stream_169 == NULL) {stream_169 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 169"); } 
    stream_166   = NULL;
    #define CREATE_stream_166  if (stream_166 == NULL) {stream_166 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 166"); } 
    stream_165   = NULL;
    #define CREATE_stream_165  if (stream_165 == NULL) {stream_165 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 165"); } 
    stream_168   = NULL;
    #define CREATE_stream_168  if (stream_168 == NULL) {stream_168 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 168"); } 
    stream_167   = NULL;
    #define CREATE_stream_167  if (stream_167 == NULL) {stream_167 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 167"); } 

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:428:2: ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '<<=' -> ^( LEFT_SHIFT_ASSIGN ) | '>>=' -> ^( RIGHT_SHIFT_ASSIGN ) | '>>>=' -> ^( TRIPLE_SHIFT_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) )
            
            ANTLR3_UINT32 alt188;

            alt188=12;

            switch ( LA(1) ) 
            {
            case 134:
            	{
            		alt188=1;
            	}
                break;
            case 160:
            	{
            		alt188=2;
            	}
                break;
            case 161:
            	{
            		alt188=3;
            	}
                break;
            case 162:
            	{
            		alt188=4;
            	}
                break;
            case 163:
            	{
            		alt188=5;
            	}
                break;
            case 164:
            	{
            		alt188=6;
            	}
                break;
            case 165:
            	{
            		alt188=7;
            	}
                break;
            case 166:
            	{
            		alt188=8;
            	}
                break;
            case 167:
            	{
            		alt188=9;
            	}
                break;
            case 168:
            	{
            		alt188=10;
            	}
                break;
            case 169:
            	{
            		alt188=11;
            	}
                break;
            case 170:
            	{
            		alt188=12;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 188;
                EXCEPTION->state        = 0;


                goto ruleassignmentOperatorEx;
            }

            switch (alt188) 
            {
        	case 1:
        	    // .//LexWhenPred.g:428:4: '='
        	    {
        	        char_literal362 = (pANTLR3_COMMON_TOKEN) MATCHT(134, &FOLLOW_134_in_assignmentOperator3423); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_134; stream_134->add(stream_134, char_literal362, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 428:8: -> ^( ASSIGN )
        	        	{
        	        	    // .//LexWhenPred.g:428:11: ^( ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN, (pANTLR3_UINT8)"ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:428:22: '*='
        	    {
        	        string_literal363 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_assignmentOperator3432); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, string_literal363, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 428:27: -> ^( MULT_ASSIGN )
        	        	{
        	        	    // .//LexWhenPred.g:428:30: ^( MULT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT_ASSIGN, (pANTLR3_UINT8)"MULT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//LexWhenPred.g:428:46: '/='
        	    {
        	        string_literal364 = (pANTLR3_COMMON_TOKEN) MATCHT(161, &FOLLOW_161_in_assignmentOperator3441); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_161; stream_161->add(stream_161, string_literal364, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 428:51: -> ^( DIV_ASSIGN )
        	        	{
        	        	    // .//LexWhenPred.g:428:54: ^( DIV_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV_ASSIGN, (pANTLR3_UINT8)"DIV_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//LexWhenPred.g:428:70: '%='
        	    {
        	        string_literal365 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_assignmentOperator3451); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, string_literal365, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 428:75: -> ^( MOD_ASSIGN )
        	        	{
        	        	    // .//LexWhenPred.g:428:78: ^( MOD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD_ASSIGN, (pANTLR3_UINT8)"MOD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//LexWhenPred.g:428:93: '+='
        	    {
        	        string_literal366 = (pANTLR3_COMMON_TOKEN) MATCHT(163, &FOLLOW_163_in_assignmentOperator3460); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_163; stream_163->add(stream_163, string_literal366, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 428:98: -> ^( ADD_ASSIGN )
        	        	{
        	        	    // .//LexWhenPred.g:428:101: ^( ADD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD_ASSIGN, (pANTLR3_UINT8)"ADD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//LexWhenPred.g:428:116: '-='
        	    {
        	        string_literal367 = (pANTLR3_COMMON_TOKEN) MATCHT(164, &FOLLOW_164_in_assignmentOperator3469); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_164; stream_164->add(stream_164, string_literal367, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 428:121: -> ^( SUB_ASSIGN )
        	        	{
        	        	    // .//LexWhenPred.g:428:124: ^( SUB_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB_ASSIGN, (pANTLR3_UINT8)"SUB_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//LexWhenPred.g:428:139: '<<='
        	    {
        	        string_literal368 = (pANTLR3_COMMON_TOKEN) MATCHT(165, &FOLLOW_165_in_assignmentOperator3478); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_165; stream_165->add(stream_165, string_literal368, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 428:145: -> ^( LEFT_SHIFT_ASSIGN )
        	        	{
        	        	    // .//LexWhenPred.g:428:148: ^( LEFT_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LEFT_SHIFT_ASSIGN, (pANTLR3_UINT8)"LEFT_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//LexWhenPred.g:428:170: '>>='
        	    {
        	        string_literal369 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_assignmentOperator3487); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, string_literal369, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 428:176: -> ^( RIGHT_SHIFT_ASSIGN )
        	        	{
        	        	    // .//LexWhenPred.g:428:179: ^( RIGHT_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RIGHT_SHIFT_ASSIGN, (pANTLR3_UINT8)"RIGHT_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//LexWhenPred.g:428:202: '>>>='
        	    {
        	        string_literal370 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_assignmentOperator3496); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, string_literal370, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 428:209: -> ^( TRIPLE_SHIFT_ASSIGN )
        	        	{
        	        	    // .//LexWhenPred.g:428:212: ^( TRIPLE_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRIPLE_SHIFT_ASSIGN, (pANTLR3_UINT8)"TRIPLE_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 10:
        	    // .//LexWhenPred.g:428:236: '&='
        	    {
        	        string_literal371 = (pANTLR3_COMMON_TOKEN) MATCHT(168, &FOLLOW_168_in_assignmentOperator3505); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_168; stream_168->add(stream_168, string_literal371, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 428:240: -> ^( AND_ASSIGN )
        	        	{
        	        	    // .//LexWhenPred.g:428:243: ^( AND_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND_ASSIGN, (pANTLR3_UINT8)"AND_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 11:
        	    // .//LexWhenPred.g:428:258: '^='
        	    {
        	        string_literal372 = (pANTLR3_COMMON_TOKEN) MATCHT(169, &FOLLOW_169_in_assignmentOperator3513); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_169; stream_169->add(stream_169, string_literal372, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 428:262: -> ^( EXP_ASSIGN )
        	        	{
        	        	    // .//LexWhenPred.g:428:265: ^( EXP_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP_ASSIGN, (pANTLR3_UINT8)"EXP_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 12:
        	    // .//LexWhenPred.g:428:281: '|='
        	    {
        	        string_literal373 = (pANTLR3_COMMON_TOKEN) MATCHT(170, &FOLLOW_170_in_assignmentOperator3522); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_170; stream_170->add(stream_170, string_literal373, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 428:286: -> ^( OR_ASSIGN )
        	        	{
        	        	    // .//LexWhenPred.g:428:289: ^( OR_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR_ASSIGN, (pANTLR3_UINT8)"OR_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentOperatorEx; /* Prevent compiler warnings */
    ruleassignmentOperatorEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_170 != NULL) stream_170->free(stream_170);
        if (stream_161 != NULL) stream_161->free(stream_161);
        if (stream_134 != NULL) stream_134->free(stream_134);
        if (stream_162 != NULL) stream_162->free(stream_162);
        if (stream_163 != NULL) stream_163->free(stream_163);
        if (stream_164 != NULL) stream_164->free(stream_164);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_169 != NULL) stream_169->free(stream_169);
        if (stream_166 != NULL) stream_166->free(stream_166);
        if (stream_165 != NULL) stream_165->free(stream_165);
        if (stream_168 != NULL) stream_168->free(stream_168);
        if (stream_167 != NULL) stream_167->free(stream_167);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(62, assignmentOperator_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentOperator */

/** 
 * $ANTLR start conditionalExpression
 * .//LexWhenPred.g:431:1: conditionalExpression : ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )? ;
 */
static LexWhenPredParser_conditionalExpression_return
conditionalExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_conditionalExpression_return retval;
    ANTLR3_UINT32 conditionalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM375;
    pANTLR3_COMMON_TOKEN    char_literal376;
    pANTLR3_COMMON_TOKEN    LTERM377;
    pANTLR3_COMMON_TOKEN    LTERM378;
    pANTLR3_COMMON_TOKEN    char_literal379;
    pANTLR3_COMMON_TOKEN    LTERM380;
    LexWhenPredParser_assignmentExpression_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 LexWhenPredParser_assignmentExpression_return

    LexWhenPredParser_assignmentExpression_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 LexWhenPredParser_assignmentExpression_return

    LexWhenPredParser_logicalORExpression_return logicalORExpression374;
    #undef	RETURN_TYPE_logicalORExpression374
    #define	RETURN_TYPE_logicalORExpression374 LexWhenPredParser_logicalORExpression_return

    pANTLR3_BASE_TREE LTERM375_tree;
    pANTLR3_BASE_TREE char_literal376_tree;
    pANTLR3_BASE_TREE LTERM377_tree;
    pANTLR3_BASE_TREE LTERM378_tree;
    pANTLR3_BASE_TREE char_literal379_tree;
    pANTLR3_BASE_TREE LTERM380_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_171;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpression;
    /* Initialize rule variables
     */
    conditionalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(63)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM375       = NULL;
    char_literal376       = NULL;
    LTERM377       = NULL;
    LTERM378       = NULL;
    char_literal379       = NULL;
    LTERM380       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpression374.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM375_tree   = NULL;
    char_literal376_tree   = NULL;
    LTERM377_tree   = NULL;
    LTERM378_tree   = NULL;
    char_literal379_tree   = NULL;
    LTERM380_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_171   = NULL;
    #define CREATE_stream_171  if (stream_171 == NULL) {stream_171 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 171"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }
    stream_logicalORExpression   = NULL;
    #define CREATE_stream_logicalORExpression  if (stream_logicalORExpression == NULL) {stream_logicalORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:432:2: ( ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )? )
        // .//LexWhenPred.g:432:4: ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
        {
            // .//LexWhenPred.g:432:4: ( logicalORExpression -> logicalORExpression )
            // .//LexWhenPred.g:432:5: logicalORExpression
            {
                FOLLOWPUSH(FOLLOW_logicalORExpression_in_conditionalExpression3540);
                logicalORExpression374=logicalORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpression; stream_logicalORExpression->add(stream_logicalORExpression, logicalORExpression374.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 432:25: -> logicalORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpression == NULL ? NULL : stream_logicalORExpression->nextTree(stream_logicalORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:432:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
            {
                int alt193=2;
                alt193 = cdfa193.predict(ctx, RECOGNIZER, ISTREAM, &cdfa193);
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt193) 
                {
            	case 1:
            	    // .//LexWhenPred.g:432:50: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression
            	    {

            	        // .//LexWhenPred.g:432:50: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt189=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA189_0 = LA(1);
            	                if ( (LA189_0 == LTERM) ) 
            	                {
            	                    alt189=1;
            	                }

            	            }
            	            switch (alt189) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM375 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3548); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM375, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop189;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop189: ; /* Jump out to here if this rule does not match */

            	        char_literal376 = (pANTLR3_COMMON_TOKEN) MATCHT(171, &FOLLOW_171_in_conditionalExpression3551); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_171; stream_171->add(stream_171, char_literal376, NULL); }


            	        // .//LexWhenPred.g:432:61: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt190=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA190_0 = LA(1);
            	                if ( (LA190_0 == LTERM) ) 
            	                {
            	                    alt190=1;
            	                }

            	            }
            	            switch (alt190) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM377 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3553); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM377, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop190;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop190: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_conditionalExpression3558);
            	        expr1=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr1.tree, NULL); }

            	        // .//LexWhenPred.g:432:95: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt191=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA191_0 = LA(1);
            	                if ( (LA191_0 == LTERM) ) 
            	                {
            	                    alt191=1;
            	                }

            	            }
            	            switch (alt191) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM378 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3560); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM378, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop191;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop191: ; /* Jump out to here if this rule does not match */

            	        char_literal379 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_conditionalExpression3563); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal379, NULL); }


            	        // .//LexWhenPred.g:432:106: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt192=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA192_0 = LA(1);
            	                if ( (LA192_0 == LTERM) ) 
            	                {
            	                    alt192=1;
            	                }

            	            }
            	            switch (alt192) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM380 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3565); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM380, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop192;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop192: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_conditionalExpression3570);
            	        expr2=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : conditionalExpression, expr1, expr2
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 432:140: -> ^( TERNARYOP $conditionalExpression $expr1 $expr2)
            	        	{
            	        	    // .//LexWhenPred.g:432:143: ^( TERNARYOP $conditionalExpression $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP, (pANTLR3_UINT8)"TERNARYOP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionEx; /* Prevent compiler warnings */
    ruleconditionalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_171 != NULL) stream_171->free(stream_171);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
        if (stream_logicalORExpression != NULL) stream_logicalORExpression->free(stream_logicalORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(63, conditionalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpression */

/** 
 * $ANTLR start conditionalExpressionNoIn
 * .//LexWhenPred.g:435:1: conditionalExpressionNoIn : ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )? ;
 */
static LexWhenPredParser_conditionalExpressionNoIn_return
conditionalExpressionNoIn(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_conditionalExpressionNoIn_return retval;
    ANTLR3_UINT32 conditionalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM382;
    pANTLR3_COMMON_TOKEN    char_literal383;
    pANTLR3_COMMON_TOKEN    LTERM384;
    pANTLR3_COMMON_TOKEN    LTERM385;
    pANTLR3_COMMON_TOKEN    char_literal386;
    pANTLR3_COMMON_TOKEN    LTERM387;
    LexWhenPredParser_assignmentExpressionNoIn_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 LexWhenPredParser_assignmentExpressionNoIn_return

    LexWhenPredParser_assignmentExpressionNoIn_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 LexWhenPredParser_assignmentExpressionNoIn_return

    LexWhenPredParser_logicalORExpressionNoIn_return logicalORExpressionNoIn381;
    #undef	RETURN_TYPE_logicalORExpressionNoIn381
    #define	RETURN_TYPE_logicalORExpressionNoIn381 LexWhenPredParser_logicalORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM382_tree;
    pANTLR3_BASE_TREE char_literal383_tree;
    pANTLR3_BASE_TREE LTERM384_tree;
    pANTLR3_BASE_TREE LTERM385_tree;
    pANTLR3_BASE_TREE char_literal386_tree;
    pANTLR3_BASE_TREE LTERM387_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_171;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpressionNoIn;
    /* Initialize rule variables
     */
    conditionalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(64)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM382       = NULL;
    char_literal383       = NULL;
    LTERM384       = NULL;
    LTERM385       = NULL;
    char_literal386       = NULL;
    LTERM387       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpressionNoIn381.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM382_tree   = NULL;
    char_literal383_tree   = NULL;
    LTERM384_tree   = NULL;
    LTERM385_tree   = NULL;
    char_literal386_tree   = NULL;
    LTERM387_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_171   = NULL;
    #define CREATE_stream_171  if (stream_171 == NULL) {stream_171 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 171"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_logicalORExpressionNoIn   = NULL;
    #define CREATE_stream_logicalORExpressionNoIn  if (stream_logicalORExpressionNoIn == NULL) {stream_logicalORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:436:2: ( ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )? )
        // .//LexWhenPred.g:436:4: ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
        {
            // .//LexWhenPred.g:436:4: ( logicalORExpressionNoIn -> logicalORExpressionNoIn )
            // .//LexWhenPred.g:436:5: logicalORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3601);
                logicalORExpressionNoIn381=logicalORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpressionNoIn; stream_logicalORExpressionNoIn->add(stream_logicalORExpressionNoIn, logicalORExpressionNoIn381.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 436:29: -> logicalORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpressionNoIn == NULL ? NULL : stream_logicalORExpressionNoIn->nextTree(stream_logicalORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:436:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
            {
                int alt198=2;
                alt198 = cdfa198.predict(ctx, RECOGNIZER, ISTREAM, &cdfa198);
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt198) 
                {
            	case 1:
            	    // .//LexWhenPred.g:436:57: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn
            	    {

            	        // .//LexWhenPred.g:436:57: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt194=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA194_0 = LA(1);
            	                if ( (LA194_0 == LTERM) ) 
            	                {
            	                    alt194=1;
            	                }

            	            }
            	            switch (alt194) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM382 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3608); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM382, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop194;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop194: ; /* Jump out to here if this rule does not match */

            	        char_literal383 = (pANTLR3_COMMON_TOKEN) MATCHT(171, &FOLLOW_171_in_conditionalExpressionNoIn3611); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_171; stream_171->add(stream_171, char_literal383, NULL); }


            	        // .//LexWhenPred.g:436:68: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt195=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA195_0 = LA(1);
            	                if ( (LA195_0 == LTERM) ) 
            	                {
            	                    alt195=1;
            	                }

            	            }
            	            switch (alt195) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM384 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3613); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM384, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop195;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop195: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3618);
            	        expr1=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr1.tree, NULL); }

            	        // .//LexWhenPred.g:436:106: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt196=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA196_0 = LA(1);
            	                if ( (LA196_0 == LTERM) ) 
            	                {
            	                    alt196=1;
            	                }

            	            }
            	            switch (alt196) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM385 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3620); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM385, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop196;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop196: ; /* Jump out to here if this rule does not match */

            	        char_literal386 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_conditionalExpressionNoIn3623); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal386, NULL); }


            	        // .//LexWhenPred.g:436:117: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt197=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA197_0 = LA(1);
            	                if ( (LA197_0 == LTERM) ) 
            	                {
            	                    alt197=1;
            	                }

            	            }
            	            switch (alt197) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM387 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3625); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM387, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop197;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop197: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3630);
            	        expr2=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : expr2, conditionalExpressionNoIn, expr1
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 436:155: -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2)
            	        	{
            	        	    // .//LexWhenPred.g:436:158: ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP, (pANTLR3_UINT8)"TERNARYOP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionNoInEx; /* Prevent compiler warnings */
    ruleconditionalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_171 != NULL) stream_171->free(stream_171);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_logicalORExpressionNoIn != NULL) stream_logicalORExpressionNoIn->free(stream_logicalORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(64, conditionalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpressionNoIn */

/** 
 * $ANTLR start logicalORExpression
 * .//LexWhenPred.g:440:1: logicalORExpression : ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* ;
 */
static LexWhenPredParser_logicalORExpression_return
logicalORExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_logicalORExpression_return retval;
    ANTLR3_UINT32 logicalORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM389;
    pANTLR3_COMMON_TOKEN    string_literal390;
    pANTLR3_COMMON_TOKEN    LTERM391;
    LexWhenPredParser_logicalANDExpression_return logicalANDExpression388;
    #undef	RETURN_TYPE_logicalANDExpression388
    #define	RETURN_TYPE_logicalANDExpression388 LexWhenPredParser_logicalANDExpression_return

    LexWhenPredParser_logicalANDExpression_return logicalANDExpression392;
    #undef	RETURN_TYPE_logicalANDExpression392
    #define	RETURN_TYPE_logicalANDExpression392 LexWhenPredParser_logicalANDExpression_return

    pANTLR3_BASE_TREE LTERM389_tree;
    pANTLR3_BASE_TREE string_literal390_tree;
    pANTLR3_BASE_TREE LTERM391_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_172;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpression;
    /* Initialize rule variables
     */
    logicalORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(65)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM389       = NULL;
    string_literal390       = NULL;
    LTERM391       = NULL;
    logicalANDExpression388.tree = NULL;

    logicalANDExpression392.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM389_tree   = NULL;
    string_literal390_tree   = NULL;
    LTERM391_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_172   = NULL;
    #define CREATE_stream_172  if (stream_172 == NULL) {stream_172 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 172"); } 
    stream_logicalANDExpression   = NULL;
    #define CREATE_stream_logicalANDExpression  if (stream_logicalANDExpression == NULL) {stream_logicalANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:441:2: ( ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* )
        // .//LexWhenPred.g:441:4: ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
        {
            // .//LexWhenPred.g:441:4: ( logicalANDExpression -> logicalANDExpression )
            // .//LexWhenPred.g:441:5: logicalANDExpression
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression3660);
                logicalANDExpression388=logicalANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression388.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 441:26: -> logicalANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:441:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*

            for (;;)
            {
                int alt201=2;
                alt201 = cdfa201.predict(ctx, RECOGNIZER, ISTREAM, &cdfa201);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt201) 
                {
            	case 1:
            	    // .//LexWhenPred.g:441:51: ( LTERM )* '||' ( LTERM )* logicalANDExpression
            	    {

            	        // .//LexWhenPred.g:441:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt199=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA199_0 = LA(1);
            	                if ( (LA199_0 == LTERM) ) 
            	                {
            	                    alt199=1;
            	                }

            	            }
            	            switch (alt199) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM389 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression3667); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM389, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop199;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop199: ; /* Jump out to here if this rule does not match */

            	        string_literal390 = (pANTLR3_COMMON_TOKEN) MATCHT(172, &FOLLOW_172_in_logicalORExpression3670); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_172; stream_172->add(stream_172, string_literal390, NULL); }


            	        // .//LexWhenPred.g:441:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt200=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA200_0 = LA(1);
            	                if ( (LA200_0 == LTERM) ) 
            	                {
            	                    alt200=1;
            	                }

            	            }
            	            switch (alt200) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM391 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression3672); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM391, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop200;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop200: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression3675);
            	        logicalANDExpression392=logicalANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression392.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpression, logicalORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 441:91: -> ^( OR $logicalORExpression logicalANDExpression )
            	        	{
            	        	    // .//LexWhenPred.g:441:94: ^( OR $logicalORExpression logicalANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop201;	/* break out of the loop */
            	    break;
                }
            }
            loop201: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionEx; /* Prevent compiler warnings */
    rulelogicalORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_172 != NULL) stream_172->free(stream_172);
        if (stream_logicalANDExpression != NULL) stream_logicalANDExpression->free(stream_logicalANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(65, logicalORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpression */

/** 
 * $ANTLR start logicalANDExpression
 * .//LexWhenPred.g:444:1: logicalANDExpression : ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* ;
 */
static LexWhenPredParser_logicalANDExpression_return
logicalANDExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_logicalANDExpression_return retval;
    ANTLR3_UINT32 logicalANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM394;
    pANTLR3_COMMON_TOKEN    string_literal395;
    pANTLR3_COMMON_TOKEN    LTERM396;
    LexWhenPredParser_bitwiseORExpression_return bitwiseORExpression393;
    #undef	RETURN_TYPE_bitwiseORExpression393
    #define	RETURN_TYPE_bitwiseORExpression393 LexWhenPredParser_bitwiseORExpression_return

    LexWhenPredParser_bitwiseORExpression_return bitwiseORExpression397;
    #undef	RETURN_TYPE_bitwiseORExpression397
    #define	RETURN_TYPE_bitwiseORExpression397 LexWhenPredParser_bitwiseORExpression_return

    pANTLR3_BASE_TREE LTERM394_tree;
    pANTLR3_BASE_TREE string_literal395_tree;
    pANTLR3_BASE_TREE LTERM396_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_173;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpression;
    /* Initialize rule variables
     */
    logicalANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(66)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM394       = NULL;
    string_literal395       = NULL;
    LTERM396       = NULL;
    bitwiseORExpression393.tree = NULL;

    bitwiseORExpression397.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM394_tree   = NULL;
    string_literal395_tree   = NULL;
    LTERM396_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_173   = NULL;
    #define CREATE_stream_173  if (stream_173 == NULL) {stream_173 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 173"); } 
    stream_bitwiseORExpression   = NULL;
    #define CREATE_stream_bitwiseORExpression  if (stream_bitwiseORExpression == NULL) {stream_bitwiseORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:445:2: ( ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* )
        // .//LexWhenPred.g:445:4: ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
        {
            // .//LexWhenPred.g:445:4: ( bitwiseORExpression -> bitwiseORExpression )
            // .//LexWhenPred.g:445:5: bitwiseORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression3702);
                bitwiseORExpression393=bitwiseORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression393.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 445:25: -> bitwiseORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:445:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*

            for (;;)
            {
                int alt204=2;
                alt204 = cdfa204.predict(ctx, RECOGNIZER, ISTREAM, &cdfa204);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt204) 
                {
            	case 1:
            	    // .//LexWhenPred.g:445:49: ( LTERM )* '&&' ( LTERM )* bitwiseORExpression
            	    {

            	        // .//LexWhenPred.g:445:49: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt202=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA202_0 = LA(1);
            	                if ( (LA202_0 == LTERM) ) 
            	                {
            	                    alt202=1;
            	                }

            	            }
            	            switch (alt202) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM394 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression3709); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM394, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop202;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop202: ; /* Jump out to here if this rule does not match */

            	        string_literal395 = (pANTLR3_COMMON_TOKEN) MATCHT(173, &FOLLOW_173_in_logicalANDExpression3712); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_173; stream_173->add(stream_173, string_literal395, NULL); }


            	        // .//LexWhenPred.g:445:61: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt203=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA203_0 = LA(1);
            	                if ( (LA203_0 == LTERM) ) 
            	                {
            	                    alt203=1;
            	                }

            	            }
            	            switch (alt203) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM396 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression3714); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM396, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop203;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop203: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression3717);
            	        bitwiseORExpression397=bitwiseORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression397.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpression, bitwiseORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 445:89: -> ^( AND $logicalANDExpression bitwiseORExpression )
            	        	{
            	        	    // .//LexWhenPred.g:445:92: ^( AND $logicalANDExpression bitwiseORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop204;	/* break out of the loop */
            	    break;
                }
            }
            loop204: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_173 != NULL) stream_173->free(stream_173);
        if (stream_bitwiseORExpression != NULL) stream_bitwiseORExpression->free(stream_bitwiseORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(66, logicalANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpression */

/** 
 * $ANTLR start logicalORExpressionNoIn
 * .//LexWhenPred.g:448:1: logicalORExpressionNoIn : ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* ;
 */
static LexWhenPredParser_logicalORExpressionNoIn_return
logicalORExpressionNoIn(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_logicalORExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM399;
    pANTLR3_COMMON_TOKEN    string_literal400;
    pANTLR3_COMMON_TOKEN    LTERM401;
    LexWhenPredParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn398;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn398
    #define	RETURN_TYPE_logicalANDExpressionNoIn398 LexWhenPredParser_logicalANDExpressionNoIn_return

    LexWhenPredParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn402;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn402
    #define	RETURN_TYPE_logicalANDExpressionNoIn402 LexWhenPredParser_logicalANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM399_tree;
    pANTLR3_BASE_TREE string_literal400_tree;
    pANTLR3_BASE_TREE LTERM401_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_172;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpressionNoIn;
    /* Initialize rule variables
     */
    logicalORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(67)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM399       = NULL;
    string_literal400       = NULL;
    LTERM401       = NULL;
    logicalANDExpressionNoIn398.tree = NULL;

    logicalANDExpressionNoIn402.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM399_tree   = NULL;
    string_literal400_tree   = NULL;
    LTERM401_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_172   = NULL;
    #define CREATE_stream_172  if (stream_172 == NULL) {stream_172 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 172"); } 
    stream_logicalANDExpressionNoIn   = NULL;
    #define CREATE_stream_logicalANDExpressionNoIn  if (stream_logicalANDExpressionNoIn == NULL) {stream_logicalANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:449:2: ( ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* )
        // .//LexWhenPred.g:449:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
        {
            // .//LexWhenPred.g:449:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn )
            // .//LexWhenPred.g:449:5: logicalANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3745);
                logicalANDExpressionNoIn398=logicalANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn398.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 449:30: -> logicalANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:449:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*

            for (;;)
            {
                int alt207=2;
                alt207 = cdfa207.predict(ctx, RECOGNIZER, ISTREAM, &cdfa207);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt207) 
                {
            	case 1:
            	    // .//LexWhenPred.g:449:59: ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn
            	    {

            	        // .//LexWhenPred.g:449:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt205=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA205_0 = LA(1);
            	                if ( (LA205_0 == LTERM) ) 
            	                {
            	                    alt205=1;
            	                }

            	            }
            	            switch (alt205) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM399 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn3752); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM399, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop205;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop205: ; /* Jump out to here if this rule does not match */

            	        string_literal400 = (pANTLR3_COMMON_TOKEN) MATCHT(172, &FOLLOW_172_in_logicalORExpressionNoIn3755); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_172; stream_172->add(stream_172, string_literal400, NULL); }


            	        // .//LexWhenPred.g:449:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt206=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA206_0 = LA(1);
            	                if ( (LA206_0 == LTERM) ) 
            	                {
            	                    alt206=1;
            	                }

            	            }
            	            switch (alt206) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM401 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn3757); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM401, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop206;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop206: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3760);
            	        logicalANDExpressionNoIn402=logicalANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn402.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalORExpressionNoIn, logicalANDExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 449:103: -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	{
            	        	    // .//LexWhenPred.g:449:106: ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop207;	/* break out of the loop */
            	    break;
                }
            }
            loop207: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_172 != NULL) stream_172->free(stream_172);
        if (stream_logicalANDExpressionNoIn != NULL) stream_logicalANDExpressionNoIn->free(stream_logicalANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(67, logicalORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpressionNoIn
 * .//LexWhenPred.g:453:1: logicalANDExpressionNoIn : ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* ;
 */
static LexWhenPredParser_logicalANDExpressionNoIn_return
logicalANDExpressionNoIn(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_logicalANDExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM404;
    pANTLR3_COMMON_TOKEN    string_literal405;
    pANTLR3_COMMON_TOKEN    LTERM406;
    LexWhenPredParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn403;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn403
    #define	RETURN_TYPE_bitwiseORExpressionNoIn403 LexWhenPredParser_bitwiseORExpressionNoIn_return

    LexWhenPredParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn407;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn407
    #define	RETURN_TYPE_bitwiseORExpressionNoIn407 LexWhenPredParser_bitwiseORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM404_tree;
    pANTLR3_BASE_TREE string_literal405_tree;
    pANTLR3_BASE_TREE LTERM406_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_173;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpressionNoIn;
    /* Initialize rule variables
     */
    logicalANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(68)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM404       = NULL;
    string_literal405       = NULL;
    LTERM406       = NULL;
    bitwiseORExpressionNoIn403.tree = NULL;

    bitwiseORExpressionNoIn407.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM404_tree   = NULL;
    string_literal405_tree   = NULL;
    LTERM406_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_173   = NULL;
    #define CREATE_stream_173  if (stream_173 == NULL) {stream_173 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 173"); } 
    stream_bitwiseORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseORExpressionNoIn  if (stream_bitwiseORExpressionNoIn == NULL) {stream_bitwiseORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:454:2: ( ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* )
        // .//LexWhenPred.g:454:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
        {
            // .//LexWhenPred.g:454:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn )
            // .//LexWhenPred.g:454:5: bitwiseORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3789);
                bitwiseORExpressionNoIn403=bitwiseORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn403.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 454:29: -> bitwiseORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:454:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*

            for (;;)
            {
                int alt210=2;
                alt210 = cdfa210.predict(ctx, RECOGNIZER, ISTREAM, &cdfa210);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt210) 
                {
            	case 1:
            	    // .//LexWhenPred.g:454:58: ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn
            	    {

            	        // .//LexWhenPred.g:454:58: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt208=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA208_0 = LA(1);
            	                if ( (LA208_0 == LTERM) ) 
            	                {
            	                    alt208=1;
            	                }

            	            }
            	            switch (alt208) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM404 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn3797); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM404, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop208;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop208: ; /* Jump out to here if this rule does not match */

            	        string_literal405 = (pANTLR3_COMMON_TOKEN) MATCHT(173, &FOLLOW_173_in_logicalANDExpressionNoIn3800); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_173; stream_173->add(stream_173, string_literal405, NULL); }


            	        // .//LexWhenPred.g:454:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt209=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA209_0 = LA(1);
            	                if ( (LA209_0 == LTERM) ) 
            	                {
            	                    alt209=1;
            	                }

            	            }
            	            switch (alt209) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM406 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn3802); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM406, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop209;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop209: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3805);
            	        bitwiseORExpressionNoIn407=bitwiseORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn407.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpressionNoIn, logicalANDExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 454:101: -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	{
            	        	    // .//LexWhenPred.g:454:104: ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop210;	/* break out of the loop */
            	    break;
                }
            }
            loop210: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_173 != NULL) stream_173->free(stream_173);
        if (stream_bitwiseORExpressionNoIn != NULL) stream_bitwiseORExpressionNoIn->free(stream_bitwiseORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(68, logicalANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpressionNoIn */

/** 
 * $ANTLR start bitwiseORExpression
 * .//LexWhenPred.g:457:1: bitwiseORExpression : ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* ;
 */
static LexWhenPredParser_bitwiseORExpression_return
bitwiseORExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_bitwiseORExpression_return retval;
    ANTLR3_UINT32 bitwiseORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM409;
    pANTLR3_COMMON_TOKEN    char_literal410;
    pANTLR3_COMMON_TOKEN    LTERM411;
    LexWhenPredParser_bitwiseXORExpression_return bitwiseXORExpression408;
    #undef	RETURN_TYPE_bitwiseXORExpression408
    #define	RETURN_TYPE_bitwiseXORExpression408 LexWhenPredParser_bitwiseXORExpression_return

    LexWhenPredParser_bitwiseXORExpression_return bitwiseXORExpression412;
    #undef	RETURN_TYPE_bitwiseXORExpression412
    #define	RETURN_TYPE_bitwiseXORExpression412 LexWhenPredParser_bitwiseXORExpression_return

    pANTLR3_BASE_TREE LTERM409_tree;
    pANTLR3_BASE_TREE char_literal410_tree;
    pANTLR3_BASE_TREE LTERM411_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_174;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpression;
    /* Initialize rule variables
     */
    bitwiseORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(69)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM409       = NULL;
    char_literal410       = NULL;
    LTERM411       = NULL;
    bitwiseXORExpression408.tree = NULL;

    bitwiseXORExpression412.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM409_tree   = NULL;
    char_literal410_tree   = NULL;
    LTERM411_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_174   = NULL;
    #define CREATE_stream_174  if (stream_174 == NULL) {stream_174 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 174"); } 
    stream_bitwiseXORExpression   = NULL;
    #define CREATE_stream_bitwiseXORExpression  if (stream_bitwiseXORExpression == NULL) {stream_bitwiseXORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:458:2: ( ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* )
        // .//LexWhenPred.g:458:4: ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
        {
            // .//LexWhenPred.g:458:4: ( bitwiseXORExpression -> bitwiseXORExpression )
            // .//LexWhenPred.g:458:5: bitwiseXORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3832);
                bitwiseXORExpression408=bitwiseXORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression408.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 458:26: -> bitwiseXORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:458:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*

            for (;;)
            {
                int alt213=2;
                alt213 = cdfa213.predict(ctx, RECOGNIZER, ISTREAM, &cdfa213);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt213) 
                {
            	case 1:
            	    // .//LexWhenPred.g:458:52: ( LTERM )* '|' ( LTERM )* bitwiseXORExpression
            	    {

            	        // .//LexWhenPred.g:458:52: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt211=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA211_0 = LA(1);
            	                if ( (LA211_0 == LTERM) ) 
            	                {
            	                    alt211=1;
            	                }

            	            }
            	            switch (alt211) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM409 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression3840); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM409, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop211;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop211: ; /* Jump out to here if this rule does not match */

            	        char_literal410 = (pANTLR3_COMMON_TOKEN) MATCHT(174, &FOLLOW_174_in_bitwiseORExpression3843); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_174; stream_174->add(stream_174, char_literal410, NULL); }


            	        // .//LexWhenPred.g:458:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt212=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA212_0 = LA(1);
            	                if ( (LA212_0 == LTERM) ) 
            	                {
            	                    alt212=1;
            	                }

            	            }
            	            switch (alt212) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM411 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression3845); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM411, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop212;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop212: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3848);
            	        bitwiseXORExpression412=bitwiseXORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression412.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpression, bitwiseXORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 458:91: -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	{
            	        	    // .//LexWhenPred.g:458:94: ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop213;	/* break out of the loop */
            	    break;
                }
            }
            loop213: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_174 != NULL) stream_174->free(stream_174);
        if (stream_bitwiseXORExpression != NULL) stream_bitwiseXORExpression->free(stream_bitwiseXORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(69, bitwiseORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpression */

/** 
 * $ANTLR start bitwiseORExpressionNoIn
 * .//LexWhenPred.g:461:1: bitwiseORExpressionNoIn : ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* ;
 */
static LexWhenPredParser_bitwiseORExpressionNoIn_return
bitwiseORExpressionNoIn(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_bitwiseORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM414;
    pANTLR3_COMMON_TOKEN    char_literal415;
    pANTLR3_COMMON_TOKEN    LTERM416;
    LexWhenPredParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn413;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn413
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn413 LexWhenPredParser_bitwiseXORExpressionNoIn_return

    LexWhenPredParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn417;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn417
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn417 LexWhenPredParser_bitwiseXORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM414_tree;
    pANTLR3_BASE_TREE char_literal415_tree;
    pANTLR3_BASE_TREE LTERM416_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_174;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(70)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM414       = NULL;
    char_literal415       = NULL;
    LTERM416       = NULL;
    bitwiseXORExpressionNoIn413.tree = NULL;

    bitwiseXORExpressionNoIn417.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM414_tree   = NULL;
    char_literal415_tree   = NULL;
    LTERM416_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_174   = NULL;
    #define CREATE_stream_174  if (stream_174 == NULL) {stream_174 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 174"); } 
    stream_bitwiseXORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseXORExpressionNoIn  if (stream_bitwiseXORExpressionNoIn == NULL) {stream_bitwiseXORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:462:2: ( ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* )
        // .//LexWhenPred.g:462:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
        {
            // .//LexWhenPred.g:462:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn )
            // .//LexWhenPred.g:462:5: bitwiseXORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3875);
                bitwiseXORExpressionNoIn413=bitwiseXORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn413.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 462:30: -> bitwiseXORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:462:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*

            for (;;)
            {
                int alt216=2;
                alt216 = cdfa216.predict(ctx, RECOGNIZER, ISTREAM, &cdfa216);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt216) 
                {
            	case 1:
            	    // .//LexWhenPred.g:462:60: ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn
            	    {

            	        // .//LexWhenPred.g:462:60: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt214=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA214_0 = LA(1);
            	                if ( (LA214_0 == LTERM) ) 
            	                {
            	                    alt214=1;
            	                }

            	            }
            	            switch (alt214) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM414 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn3883); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM414, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop214;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop214: ; /* Jump out to here if this rule does not match */

            	        char_literal415 = (pANTLR3_COMMON_TOKEN) MATCHT(174, &FOLLOW_174_in_bitwiseORExpressionNoIn3886); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_174; stream_174->add(stream_174, char_literal415, NULL); }


            	        // .//LexWhenPred.g:462:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt215=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA215_0 = LA(1);
            	                if ( (LA215_0 == LTERM) ) 
            	                {
            	                    alt215=1;
            	                }

            	            }
            	            switch (alt215) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM416 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn3888); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM416, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop215;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop215: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3891);
            	        bitwiseXORExpressionNoIn417=bitwiseXORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn417.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseXORExpressionNoIn, bitwiseORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 462:103: -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	{
            	        	    // .//LexWhenPred.g:462:106: ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop216;	/* break out of the loop */
            	    break;
                }
            }
            loop216: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_174 != NULL) stream_174->free(stream_174);
        if (stream_bitwiseXORExpressionNoIn != NULL) stream_bitwiseXORExpressionNoIn->free(stream_bitwiseXORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(70, bitwiseORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpressionNoIn */

/** 
 * $ANTLR start bitwiseXORExpression
 * .//LexWhenPred.g:465:1: bitwiseXORExpression : ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* ;
 */
static LexWhenPredParser_bitwiseXORExpression_return
bitwiseXORExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_bitwiseXORExpression_return retval;
    ANTLR3_UINT32 bitwiseXORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM419;
    pANTLR3_COMMON_TOKEN    char_literal420;
    pANTLR3_COMMON_TOKEN    LTERM421;
    LexWhenPredParser_bitwiseANDExpression_return bitwiseANDExpression418;
    #undef	RETURN_TYPE_bitwiseANDExpression418
    #define	RETURN_TYPE_bitwiseANDExpression418 LexWhenPredParser_bitwiseANDExpression_return

    LexWhenPredParser_bitwiseANDExpression_return bitwiseANDExpression422;
    #undef	RETURN_TYPE_bitwiseANDExpression422
    #define	RETURN_TYPE_bitwiseANDExpression422 LexWhenPredParser_bitwiseANDExpression_return

    pANTLR3_BASE_TREE LTERM419_tree;
    pANTLR3_BASE_TREE char_literal420_tree;
    pANTLR3_BASE_TREE LTERM421_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_175;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpression;
    /* Initialize rule variables
     */
    bitwiseXORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(71)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM419       = NULL;
    char_literal420       = NULL;
    LTERM421       = NULL;
    bitwiseANDExpression418.tree = NULL;

    bitwiseANDExpression422.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM419_tree   = NULL;
    char_literal420_tree   = NULL;
    LTERM421_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_175   = NULL;
    #define CREATE_stream_175  if (stream_175 == NULL) {stream_175 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 175"); } 
    stream_bitwiseANDExpression   = NULL;
    #define CREATE_stream_bitwiseANDExpression  if (stream_bitwiseANDExpression == NULL) {stream_bitwiseANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:466:1: ( ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* )
        // .//LexWhenPred.g:466:3: ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
        {
            // .//LexWhenPred.g:466:3: ( bitwiseANDExpression -> bitwiseANDExpression )
            // .//LexWhenPred.g:466:4: bitwiseANDExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3917);
                bitwiseANDExpression418=bitwiseANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression418.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 466:25: -> bitwiseANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:466:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*

            for (;;)
            {
                int alt219=2;
                alt219 = cdfa219.predict(ctx, RECOGNIZER, ISTREAM, &cdfa219);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt219) 
                {
            	case 1:
            	    // .//LexWhenPred.g:466:51: ( LTERM )* '^' ( LTERM )* bitwiseANDExpression
            	    {

            	        // .//LexWhenPred.g:466:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt217=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA217_0 = LA(1);
            	                if ( (LA217_0 == LTERM) ) 
            	                {
            	                    alt217=1;
            	                }

            	            }
            	            switch (alt217) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM419 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression3925); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM419, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop217;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop217: ; /* Jump out to here if this rule does not match */

            	        char_literal420 = (pANTLR3_COMMON_TOKEN) MATCHT(175, &FOLLOW_175_in_bitwiseXORExpression3928); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_175; stream_175->add(stream_175, char_literal420, NULL); }


            	        // .//LexWhenPred.g:466:62: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt218=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA218_0 = LA(1);
            	                if ( (LA218_0 == LTERM) ) 
            	                {
            	                    alt218=1;
            	                }

            	            }
            	            switch (alt218) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM421 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression3930); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM421, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop218;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop218: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3933);
            	        bitwiseANDExpression422=bitwiseANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression422.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseXORExpression, bitwiseANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 466:90: -> ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	{
            	        	    // .//LexWhenPred.g:466:93: ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop219;	/* break out of the loop */
            	    break;
                }
            }
            loop219: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_175 != NULL) stream_175->free(stream_175);
        if (stream_bitwiseANDExpression != NULL) stream_bitwiseANDExpression->free(stream_bitwiseANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(71, bitwiseXORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpression */

/** 
 * $ANTLR start bitwiseXORExpressionNoIn
 * .//LexWhenPred.g:469:1: bitwiseXORExpressionNoIn : ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* ;
 */
static LexWhenPredParser_bitwiseXORExpressionNoIn_return
bitwiseXORExpressionNoIn(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_bitwiseXORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseXORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM424;
    pANTLR3_COMMON_TOKEN    char_literal425;
    pANTLR3_COMMON_TOKEN    LTERM426;
    LexWhenPredParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn423;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn423
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn423 LexWhenPredParser_bitwiseANDExpressionNoIn_return

    LexWhenPredParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn427;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn427
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn427 LexWhenPredParser_bitwiseANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM424_tree;
    pANTLR3_BASE_TREE char_literal425_tree;
    pANTLR3_BASE_TREE LTERM426_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_175;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseXORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(72)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM424       = NULL;
    char_literal425       = NULL;
    LTERM426       = NULL;
    bitwiseANDExpressionNoIn423.tree = NULL;

    bitwiseANDExpressionNoIn427.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM424_tree   = NULL;
    char_literal425_tree   = NULL;
    LTERM426_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_175   = NULL;
    #define CREATE_stream_175  if (stream_175 == NULL) {stream_175 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 175"); } 
    stream_bitwiseANDExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseANDExpressionNoIn  if (stream_bitwiseANDExpressionNoIn == NULL) {stream_bitwiseANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:470:2: ( ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* )
        // .//LexWhenPred.g:470:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
        {
            // .//LexWhenPred.g:470:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn )
            // .//LexWhenPred.g:470:5: bitwiseANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3960);
                bitwiseANDExpressionNoIn423=bitwiseANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn423.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 470:30: -> bitwiseANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:470:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*

            for (;;)
            {
                int alt222=2;
                alt222 = cdfa222.predict(ctx, RECOGNIZER, ISTREAM, &cdfa222);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt222) 
                {
            	case 1:
            	    // .//LexWhenPred.g:470:59: ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn
            	    {

            	        // .//LexWhenPred.g:470:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt220=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA220_0 = LA(1);
            	                if ( (LA220_0 == LTERM) ) 
            	                {
            	                    alt220=1;
            	                }

            	            }
            	            switch (alt220) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM424 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3967); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM424, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop220;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop220: ; /* Jump out to here if this rule does not match */

            	        char_literal425 = (pANTLR3_COMMON_TOKEN) MATCHT(175, &FOLLOW_175_in_bitwiseXORExpressionNoIn3970); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_175; stream_175->add(stream_175, char_literal425, NULL); }


            	        // .//LexWhenPred.g:470:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt221=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA221_0 = LA(1);
            	                if ( (LA221_0 == LTERM) ) 
            	                {
            	                    alt221=1;
            	                }

            	            }
            	            switch (alt221) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM426 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3972); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM426, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop221;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop221: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3975);
            	        bitwiseANDExpressionNoIn427=bitwiseANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn427.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpressionNoIn, bitwiseXORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 470:102: -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	{
            	        	    // .//LexWhenPred.g:470:105: ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop222;	/* break out of the loop */
            	    break;
                }
            }
            loop222: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_175 != NULL) stream_175->free(stream_175);
        if (stream_bitwiseANDExpressionNoIn != NULL) stream_bitwiseANDExpressionNoIn->free(stream_bitwiseANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(72, bitwiseXORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpressionNoIn */

/** 
 * $ANTLR start bitwiseANDExpression
 * .//LexWhenPred.g:473:1: bitwiseANDExpression : ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* ;
 */
static LexWhenPredParser_bitwiseANDExpression_return
bitwiseANDExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_bitwiseANDExpression_return retval;
    ANTLR3_UINT32 bitwiseANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM429;
    pANTLR3_COMMON_TOKEN    char_literal430;
    pANTLR3_COMMON_TOKEN    LTERM431;
    LexWhenPredParser_equalityExpression_return equalityExpression428;
    #undef	RETURN_TYPE_equalityExpression428
    #define	RETURN_TYPE_equalityExpression428 LexWhenPredParser_equalityExpression_return

    LexWhenPredParser_equalityExpression_return equalityExpression432;
    #undef	RETURN_TYPE_equalityExpression432
    #define	RETURN_TYPE_equalityExpression432 LexWhenPredParser_equalityExpression_return

    pANTLR3_BASE_TREE LTERM429_tree;
    pANTLR3_BASE_TREE char_literal430_tree;
    pANTLR3_BASE_TREE LTERM431_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_176;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpression;
    /* Initialize rule variables
     */
    bitwiseANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(73)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM429       = NULL;
    char_literal430       = NULL;
    LTERM431       = NULL;
    equalityExpression428.tree = NULL;

    equalityExpression432.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM429_tree   = NULL;
    char_literal430_tree   = NULL;
    LTERM431_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_176   = NULL;
    #define CREATE_stream_176  if (stream_176 == NULL) {stream_176 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 176"); } 
    stream_equalityExpression   = NULL;
    #define CREATE_stream_equalityExpression  if (stream_equalityExpression == NULL) {stream_equalityExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:474:2: ( ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* )
        // .//LexWhenPred.g:474:4: ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
        {
            // .//LexWhenPred.g:474:4: ( equalityExpression -> equalityExpression )
            // .//LexWhenPred.g:474:5: equalityExpression
            {
                FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression4003);
                equalityExpression428=equalityExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression428.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 474:24: -> equalityExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:474:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*

            for (;;)
            {
                int alt225=2;
                alt225 = cdfa225.predict(ctx, RECOGNIZER, ISTREAM, &cdfa225);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt225) 
                {
            	case 1:
            	    // .//LexWhenPred.g:474:48: ( LTERM )* '&' ( LTERM )* equalityExpression
            	    {

            	        // .//LexWhenPred.g:474:48: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt223=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA223_0 = LA(1);
            	                if ( (LA223_0 == LTERM) ) 
            	                {
            	                    alt223=1;
            	                }

            	            }
            	            switch (alt223) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM429 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression4011); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM429, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop223;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop223: ; /* Jump out to here if this rule does not match */

            	        char_literal430 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_bitwiseANDExpression4014); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, char_literal430, NULL); }


            	        // .//LexWhenPred.g:474:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt224=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA224_0 = LA(1);
            	                if ( (LA224_0 == LTERM) ) 
            	                {
            	                    alt224=1;
            	                }

            	            }
            	            switch (alt224) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM431 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression4016); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM431, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop224;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop224: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression4019);
            	        equalityExpression432=equalityExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression432.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpression, equalityExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 474:85: -> ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	{
            	        	    // .//LexWhenPred.g:474:88: ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop225;	/* break out of the loop */
            	    break;
                }
            }
            loop225: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_176 != NULL) stream_176->free(stream_176);
        if (stream_equalityExpression != NULL) stream_equalityExpression->free(stream_equalityExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(73, bitwiseANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpression */

/** 
 * $ANTLR start bitwiseANDExpressionNoIn
 * .//LexWhenPred.g:477:1: bitwiseANDExpressionNoIn : ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* ;
 */
static LexWhenPredParser_bitwiseANDExpressionNoIn_return
bitwiseANDExpressionNoIn(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_bitwiseANDExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM434;
    pANTLR3_COMMON_TOKEN    char_literal435;
    pANTLR3_COMMON_TOKEN    LTERM436;
    LexWhenPredParser_equalityExpressionNoIn_return equalityExpressionNoIn433;
    #undef	RETURN_TYPE_equalityExpressionNoIn433
    #define	RETURN_TYPE_equalityExpressionNoIn433 LexWhenPredParser_equalityExpressionNoIn_return

    LexWhenPredParser_equalityExpressionNoIn_return equalityExpressionNoIn437;
    #undef	RETURN_TYPE_equalityExpressionNoIn437
    #define	RETURN_TYPE_equalityExpressionNoIn437 LexWhenPredParser_equalityExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM434_tree;
    pANTLR3_BASE_TREE char_literal435_tree;
    pANTLR3_BASE_TREE LTERM436_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_176;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(74)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM434       = NULL;
    char_literal435       = NULL;
    LTERM436       = NULL;
    equalityExpressionNoIn433.tree = NULL;

    equalityExpressionNoIn437.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM434_tree   = NULL;
    char_literal435_tree   = NULL;
    LTERM436_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_176   = NULL;
    #define CREATE_stream_176  if (stream_176 == NULL) {stream_176 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 176"); } 
    stream_equalityExpressionNoIn   = NULL;
    #define CREATE_stream_equalityExpressionNoIn  if (stream_equalityExpressionNoIn == NULL) {stream_equalityExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:478:2: ( ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* )
        // .//LexWhenPred.g:478:4: ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
        {
            // .//LexWhenPred.g:478:4: ( equalityExpressionNoIn -> equalityExpressionNoIn )
            // .//LexWhenPred.g:478:5: equalityExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4047);
                equalityExpressionNoIn433=equalityExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn433.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 478:28: -> equalityExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:478:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*

            for (;;)
            {
                int alt228=2;
                alt228 = cdfa228.predict(ctx, RECOGNIZER, ISTREAM, &cdfa228);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt228) 
                {
            	case 1:
            	    // .//LexWhenPred.g:478:56: ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn
            	    {

            	        // .//LexWhenPred.g:478:56: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt226=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA226_0 = LA(1);
            	                if ( (LA226_0 == LTERM) ) 
            	                {
            	                    alt226=1;
            	                }

            	            }
            	            switch (alt226) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM434 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4055); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM434, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop226;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop226: ; /* Jump out to here if this rule does not match */

            	        char_literal435 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_bitwiseANDExpressionNoIn4058); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, char_literal435, NULL); }


            	        // .//LexWhenPred.g:478:67: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt227=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA227_0 = LA(1);
            	                if ( (LA227_0 == LTERM) ) 
            	                {
            	                    alt227=1;
            	                }

            	            }
            	            switch (alt227) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM436 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4060); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM436, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop227;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop227: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4063);
            	        equalityExpressionNoIn437=equalityExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn437.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpressionNoIn, equalityExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 478:97: -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	{
            	        	    // .//LexWhenPred.g:478:100: ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop228;	/* break out of the loop */
            	    break;
                }
            }
            loop228: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_176 != NULL) stream_176->free(stream_176);
        if (stream_equalityExpressionNoIn != NULL) stream_equalityExpressionNoIn->free(stream_equalityExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(74, bitwiseANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpressionNoIn */

/** 
 * $ANTLR start equalityExpression
 * .//LexWhenPred.g:481:1: equalityExpression : ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* ;
 */
static LexWhenPredParser_equalityExpression_return
equalityExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_equalityExpression_return retval;
    ANTLR3_UINT32 equalityExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM439;
    pANTLR3_COMMON_TOKEN    LTERM441;
    LexWhenPredParser_relationalExpression_return relationalExpression438;
    #undef	RETURN_TYPE_relationalExpression438
    #define	RETURN_TYPE_relationalExpression438 LexWhenPredParser_relationalExpression_return

    LexWhenPredParser_equalityOps_return equalityOps440;
    #undef	RETURN_TYPE_equalityOps440
    #define	RETURN_TYPE_equalityOps440 LexWhenPredParser_equalityOps_return

    LexWhenPredParser_relationalExpression_return relationalExpression442;
    #undef	RETURN_TYPE_relationalExpression442
    #define	RETURN_TYPE_relationalExpression442 LexWhenPredParser_relationalExpression_return

    pANTLR3_BASE_TREE LTERM439_tree;
    pANTLR3_BASE_TREE LTERM441_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    /* Initialize rule variables
     */
    equalityExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(75)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM439       = NULL;
    LTERM441       = NULL;
    relationalExpression438.tree = NULL;

    equalityOps440.tree = NULL;

    relationalExpression442.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM439_tree   = NULL;
    LTERM441_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalExpression   = NULL;
    #define CREATE_stream_relationalExpression  if (stream_relationalExpression == NULL) {stream_relationalExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpression"); }
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:482:2: ( ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* )
        // .//LexWhenPred.g:482:4: ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
        {
            // .//LexWhenPred.g:482:4: ( relationalExpression -> relationalExpression )
            // .//LexWhenPred.g:482:5: relationalExpression
            {
                FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression4090);
                relationalExpression438=relationalExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression438.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 482:26: -> relationalExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:482:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*

            for (;;)
            {
                int alt231=2;
                alt231 = cdfa231.predict(ctx, RECOGNIZER, ISTREAM, &cdfa231);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt231) 
                {
            	case 1:
            	    // .//LexWhenPred.g:482:51: ( LTERM )* equalityOps ( LTERM )* relationalExpression
            	    {

            	        // .//LexWhenPred.g:482:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt229=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA229_0 = LA(1);
            	                if ( (LA229_0 == LTERM) ) 
            	                {
            	                    alt229=1;
            	                }

            	            }
            	            switch (alt229) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM439 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression4097); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM439, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop229;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop229: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpression4100);
            	        equalityOps440=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps440.tree, NULL); }

            	        // .//LexWhenPred.g:482:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt230=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA230_0 = LA(1);
            	                if ( (LA230_0 == LTERM) ) 
            	                {
            	                    alt230=1;
            	                }

            	            }
            	            switch (alt230) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM441 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression4102); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM441, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop230;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop230: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression4105);
            	        relationalExpression442=relationalExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression442.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityExpression, equalityOps, relationalExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 482:98: -> ^( equalityOps $equalityExpression relationalExpression )
            	        	{
            	        	    // .//LexWhenPred.g:482:101: ^( equalityOps $equalityExpression relationalExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop231;	/* break out of the loop */
            	    break;
                }
            }
            loop231: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionEx; /* Prevent compiler warnings */
    ruleequalityExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalExpression != NULL) stream_relationalExpression->free(stream_relationalExpression);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(75, equalityExpression_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpression */

/** 
 * $ANTLR start equalityOps
 * .//LexWhenPred.g:485:1: equalityOps : ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) );
 */
static LexWhenPredParser_equalityOps_return
equalityOps(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_equalityOps_return retval;
    ANTLR3_UINT32 equalityOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal443;
    pANTLR3_COMMON_TOKEN    string_literal444;
    pANTLR3_COMMON_TOKEN    string_literal445;
    pANTLR3_COMMON_TOKEN    string_literal446;

    pANTLR3_BASE_TREE string_literal443_tree;
    pANTLR3_BASE_TREE string_literal444_tree;
    pANTLR3_BASE_TREE string_literal445_tree;
    pANTLR3_BASE_TREE string_literal446_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_180;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_179;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_178;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_177;

    /* Initialize rule variables
     */
    equalityOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(76)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal443       = NULL;
    string_literal444       = NULL;
    string_literal445       = NULL;
    string_literal446       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal443_tree   = NULL;
    string_literal444_tree   = NULL;
    string_literal445_tree   = NULL;
    string_literal446_tree   = NULL;

    stream_180   = NULL;
    #define CREATE_stream_180  if (stream_180 == NULL) {stream_180 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 180"); } 
    stream_179   = NULL;
    #define CREATE_stream_179  if (stream_179 == NULL) {stream_179 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 179"); } 
    stream_178   = NULL;
    #define CREATE_stream_178  if (stream_178 == NULL) {stream_178 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 178"); } 
    stream_177   = NULL;
    #define CREATE_stream_177  if (stream_177 == NULL) {stream_177 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 177"); } 

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:486:1: ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) )
            
            ANTLR3_UINT32 alt232;

            alt232=4;

            switch ( LA(1) ) 
            {
            case 177:
            	{
            		alt232=1;
            	}
                break;
            case 178:
            	{
            		alt232=2;
            	}
                break;
            case 179:
            	{
            		alt232=3;
            	}
                break;
            case 180:
            	{
            		alt232=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 232;
                EXCEPTION->state        = 0;


                goto ruleequalityOpsEx;
            }

            switch (alt232) 
            {
        	case 1:
        	    // .//LexWhenPred.g:486:4: '=='
        	    {
        	        string_literal443 = (pANTLR3_COMMON_TOKEN) MATCHT(177, &FOLLOW_177_in_equalityOps4130); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_177; stream_177->add(stream_177, string_literal443, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 486:9: -> ^( EQUALS )
        	        	{
        	        	    // .//LexWhenPred.g:486:12: ^( EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EQUALS, (pANTLR3_UINT8)"EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:487:3: '!='
        	    {
        	        string_literal444 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_equalityOps4140); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, string_literal444, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 487:8: -> ^( NOT_EQUALS )
        	        	{
        	        	    // .//LexWhenPred.g:487:11: ^( NOT_EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_EQUALS, (pANTLR3_UINT8)"NOT_EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//LexWhenPred.g:488:3: '==='
        	    {
        	        string_literal445 = (pANTLR3_COMMON_TOKEN) MATCHT(179, &FOLLOW_179_in_equalityOps4150); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_179; stream_179->add(stream_179, string_literal445, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 488:9: -> ^( IDENT )
        	        	{
        	        	    // .//LexWhenPred.g:488:12: ^( IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IDENT, (pANTLR3_UINT8)"IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//LexWhenPred.g:489:3: '!=='
        	    {
        	        string_literal446 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_equalityOps4160); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, string_literal446, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 489:9: -> ^( NOT_IDENT )
        	        	{
        	        	    // .//LexWhenPred.g:489:12: ^( NOT_IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_IDENT, (pANTLR3_UINT8)"NOT_IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityOpsEx; /* Prevent compiler warnings */
    ruleequalityOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_180 != NULL) stream_180->free(stream_180);
        if (stream_179 != NULL) stream_179->free(stream_179);
        if (stream_178 != NULL) stream_178->free(stream_178);
        if (stream_177 != NULL) stream_177->free(stream_177);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(76, equalityOps_StartIndex); }
    return retval;
}
/* $ANTLR end equalityOps */

/** 
 * $ANTLR start equalityExpressionNoIn
 * .//LexWhenPred.g:492:1: equalityExpressionNoIn : ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* ;
 */
static LexWhenPredParser_equalityExpressionNoIn_return
equalityExpressionNoIn(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_equalityExpressionNoIn_return retval;
    ANTLR3_UINT32 equalityExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM448;
    pANTLR3_COMMON_TOKEN    LTERM450;
    LexWhenPredParser_relationalExpressionNoIn_return relationalExpressionNoIn447;
    #undef	RETURN_TYPE_relationalExpressionNoIn447
    #define	RETURN_TYPE_relationalExpressionNoIn447 LexWhenPredParser_relationalExpressionNoIn_return

    LexWhenPredParser_equalityOps_return equalityOps449;
    #undef	RETURN_TYPE_equalityOps449
    #define	RETURN_TYPE_equalityOps449 LexWhenPredParser_equalityOps_return

    LexWhenPredParser_relationalExpressionNoIn_return relationalExpressionNoIn451;
    #undef	RETURN_TYPE_relationalExpressionNoIn451
    #define	RETURN_TYPE_relationalExpressionNoIn451 LexWhenPredParser_relationalExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM448_tree;
    pANTLR3_BASE_TREE LTERM450_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpressionNoIn;
    /* Initialize rule variables
     */
    equalityExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(77)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM448       = NULL;
    LTERM450       = NULL;
    relationalExpressionNoIn447.tree = NULL;

    equalityOps449.tree = NULL;

    relationalExpressionNoIn451.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM448_tree   = NULL;
    LTERM450_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }
    stream_relationalExpressionNoIn   = NULL;
    #define CREATE_stream_relationalExpressionNoIn  if (stream_relationalExpressionNoIn == NULL) {stream_relationalExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:493:2: ( ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* )
        // .//LexWhenPred.g:493:4: ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
        {
            // .//LexWhenPred.g:493:4: ( relationalExpressionNoIn -> relationalExpressionNoIn )
            // .//LexWhenPred.g:493:5: relationalExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4177);
                relationalExpressionNoIn447=relationalExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn447.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 493:30: -> relationalExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:493:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*

            for (;;)
            {
                int alt235=2;
                alt235 = cdfa235.predict(ctx, RECOGNIZER, ISTREAM, &cdfa235);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt235) 
                {
            	case 1:
            	    // .//LexWhenPred.g:493:59: ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn
            	    {

            	        // .//LexWhenPred.g:493:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt233=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA233_0 = LA(1);
            	                if ( (LA233_0 == LTERM) ) 
            	                {
            	                    alt233=1;
            	                }

            	            }
            	            switch (alt233) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM448 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn4184); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM448, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop233;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop233: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpressionNoIn4187);
            	        equalityOps449=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps449.tree, NULL); }

            	        // .//LexWhenPred.g:493:78: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt234=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA234_0 = LA(1);
            	                if ( (LA234_0 == LTERM) ) 
            	                {
            	                    alt234=1;
            	                }

            	            }
            	            switch (alt234) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM450 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn4189); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM450, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop234;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop234: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn4192);
            	        relationalExpressionNoIn451=relationalExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn451.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityExpressionNoIn, equalityOps, relationalExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 493:110: -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	{
            	        	    // .//LexWhenPred.g:493:113: ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop235;	/* break out of the loop */
            	    break;
                }
            }
            loop235: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionNoInEx; /* Prevent compiler warnings */
    ruleequalityExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
        if (stream_relationalExpressionNoIn != NULL) stream_relationalExpressionNoIn->free(stream_relationalExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(77, equalityExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpressionNoIn */

/** 
 * $ANTLR start relationalOps
 * .//LexWhenPred.g:497:1: relationalOps : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) );
 */
static LexWhenPredParser_relationalOps_return
relationalOps(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_relationalOps_return retval;
    ANTLR3_UINT32 relationalOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal452;
    pANTLR3_COMMON_TOKEN    char_literal453;
    pANTLR3_COMMON_TOKEN    string_literal454;
    pANTLR3_COMMON_TOKEN    string_literal455;
    pANTLR3_COMMON_TOKEN    string_literal456;
    pANTLR3_COMMON_TOKEN    string_literal457;

    pANTLR3_BASE_TREE char_literal452_tree;
    pANTLR3_BASE_TREE char_literal453_tree;
    pANTLR3_BASE_TREE string_literal454_tree;
    pANTLR3_BASE_TREE string_literal455_tree;
    pANTLR3_BASE_TREE string_literal456_tree;
    pANTLR3_BASE_TREE string_literal457_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_181;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_185;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;

    /* Initialize rule variables
     */
    relationalOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(78)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal452       = NULL;
    char_literal453       = NULL;
    string_literal454       = NULL;
    string_literal455       = NULL;
    string_literal456       = NULL;
    string_literal457       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal452_tree   = NULL;
    char_literal453_tree   = NULL;
    string_literal454_tree   = NULL;
    string_literal455_tree   = NULL;
    string_literal456_tree   = NULL;
    string_literal457_tree   = NULL;

    stream_181   = NULL;
    #define CREATE_stream_181  if (stream_181 == NULL) {stream_181 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 181"); } 
    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_185   = NULL;
    #define CREATE_stream_185  if (stream_185 == NULL) {stream_185 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 185"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:498:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) )
            
            ANTLR3_UINT32 alt236;

            alt236=6;

            switch ( LA(1) ) 
            {
            case 181:
            	{
            		alt236=1;
            	}
                break;
            case 182:
            	{
            		alt236=2;
            	}
                break;
            case 183:
            	{
            		alt236=3;
            	}
                break;
            case 184:
            	{
            		alt236=4;
            	}
                break;
            case 185:
            	{
            		alt236=5;
            	}
                break;
            case 141:
            	{
            		alt236=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 236;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsEx;
            }

            switch (alt236) 
            {
        	case 1:
        	    // .//LexWhenPred.g:498:3: '<'
        	    {
        	        char_literal452 = (pANTLR3_COMMON_TOKEN) MATCHT(181, &FOLLOW_181_in_relationalOps4217); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_181; stream_181->add(stream_181, char_literal452, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 498:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//LexWhenPred.g:498:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:499:3: '>'
        	    {
        	        char_literal453 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_relationalOps4228); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, char_literal453, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 499:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//LexWhenPred.g:499:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//LexWhenPred.g:500:3: '<='
        	    {
        	        string_literal454 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_relationalOps4239); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, string_literal454, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 500:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//LexWhenPred.g:500:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//LexWhenPred.g:501:3: '>='
        	    {
        	        string_literal455 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_relationalOps4249); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, string_literal455, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 501:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//LexWhenPred.g:501:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//LexWhenPred.g:502:3: 'instanceof'
        	    {
        	        string_literal456 = (pANTLR3_COMMON_TOKEN) MATCHT(185, &FOLLOW_185_in_relationalOps4259); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_185; stream_185->add(stream_185, string_literal456, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 502:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//LexWhenPred.g:502:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//LexWhenPred.g:503:3: 'in'
        	    {
        	        string_literal457 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_relationalOps4269); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, string_literal457, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 503:16: -> ^( IN )
        	        	{
        	        	    // .//LexWhenPred.g:503:19: ^( IN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IN, (pANTLR3_UINT8)"IN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsEx; /* Prevent compiler warnings */
    rulerelationalOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_181 != NULL) stream_181->free(stream_181);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_185 != NULL) stream_185->free(stream_185);
        if (stream_141 != NULL) stream_141->free(stream_141);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(78, relationalOps_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOps */

/** 
 * $ANTLR start relationalExpression
 * .//LexWhenPred.g:506:1: relationalExpression : ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )* ;
 */
static LexWhenPredParser_relationalExpression_return
relationalExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_relationalExpression_return retval;
    ANTLR3_UINT32 relationalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM459;
    pANTLR3_COMMON_TOKEN    LTERM461;
    LexWhenPredParser_shiftExpression_return shiftExpression458;
    #undef	RETURN_TYPE_shiftExpression458
    #define	RETURN_TYPE_shiftExpression458 LexWhenPredParser_shiftExpression_return

    LexWhenPredParser_relationalOps_return relationalOps460;
    #undef	RETURN_TYPE_relationalOps460
    #define	RETURN_TYPE_relationalOps460 LexWhenPredParser_relationalOps_return

    LexWhenPredParser_shiftExpression_return shiftExpression462;
    #undef	RETURN_TYPE_shiftExpression462
    #define	RETURN_TYPE_shiftExpression462 LexWhenPredParser_shiftExpression_return

    pANTLR3_BASE_TREE LTERM459_tree;
    pANTLR3_BASE_TREE LTERM461_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOps;
    /* Initialize rule variables
     */
    relationalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(79)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM459       = NULL;
    LTERM461       = NULL;
    shiftExpression458.tree = NULL;

    relationalOps460.tree = NULL;

    shiftExpression462.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM459_tree   = NULL;
    LTERM461_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_shiftExpression   = NULL;
    #define CREATE_stream_shiftExpression  if (stream_shiftExpression == NULL) {stream_shiftExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftExpression"); }
    stream_relationalOps   = NULL;
    #define CREATE_stream_relationalOps  if (stream_relationalOps == NULL) {stream_relationalOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOps"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:507:2: ( ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )* )
        // .//LexWhenPred.g:507:4: ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*
        {
            // .//LexWhenPred.g:507:4: ( shiftExpression -> shiftExpression )
            // .//LexWhenPred.g:507:5: shiftExpression
            {
                FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression4294);
                shiftExpression458=shiftExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression458.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : shiftExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 507:21: -> shiftExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:507:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*

            for (;;)
            {
                int alt239=2;
                alt239 = cdfa239.predict(ctx, RECOGNIZER, ISTREAM, &cdfa239);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt239) 
                {
            	case 1:
            	    // .//LexWhenPred.g:507:42: ( LTERM )* relationalOps ( LTERM )* shiftExpression
            	    {

            	        // .//LexWhenPred.g:507:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt237=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA237_0 = LA(1);
            	                if ( (LA237_0 == LTERM) ) 
            	                {
            	                    alt237=1;
            	                }

            	            }
            	            switch (alt237) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM459 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression4302); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM459, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop237;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop237: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOps_in_relationalExpression4305);
            	        relationalOps460=relationalOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOps; stream_relationalOps->add(stream_relationalOps, relationalOps460.tree, NULL); }

            	        // .//LexWhenPred.g:507:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt238=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA238_0 = LA(1);
            	                if ( (LA238_0 == LTERM) ) 
            	                {
            	                    alt238=1;
            	                }

            	            }
            	            switch (alt238) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM461 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression4307); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM461, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop238;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop238: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression4310);
            	        shiftExpression462=shiftExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression462.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpression, relationalOps, shiftExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 507:86: -> ^( relationalOps $relationalExpression shiftExpression )
            	        	{
            	        	    // .//LexWhenPred.g:507:89: ^( relationalOps $relationalExpression shiftExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOps == NULL ? NULL : stream_relationalOps->nextNode(stream_relationalOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop239;	/* break out of the loop */
            	    break;
                }
            }
            loop239: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionEx; /* Prevent compiler warnings */
    rulerelationalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_shiftExpression != NULL) stream_shiftExpression->free(stream_shiftExpression);
        if (stream_relationalOps != NULL) stream_relationalOps->free(stream_relationalOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(79, relationalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpression */

/** 
 * $ANTLR start relationalOpsNoIn
 * .//LexWhenPred.g:510:1: relationalOpsNoIn : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) );
 */
static LexWhenPredParser_relationalOpsNoIn_return
relationalOpsNoIn(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_relationalOpsNoIn_return retval;
    ANTLR3_UINT32 relationalOpsNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal463;
    pANTLR3_COMMON_TOKEN    char_literal464;
    pANTLR3_COMMON_TOKEN    string_literal465;
    pANTLR3_COMMON_TOKEN    string_literal466;
    pANTLR3_COMMON_TOKEN    string_literal467;

    pANTLR3_BASE_TREE char_literal463_tree;
    pANTLR3_BASE_TREE char_literal464_tree;
    pANTLR3_BASE_TREE string_literal465_tree;
    pANTLR3_BASE_TREE string_literal466_tree;
    pANTLR3_BASE_TREE string_literal467_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_181;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_185;

    /* Initialize rule variables
     */
    relationalOpsNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(80)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal463       = NULL;
    char_literal464       = NULL;
    string_literal465       = NULL;
    string_literal466       = NULL;
    string_literal467       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal463_tree   = NULL;
    char_literal464_tree   = NULL;
    string_literal465_tree   = NULL;
    string_literal466_tree   = NULL;
    string_literal467_tree   = NULL;

    stream_181   = NULL;
    #define CREATE_stream_181  if (stream_181 == NULL) {stream_181 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 181"); } 
    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_185   = NULL;
    #define CREATE_stream_185  if (stream_185 == NULL) {stream_185 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 185"); } 

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:511:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) )
            
            ANTLR3_UINT32 alt240;

            alt240=5;

            switch ( LA(1) ) 
            {
            case 181:
            	{
            		alt240=1;
            	}
                break;
            case 182:
            	{
            		alt240=2;
            	}
                break;
            case 183:
            	{
            		alt240=3;
            	}
                break;
            case 184:
            	{
            		alt240=4;
            	}
                break;
            case 185:
            	{
            		alt240=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 240;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsNoInEx;
            }

            switch (alt240) 
            {
        	case 1:
        	    // .//LexWhenPred.g:511:3: '<'
        	    {
        	        char_literal463 = (pANTLR3_COMMON_TOKEN) MATCHT(181, &FOLLOW_181_in_relationalOpsNoIn4334); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_181; stream_181->add(stream_181, char_literal463, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 511:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//LexWhenPred.g:511:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:512:3: '>'
        	    {
        	        char_literal464 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_relationalOpsNoIn4345); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, char_literal464, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 512:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//LexWhenPred.g:512:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//LexWhenPred.g:513:3: '<='
        	    {
        	        string_literal465 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_relationalOpsNoIn4356); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, string_literal465, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 513:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//LexWhenPred.g:513:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//LexWhenPred.g:514:3: '>='
        	    {
        	        string_literal466 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_relationalOpsNoIn4366); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, string_literal466, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 514:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//LexWhenPred.g:514:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//LexWhenPred.g:515:3: 'instanceof'
        	    {
        	        string_literal467 = (pANTLR3_COMMON_TOKEN) MATCHT(185, &FOLLOW_185_in_relationalOpsNoIn4376); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_185; stream_185->add(stream_185, string_literal467, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 515:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//LexWhenPred.g:515:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsNoInEx; /* Prevent compiler warnings */
    rulerelationalOpsNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_181 != NULL) stream_181->free(stream_181);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_185 != NULL) stream_185->free(stream_185);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(80, relationalOpsNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOpsNoIn */

/** 
 * $ANTLR start relationalExpressionNoIn
 * .//LexWhenPred.g:518:1: relationalExpressionNoIn : ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )* ;
 */
static LexWhenPredParser_relationalExpressionNoIn_return
relationalExpressionNoIn(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_relationalExpressionNoIn_return retval;
    ANTLR3_UINT32 relationalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM469;
    pANTLR3_COMMON_TOKEN    LTERM471;
    LexWhenPredParser_shiftExpression_return shiftExpression468;
    #undef	RETURN_TYPE_shiftExpression468
    #define	RETURN_TYPE_shiftExpression468 LexWhenPredParser_shiftExpression_return

    LexWhenPredParser_relationalOpsNoIn_return relationalOpsNoIn470;
    #undef	RETURN_TYPE_relationalOpsNoIn470
    #define	RETURN_TYPE_relationalOpsNoIn470 LexWhenPredParser_relationalOpsNoIn_return

    LexWhenPredParser_shiftExpression_return shiftExpression472;
    #undef	RETURN_TYPE_shiftExpression472
    #define	RETURN_TYPE_shiftExpression472 LexWhenPredParser_shiftExpression_return

    pANTLR3_BASE_TREE LTERM469_tree;
    pANTLR3_BASE_TREE LTERM471_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOpsNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftExpression;
    /* Initialize rule variables
     */
    relationalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(81)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM469       = NULL;
    LTERM471       = NULL;
    shiftExpression468.tree = NULL;

    relationalOpsNoIn470.tree = NULL;

    shiftExpression472.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM469_tree   = NULL;
    LTERM471_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalOpsNoIn   = NULL;
    #define CREATE_stream_relationalOpsNoIn  if (stream_relationalOpsNoIn == NULL) {stream_relationalOpsNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOpsNoIn"); }
    stream_shiftExpression   = NULL;
    #define CREATE_stream_shiftExpression  if (stream_shiftExpression == NULL) {stream_shiftExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:519:2: ( ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )* )
        // .//LexWhenPred.g:519:4: ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*
        {
            // .//LexWhenPred.g:519:4: ( shiftExpression -> shiftExpression )
            // .//LexWhenPred.g:519:5: shiftExpression
            {
                FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn4393);
                shiftExpression468=shiftExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression468.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : shiftExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 519:21: -> shiftExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:519:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*

            for (;;)
            {
                int alt243=2;
                alt243 = cdfa243.predict(ctx, RECOGNIZER, ISTREAM, &cdfa243);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt243) 
                {
            	case 1:
            	    // .//LexWhenPred.g:519:42: ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression
            	    {

            	        // .//LexWhenPred.g:519:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt241=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA241_0 = LA(1);
            	                if ( (LA241_0 == LTERM) ) 
            	                {
            	                    alt241=1;
            	                }

            	            }
            	            switch (alt241) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM469 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn4401); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM469, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop241;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop241: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn4404);
            	        relationalOpsNoIn470=relationalOpsNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOpsNoIn; stream_relationalOpsNoIn->add(stream_relationalOpsNoIn, relationalOpsNoIn470.tree, NULL); }

            	        // .//LexWhenPred.g:519:67: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt242=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA242_0 = LA(1);
            	                if ( (LA242_0 == LTERM) ) 
            	                {
            	                    alt242=1;
            	                }

            	            }
            	            switch (alt242) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM471 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn4406); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM471, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop242;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop242: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn4409);
            	        shiftExpression472=shiftExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression472.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalOpsNoIn, relationalExpressionNoIn, shiftExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 519:90: -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression )
            	        	{
            	        	    // .//LexWhenPred.g:519:93: ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOpsNoIn == NULL ? NULL : stream_relationalOpsNoIn->nextNode(stream_relationalOpsNoIn), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop243;	/* break out of the loop */
            	    break;
                }
            }
            loop243: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionNoInEx; /* Prevent compiler warnings */
    rulerelationalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalOpsNoIn != NULL) stream_relationalOpsNoIn->free(stream_relationalOpsNoIn);
        if (stream_shiftExpression != NULL) stream_shiftExpression->free(stream_shiftExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(81, relationalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpressionNoIn */

/** 
 * $ANTLR start shiftOps
 * .//LexWhenPred.g:522:1: shiftOps : ( '<<' -> ^( LEFT_SHIFT ) | '>>' -> ^( RIGHT_SHIFT ) | '>>>' -> ^( TRIPLE_SHIFT ) );
 */
static LexWhenPredParser_shiftOps_return
shiftOps(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_shiftOps_return retval;
    ANTLR3_UINT32 shiftOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal473;
    pANTLR3_COMMON_TOKEN    string_literal474;
    pANTLR3_COMMON_TOKEN    string_literal475;

    pANTLR3_BASE_TREE string_literal473_tree;
    pANTLR3_BASE_TREE string_literal474_tree;
    pANTLR3_BASE_TREE string_literal475_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_186;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_188;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_187;

    /* Initialize rule variables
     */
    shiftOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(82)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal473       = NULL;
    string_literal474       = NULL;
    string_literal475       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal473_tree   = NULL;
    string_literal474_tree   = NULL;
    string_literal475_tree   = NULL;

    stream_186   = NULL;
    #define CREATE_stream_186  if (stream_186 == NULL) {stream_186 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 186"); } 
    stream_188   = NULL;
    #define CREATE_stream_188  if (stream_188 == NULL) {stream_188 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 188"); } 
    stream_187   = NULL;
    #define CREATE_stream_187  if (stream_187 == NULL) {stream_187 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 187"); } 

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:523:1: ( '<<' -> ^( LEFT_SHIFT ) | '>>' -> ^( RIGHT_SHIFT ) | '>>>' -> ^( TRIPLE_SHIFT ) )
            
            ANTLR3_UINT32 alt244;

            alt244=3;

            switch ( LA(1) ) 
            {
            case 186:
            	{
            		alt244=1;
            	}
                break;
            case 187:
            	{
            		alt244=2;
            	}
                break;
            case 188:
            	{
            		alt244=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 244;
                EXCEPTION->state        = 0;


                goto ruleshiftOpsEx;
            }

            switch (alt244) 
            {
        	case 1:
        	    // .//LexWhenPred.g:523:2: '<<'
        	    {
        	        string_literal473 = (pANTLR3_COMMON_TOKEN) MATCHT(186, &FOLLOW_186_in_shiftOps4432); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_186; stream_186->add(stream_186, string_literal473, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 523:7: -> ^( LEFT_SHIFT )
        	        	{
        	        	    // .//LexWhenPred.g:523:10: ^( LEFT_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LEFT_SHIFT, (pANTLR3_UINT8)"LEFT_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:524:3: '>>'
        	    {
        	        string_literal474 = (pANTLR3_COMMON_TOKEN) MATCHT(187, &FOLLOW_187_in_shiftOps4442); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_187; stream_187->add(stream_187, string_literal474, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 524:7: -> ^( RIGHT_SHIFT )
        	        	{
        	        	    // .//LexWhenPred.g:524:10: ^( RIGHT_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RIGHT_SHIFT, (pANTLR3_UINT8)"RIGHT_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//LexWhenPred.g:525:3: '>>>'
        	    {
        	        string_literal475 = (pANTLR3_COMMON_TOKEN) MATCHT(188, &FOLLOW_188_in_shiftOps4451); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_188; stream_188->add(stream_188, string_literal475, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 525:9: -> ^( TRIPLE_SHIFT )
        	        	{
        	        	    // .//LexWhenPred.g:525:12: ^( TRIPLE_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRIPLE_SHIFT, (pANTLR3_UINT8)"TRIPLE_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftOpsEx; /* Prevent compiler warnings */
    ruleshiftOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_186 != NULL) stream_186->free(stream_186);
        if (stream_188 != NULL) stream_188->free(stream_188);
        if (stream_187 != NULL) stream_187->free(stream_187);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(82, shiftOps_StartIndex); }
    return retval;
}
/* $ANTLR end shiftOps */

/** 
 * $ANTLR start shiftExpression
 * .//LexWhenPred.g:528:1: shiftExpression : ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )* ;
 */
static LexWhenPredParser_shiftExpression_return
shiftExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_shiftExpression_return retval;
    ANTLR3_UINT32 shiftExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM477;
    pANTLR3_COMMON_TOKEN    LTERM479;
    LexWhenPredParser_additiveExpression_return additiveExpression476;
    #undef	RETURN_TYPE_additiveExpression476
    #define	RETURN_TYPE_additiveExpression476 LexWhenPredParser_additiveExpression_return

    LexWhenPredParser_shiftOps_return shiftOps478;
    #undef	RETURN_TYPE_shiftOps478
    #define	RETURN_TYPE_shiftOps478 LexWhenPredParser_shiftOps_return

    LexWhenPredParser_additiveExpression_return additiveExpression480;
    #undef	RETURN_TYPE_additiveExpression480
    #define	RETURN_TYPE_additiveExpression480 LexWhenPredParser_additiveExpression_return

    pANTLR3_BASE_TREE LTERM477_tree;
    pANTLR3_BASE_TREE LTERM479_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_additiveExpression;
    /* Initialize rule variables
     */
    shiftExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(83)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM477       = NULL;
    LTERM479       = NULL;
    additiveExpression476.tree = NULL;

    shiftOps478.tree = NULL;

    additiveExpression480.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM477_tree   = NULL;
    LTERM479_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_shiftOps   = NULL;
    #define CREATE_stream_shiftOps  if (stream_shiftOps == NULL) {stream_shiftOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftOps"); }
    stream_additiveExpression   = NULL;
    #define CREATE_stream_additiveExpression  if (stream_additiveExpression == NULL) {stream_additiveExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule additiveExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:529:2: ( ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )* )
        // .//LexWhenPred.g:529:4: ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*
        {
            // .//LexWhenPred.g:529:4: ( additiveExpression -> additiveExpression )
            // .//LexWhenPred.g:529:5: additiveExpression
            {
                FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression4468);
                additiveExpression476=additiveExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleshiftExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression476.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : additiveExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 529:24: -> additiveExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:529:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*

            for (;;)
            {
                int alt247=2;
                alt247 = cdfa247.predict(ctx, RECOGNIZER, ISTREAM, &cdfa247);
                if  (HASEXCEPTION())
                {
                    goto ruleshiftExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt247) 
                {
            	case 1:
            	    // .//LexWhenPred.g:529:47: ( LTERM )* shiftOps ( LTERM )* additiveExpression
            	    {

            	        // .//LexWhenPred.g:529:47: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt245=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA245_0 = LA(1);
            	                if ( (LA245_0 == LTERM) ) 
            	                {
            	                    alt245=1;
            	                }

            	            }
            	            switch (alt245) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM477 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_shiftExpression4475); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleshiftExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM477, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop245;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop245: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftOps_in_shiftExpression4478);
            	        shiftOps478=shiftOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleshiftExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftOps; stream_shiftOps->add(stream_shiftOps, shiftOps478.tree, NULL); }

            	        // .//LexWhenPred.g:529:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt246=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA246_0 = LA(1);
            	                if ( (LA246_0 == LTERM) ) 
            	                {
            	                    alt246=1;
            	                }

            	            }
            	            switch (alt246) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM479 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_shiftExpression4480); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleshiftExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM479, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop246;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop246: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression4483);
            	        additiveExpression480=additiveExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleshiftExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression480.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : shiftExpression, additiveExpression, shiftOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 529:89: -> ^( shiftOps $shiftExpression additiveExpression )
            	        	{
            	        	    // .//LexWhenPred.g:529:92: ^( shiftOps $shiftExpression additiveExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_shiftOps == NULL ? NULL : stream_shiftOps->nextNode(stream_shiftOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop247;	/* break out of the loop */
            	    break;
                }
            }
            loop247: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftExpressionEx; /* Prevent compiler warnings */
    ruleshiftExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_shiftOps != NULL) stream_shiftOps->free(stream_shiftOps);
        if (stream_additiveExpression != NULL) stream_additiveExpression->free(stream_additiveExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(83, shiftExpression_StartIndex); }
    return retval;
}
/* $ANTLR end shiftExpression */

/** 
 * $ANTLR start addOps
 * .//LexWhenPred.g:533:1: addOps : ( '+' -> ^( ADD ) | '-' -> ^( SUB ) );
 */
static LexWhenPredParser_addOps_return
addOps(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_addOps_return retval;
    ANTLR3_UINT32 addOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal481;
    pANTLR3_COMMON_TOKEN    char_literal482;

    pANTLR3_BASE_TREE char_literal481_tree;
    pANTLR3_BASE_TREE char_literal482_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_189;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;

    /* Initialize rule variables
     */
    addOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(84)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal481       = NULL;
    char_literal482       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal481_tree   = NULL;
    char_literal482_tree   = NULL;

    stream_189   = NULL;
    #define CREATE_stream_189  if (stream_189 == NULL) {stream_189 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 189"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:534:1: ( '+' -> ^( ADD ) | '-' -> ^( SUB ) )
            
            ANTLR3_UINT32 alt248;

            alt248=2;


            {
                int LA248_0 = LA(1);
                if ( (LA248_0 == 189) ) 
                {
                    alt248=1;
                }
                else if ( (LA248_0 == 190) ) 
                {
                    alt248=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 248;
                    EXCEPTION->state        = 0;


                    goto ruleaddOpsEx;
                }
            }
            switch (alt248) 
            {
        	case 1:
        	    // .//LexWhenPred.g:534:3: '+'
        	    {
        	        char_literal481 = (pANTLR3_COMMON_TOKEN) MATCHT(189, &FOLLOW_189_in_addOps4509); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_189; stream_189->add(stream_189, char_literal481, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 534:7: -> ^( ADD )
        	        	{
        	        	    // .//LexWhenPred.g:534:10: ^( ADD )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:535:3: '-'
        	    {
        	        char_literal482 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_addOps4519); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, char_literal482, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 535:7: -> ^( SUB )
        	        	{
        	        	    // .//LexWhenPred.g:535:10: ^( SUB )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleaddOpsEx; /* Prevent compiler warnings */
    ruleaddOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_189 != NULL) stream_189->free(stream_189);
        if (stream_190 != NULL) stream_190->free(stream_190);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(84, addOps_StartIndex); }
    return retval;
}
/* $ANTLR end addOps */

/** 
 * $ANTLR start additiveExpression
 * .//LexWhenPred.g:539:1: additiveExpression : ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* ;
 */
static LexWhenPredParser_additiveExpression_return
additiveExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_additiveExpression_return retval;
    ANTLR3_UINT32 additiveExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM484;
    pANTLR3_COMMON_TOKEN    LTERM486;
    LexWhenPredParser_multiplicativeExpression_return multiplicativeExpression483;
    #undef	RETURN_TYPE_multiplicativeExpression483
    #define	RETURN_TYPE_multiplicativeExpression483 LexWhenPredParser_multiplicativeExpression_return

    LexWhenPredParser_addOps_return addOps485;
    #undef	RETURN_TYPE_addOps485
    #define	RETURN_TYPE_addOps485 LexWhenPredParser_addOps_return

    LexWhenPredParser_multiplicativeExpression_return multiplicativeExpression487;
    #undef	RETURN_TYPE_multiplicativeExpression487
    #define	RETURN_TYPE_multiplicativeExpression487 LexWhenPredParser_multiplicativeExpression_return

    pANTLR3_BASE_TREE LTERM484_tree;
    pANTLR3_BASE_TREE LTERM486_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_addOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multiplicativeExpression;
    /* Initialize rule variables
     */
    additiveExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(85)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM484       = NULL;
    LTERM486       = NULL;
    multiplicativeExpression483.tree = NULL;

    addOps485.tree = NULL;

    multiplicativeExpression487.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM484_tree   = NULL;
    LTERM486_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_addOps   = NULL;
    #define CREATE_stream_addOps  if (stream_addOps == NULL) {stream_addOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule addOps"); }
    stream_multiplicativeExpression   = NULL;
    #define CREATE_stream_multiplicativeExpression  if (stream_multiplicativeExpression == NULL) {stream_multiplicativeExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multiplicativeExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:540:2: ( ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* )
        // .//LexWhenPred.g:540:4: ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
        {
            // .//LexWhenPred.g:540:4: ( multiplicativeExpression -> multiplicativeExpression )
            // .//LexWhenPred.g:540:5: multiplicativeExpression
            {
                FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression4537);
                multiplicativeExpression483=multiplicativeExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression483.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : multiplicativeExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 540:30: -> multiplicativeExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:540:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*

            for (;;)
            {
                int alt251=2;
                alt251 = cdfa251.predict(ctx, RECOGNIZER, ISTREAM, &cdfa251);
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt251) 
                {
            	case 1:
            	    // .//LexWhenPred.g:540:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
            	    {

            	        // .//LexWhenPred.g:540:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt249=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA249_0 = LA(1);
            	                if ( (LA249_0 == LTERM) ) 
            	                {
            	                    alt249=1;
            	                }

            	            }
            	            switch (alt249) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM484 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression4544); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM484, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop249;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop249: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_addOps_in_additiveExpression4547);
            	        addOps485=addOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_addOps; stream_addOps->add(stream_addOps, addOps485.tree, NULL); }

            	        // .//LexWhenPred.g:540:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt250=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA250_0 = LA(1);
            	                if ( (LA250_0 == LTERM) ) 
            	                {
            	                    alt250=1;
            	                }

            	            }
            	            switch (alt250) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM486 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression4549); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM486, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop250;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop250: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression4552);
            	        multiplicativeExpression487=multiplicativeExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression487.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : addOps, additiveExpression, multiplicativeExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 540:105: -> ^( addOps $additiveExpression multiplicativeExpression )
            	        	{
            	        	    // .//LexWhenPred.g:540:108: ^( addOps $additiveExpression multiplicativeExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_addOps == NULL ? NULL : stream_addOps->nextNode(stream_addOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop251;	/* break out of the loop */
            	    break;
                }
            }
            loop251: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditiveExpressionEx; /* Prevent compiler warnings */
    ruleadditiveExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_addOps != NULL) stream_addOps->free(stream_addOps);
        if (stream_multiplicativeExpression != NULL) stream_multiplicativeExpression->free(stream_multiplicativeExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(85, additiveExpression_StartIndex); }
    return retval;
}
/* $ANTLR end additiveExpression */

/** 
 * $ANTLR start multOps
 * .//LexWhenPred.g:543:1: multOps : ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) );
 */
static LexWhenPredParser_multOps_return
multOps(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_multOps_return retval;
    ANTLR3_UINT32 multOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal488;
    pANTLR3_COMMON_TOKEN    char_literal489;
    pANTLR3_COMMON_TOKEN    char_literal490;

    pANTLR3_BASE_TREE char_literal488_tree;
    pANTLR3_BASE_TREE char_literal489_tree;
    pANTLR3_BASE_TREE char_literal490_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_192;

    /* Initialize rule variables
     */
    multOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(86)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal488       = NULL;
    char_literal489       = NULL;
    char_literal490       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal488_tree   = NULL;
    char_literal489_tree   = NULL;
    char_literal490_tree   = NULL;

    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 
    stream_192   = NULL;
    #define CREATE_stream_192  if (stream_192 == NULL) {stream_192 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 192"); } 

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:544:1: ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) )
            
            ANTLR3_UINT32 alt252;

            alt252=3;

            switch ( LA(1) ) 
            {
            case 191:
            	{
            		alt252=1;
            	}
                break;
            case 192:
            	{
            		alt252=2;
            	}
                break;
            case 193:
            	{
            		alt252=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 252;
                EXCEPTION->state        = 0;


                goto rulemultOpsEx;
            }

            switch (alt252) 
            {
        	case 1:
        	    // .//LexWhenPred.g:544:3: '*'
        	    {
        	        char_literal488 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_multOps4577); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, char_literal488, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 544:7: -> ^( MULT )
        	        	{
        	        	    // .//LexWhenPred.g:544:10: ^( MULT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT, (pANTLR3_UINT8)"MULT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:545:3: '/'
        	    {
        	        char_literal489 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_multOps4587); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, char_literal489, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 545:7: -> ^( DIV )
        	        	{
        	        	    // .//LexWhenPred.g:545:10: ^( DIV )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//LexWhenPred.g:546:3: '%'
        	    {
        	        char_literal490 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_multOps4597); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, char_literal490, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 546:7: -> ^( MOD )
        	        	{
        	        	    // .//LexWhenPred.g:546:10: ^( MOD )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemultOpsEx; /* Prevent compiler warnings */
    rulemultOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_193 != NULL) stream_193->free(stream_193);
        if (stream_192 != NULL) stream_192->free(stream_192);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(86, multOps_StartIndex); }
    return retval;
}
/* $ANTLR end multOps */

/** 
 * $ANTLR start multiplicativeExpression
 * .//LexWhenPred.g:549:1: multiplicativeExpression : ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* ;
 */
static LexWhenPredParser_multiplicativeExpression_return
multiplicativeExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_multiplicativeExpression_return retval;
    ANTLR3_UINT32 multiplicativeExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM492;
    pANTLR3_COMMON_TOKEN    LTERM494;
    LexWhenPredParser_unaryExpression_return unaryExpression491;
    #undef	RETURN_TYPE_unaryExpression491
    #define	RETURN_TYPE_unaryExpression491 LexWhenPredParser_unaryExpression_return

    LexWhenPredParser_multOps_return multOps493;
    #undef	RETURN_TYPE_multOps493
    #define	RETURN_TYPE_multOps493 LexWhenPredParser_multOps_return

    LexWhenPredParser_unaryExpression_return unaryExpression495;
    #undef	RETURN_TYPE_unaryExpression495
    #define	RETURN_TYPE_unaryExpression495 LexWhenPredParser_unaryExpression_return

    pANTLR3_BASE_TREE LTERM492_tree;
    pANTLR3_BASE_TREE LTERM494_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    /* Initialize rule variables
     */
    multiplicativeExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(87)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM492       = NULL;
    LTERM494       = NULL;
    unaryExpression491.tree = NULL;

    multOps493.tree = NULL;

    unaryExpression495.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM492_tree   = NULL;
    LTERM494_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_multOps   = NULL;
    #define CREATE_stream_multOps  if (stream_multOps == NULL) {stream_multOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multOps"); }
    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:550:2: ( ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* )
        // .//LexWhenPred.g:550:4: ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
        {
            // .//LexWhenPred.g:550:4: ( unaryExpression -> unaryExpression )
            // .//LexWhenPred.g:550:5: unaryExpression
            {
                FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression4614);
                unaryExpression491=unaryExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression491.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : unaryExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 550:21: -> unaryExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:550:41: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*

            for (;;)
            {
                int alt255=2;
                alt255 = cdfa255.predict(ctx, RECOGNIZER, ISTREAM, &cdfa255);
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt255) 
                {
            	case 1:
            	    // .//LexWhenPred.g:550:42: ( LTERM )* multOps ( LTERM )* unaryExpression
            	    {

            	        // .//LexWhenPred.g:550:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt253=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA253_0 = LA(1);
            	                if ( (LA253_0 == LTERM) ) 
            	                {
            	                    alt253=1;
            	                }

            	            }
            	            switch (alt253) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM492 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression4622); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM492, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop253;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop253: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multOps_in_multiplicativeExpression4625);
            	        multOps493=multOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multOps; stream_multOps->add(stream_multOps, multOps493.tree, NULL); }

            	        // .//LexWhenPred.g:550:57: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt254=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA254_0 = LA(1);
            	                if ( (LA254_0 == LTERM) ) 
            	                {
            	                    alt254=1;
            	                }

            	            }
            	            switch (alt254) 
            	            {
            	        	case 1:
            	        	    // .//LexWhenPred.g:0:0: LTERM
            	        	    {
            	        	        LTERM494 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression4627); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM494, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop254;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop254: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression4630);
            	        unaryExpression495=unaryExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression495.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : unaryExpression, multOps, multiplicativeExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 550:80: -> ^( multOps $multiplicativeExpression unaryExpression )
            	        	{
            	        	    // .//LexWhenPred.g:550:83: ^( multOps $multiplicativeExpression unaryExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_multOps == NULL ? NULL : stream_multOps->nextNode(stream_multOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop255;	/* break out of the loop */
            	    break;
                }
            }
            loop255: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicativeExpressionEx; /* Prevent compiler warnings */
    rulemultiplicativeExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_multOps != NULL) stream_multOps->free(stream_multOps);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(87, multiplicativeExpression_StartIndex); }
    return retval;
}
/* $ANTLR end multiplicativeExpression */

/** 
 * $ANTLR start postfixExpression
 * .//LexWhenPred.g:554:1: postfixExpression : ( leftHandSideExpression -> leftHandSideExpression ) ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )? ;
 */
static LexWhenPredParser_postfixExpression_return
postfixExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_postfixExpression_return retval;
    ANTLR3_UINT32 postfixExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal497;
    pANTLR3_COMMON_TOKEN    string_literal498;
    LexWhenPredParser_leftHandSideExpression_return leftHandSideExpression496;
    #undef	RETURN_TYPE_leftHandSideExpression496
    #define	RETURN_TYPE_leftHandSideExpression496 LexWhenPredParser_leftHandSideExpression_return

    pANTLR3_BASE_TREE string_literal497_tree;
    pANTLR3_BASE_TREE string_literal498_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_195;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    postfixExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(88)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal497       = NULL;
    string_literal498       = NULL;
    leftHandSideExpression496.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal497_tree   = NULL;
    string_literal498_tree   = NULL;

    stream_195   = NULL;
    #define CREATE_stream_195  if (stream_195 == NULL) {stream_195 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 195"); } 
    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:555:2: ( ( leftHandSideExpression -> leftHandSideExpression ) ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )? )
        // .//LexWhenPred.g:555:3: ( leftHandSideExpression -> leftHandSideExpression ) ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )?
        {
            // .//LexWhenPred.g:555:3: ( leftHandSideExpression -> leftHandSideExpression )
            // .//LexWhenPred.g:555:4: leftHandSideExpression
            {
                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression4655);
                leftHandSideExpression496=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulepostfixExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression496.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : leftHandSideExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 555:27: -> leftHandSideExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//LexWhenPred.g:555:54: ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )?
            {
                int alt256=3;
                {
                    int LA256_0 = LA(1);
                    if ( (LA256_0 == 194) ) 
                    {
                        alt256=1;
                    }
                    else if ( (LA256_0 == 195) ) 
                    {
                        alt256=2;
                    }
                }
                switch (alt256) 
                {
            	case 1:
            	    // .//LexWhenPred.g:555:55: ( '--' -> $postfixExpression '--' )
            	    {
            	        // .//LexWhenPred.g:555:55: ( '--' -> $postfixExpression '--' )
            	        // .//LexWhenPred.g:555:56: '--'
            	        {
            	            string_literal497 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_postfixExpression4664); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulepostfixExpressionEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, string_literal497, NULL); }


            	             
            	            /* AST REWRITE
            	             * elements          : 194, postfixExpression
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 555:61: -> $postfixExpression '--'
            	            	{
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_194 == NULL ? NULL : stream_194->nextNode(stream_194));

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 2:
            	    // .//LexWhenPred.g:555:91: ( '++' -> $postfixExpression '++' )
            	    {
            	        // .//LexWhenPred.g:555:91: ( '++' -> $postfixExpression '++' )
            	        // .//LexWhenPred.g:555:92: '++'
            	        {
            	            string_literal498 = (pANTLR3_COMMON_TOKEN) MATCHT(195, &FOLLOW_195_in_postfixExpression4677); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulepostfixExpressionEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_195; stream_195->add(stream_195, string_literal498, NULL); }


            	             
            	            /* AST REWRITE
            	             * elements          : postfixExpression, 195
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 555:97: -> $postfixExpression '++'
            	            	{
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_195 == NULL ? NULL : stream_195->nextNode(stream_195));

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepostfixExpressionEx; /* Prevent compiler warnings */
    rulepostfixExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_195 != NULL) stream_195->free(stream_195);
        if (stream_194 != NULL) stream_194->free(stream_194);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(88, postfixExpression_StartIndex); }
    return retval;
}
/* $ANTLR end postfixExpression */

/** 
 * $ANTLR start unaryOps
 * .//LexWhenPred.g:559:1: unaryOps : ( 'delete' -> ^( DELETE ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) );
 */
static LexWhenPredParser_unaryOps_return
unaryOps(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_unaryOps_return retval;
    ANTLR3_UINT32 unaryOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal499;
    pANTLR3_COMMON_TOKEN    string_literal500;
    pANTLR3_COMMON_TOKEN    string_literal501;
    pANTLR3_COMMON_TOKEN    string_literal502;
    pANTLR3_COMMON_TOKEN    string_literal503;
    pANTLR3_COMMON_TOKEN    char_literal504;
    pANTLR3_COMMON_TOKEN    char_literal505;
    pANTLR3_COMMON_TOKEN    char_literal506;
    pANTLR3_COMMON_TOKEN    char_literal507;

    pANTLR3_BASE_TREE string_literal499_tree;
    pANTLR3_BASE_TREE string_literal500_tree;
    pANTLR3_BASE_TREE string_literal501_tree;
    pANTLR3_BASE_TREE string_literal502_tree;
    pANTLR3_BASE_TREE string_literal503_tree;
    pANTLR3_BASE_TREE char_literal504_tree;
    pANTLR3_BASE_TREE char_literal505_tree;
    pANTLR3_BASE_TREE char_literal506_tree;
    pANTLR3_BASE_TREE char_literal507_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_198;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_199;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_200;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_195;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_197;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_189;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_196;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;

    /* Initialize rule variables
     */
    unaryOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(89)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal499       = NULL;
    string_literal500       = NULL;
    string_literal501       = NULL;
    string_literal502       = NULL;
    string_literal503       = NULL;
    char_literal504       = NULL;
    char_literal505       = NULL;
    char_literal506       = NULL;
    char_literal507       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal499_tree   = NULL;
    string_literal500_tree   = NULL;
    string_literal501_tree   = NULL;
    string_literal502_tree   = NULL;
    string_literal503_tree   = NULL;
    char_literal504_tree   = NULL;
    char_literal505_tree   = NULL;
    char_literal506_tree   = NULL;
    char_literal507_tree   = NULL;

    stream_198   = NULL;
    #define CREATE_stream_198  if (stream_198 == NULL) {stream_198 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 198"); } 
    stream_199   = NULL;
    #define CREATE_stream_199  if (stream_199 == NULL) {stream_199 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 199"); } 
    stream_200   = NULL;
    #define CREATE_stream_200  if (stream_200 == NULL) {stream_200 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 200"); } 
    stream_195   = NULL;
    #define CREATE_stream_195  if (stream_195 == NULL) {stream_195 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 195"); } 
    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 
    stream_197   = NULL;
    #define CREATE_stream_197  if (stream_197 == NULL) {stream_197 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 197"); } 
    stream_189   = NULL;
    #define CREATE_stream_189  if (stream_189 == NULL) {stream_189 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 189"); } 
    stream_196   = NULL;
    #define CREATE_stream_196  if (stream_196 == NULL) {stream_196 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 196"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:560:1: ( 'delete' -> ^( DELETE ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) )
            
            ANTLR3_UINT32 alt257;

            alt257=9;

            switch ( LA(1) ) 
            {
            case 196:
            	{
            		alt257=1;
            	}
                break;
            case 197:
            	{
            		alt257=2;
            	}
                break;
            case 198:
            	{
            		alt257=3;
            	}
                break;
            case 195:
            	{
            		alt257=4;
            	}
                break;
            case 194:
            	{
            		alt257=5;
            	}
                break;
            case 189:
            	{
            		alt257=6;
            	}
                break;
            case 190:
            	{
            		alt257=7;
            	}
                break;
            case 199:
            	{
            		alt257=8;
            	}
                break;
            case 200:
            	{
            		alt257=9;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 257;
                EXCEPTION->state        = 0;


                goto ruleunaryOpsEx;
            }

            switch (alt257) 
            {
        	case 1:
        	    // .//LexWhenPred.g:560:2: 'delete'
        	    {
        	        string_literal499 = (pANTLR3_COMMON_TOKEN) MATCHT(196, &FOLLOW_196_in_unaryOps4697); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_196; stream_196->add(stream_196, string_literal499, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 560:11: -> ^( DELETE )
        	        	{
        	        	    // .//LexWhenPred.g:560:14: ^( DELETE )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DELETE, (pANTLR3_UINT8)"DELETE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:561:3: 'void'
        	    {
        	        string_literal500 = (pANTLR3_COMMON_TOKEN) MATCHT(197, &FOLLOW_197_in_unaryOps4707); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_197; stream_197->add(stream_197, string_literal500, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 561:10: -> ^( VOID )
        	        	{
        	        	    // .//LexWhenPred.g:561:13: ^( VOID )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VOID, (pANTLR3_UINT8)"VOID"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//LexWhenPred.g:562:3: 'typeof'
        	    {
        	        string_literal501 = (pANTLR3_COMMON_TOKEN) MATCHT(198, &FOLLOW_198_in_unaryOps4717); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_198; stream_198->add(stream_198, string_literal501, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 562:12: -> ^( TYPEOF )
        	        	{
        	        	    // .//LexWhenPred.g:562:15: ^( TYPEOF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TYPEOF, (pANTLR3_UINT8)"TYPEOF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//LexWhenPred.g:563:3: '++'
        	    {
        	        string_literal502 = (pANTLR3_COMMON_TOKEN) MATCHT(195, &FOLLOW_195_in_unaryOps4727); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_195; stream_195->add(stream_195, string_literal502, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 563:9: -> ^( PLUSPLUS )
        	        	{
        	        	    // .//LexWhenPred.g:563:12: ^( PLUSPLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUSPLUS, (pANTLR3_UINT8)"PLUSPLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//LexWhenPred.g:564:3: '--'
        	    {
        	        string_literal503 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_unaryOps4738); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, string_literal503, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 564:9: -> ^( MINUSMINUS )
        	        	{
        	        	    // .//LexWhenPred.g:564:12: ^( MINUSMINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUSMINUS, (pANTLR3_UINT8)"MINUSMINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//LexWhenPred.g:565:3: '+'
        	    {
        	        char_literal504 = (pANTLR3_COMMON_TOKEN) MATCHT(189, &FOLLOW_189_in_unaryOps4749); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_189; stream_189->add(stream_189, char_literal504, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 565:9: -> ^( UNARY_PLUS )
        	        	{
        	        	    // .//LexWhenPred.g:565:12: ^( UNARY_PLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_PLUS, (pANTLR3_UINT8)"UNARY_PLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//LexWhenPred.g:566:3: '-'
        	    {
        	        char_literal505 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_unaryOps4761); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, char_literal505, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 566:9: -> ^( UNARY_MINUS )
        	        	{
        	        	    // .//LexWhenPred.g:566:12: ^( UNARY_MINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_MINUS, (pANTLR3_UINT8)"UNARY_MINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//LexWhenPred.g:567:3: '~'
        	    {
        	        char_literal506 = (pANTLR3_COMMON_TOKEN) MATCHT(199, &FOLLOW_199_in_unaryOps4773); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_199; stream_199->add(stream_199, char_literal506, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 567:9: -> ^( COMPLEMENT )
        	        	{
        	        	    // .//LexWhenPred.g:567:12: ^( COMPLEMENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COMPLEMENT, (pANTLR3_UINT8)"COMPLEMENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//LexWhenPred.g:568:3: '!'
        	    {
        	        char_literal507 = (pANTLR3_COMMON_TOKEN) MATCHT(200, &FOLLOW_200_in_unaryOps4785); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_200; stream_200->add(stream_200, char_literal507, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 568:9: -> ^( NOT )
        	        	{
        	        	    // .//LexWhenPred.g:568:12: ^( NOT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT, (pANTLR3_UINT8)"NOT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryOpsEx; /* Prevent compiler warnings */
    ruleunaryOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_198 != NULL) stream_198->free(stream_198);
        if (stream_199 != NULL) stream_199->free(stream_199);
        if (stream_200 != NULL) stream_200->free(stream_200);
        if (stream_195 != NULL) stream_195->free(stream_195);
        if (stream_194 != NULL) stream_194->free(stream_194);
        if (stream_197 != NULL) stream_197->free(stream_197);
        if (stream_189 != NULL) stream_189->free(stream_189);
        if (stream_196 != NULL) stream_196->free(stream_196);
        if (stream_190 != NULL) stream_190->free(stream_190);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(89, unaryOps_StartIndex); }
    return retval;
}
/* $ANTLR end unaryOps */

/** 
 * $ANTLR start unaryExpression
 * .//LexWhenPred.g:572:1: unaryExpression : ( postfixExpression -> ^( POSTEXPR postfixExpression ) | unaryOps e= unaryExpression -> ^( unaryOps $e) );
 */
static LexWhenPredParser_unaryExpression_return
unaryExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_unaryExpression_return retval;
    ANTLR3_UINT32 unaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    LexWhenPredParser_unaryExpression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e LexWhenPredParser_unaryExpression_return

    LexWhenPredParser_postfixExpression_return postfixExpression508;
    #undef	RETURN_TYPE_postfixExpression508
    #define	RETURN_TYPE_postfixExpression508 LexWhenPredParser_postfixExpression_return

    LexWhenPredParser_unaryOps_return unaryOps509;
    #undef	RETURN_TYPE_unaryOps509
    #define	RETURN_TYPE_unaryOps509 LexWhenPredParser_unaryOps_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_postfixExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryOps;
    /* Initialize rule variables
     */
    unaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(90)) )
    {
    	retval.start = 0;

        return retval; 
    }
    e.tree = NULL;

    postfixExpression508.tree = NULL;

    unaryOps509.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }
    stream_postfixExpression   = NULL;
    #define CREATE_stream_postfixExpression  if (stream_postfixExpression == NULL) {stream_postfixExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule postfixExpression"); }
    stream_unaryOps   = NULL;
    #define CREATE_stream_unaryOps  if (stream_unaryOps == NULL) {stream_unaryOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryOps"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:573:2: ( postfixExpression -> ^( POSTEXPR postfixExpression ) | unaryOps e= unaryExpression -> ^( unaryOps $e) )
            
            ANTLR3_UINT32 alt258;

            alt258=2;


            {
                int LA258_0 = LA(1);
                if ( (((LA258_0 >= Identifier) && (LA258_0 <= NumericLiteral)) || ((LA258_0 >= 126) && (LA258_0 <= 127)) || LA258_0 == 130 || ((LA258_0 >= 156) && (LA258_0 <= 157)) || ((LA258_0 >= 201) && (LA258_0 <= 205))) ) 
                {
                    alt258=1;
                }
                else if ( (((LA258_0 >= 189) && (LA258_0 <= 190)) || ((LA258_0 >= 194) && (LA258_0 <= 200))) ) 
                {
                    alt258=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 258;
                    EXCEPTION->state        = 0;


                    goto ruleunaryExpressionEx;
                }
            }
            switch (alt258) 
            {
        	case 1:
        	    // .//LexWhenPred.g:573:4: postfixExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_postfixExpression_in_unaryExpression4804);
        	        postfixExpression508=postfixExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_postfixExpression; stream_postfixExpression->add(stream_postfixExpression, postfixExpression508.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : postfixExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 573:22: -> ^( POSTEXPR postfixExpression )
        	        	{
        	        	    // .//LexWhenPred.g:573:25: ^( POSTEXPR postfixExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, POSTEXPR, (pANTLR3_UINT8)"POSTEXPR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_postfixExpression == NULL ? NULL : stream_postfixExpression->nextTree(stream_postfixExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:574:4: unaryOps e= unaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_unaryOps_in_unaryExpression4817);
        	        unaryOps509=unaryOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryOps; stream_unaryOps->add(stream_unaryOps, unaryOps509.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_unaryExpression4821);
        	        e=unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, e.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : e, unaryOps
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 574:31: -> ^( unaryOps $e)
        	        	{
        	        	    // .//LexWhenPred.g:574:34: ^( unaryOps $e)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_unaryOps == NULL ? NULL : stream_unaryOps->nextNode(stream_unaryOps), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
        if (stream_postfixExpression != NULL) stream_postfixExpression->free(stream_postfixExpression);
        if (stream_unaryOps != NULL) stream_unaryOps->free(stream_unaryOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(90, unaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end unaryExpression */

/** 
 * $ANTLR start primaryExpression
 * .//LexWhenPred.g:578:1: primaryExpression : ( 'this' | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );
 */
static LexWhenPredParser_primaryExpression_return
primaryExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_primaryExpression_return retval;
    ANTLR3_UINT32 primaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal510;
    pANTLR3_COMMON_TOKEN    Identifier511;
    pANTLR3_COMMON_TOKEN    char_literal516;
    pANTLR3_COMMON_TOKEN    LTERM517;
    pANTLR3_COMMON_TOKEN    LTERM519;
    pANTLR3_COMMON_TOKEN    char_literal520;
    LexWhenPredParser_dollarExpression_return dollarExpression512;
    #undef	RETURN_TYPE_dollarExpression512
    #define	RETURN_TYPE_dollarExpression512 LexWhenPredParser_dollarExpression_return

    LexWhenPredParser_literal_return literal513;
    #undef	RETURN_TYPE_literal513
    #define	RETURN_TYPE_literal513 LexWhenPredParser_literal_return

    LexWhenPredParser_arrayLiteral_return arrayLiteral514;
    #undef	RETURN_TYPE_arrayLiteral514
    #define	RETURN_TYPE_arrayLiteral514 LexWhenPredParser_arrayLiteral_return

    LexWhenPredParser_objectLiteral_return objectLiteral515;
    #undef	RETURN_TYPE_objectLiteral515
    #define	RETURN_TYPE_objectLiteral515 LexWhenPredParser_objectLiteral_return

    LexWhenPredParser_expression_return expression518;
    #undef	RETURN_TYPE_expression518
    #define	RETURN_TYPE_expression518 LexWhenPredParser_expression_return

    pANTLR3_BASE_TREE string_literal510_tree;
    pANTLR3_BASE_TREE Identifier511_tree;
    pANTLR3_BASE_TREE char_literal516_tree;
    pANTLR3_BASE_TREE LTERM517_tree;
    pANTLR3_BASE_TREE LTERM519_tree;
    pANTLR3_BASE_TREE char_literal520_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    primaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(91)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal510       = NULL;
    Identifier511       = NULL;
    char_literal516       = NULL;
    LTERM517       = NULL;
    LTERM519       = NULL;
    char_literal520       = NULL;
    dollarExpression512.tree = NULL;

    literal513.tree = NULL;

    arrayLiteral514.tree = NULL;

    objectLiteral515.tree = NULL;

    expression518.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal510_tree   = NULL;
    Identifier511_tree   = NULL;
    char_literal516_tree   = NULL;
    LTERM517_tree   = NULL;
    LTERM519_tree   = NULL;
    char_literal520_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:579:2: ( 'this' | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) )
            
            ANTLR3_UINT32 alt261;

            alt261=7;

            switch ( LA(1) ) 
            {
            case 201:
            	{
            		alt261=1;
            	}
                break;
            case Identifier:
            	{
            		alt261=2;
            	}
                break;
            case 202:
            	{
            		alt261=3;
            	}
                break;
            case StringLiteral:
            case NumericLiteral:
            case 203:
            case 204:
            case 205:
            	{
            		alt261=4;
            	}
                break;
            case 157:
            	{
            		alt261=5;
            	}
                break;
            case 130:
            	{
            		alt261=6;
            	}
                break;
            case 127:
            	{
            		alt261=7;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 261;
                EXCEPTION->state        = 0;


                goto ruleprimaryExpressionEx;
            }

            switch (alt261) 
            {
        	case 1:
        	    // .//LexWhenPred.g:579:4: 'this'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal510 = (pANTLR3_COMMON_TOKEN) MATCHT(201, &FOLLOW_201_in_primaryExpression4843); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        string_literal510_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal510));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal510_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:580:4: Identifier
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        Identifier511 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_primaryExpression4848); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        Identifier511_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Identifier511));
        	        ADAPTOR->addChild(ADAPTOR, root_0, Identifier511_tree);
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//LexWhenPred.g:581:11: dollarExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_dollarExpression_in_primaryExpression4860);
        	        dollarExpression512=dollarExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, dollarExpression512.tree);

        	    }
        	    break;
        	case 4:
        	    // .//LexWhenPred.g:582:4: literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_literal_in_primaryExpression4865);
        	        literal513=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal513.tree);

        	    }
        	    break;
        	case 5:
        	    // .//LexWhenPred.g:583:4: arrayLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_arrayLiteral_in_primaryExpression4870);
        	        arrayLiteral514=arrayLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, arrayLiteral514.tree);

        	    }
        	    break;
        	case 6:
        	    // .//LexWhenPred.g:584:4: objectLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_objectLiteral_in_primaryExpression4875);
        	        objectLiteral515=objectLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, objectLiteral515.tree);

        	    }
        	    break;
        	case 7:
        	    // .//LexWhenPred.g:585:4: '(' ( LTERM )* expression ( LTERM )* ')'
        	    {
        	        char_literal516 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_primaryExpression4880); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, char_literal516, NULL); }


        	        // .//LexWhenPred.g:585:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt259=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA259_0 = LA(1);
        	                if ( (LA259_0 == LTERM) ) 
        	                {
        	                    alt259=1;
        	                }

        	            }
        	            switch (alt259) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM517 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression4882); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM517, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop259;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop259: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_primaryExpression4885);
        	        expression518=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression518.tree, NULL); }

        	        // .//LexWhenPred.g:585:26: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt260=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA260_0 = LA(1);
        	                if ( (LA260_0 == LTERM) ) 
        	                {
        	                    alt260=1;
        	                }

        	            }
        	            switch (alt260) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM519 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression4887); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM519, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop260;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop260: ; /* Jump out to here if this rule does not match */

        	        char_literal520 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_primaryExpression4890); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal520, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 585:37: -> ^( PAREN expression )
        	        	{
        	        	    // .//LexWhenPred.g:585:40: ^( PAREN expression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PAREN, (pANTLR3_UINT8)"PAREN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryExpressionEx; /* Prevent compiler warnings */
    ruleprimaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(91, primaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end primaryExpression */

/** 
 * $ANTLR start dollarExpression
 * .//LexWhenPred.g:588:1: dollarExpression : '`' ( LTERM )* Identifier ( LTERM )* '`' -> ^( DOLLAR_EXPRESSION Identifier ) ;
 */
static LexWhenPredParser_dollarExpression_return
dollarExpression(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_dollarExpression_return retval;
    ANTLR3_UINT32 dollarExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal521;
    pANTLR3_COMMON_TOKEN    LTERM522;
    pANTLR3_COMMON_TOKEN    Identifier523;
    pANTLR3_COMMON_TOKEN    LTERM524;
    pANTLR3_COMMON_TOKEN    char_literal525;

    pANTLR3_BASE_TREE char_literal521_tree;
    pANTLR3_BASE_TREE LTERM522_tree;
    pANTLR3_BASE_TREE Identifier523_tree;
    pANTLR3_BASE_TREE LTERM524_tree;
    pANTLR3_BASE_TREE char_literal525_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_202;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    dollarExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(92)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal521       = NULL;
    LTERM522       = NULL;
    Identifier523       = NULL;
    LTERM524       = NULL;
    char_literal525       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal521_tree   = NULL;
    LTERM522_tree   = NULL;
    Identifier523_tree   = NULL;
    LTERM524_tree   = NULL;
    char_literal525_tree   = NULL;

    stream_202   = NULL;
    #define CREATE_stream_202  if (stream_202 == NULL) {stream_202 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 202"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:589:9: ( '`' ( LTERM )* Identifier ( LTERM )* '`' -> ^( DOLLAR_EXPRESSION Identifier ) )
        // .//LexWhenPred.g:589:11: '`' ( LTERM )* Identifier ( LTERM )* '`'
        {
            char_literal521 = (pANTLR3_COMMON_TOKEN) MATCHT(202, &FOLLOW_202_in_dollarExpression4918); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_202; stream_202->add(stream_202, char_literal521, NULL); }


            // .//LexWhenPred.g:589:15: ( LTERM )*

            for (;;)
            {
                int alt262=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA262_0 = LA(1);
                    if ( (LA262_0 == LTERM) ) 
                    {
                        alt262=1;
                    }

                }
                switch (alt262) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM522 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_dollarExpression4920); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledollarExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM522, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop262;	/* break out of the loop */
            	    break;
                }
            }
            loop262: ; /* Jump out to here if this rule does not match */

            Identifier523 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_dollarExpression4923); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier523, NULL); }


            // .//LexWhenPred.g:589:33: ( LTERM )*

            for (;;)
            {
                int alt263=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA263_0 = LA(1);
                    if ( (LA263_0 == LTERM) ) 
                    {
                        alt263=1;
                    }

                }
                switch (alt263) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM524 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_dollarExpression4925); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledollarExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM524, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop263;	/* break out of the loop */
            	    break;
                }
            }
            loop263: ; /* Jump out to here if this rule does not match */

            char_literal525 = (pANTLR3_COMMON_TOKEN) MATCHT(202, &FOLLOW_202_in_dollarExpression4928); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_202; stream_202->add(stream_202, char_literal525, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 589:44: -> ^( DOLLAR_EXPRESSION Identifier )
            	{
            	    // .//LexWhenPred.g:589:47: ^( DOLLAR_EXPRESSION Identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOLLAR_EXPRESSION, (pANTLR3_UINT8)"DOLLAR_EXPRESSION"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledollarExpressionEx; /* Prevent compiler warnings */
    ruledollarExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_202 != NULL) stream_202->free(stream_202);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(92, dollarExpression_StartIndex); }
    return retval;
}
/* $ANTLR end dollarExpression */

/** 
 * $ANTLR start arrayLiteral
 * .//LexWhenPred.g:593:1: arrayLiteral : ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( assignmentExpression )? ) | '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']' -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* ) );
 */
static LexWhenPredParser_arrayLiteral_return
arrayLiteral(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_arrayLiteral_return retval;
    ANTLR3_UINT32 arrayLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal526;
    pANTLR3_COMMON_TOKEN    LTERM527;
    pANTLR3_COMMON_TOKEN    LTERM529;
    pANTLR3_COMMON_TOKEN    char_literal530;
    pANTLR3_COMMON_TOKEN    char_literal531;
    pANTLR3_COMMON_TOKEN    LTERM532;
    pANTLR3_COMMON_TOKEN    char_literal533;
    pANTLR3_COMMON_TOKEN    LTERM534;
    pANTLR3_COMMON_TOKEN    LTERM535;
    pANTLR3_COMMON_TOKEN    char_literal536;
    LexWhenPredParser_assignmentExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 LexWhenPredParser_assignmentExpression_return

    LexWhenPredParser_assignmentExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 LexWhenPredParser_assignmentExpression_return

    LexWhenPredParser_assignmentExpression_return assignmentExpression528;
    #undef	RETURN_TYPE_assignmentExpression528
    #define	RETURN_TYPE_assignmentExpression528 LexWhenPredParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal526_tree;
    pANTLR3_BASE_TREE LTERM527_tree;
    pANTLR3_BASE_TREE LTERM529_tree;
    pANTLR3_BASE_TREE char_literal530_tree;
    pANTLR3_BASE_TREE char_literal531_tree;
    pANTLR3_BASE_TREE LTERM532_tree;
    pANTLR3_BASE_TREE char_literal533_tree;
    pANTLR3_BASE_TREE LTERM534_tree;
    pANTLR3_BASE_TREE LTERM535_tree;
    pANTLR3_BASE_TREE char_literal536_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    arrayLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(93)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal526       = NULL;
    LTERM527       = NULL;
    LTERM529       = NULL;
    char_literal530       = NULL;
    char_literal531       = NULL;
    LTERM532       = NULL;
    char_literal533       = NULL;
    LTERM534       = NULL;
    LTERM535       = NULL;
    char_literal536       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    assignmentExpression528.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal526_tree   = NULL;
    LTERM527_tree   = NULL;
    LTERM529_tree   = NULL;
    char_literal530_tree   = NULL;
    char_literal531_tree   = NULL;
    LTERM532_tree   = NULL;
    char_literal533_tree   = NULL;
    LTERM534_tree   = NULL;
    LTERM535_tree   = NULL;
    char_literal536_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:594:3: ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( assignmentExpression )? ) | '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']' -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* ) )
            
            ANTLR3_UINT32 alt271;

            alt271=2;


            {
                int LA271_0 = LA(1);
                if ( (LA271_0 == 157) ) 
                {

                    {
                        int LA271_1 = LA(2);
                        if ( (synpred325_LexWhenPred(ctx)) ) 
                        {
                            alt271=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt271=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 271;
                            EXCEPTION->state        = 1;


                            goto rulearrayLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 271;
                    EXCEPTION->state        = 0;


                    goto rulearrayLiteralEx;
                }
            }
            switch (alt271) 
            {
        	case 1:
        	    // .//LexWhenPred.g:594:5: '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']'
        	    {
        	        char_literal526 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_arrayLiteral4964); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, char_literal526, NULL); }


        	        // .//LexWhenPred.g:594:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt264=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA264_0 = LA(1);
        	                if ( (LA264_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA264_2 = LA(2);
        	                        if ( (synpred322_LexWhenPred(ctx)) ) 
        	                        {
        	                            alt264=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt264) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM527 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4966); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM527, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop264;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop264: ; /* Jump out to here if this rule does not match */


        	        // .//LexWhenPred.g:594:16: ( assignmentExpression )?
        	        {
        	            int alt265=2;
        	            {
        	                int LA265_0 = LA(1);
        	                if ( (((LA265_0 >= Identifier) && (LA265_0 <= NumericLiteral)) || ((LA265_0 >= 126) && (LA265_0 <= 127)) || LA265_0 == 130 || ((LA265_0 >= 156) && (LA265_0 <= 157)) || ((LA265_0 >= 189) && (LA265_0 <= 190)) || ((LA265_0 >= 194) && (LA265_0 <= 205))) ) 
        	                {
        	                    alt265=1;
        	                }
        	            }
        	            switch (alt265) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:594:17: assignmentExpression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral4970);
        	        	        assignmentExpression528=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression528.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//LexWhenPred.g:594:40: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt266=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA266_0 = LA(1);
        	                if ( (LA266_0 == LTERM) ) 
        	                {
        	                    alt266=1;
        	                }

        	            }
        	            switch (alt266) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM529 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4974); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM529, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop266;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop266: ; /* Jump out to here if this rule does not match */

        	        char_literal530 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_arrayLiteral4977); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal530, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 594:51: -> ^( ARRAY_LITERAL ( assignmentExpression )? )
        	        	{
        	        	    // .//LexWhenPred.g:594:54: ^( ARRAY_LITERAL ( assignmentExpression )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        // .//LexWhenPred.g:594:70: ( assignmentExpression )?
        	        	        {
        	        	        	if ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if ( stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:595:4: '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']'
        	    {
        	        char_literal531 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_arrayLiteral4991); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, char_literal531, NULL); }


        	        // .//LexWhenPred.g:595:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt267=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA267_0 = LA(1);
        	                if ( (LA267_0 == LTERM) ) 
        	                {
        	                    alt267=1;
        	                }

        	            }
        	            switch (alt267) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM532 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4993); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM532, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop267;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop267: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral4998);
        	        e1=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e1.tree, NULL); }

        	        // .//LexWhenPred.g:595:39: ( ',' ( LTERM )* e2= assignmentExpression )*

        	        for (;;)
        	        {
        	            int alt269=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA269_0 = LA(1);
        	                if ( (LA269_0 == 128) ) 
        	                {
        	                    alt269=1;
        	                }

        	            }
        	            switch (alt269) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:595:40: ',' ( LTERM )* e2= assignmentExpression
        	        	    {
        	        	        char_literal533 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_arrayLiteral5001); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal533, NULL); }


        	        	        // .//LexWhenPred.g:595:44: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt268=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA268_0 = LA(1);
        	        	                if ( (LA268_0 == LTERM) ) 
        	        	                {
        	        	                    alt268=1;
        	        	                }

        	        	            }
        	        	            switch (alt268) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM534 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral5003); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulearrayLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM534, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop268;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop268: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral5008);
        	        	        e2=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop269;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop269: ; /* Jump out to here if this rule does not match */


        	        // .//LexWhenPred.g:595:77: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt270=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA270_0 = LA(1);
        	                if ( (LA270_0 == LTERM) ) 
        	                {
        	                    alt270=1;
        	                }

        	            }
        	            switch (alt270) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM535 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral5012); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM535, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop270;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop270: ; /* Jump out to here if this rule does not match */

        	        char_literal536 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_arrayLiteral5015); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal536, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression, assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 595:88: -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* )
        	        	{
        	        	    // .//LexWhenPred.g:595:91: ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));
        	        	        // .//LexWhenPred.g:595:128: ( assignmentExpression )*
        	        	        {
        	        	        	while ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if (stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayLiteralEx; /* Prevent compiler warnings */
    rulearrayLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_157 != NULL) stream_157->free(stream_157);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(93, arrayLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end arrayLiteral */

/** 
 * $ANTLR start objectLiteral
 * .//LexWhenPred.g:599:1: objectLiteral : ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) );
 */
static LexWhenPredParser_objectLiteral_return
objectLiteral(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_objectLiteral_return retval;
    ANTLR3_UINT32 objectLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal537;
    pANTLR3_COMMON_TOKEN    LTERM538;
    pANTLR3_COMMON_TOKEN    LTERM540;
    pANTLR3_COMMON_TOKEN    char_literal541;
    pANTLR3_COMMON_TOKEN    char_literal542;
    pANTLR3_COMMON_TOKEN    LTERM543;
    pANTLR3_COMMON_TOKEN    char_literal544;
    pANTLR3_COMMON_TOKEN    LTERM545;
    pANTLR3_COMMON_TOKEN    LTERM546;
    pANTLR3_COMMON_TOKEN    char_literal547;
    LexWhenPredParser_propertyNameAndValue_return p1;
    #undef	RETURN_TYPE_p1
    #define	RETURN_TYPE_p1 LexWhenPredParser_propertyNameAndValue_return

    LexWhenPredParser_propertyNameAndValue_return p2;
    #undef	RETURN_TYPE_p2
    #define	RETURN_TYPE_p2 LexWhenPredParser_propertyNameAndValue_return

    LexWhenPredParser_propertyNameAndValue_return propertyNameAndValue539;
    #undef	RETURN_TYPE_propertyNameAndValue539
    #define	RETURN_TYPE_propertyNameAndValue539 LexWhenPredParser_propertyNameAndValue_return

    pANTLR3_BASE_TREE char_literal537_tree;
    pANTLR3_BASE_TREE LTERM538_tree;
    pANTLR3_BASE_TREE LTERM540_tree;
    pANTLR3_BASE_TREE char_literal541_tree;
    pANTLR3_BASE_TREE char_literal542_tree;
    pANTLR3_BASE_TREE LTERM543_tree;
    pANTLR3_BASE_TREE char_literal544_tree;
    pANTLR3_BASE_TREE LTERM545_tree;
    pANTLR3_BASE_TREE LTERM546_tree;
    pANTLR3_BASE_TREE char_literal547_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyNameAndValue;
    /* Initialize rule variables
     */
    objectLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(94)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal537       = NULL;
    LTERM538       = NULL;
    LTERM540       = NULL;
    char_literal541       = NULL;
    char_literal542       = NULL;
    LTERM543       = NULL;
    char_literal544       = NULL;
    LTERM545       = NULL;
    LTERM546       = NULL;
    char_literal547       = NULL;
    p1.tree = NULL;

    p2.tree = NULL;

    propertyNameAndValue539.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal537_tree   = NULL;
    LTERM538_tree   = NULL;
    LTERM540_tree   = NULL;
    char_literal541_tree   = NULL;
    char_literal542_tree   = NULL;
    LTERM543_tree   = NULL;
    char_literal544_tree   = NULL;
    LTERM545_tree   = NULL;
    LTERM546_tree   = NULL;
    char_literal547_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_propertyNameAndValue   = NULL;
    #define CREATE_stream_propertyNameAndValue  if (stream_propertyNameAndValue == NULL) {stream_propertyNameAndValue = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyNameAndValue"); }

    retval.tree  = NULL;
    {
        {
            //  .//LexWhenPred.g:600:3: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) )
            
            ANTLR3_UINT32 alt279;

            alt279=2;


            {
                int LA279_0 = LA(1);
                if ( (LA279_0 == 130) ) 
                {

                    {
                        int LA279_1 = LA(2);
                        if ( (synpred333_LexWhenPred(ctx)) ) 
                        {
                            alt279=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt279=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 279;
                            EXCEPTION->state        = 1;


                            goto ruleobjectLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 279;
                    EXCEPTION->state        = 0;


                    goto ruleobjectLiteralEx;
                }
            }
            switch (alt279) 
            {
        	case 1:
        	    // .//LexWhenPred.g:600:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
        	    {
        	        char_literal537 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_objectLiteral5046); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal537, NULL); }


        	        // .//LexWhenPred.g:600:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt272=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA272_0 = LA(1);
        	                if ( (LA272_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA272_2 = LA(2);
        	                        if ( (synpred330_LexWhenPred(ctx)) ) 
        	                        {
        	                            alt272=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt272) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM538 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5048); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM538, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop272;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop272: ; /* Jump out to here if this rule does not match */


        	        // .//LexWhenPred.g:600:16: ( propertyNameAndValue )?
        	        {
        	            int alt273=2;
        	            {
        	                int LA273_0 = LA(1);
        	                if ( (((LA273_0 >= Identifier) && (LA273_0 <= NumericLiteral))) ) 
        	                {
        	                    alt273=1;
        	                }
        	            }
        	            switch (alt273) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: propertyNameAndValue
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral5051);
        	        	        propertyNameAndValue539=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, propertyNameAndValue539.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//LexWhenPred.g:600:38: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt274=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA274_0 = LA(1);
        	                if ( (LA274_0 == LTERM) ) 
        	                {
        	                    alt274=1;
        	                }

        	            }
        	            switch (alt274) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM540 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5054); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM540, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop274;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop274: ; /* Jump out to here if this rule does not match */

        	        char_literal541 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_objectLiteral5057); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal541, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 600:49: -> ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	{
        	        	    // .//LexWhenPred.g:600:52: ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        // .//LexWhenPred.g:600:66: ( propertyNameAndValue )?
        	        	        {
        	        	        	if ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if ( stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//LexWhenPred.g:601:4: '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}'
        	    {
        	        char_literal542 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_objectLiteral5071); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, char_literal542, NULL); }


        	        // .//LexWhenPred.g:601:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt275=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA275_0 = LA(1);
        	                if ( (LA275_0 == LTERM) ) 
        	                {
        	                    alt275=1;
        	                }

        	            }
        	            switch (alt275) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM543 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5073); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM543, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop275;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop275: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral5078);
        	        p1=propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p1.tree, NULL); }

        	        // .//LexWhenPred.g:601:39: ( ',' ( LTERM )* p2= propertyNameAndValue )*

        	        for (;;)
        	        {
        	            int alt277=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA277_0 = LA(1);
        	                if ( (LA277_0 == 128) ) 
        	                {
        	                    alt277=1;
        	                }

        	            }
        	            switch (alt277) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:601:40: ',' ( LTERM )* p2= propertyNameAndValue
        	        	    {
        	        	        char_literal544 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_objectLiteral5081); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal544, NULL); }


        	        	        // .//LexWhenPred.g:601:44: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt276=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA276_0 = LA(1);
        	        	                if ( (LA276_0 == LTERM) ) 
        	        	                {
        	        	                    alt276=1;
        	        	                }

        	        	            }
        	        	            switch (alt276) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM545 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5083); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleobjectLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM545, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop276;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop276: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral5088);
        	        	        p2=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop277;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop277: ; /* Jump out to here if this rule does not match */


        	        // .//LexWhenPred.g:601:77: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt278=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA278_0 = LA(1);
        	                if ( (LA278_0 == LTERM) ) 
        	                {
        	                    alt278=1;
        	                }

        	            }
        	            switch (alt278) 
        	            {
        	        	case 1:
        	        	    // .//LexWhenPred.g:0:0: LTERM
        	        	    {
        	        	        LTERM546 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral5092); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM546, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop278;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop278: ; /* Jump out to here if this rule does not match */

        	        char_literal547 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_objectLiteral5099); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, char_literal547, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue, propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 601:92: -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	{
        	        	    // .//LexWhenPred.g:601:95: ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));
        	        	        // .//LexWhenPred.g:601:130: ( propertyNameAndValue )*
        	        	        {
        	        	        	while ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectLiteralEx; /* Prevent compiler warnings */
    ruleobjectLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->free(stream_propertyNameAndValue);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(94, objectLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end objectLiteral */

/** 
 * $ANTLR start propertyNameAndValue
 * .//LexWhenPred.g:604:1: propertyNameAndValue : propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) ;
 */
static LexWhenPredParser_propertyNameAndValue_return
propertyNameAndValue(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_propertyNameAndValue_return retval;
    ANTLR3_UINT32 propertyNameAndValue_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM549;
    pANTLR3_COMMON_TOKEN    char_literal550;
    pANTLR3_COMMON_TOKEN    LTERM551;
    LexWhenPredParser_propertyName_return propertyName548;
    #undef	RETURN_TYPE_propertyName548
    #define	RETURN_TYPE_propertyName548 LexWhenPredParser_propertyName_return

    LexWhenPredParser_assignmentExpression_return assignmentExpression552;
    #undef	RETURN_TYPE_assignmentExpression552
    #define	RETURN_TYPE_assignmentExpression552 LexWhenPredParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM549_tree;
    pANTLR3_BASE_TREE char_literal550_tree;
    pANTLR3_BASE_TREE LTERM551_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyName;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    propertyNameAndValue_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(95)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM549       = NULL;
    char_literal550       = NULL;
    LTERM551       = NULL;
    propertyName548.tree = NULL;

    assignmentExpression552.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM549_tree   = NULL;
    char_literal550_tree   = NULL;
    LTERM551_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_propertyName   = NULL;
    #define CREATE_stream_propertyName  if (stream_propertyName == NULL) {stream_propertyName = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyName"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:605:2: ( propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) )
        // .//LexWhenPred.g:605:4: propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression
        {
            FOLLOWPUSH(FOLLOW_propertyName_in_propertyNameAndValue5123);
            propertyName548=propertyName(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_propertyName; stream_propertyName->add(stream_propertyName, propertyName548.tree, NULL); }

            // .//LexWhenPred.g:605:17: ( LTERM )*

            for (;;)
            {
                int alt280=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA280_0 = LA(1);
                    if ( (LA280_0 == LTERM) ) 
                    {
                        alt280=1;
                    }

                }
                switch (alt280) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM549 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue5125); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM549, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop280;	/* break out of the loop */
            	    break;
                }
            }
            loop280: ; /* Jump out to here if this rule does not match */

            char_literal550 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_propertyNameAndValue5128); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal550, NULL); }


            // .//LexWhenPred.g:605:28: ( LTERM )*

            for (;;)
            {
                int alt281=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA281_0 = LA(1);
                    if ( (LA281_0 == LTERM) ) 
                    {
                        alt281=1;
                    }

                }
                switch (alt281) 
                {
            	case 1:
            	    // .//LexWhenPred.g:0:0: LTERM
            	    {
            	        LTERM551 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue5130); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM551, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop281;	/* break out of the loop */
            	    break;
                }
            }
            loop281: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_propertyNameAndValue5133);
            assignmentExpression552=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression552.tree, NULL); }

             
            /* AST REWRITE
             * elements          : propertyName, assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 605:56: -> ^( NAME_VALUE propertyName assignmentExpression )
            	{
            	    // .//LexWhenPred.g:605:59: ^( NAME_VALUE propertyName assignmentExpression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME_VALUE, (pANTLR3_UINT8)"NAME_VALUE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyName == NULL ? NULL : stream_propertyName->nextTree(stream_propertyName));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameAndValueEx; /* Prevent compiler warnings */
    rulepropertyNameAndValueEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_propertyName != NULL) stream_propertyName->free(stream_propertyName);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(95, propertyNameAndValue_StartIndex); }
    return retval;
}
/* $ANTLR end propertyNameAndValue */

/** 
 * $ANTLR start propertyName
 * .//LexWhenPred.g:608:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
 */
static LexWhenPredParser_propertyName_return
propertyName(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_propertyName_return retval;
    ANTLR3_UINT32 propertyName_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set553;

    pANTLR3_BASE_TREE set553_tree;

    /* Initialize rule variables
     */
    propertyName_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(96)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set553       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set553_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:609:2: ( Identifier | StringLiteral | NumericLiteral )
        // .//LexWhenPred.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set553=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= Identifier) && (LA(1) <= NumericLiteral)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set553)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_propertyName0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_propertyName0);    goto rulepropertyNameEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameEx; /* Prevent compiler warnings */
    rulepropertyNameEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(96, propertyName_StartIndex); }
    return retval;
}
/* $ANTLR end propertyName */

/** 
 * $ANTLR start literal
 * .//LexWhenPred.g:615:1: literal : ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral );
 */
static LexWhenPredParser_literal_return
literal(pLexWhenPredParser ctx)
{   
    LexWhenPredParser_literal_return retval;
    ANTLR3_UINT32 literal_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set554;

    pANTLR3_BASE_TREE set554_tree;

    /* Initialize rule variables
     */
    literal_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(97)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set554       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set554_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//LexWhenPred.g:616:2: ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral )
        // .//LexWhenPred.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set554=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= StringLiteral) && (LA(1) <= NumericLiteral)) || ((LA(1) >= 203) && (LA(1) <= 205)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set554)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_literal0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(97, literal_StartIndex); }
    return retval;
}
/* $ANTLR end literal */

// $ANTLR start synpred5_LexWhenPred
static void synpred5_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:140:4: ( functionDeclaration )
    // .//LexWhenPred.g:140:4: functionDeclaration
    {
        FOLLOWPUSH(FOLLOW_functionDeclaration_in_synpred5_LexWhenPred842);
        functionDeclaration(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred5_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred5_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred5_LexWhenPredEx: ;

}
// $ANTLR end synpred5_LexWhenPred

// $ANTLR start synpred9_LexWhenPred
static void synpred9_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:150:15: ( LTERM )
    // .//LexWhenPred.g:150:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred9_LexWhenPred909); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred9_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred9_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred9_LexWhenPredEx: ;

}
// $ANTLR end synpred9_LexWhenPred

// $ANTLR start synpred23_LexWhenPred
static void synpred23_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:164:4: ( statementBlock )
    // .//LexWhenPred.g:164:4: statementBlock
    {
        FOLLOWPUSH(FOLLOW_statementBlock_in_synpred23_LexWhenPred1050);
        statementBlock(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred23_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred23_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred23_LexWhenPredEx: ;

}
// $ANTLR end synpred23_LexWhenPred

// $ANTLR start synpred26_LexWhenPred
static void synpred26_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:167:4: ( expressionStatement )
    // .//LexWhenPred.g:167:4: expressionStatement
    {
        FOLLOWPUSH(FOLLOW_expressionStatement_in_synpred26_LexWhenPred1065);
        expressionStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred26_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred26_LexWhenPredEx: ;

}
// $ANTLR end synpred26_LexWhenPred

// $ANTLR start synpred33_LexWhenPred
static void synpred33_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:174:4: ( labelledStatement )
    // .//LexWhenPred.g:174:4: labelledStatement
    {
        FOLLOWPUSH(FOLLOW_labelledStatement_in_synpred33_LexWhenPred1100);
        labelledStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred33_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred33_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred33_LexWhenPredEx: ;

}
// $ANTLR end synpred33_LexWhenPred

// $ANTLR start synpred38_LexWhenPred
static void synpred38_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:179:4: ( msgSendStatement )
    // .//LexWhenPred.g:179:4: msgSendStatement
    {
        FOLLOWPUSH(FOLLOW_msgSendStatement_in_synpred38_LexWhenPred1132);
        msgSendStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred38_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred38_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred38_LexWhenPredEx: ;

}
// $ANTLR end synpred38_LexWhenPred

// $ANTLR start synpred53_LexWhenPred
static void synpred53_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:205:15: ( LTERM )
    // .//LexWhenPred.g:205:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred53_LexWhenPred1311); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred53_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred53_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred53_LexWhenPredEx: ;

}
// $ANTLR end synpred53_LexWhenPred

// $ANTLR start synpred55_LexWhenPred
static void synpred55_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:209:15: ( LTERM )
    // .//LexWhenPred.g:209:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred55_LexWhenPred1340); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred55_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred55_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred55_LexWhenPredEx: ;

}
// $ANTLR end synpred55_LexWhenPred

// $ANTLR start synpred69_LexWhenPred
static void synpred69_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
	LexWhenPredParser_whenCheckedListSubsequent_return s2;
	#undef	RETURN_TYPE_s2
	#define	RETURN_TYPE_s2 LexWhenPredParser_whenCheckedListSubsequent_return

    // .//LexWhenPred.g:244:29: ( ',' ( LTERM )* s2= whenCheckedListSubsequent )
    // .//LexWhenPred.g:244:29: ',' ( LTERM )* s2= whenCheckedListSubsequent
    {
         MATCHT(128, &FOLLOW_128_in_synpred69_LexWhenPred1582); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred69_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//LexWhenPred.g:244:33: ( LTERM )*

        for (;;)
        {
            int alt297=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA297_0 = LA(1);
                if ( (LA297_0 == LTERM) ) 
                {
                    alt297=1;
                }

            }
            switch (alt297) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred69_LexWhenPred1584); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred69_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop297;	/* break out of the loop */
        	    break;
            }
        }
        loop297: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_whenCheckedListSubsequent_in_synpred69_LexWhenPred1589);
        s2=whenCheckedListSubsequent(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred69_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred69_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred69_LexWhenPredEx: ;

}
// $ANTLR end synpred69_LexWhenPred

// $ANTLR start synpred76_LexWhenPred
static void synpred76_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
	LexWhenPredParser_statement_return s2;
	#undef	RETURN_TYPE_s2
	#define	RETURN_TYPE_s2 LexWhenPredParser_statement_return

    // .//LexWhenPred.g:249:73: ( ( LTERM )* 'else' ( LTERM )* s2= statement )
    // .//LexWhenPred.g:249:73: ( LTERM )* 'else' ( LTERM )* s2= statement
    {

        // .//LexWhenPred.g:249:73: ( LTERM )*

        for (;;)
        {
            int alt298=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA298_0 = LA(1);
                if ( (LA298_0 == LTERM) ) 
                {
                    alt298=1;
                }

            }
            switch (alt298) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred76_LexWhenPred1647); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred76_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop298;	/* break out of the loop */
        	    break;
            }
        }
        loop298: ; /* Jump out to here if this rule does not match */

         MATCHT(137, &FOLLOW_137_in_synpred76_LexWhenPred1650); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred76_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//LexWhenPred.g:249:87: ( LTERM )*

        for (;;)
        {
            int alt299=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA299_0 = LA(1);
                if ( (LA299_0 == LTERM) ) 
                {
                    alt299=1;
                }

            }
            switch (alt299) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred76_LexWhenPred1652); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred76_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop299;	/* break out of the loop */
        	    break;
            }
        }
        loop299: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_statement_in_synpred76_LexWhenPred1657);
        s2=statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred76_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred76_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred76_LexWhenPredEx: ;

}
// $ANTLR end synpred76_LexWhenPred

// $ANTLR start synpred79_LexWhenPred
static void synpred79_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:255:4: ( forStatement )
    // .//LexWhenPred.g:255:4: forStatement
    {
        FOLLOWPUSH(FOLLOW_forStatement_in_synpred79_LexWhenPred1699);
        forStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred79_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred79_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred79_LexWhenPredEx: ;

}
// $ANTLR end synpred79_LexWhenPred

// $ANTLR start synpred134_LexWhenPred
static void synpred134_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:314:40: ( LTERM )
    // .//LexWhenPred.g:314:40: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred134_LexWhenPred2325); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred134_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred134_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred134_LexWhenPredEx: ;

}
// $ANTLR end synpred134_LexWhenPred

// $ANTLR start synpred137_LexWhenPred
static void synpred137_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:318:25: ( LTERM )
    // .//LexWhenPred.g:318:25: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred137_LexWhenPred2360); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred137_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred137_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred137_LexWhenPredEx: ;

}
// $ANTLR end synpred137_LexWhenPred

// $ANTLR start synpred155_LexWhenPred
static void synpred155_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
	LexWhenPredParser_memberExpression_return e1;
	#undef	RETURN_TYPE_e1
	#define	RETURN_TYPE_e1 LexWhenPredParser_memberExpression_return

	LexWhenPredParser_leftHandSideExpression_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 LexWhenPredParser_leftHandSideExpression_return




    // .//LexWhenPred.g:347:4: (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) )
    // .//LexWhenPred.g:347:4: e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' )
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred155_LexWhenPred2624);
        e1=memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred155_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//LexWhenPred.g:347:24: ( LTERM )*

        for (;;)
        {
            int alt309=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA309_0 = LA(1);
                if ( (LA309_0 == LTERM) ) 
                {
                    alt309=1;
                }

            }
            switch (alt309) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred155_LexWhenPred2626); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred155_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop309;	/* break out of the loop */
        	    break;
            }
        }
        loop309: ; /* Jump out to here if this rule does not match */

         MATCHT(155, &FOLLOW_155_in_synpred155_LexWhenPred2628); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred155_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred155_LexWhenPred2632);
        e2=leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred155_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        if ( LA(1) == LTERM || LA(1) == 133 )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE; 
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = &FOLLOW_set_in_synpred155_LexWhenPred2634;
            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred155_LexWhenPred2634);    goto rulesynpred155_LexWhenPredEx;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred155_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred155_LexWhenPredEx: ;

}
// $ANTLR end synpred155_LexWhenPred

// $ANTLR start synpred161_LexWhenPred
static void synpred161_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:353:26: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )
    // .//LexWhenPred.g:353:26: ( LTERM )* ',' ( LTERM )* assignmentExpression
    {

        // .//LexWhenPred.g:353:26: ( LTERM )*

        for (;;)
        {
            int alt310=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA310_0 = LA(1);
                if ( (LA310_0 == LTERM) ) 
                {
                    alt310=1;
                }

            }
            switch (alt310) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred161_LexWhenPred2714); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred161_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop310;	/* break out of the loop */
        	    break;
            }
        }
        loop310: ; /* Jump out to here if this rule does not match */

         MATCHT(128, &FOLLOW_128_in_synpred161_LexWhenPred2717); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred161_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//LexWhenPred.g:353:37: ( LTERM )*

        for (;;)
        {
            int alt311=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA311_0 = LA(1);
                if ( (LA311_0 == LTERM) ) 
                {
                    alt311=1;
                }

            }
            switch (alt311) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred161_LexWhenPred2719); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred161_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop311;	/* break out of the loop */
        	    break;
            }
        }
        loop311: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred161_LexWhenPred2722);
        assignmentExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred161_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred161_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred161_LexWhenPredEx: ;

}
// $ANTLR end synpred161_LexWhenPred

// $ANTLR start synpred165_LexWhenPred
static void synpred165_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:362:4: ( conditionalExpression )
    // .//LexWhenPred.g:362:4: conditionalExpression
    {
        FOLLOWPUSH(FOLLOW_conditionalExpression_in_synpred165_LexWhenPred2781);
        conditionalExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred165_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred165_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred165_LexWhenPredEx: ;

}
// $ANTLR end synpred165_LexWhenPred

// $ANTLR start synpred168_LexWhenPred
static void synpred168_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:367:4: ( conditionalExpressionNoIn )
    // .//LexWhenPred.g:367:4: conditionalExpressionNoIn
    {
        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_synpred168_LexWhenPred2828);
        conditionalExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred168_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred168_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred168_LexWhenPredEx: ;

}
// $ANTLR end synpred168_LexWhenPred

// $ANTLR start synpred171_LexWhenPred
static void synpred171_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:372:4: ( callExpression )
    // .//LexWhenPred.g:372:4: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred171_LexWhenPred2876);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred171_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred171_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred171_LexWhenPredEx: ;

}
// $ANTLR end synpred171_LexWhenPred

// $ANTLR start synpred172_LexWhenPred
static void synpred172_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:377:4: ( memberExpression )
    // .//LexWhenPred.g:377:4: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred172_LexWhenPred2901);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred172_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred172_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred172_LexWhenPredEx: ;

}
// $ANTLR end synpred172_LexWhenPred

// $ANTLR start synpred178_LexWhenPred
static void synpred178_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:393:47: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//LexWhenPred.g:393:47: ( LTERM )* propertyReferenceSuffix1
    {

        // .//LexWhenPred.g:393:47: ( LTERM )*

        for (;;)
        {
            int alt314=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA314_0 = LA(1);
                if ( (LA314_0 == LTERM) ) 
                {
                    alt314=1;
                }

            }
            switch (alt314) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred178_LexWhenPred2995); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred178_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop314;	/* break out of the loop */
        	    break;
            }
        }
        loop314: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred178_LexWhenPred2998);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred178_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred178_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred178_LexWhenPredEx: ;

}
// $ANTLR end synpred178_LexWhenPred

// $ANTLR start synpred180_LexWhenPred
static void synpred180_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:393:136: ( ( LTERM )* indexSuffix1 )
    // .//LexWhenPred.g:393:136: ( LTERM )* indexSuffix1
    {

        // .//LexWhenPred.g:393:136: ( LTERM )*

        for (;;)
        {
            int alt315=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA315_0 = LA(1);
                if ( (LA315_0 == LTERM) ) 
                {
                    alt315=1;
                }

            }
            switch (alt315) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred180_LexWhenPred3015); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred180_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop315;	/* break out of the loop */
        	    break;
            }
        }
        loop315: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred180_LexWhenPred3018);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred180_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred180_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred180_LexWhenPredEx: ;

}
// $ANTLR end synpred180_LexWhenPred

// $ANTLR start synpred183_LexWhenPred
static void synpred183_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:394:48: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//LexWhenPred.g:394:48: ( LTERM )* propertyReferenceSuffix1
    {

        // .//LexWhenPred.g:394:48: ( LTERM )*

        for (;;)
        {
            int alt319=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA319_0 = LA(1);
                if ( (LA319_0 == LTERM) ) 
                {
                    alt319=1;
                }

            }
            switch (alt319) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred183_LexWhenPred3045); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred183_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop319;	/* break out of the loop */
        	    break;
            }
        }
        loop319: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred183_LexWhenPred3048);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred183_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred183_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred183_LexWhenPredEx: ;

}
// $ANTLR end synpred183_LexWhenPred

// $ANTLR start synpred185_LexWhenPred
static void synpred185_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:394:136: ( ( LTERM )* indexSuffix1 )
    // .//LexWhenPred.g:394:136: ( LTERM )* indexSuffix1
    {

        // .//LexWhenPred.g:394:136: ( LTERM )*

        for (;;)
        {
            int alt320=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA320_0 = LA(1);
                if ( (LA320_0 == LTERM) ) 
                {
                    alt320=1;
                }

            }
            switch (alt320) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred185_LexWhenPred3064); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred185_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop320;	/* break out of the loop */
        	    break;
            }
        }
        loop320: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred185_LexWhenPred3067);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred185_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred185_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred185_LexWhenPredEx: ;

}
// $ANTLR end synpred185_LexWhenPred

// $ANTLR start synpred190_LexWhenPred
static void synpred190_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:395:85: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//LexWhenPred.g:395:85: ( LTERM )* propertyReferenceSuffix1
    {

        // .//LexWhenPred.g:395:85: ( LTERM )*

        for (;;)
        {
            int alt324=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA324_0 = LA(1);
                if ( (LA324_0 == LTERM) ) 
                {
                    alt324=1;
                }

            }
            switch (alt324) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred190_LexWhenPred3113); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred190_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop324;	/* break out of the loop */
        	    break;
            }
        }
        loop324: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred190_LexWhenPred3116);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred190_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred190_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred190_LexWhenPredEx: ;

}
// $ANTLR end synpred190_LexWhenPred

// $ANTLR start synpred192_LexWhenPred
static void synpred192_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:395:147: ( ( LTERM )* indexSuffix1 )
    // .//LexWhenPred.g:395:147: ( LTERM )* indexSuffix1
    {

        // .//LexWhenPred.g:395:147: ( LTERM )*

        for (;;)
        {
            int alt325=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA325_0 = LA(1);
                if ( (LA325_0 == LTERM) ) 
                {
                    alt325=1;
                }

            }
            switch (alt325) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred192_LexWhenPred3129); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred192_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop325;	/* break out of the loop */
        	    break;
            }
        }
        loop325: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred192_LexWhenPred3132);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred192_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred192_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred192_LexWhenPredEx: ;

}
// $ANTLR end synpred192_LexWhenPred

// $ANTLR start synpred196_LexWhenPred
static void synpred196_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:404:82: ( ( LTERM )* arguments )
    // .//LexWhenPred.g:404:82: ( LTERM )* arguments
    {

        // .//LexWhenPred.g:404:82: ( LTERM )*

        for (;;)
        {
            int alt326=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA326_0 = LA(1);
                if ( (LA326_0 == LTERM) ) 
                {
                    alt326=1;
                }

            }
            switch (alt326) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred196_LexWhenPred3216); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred196_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop326;	/* break out of the loop */
        	    break;
            }
        }
        loop326: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_arguments_in_synpred196_LexWhenPred3219);
        arguments(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred196_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred196_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred196_LexWhenPredEx: ;

}
// $ANTLR end synpred196_LexWhenPred

// $ANTLR start synpred198_LexWhenPred
static void synpred198_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:404:114: ( ( LTERM )* indexSuffix1 )
    // .//LexWhenPred.g:404:114: ( LTERM )* indexSuffix1
    {

        // .//LexWhenPred.g:404:114: ( LTERM )*

        for (;;)
        {
            int alt327=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA327_0 = LA(1);
                if ( (LA327_0 == LTERM) ) 
                {
                    alt327=1;
                }

            }
            switch (alt327) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred198_LexWhenPred3227); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred198_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop327;	/* break out of the loop */
        	    break;
            }
        }
        loop327: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred198_LexWhenPred3230);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred198_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred198_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred198_LexWhenPredEx: ;

}
// $ANTLR end synpred198_LexWhenPred

// $ANTLR start synpred200_LexWhenPred
static void synpred200_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:404:183: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//LexWhenPred.g:404:183: ( LTERM )* propertyReferenceSuffix1
    {

        // .//LexWhenPred.g:404:183: ( LTERM )*

        for (;;)
        {
            int alt328=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA328_0 = LA(1);
                if ( (LA328_0 == LTERM) ) 
                {
                    alt328=1;
                }

            }
            switch (alt328) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred200_LexWhenPred3245); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred200_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop328;	/* break out of the loop */
        	    break;
            }
        }
        loop328: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred200_LexWhenPred3248);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred200_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred200_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred200_LexWhenPredEx: ;

}
// $ANTLR end synpred200_LexWhenPred

// $ANTLR start synpred295_LexWhenPred
static void synpred295_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:540:59: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression )
    // .//LexWhenPred.g:540:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
    {

        // .//LexWhenPred.g:540:59: ( LTERM )*

        for (;;)
        {
            int alt373=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA373_0 = LA(1);
                if ( (LA373_0 == LTERM) ) 
                {
                    alt373=1;
                }

            }
            switch (alt373) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred295_LexWhenPred4544); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred295_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop373;	/* break out of the loop */
        	    break;
            }
        }
        loop373: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_addOps_in_synpred295_LexWhenPred4547);
        addOps(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred295_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//LexWhenPred.g:540:73: ( LTERM )*

        for (;;)
        {
            int alt374=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA374_0 = LA(1);
                if ( (LA374_0 == LTERM) ) 
                {
                    alt374=1;
                }

            }
            switch (alt374) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred295_LexWhenPred4549); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred295_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop374;	/* break out of the loop */
        	    break;
            }
        }
        loop374: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_synpred295_LexWhenPred4552);
        multiplicativeExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred295_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred295_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred295_LexWhenPredEx: ;

}
// $ANTLR end synpred295_LexWhenPred

// $ANTLR start synpred322_LexWhenPred
static void synpred322_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:594:9: ( LTERM )
    // .//LexWhenPred.g:594:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred322_LexWhenPred4966); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred322_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred322_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred322_LexWhenPredEx: ;

}
// $ANTLR end synpred322_LexWhenPred

// $ANTLR start synpred325_LexWhenPred
static void synpred325_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:594:5: ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' )
    // .//LexWhenPred.g:594:5: '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']'
    {
         MATCHT(157, &FOLLOW_157_in_synpred325_LexWhenPred4964); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred325_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//LexWhenPred.g:594:9: ( LTERM )*

        for (;;)
        {
            int alt377=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA377_0 = LA(1);
                if ( (LA377_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA377_2 = LA(2);
                        if ( (synpred322_LexWhenPred(ctx)) ) 
                        {
                            alt377=1;
                        }

                    }
                }

            }
            switch (alt377) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred325_LexWhenPred4966); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred325_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop377;	/* break out of the loop */
        	    break;
            }
        }
        loop377: ; /* Jump out to here if this rule does not match */


        // .//LexWhenPred.g:594:16: ( assignmentExpression )?
        {
            int alt378=2;
            {
                int LA378_0 = LA(1);
                if ( (((LA378_0 >= Identifier) && (LA378_0 <= NumericLiteral)) || ((LA378_0 >= 126) && (LA378_0 <= 127)) || LA378_0 == 130 || ((LA378_0 >= 156) && (LA378_0 <= 157)) || ((LA378_0 >= 189) && (LA378_0 <= 190)) || ((LA378_0 >= 194) && (LA378_0 <= 205))) ) 
                {
                    alt378=1;
                }
            }
            switch (alt378) 
            {
        	case 1:
        	    // .//LexWhenPred.g:594:17: assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred325_LexWhenPred4970);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred325_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//LexWhenPred.g:594:40: ( LTERM )*

        for (;;)
        {
            int alt379=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA379_0 = LA(1);
                if ( (LA379_0 == LTERM) ) 
                {
                    alt379=1;
                }

            }
            switch (alt379) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred325_LexWhenPred4974); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred325_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop379;	/* break out of the loop */
        	    break;
            }
        }
        loop379: ; /* Jump out to here if this rule does not match */

         MATCHT(158, &FOLLOW_158_in_synpred325_LexWhenPred4977); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred325_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred325_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred325_LexWhenPredEx: ;

}
// $ANTLR end synpred325_LexWhenPred

// $ANTLR start synpred330_LexWhenPred
static void synpred330_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:600:9: ( LTERM )
    // .//LexWhenPred.g:600:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred330_LexWhenPred5048); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred330_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred330_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred330_LexWhenPredEx: ;

}
// $ANTLR end synpred330_LexWhenPred

// $ANTLR start synpred333_LexWhenPred
static void synpred333_LexWhenPred_fragment(pLexWhenPredParser ctx ) 
{
    // .//LexWhenPred.g:600:5: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' )
    // .//LexWhenPred.g:600:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
    {
         MATCHT(130, &FOLLOW_130_in_synpred333_LexWhenPred5046); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred333_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//LexWhenPred.g:600:9: ( LTERM )*

        for (;;)
        {
            int alt381=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA381_0 = LA(1);
                if ( (LA381_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA381_2 = LA(2);
                        if ( (synpred330_LexWhenPred(ctx)) ) 
                        {
                            alt381=1;
                        }

                    }
                }

            }
            switch (alt381) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred333_LexWhenPred5048); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred333_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop381;	/* break out of the loop */
        	    break;
            }
        }
        loop381: ; /* Jump out to here if this rule does not match */


        // .//LexWhenPred.g:600:16: ( propertyNameAndValue )?
        {
            int alt382=2;
            {
                int LA382_0 = LA(1);
                if ( (((LA382_0 >= Identifier) && (LA382_0 <= NumericLiteral))) ) 
                {
                    alt382=1;
                }
            }
            switch (alt382) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: propertyNameAndValue
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_synpred333_LexWhenPred5051);
        	        propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred333_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//LexWhenPred.g:600:38: ( LTERM )*

        for (;;)
        {
            int alt383=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA383_0 = LA(1);
                if ( (LA383_0 == LTERM) ) 
                {
                    alt383=1;
                }

            }
            switch (alt383) 
            {
        	case 1:
        	    // .//LexWhenPred.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred333_LexWhenPred5054); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred333_LexWhenPredEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop383;	/* break out of the loop */
        	    break;
            }
        }
        loop383: ; /* Jump out to here if this rule does not match */

         MATCHT(131, &FOLLOW_131_in_synpred333_LexWhenPred5057); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred333_LexWhenPredEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred333_LexWhenPredEx; /* Prevent compiler warnings */
rulesynpred333_LexWhenPredEx: ;

}
// $ANTLR end synpred333_LexWhenPred
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred69_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred69_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred325_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred325_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred198_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred198_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred55_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred55_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred5_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred5_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred330_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred330_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred322_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred322_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred38_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred38_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred178_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred178_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred134_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred134_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred171_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred171_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred180_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred180_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred190_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred190_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred9_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred9_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred172_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred172_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred333_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred333_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred196_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred196_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred168_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred168_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred200_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred200_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred33_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred33_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred295_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred295_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred192_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred192_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred76_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred76_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred26_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred26_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred53_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred53_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred155_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred155_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred183_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred183_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred185_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred185_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred165_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred165_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred161_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred161_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred23_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred23_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred79_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred79_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred137_LexWhenPred(pLexWhenPredParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred137_LexWhenPred_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
