/** \file
 *  This C header file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//Emerson.g
 *     -                            On : 2011-05-02 11:04:40
 *     -                for the parser : EmersonParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser EmersonParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pEmersonParser, which is returned from a call to EmersonParserNew().
 *
 * The methods in pEmersonParser are  as follows:
 *
 *  - EmersonParser_program_return      pEmersonParser->program(pEmersonParser)
 *  - EmersonParser_sourceElements_return      pEmersonParser->sourceElements(pEmersonParser)
 *  - EmersonParser_sourceElement_return      pEmersonParser->sourceElement(pEmersonParser)
 *  - EmersonParser_functionDeclaration_return      pEmersonParser->functionDeclaration(pEmersonParser)
 *  - EmersonParser_functionExpression_return      pEmersonParser->functionExpression(pEmersonParser)
 *  - EmersonParser_formalParameterList_return      pEmersonParser->formalParameterList(pEmersonParser)
 *  - EmersonParser_functionBody_return      pEmersonParser->functionBody(pEmersonParser)
 *  - EmersonParser_statement_return      pEmersonParser->statement(pEmersonParser)
 *  - EmersonParser_statementBlock_return      pEmersonParser->statementBlock(pEmersonParser)
 *  - EmersonParser_noOpStatement_return      pEmersonParser->noOpStatement(pEmersonParser)
 *  - EmersonParser_statementList_return      pEmersonParser->statementList(pEmersonParser)
 *  - EmersonParser_variableStatement_return      pEmersonParser->variableStatement(pEmersonParser)
 *  - EmersonParser_variableDeclarationList_return      pEmersonParser->variableDeclarationList(pEmersonParser)
 *  - EmersonParser_variableDeclarationListNoIn_return      pEmersonParser->variableDeclarationListNoIn(pEmersonParser)
 *  - EmersonParser_variableDeclaration_return      pEmersonParser->variableDeclaration(pEmersonParser)
 *  - EmersonParser_variableDeclarationNoIn_return      pEmersonParser->variableDeclarationNoIn(pEmersonParser)
 *  - EmersonParser_initialiser_return      pEmersonParser->initialiser(pEmersonParser)
 *  - EmersonParser_initialiserNoIn_return      pEmersonParser->initialiserNoIn(pEmersonParser)
 *  - EmersonParser_emptyStatement_return      pEmersonParser->emptyStatement(pEmersonParser)
 *  - EmersonParser_expressionStatement_return      pEmersonParser->expressionStatement(pEmersonParser)
 *  - EmersonParser_whenStatement_return      pEmersonParser->whenStatement(pEmersonParser)
 *  - EmersonParser_whenPred_return      pEmersonParser->whenPred(pEmersonParser)
 *  - EmersonParser_whenCheckedListFirst_return      pEmersonParser->whenCheckedListFirst(pEmersonParser)
 *  - EmersonParser_whenCheckedListSubsequent_return      pEmersonParser->whenCheckedListSubsequent(pEmersonParser)
 *  - EmersonParser_ifStatement_return      pEmersonParser->ifStatement(pEmersonParser)
 *  - EmersonParser_iterationStatement_return      pEmersonParser->iterationStatement(pEmersonParser)
 *  - EmersonParser_doWhileStatement_return      pEmersonParser->doWhileStatement(pEmersonParser)
 *  - EmersonParser_whileStatement_return      pEmersonParser->whileStatement(pEmersonParser)
 *  - EmersonParser_forStatement_return      pEmersonParser->forStatement(pEmersonParser)
 *  - EmersonParser_forStatementInitialiserPart_return      pEmersonParser->forStatementInitialiserPart(pEmersonParser)
 *  - EmersonParser_forInStatement_return      pEmersonParser->forInStatement(pEmersonParser)
 *  - EmersonParser_forInStatementInitialiserPart_return      pEmersonParser->forInStatementInitialiserPart(pEmersonParser)
 *  - EmersonParser_continueStatement_return      pEmersonParser->continueStatement(pEmersonParser)
 *  - EmersonParser_breakStatement_return      pEmersonParser->breakStatement(pEmersonParser)
 *  - EmersonParser_returnStatement_return      pEmersonParser->returnStatement(pEmersonParser)
 *  - EmersonParser_withStatement_return      pEmersonParser->withStatement(pEmersonParser)
 *  - EmersonParser_labelledStatement_return      pEmersonParser->labelledStatement(pEmersonParser)
 *  - EmersonParser_switchStatement_return      pEmersonParser->switchStatement(pEmersonParser)
 *  - EmersonParser_caseBlock_return      pEmersonParser->caseBlock(pEmersonParser)
 *  - EmersonParser_caseClause_return      pEmersonParser->caseClause(pEmersonParser)
 *  - EmersonParser_defaultClause_return      pEmersonParser->defaultClause(pEmersonParser)
 *  - EmersonParser_throwStatement_return      pEmersonParser->throwStatement(pEmersonParser)
 *  - EmersonParser_tryStatement_return      pEmersonParser->tryStatement(pEmersonParser)
 *  - EmersonParser_catchFinallyBlock_return      pEmersonParser->catchFinallyBlock(pEmersonParser)
 *  - EmersonParser_catchBlock_return      pEmersonParser->catchBlock(pEmersonParser)
 *  - EmersonParser_finallyBlock_return      pEmersonParser->finallyBlock(pEmersonParser)
 *  - EmersonParser_msgSendStatement_return      pEmersonParser->msgSendStatement(pEmersonParser)
 *  - EmersonParser_memAndCallExpression_return      pEmersonParser->memAndCallExpression(pEmersonParser)
 *  - EmersonParser_msgRecvStatement_return      pEmersonParser->msgRecvStatement(pEmersonParser)
 *  - EmersonParser_expression_return      pEmersonParser->expression(pEmersonParser)
 *  - EmersonParser_expressionNoIn_return      pEmersonParser->expressionNoIn(pEmersonParser)
 *  - EmersonParser_assignmentExpression_return      pEmersonParser->assignmentExpression(pEmersonParser)
 *  - EmersonParser_assignmentExpressionNoIn_return      pEmersonParser->assignmentExpressionNoIn(pEmersonParser)
 *  - EmersonParser_leftHandSideExpression_return      pEmersonParser->leftHandSideExpression(pEmersonParser)
 *  - EmersonParser_newExpression_return      pEmersonParser->newExpression(pEmersonParser)
 *  - EmersonParser_indexSuffix1_return      pEmersonParser->indexSuffix1(pEmersonParser)
 *  - EmersonParser_propertyReferenceSuffix1_return      pEmersonParser->propertyReferenceSuffix1(pEmersonParser)
 *  - EmersonParser_memberExpression_return      pEmersonParser->memberExpression(pEmersonParser)
 *  - EmersonParser_memberExpressionSuffix_return      pEmersonParser->memberExpressionSuffix(pEmersonParser)
 *  - EmersonParser_callExpression_return      pEmersonParser->callExpression(pEmersonParser)
 *  - EmersonParser_callExpressionSuffix_return      pEmersonParser->callExpressionSuffix(pEmersonParser)
 *  - EmersonParser_arguments_return      pEmersonParser->arguments(pEmersonParser)
 *  - EmersonParser_indexSuffix_return      pEmersonParser->indexSuffix(pEmersonParser)
 *  - EmersonParser_propertyReferenceSuffix_return      pEmersonParser->propertyReferenceSuffix(pEmersonParser)
 *  - EmersonParser_assignmentOperator_return      pEmersonParser->assignmentOperator(pEmersonParser)
 *  - EmersonParser_conditionalExpression_return      pEmersonParser->conditionalExpression(pEmersonParser)
 *  - EmersonParser_conditionalExpressionNoIn_return      pEmersonParser->conditionalExpressionNoIn(pEmersonParser)
 *  - EmersonParser_logicalORExpression_return      pEmersonParser->logicalORExpression(pEmersonParser)
 *  - EmersonParser_logicalANDExpression_return      pEmersonParser->logicalANDExpression(pEmersonParser)
 *  - EmersonParser_logicalORExpressionNoIn_return      pEmersonParser->logicalORExpressionNoIn(pEmersonParser)
 *  - EmersonParser_logicalANDExpressionNoIn_return      pEmersonParser->logicalANDExpressionNoIn(pEmersonParser)
 *  - EmersonParser_bitwiseORExpression_return      pEmersonParser->bitwiseORExpression(pEmersonParser)
 *  - EmersonParser_bitwiseORExpressionNoIn_return      pEmersonParser->bitwiseORExpressionNoIn(pEmersonParser)
 *  - EmersonParser_bitwiseXORExpression_return      pEmersonParser->bitwiseXORExpression(pEmersonParser)
 *  - EmersonParser_bitwiseXORExpressionNoIn_return      pEmersonParser->bitwiseXORExpressionNoIn(pEmersonParser)
 *  - EmersonParser_bitwiseANDExpression_return      pEmersonParser->bitwiseANDExpression(pEmersonParser)
 *  - EmersonParser_bitwiseANDExpressionNoIn_return      pEmersonParser->bitwiseANDExpressionNoIn(pEmersonParser)
 *  - EmersonParser_equalityExpression_return      pEmersonParser->equalityExpression(pEmersonParser)
 *  - EmersonParser_equalityOps_return      pEmersonParser->equalityOps(pEmersonParser)
 *  - EmersonParser_equalityExpressionNoIn_return      pEmersonParser->equalityExpressionNoIn(pEmersonParser)
 *  - EmersonParser_relationalOps_return      pEmersonParser->relationalOps(pEmersonParser)
 *  - EmersonParser_relationalExpression_return      pEmersonParser->relationalExpression(pEmersonParser)
 *  - EmersonParser_relationalOpsNoIn_return      pEmersonParser->relationalOpsNoIn(pEmersonParser)
 *  - EmersonParser_relationalExpressionNoIn_return      pEmersonParser->relationalExpressionNoIn(pEmersonParser)
 *  - EmersonParser_shiftOps_return      pEmersonParser->shiftOps(pEmersonParser)
 *  - EmersonParser_shiftExpression_return      pEmersonParser->shiftExpression(pEmersonParser)
 *  - EmersonParser_addOps_return      pEmersonParser->addOps(pEmersonParser)
 *  - EmersonParser_additiveExpression_return      pEmersonParser->additiveExpression(pEmersonParser)
 *  - EmersonParser_multOps_return      pEmersonParser->multOps(pEmersonParser)
 *  - EmersonParser_multiplicativeExpression_return      pEmersonParser->multiplicativeExpression(pEmersonParser)
 *  - EmersonParser_postfixExpression_return      pEmersonParser->postfixExpression(pEmersonParser)
 *  - EmersonParser_unaryOps_return      pEmersonParser->unaryOps(pEmersonParser)
 *  - EmersonParser_unaryExpression_return      pEmersonParser->unaryExpression(pEmersonParser)
 *  - EmersonParser_primaryExpression_return      pEmersonParser->primaryExpression(pEmersonParser)
 *  - EmersonParser_vectorLiteral_return      pEmersonParser->vectorLiteral(pEmersonParser)
 *  - EmersonParser_dollarExpression_return      pEmersonParser->dollarExpression(pEmersonParser)
 *  - EmersonParser_arrayLiteral_return      pEmersonParser->arrayLiteral(pEmersonParser)
 *  - EmersonParser_objectLiteral_return      pEmersonParser->objectLiteral(pEmersonParser)
 *  - EmersonParser_patternLiteral_return      pEmersonParser->patternLiteral(pEmersonParser)
 *  - EmersonParser_propertyNameAndValue_return      pEmersonParser->propertyNameAndValue(pEmersonParser)
 *  - EmersonParser_nameValueProto_return      pEmersonParser->nameValueProto(pEmersonParser)
 *  - EmersonParser_propertyName_return      pEmersonParser->propertyName(pEmersonParser)
 *  - EmersonParser_literal_return      pEmersonParser->literal(pEmersonParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_EmersonParser_H
#define _EmersonParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct EmersonParser_Ctx_struct EmersonParser, * pEmersonParser;



  #include <stdlib.h>
  #include <stdio.h>
  #include "Util.h"


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct EmersonParser_program_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_program_return;

typedef struct EmersonParser_sourceElements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_sourceElements_return;

typedef struct EmersonParser_sourceElement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_sourceElement_return;

typedef struct EmersonParser_functionDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_functionDeclaration_return;

typedef struct EmersonParser_functionExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_functionExpression_return;

typedef struct EmersonParser_formalParameterList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_formalParameterList_return;

typedef struct EmersonParser_functionBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_functionBody_return;

typedef struct EmersonParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_statement_return;

typedef struct EmersonParser_statementBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_statementBlock_return;

typedef struct EmersonParser_noOpStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_noOpStatement_return;

typedef struct EmersonParser_statementList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_statementList_return;

typedef struct EmersonParser_variableStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_variableStatement_return;

typedef struct EmersonParser_variableDeclarationList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_variableDeclarationList_return;

typedef struct EmersonParser_variableDeclarationListNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_variableDeclarationListNoIn_return;

typedef struct EmersonParser_variableDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_variableDeclaration_return;

typedef struct EmersonParser_variableDeclarationNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_variableDeclarationNoIn_return;

typedef struct EmersonParser_initialiser_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_initialiser_return;

typedef struct EmersonParser_initialiserNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_initialiserNoIn_return;

typedef struct EmersonParser_emptyStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_emptyStatement_return;

typedef struct EmersonParser_expressionStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_expressionStatement_return;

typedef struct EmersonParser_whenStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_whenStatement_return;

typedef struct EmersonParser_whenPred_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_whenPred_return;

typedef struct EmersonParser_whenCheckedListFirst_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_whenCheckedListFirst_return;

typedef struct EmersonParser_whenCheckedListSubsequent_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_whenCheckedListSubsequent_return;

typedef struct EmersonParser_ifStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_ifStatement_return;

typedef struct EmersonParser_iterationStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_iterationStatement_return;

typedef struct EmersonParser_doWhileStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_doWhileStatement_return;

typedef struct EmersonParser_whileStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_whileStatement_return;

typedef struct EmersonParser_forStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_forStatement_return;

typedef struct EmersonParser_forStatementInitialiserPart_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_forStatementInitialiserPart_return;

typedef struct EmersonParser_forInStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_forInStatement_return;

typedef struct EmersonParser_forInStatementInitialiserPart_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_forInStatementInitialiserPart_return;

typedef struct EmersonParser_continueStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_continueStatement_return;

typedef struct EmersonParser_breakStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_breakStatement_return;

typedef struct EmersonParser_returnStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_returnStatement_return;

typedef struct EmersonParser_withStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_withStatement_return;

typedef struct EmersonParser_labelledStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_labelledStatement_return;

typedef struct EmersonParser_switchStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_switchStatement_return;

typedef struct EmersonParser_caseBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_caseBlock_return;

typedef struct EmersonParser_caseClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_caseClause_return;

typedef struct EmersonParser_defaultClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_defaultClause_return;

typedef struct EmersonParser_throwStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_throwStatement_return;

typedef struct EmersonParser_tryStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_tryStatement_return;

typedef struct EmersonParser_catchFinallyBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_catchFinallyBlock_return;

typedef struct EmersonParser_catchBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_catchBlock_return;

typedef struct EmersonParser_finallyBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_finallyBlock_return;

typedef struct EmersonParser_msgSendStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_msgSendStatement_return;

typedef struct EmersonParser_memAndCallExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_memAndCallExpression_return;

typedef struct EmersonParser_msgRecvStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_msgRecvStatement_return;

typedef struct EmersonParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_expression_return;

typedef struct EmersonParser_expressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_expressionNoIn_return;

typedef struct EmersonParser_assignmentExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_assignmentExpression_return;

typedef struct EmersonParser_assignmentExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_assignmentExpressionNoIn_return;

typedef struct EmersonParser_leftHandSideExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_leftHandSideExpression_return;

typedef struct EmersonParser_newExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_newExpression_return;

typedef struct EmersonParser_indexSuffix1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_indexSuffix1_return;

typedef struct EmersonParser_propertyReferenceSuffix1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_propertyReferenceSuffix1_return;

typedef struct EmersonParser_memberExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_memberExpression_return;

typedef struct EmersonParser_memberExpressionSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_memberExpressionSuffix_return;

typedef struct EmersonParser_callExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_callExpression_return;

typedef struct EmersonParser_callExpressionSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_callExpressionSuffix_return;

typedef struct EmersonParser_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_arguments_return;

typedef struct EmersonParser_indexSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_indexSuffix_return;

typedef struct EmersonParser_propertyReferenceSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_propertyReferenceSuffix_return;

typedef struct EmersonParser_assignmentOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_assignmentOperator_return;

typedef struct EmersonParser_conditionalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_conditionalExpression_return;

typedef struct EmersonParser_conditionalExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_conditionalExpressionNoIn_return;

typedef struct EmersonParser_logicalORExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_logicalORExpression_return;

typedef struct EmersonParser_logicalANDExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_logicalANDExpression_return;

typedef struct EmersonParser_logicalORExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_logicalORExpressionNoIn_return;

typedef struct EmersonParser_logicalANDExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_logicalANDExpressionNoIn_return;

typedef struct EmersonParser_bitwiseORExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_bitwiseORExpression_return;

typedef struct EmersonParser_bitwiseORExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_bitwiseORExpressionNoIn_return;

typedef struct EmersonParser_bitwiseXORExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_bitwiseXORExpression_return;

typedef struct EmersonParser_bitwiseXORExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_bitwiseXORExpressionNoIn_return;

typedef struct EmersonParser_bitwiseANDExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_bitwiseANDExpression_return;

typedef struct EmersonParser_bitwiseANDExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_bitwiseANDExpressionNoIn_return;

typedef struct EmersonParser_equalityExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_equalityExpression_return;

typedef struct EmersonParser_equalityOps_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_equalityOps_return;

typedef struct EmersonParser_equalityExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_equalityExpressionNoIn_return;

typedef struct EmersonParser_relationalOps_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_relationalOps_return;

typedef struct EmersonParser_relationalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_relationalExpression_return;

typedef struct EmersonParser_relationalOpsNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_relationalOpsNoIn_return;

typedef struct EmersonParser_relationalExpressionNoIn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_relationalExpressionNoIn_return;

typedef struct EmersonParser_shiftOps_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_shiftOps_return;

typedef struct EmersonParser_shiftExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_shiftExpression_return;

typedef struct EmersonParser_addOps_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_addOps_return;

typedef struct EmersonParser_additiveExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_additiveExpression_return;

typedef struct EmersonParser_multOps_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_multOps_return;

typedef struct EmersonParser_multiplicativeExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_multiplicativeExpression_return;

typedef struct EmersonParser_postfixExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_postfixExpression_return;

typedef struct EmersonParser_unaryOps_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_unaryOps_return;

typedef struct EmersonParser_unaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_unaryExpression_return;

typedef struct EmersonParser_primaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_primaryExpression_return;

typedef struct EmersonParser_vectorLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_vectorLiteral_return;

typedef struct EmersonParser_dollarExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_dollarExpression_return;

typedef struct EmersonParser_arrayLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_arrayLiteral_return;

typedef struct EmersonParser_objectLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_objectLiteral_return;

typedef struct EmersonParser_patternLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_patternLiteral_return;

typedef struct EmersonParser_propertyNameAndValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_propertyNameAndValue_return;

typedef struct EmersonParser_nameValueProto_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_nameValueProto_return;

typedef struct EmersonParser_propertyName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_propertyName_return;

typedef struct EmersonParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    EmersonParser_literal_return;



/** Context tracking structure for EmersonParser
 */
struct EmersonParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     EmersonParser_program_return (*program)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_sourceElements_return (*sourceElements)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_sourceElement_return (*sourceElement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_functionDeclaration_return (*functionDeclaration)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_functionExpression_return (*functionExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_formalParameterList_return (*formalParameterList)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_functionBody_return (*functionBody)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_statement_return (*statement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_statementBlock_return (*statementBlock)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_noOpStatement_return (*noOpStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_statementList_return (*statementList)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_variableStatement_return (*variableStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_variableDeclarationList_return (*variableDeclarationList)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_variableDeclarationListNoIn_return (*variableDeclarationListNoIn)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_variableDeclaration_return (*variableDeclaration)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_variableDeclarationNoIn_return (*variableDeclarationNoIn)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_initialiser_return (*initialiser)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_initialiserNoIn_return (*initialiserNoIn)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_emptyStatement_return (*emptyStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_expressionStatement_return (*expressionStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_whenStatement_return (*whenStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_whenPred_return (*whenPred)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_whenCheckedListFirst_return (*whenCheckedListFirst)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_whenCheckedListSubsequent_return (*whenCheckedListSubsequent)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_ifStatement_return (*ifStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_iterationStatement_return (*iterationStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_doWhileStatement_return (*doWhileStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_whileStatement_return (*whileStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_forStatement_return (*forStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_forStatementInitialiserPart_return (*forStatementInitialiserPart)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_forInStatement_return (*forInStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_forInStatementInitialiserPart_return (*forInStatementInitialiserPart)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_continueStatement_return (*continueStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_breakStatement_return (*breakStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_returnStatement_return (*returnStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_withStatement_return (*withStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_labelledStatement_return (*labelledStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_switchStatement_return (*switchStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_caseBlock_return (*caseBlock)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_caseClause_return (*caseClause)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_defaultClause_return (*defaultClause)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_throwStatement_return (*throwStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_tryStatement_return (*tryStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_catchFinallyBlock_return (*catchFinallyBlock)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_catchBlock_return (*catchBlock)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_finallyBlock_return (*finallyBlock)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_msgSendStatement_return (*msgSendStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_memAndCallExpression_return (*memAndCallExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_msgRecvStatement_return (*msgRecvStatement)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_expression_return (*expression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_expressionNoIn_return (*expressionNoIn)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_assignmentExpression_return (*assignmentExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_assignmentExpressionNoIn_return (*assignmentExpressionNoIn)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_leftHandSideExpression_return (*leftHandSideExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_newExpression_return (*newExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_indexSuffix1_return (*indexSuffix1)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_propertyReferenceSuffix1_return (*propertyReferenceSuffix1)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_memberExpression_return (*memberExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_memberExpressionSuffix_return (*memberExpressionSuffix)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_callExpression_return (*callExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_callExpressionSuffix_return (*callExpressionSuffix)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_arguments_return (*arguments)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_indexSuffix_return (*indexSuffix)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_propertyReferenceSuffix_return (*propertyReferenceSuffix)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_assignmentOperator_return (*assignmentOperator)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_conditionalExpression_return (*conditionalExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_conditionalExpressionNoIn_return (*conditionalExpressionNoIn)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_logicalORExpression_return (*logicalORExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_logicalANDExpression_return (*logicalANDExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_logicalORExpressionNoIn_return (*logicalORExpressionNoIn)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_logicalANDExpressionNoIn_return (*logicalANDExpressionNoIn)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_bitwiseORExpression_return (*bitwiseORExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_bitwiseORExpressionNoIn_return (*bitwiseORExpressionNoIn)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_bitwiseXORExpression_return (*bitwiseXORExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_bitwiseXORExpressionNoIn_return (*bitwiseXORExpressionNoIn)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_bitwiseANDExpression_return (*bitwiseANDExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_bitwiseANDExpressionNoIn_return (*bitwiseANDExpressionNoIn)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_equalityExpression_return (*equalityExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_equalityOps_return (*equalityOps)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_equalityExpressionNoIn_return (*equalityExpressionNoIn)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_relationalOps_return (*relationalOps)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_relationalExpression_return (*relationalExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_relationalOpsNoIn_return (*relationalOpsNoIn)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_relationalExpressionNoIn_return (*relationalExpressionNoIn)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_shiftOps_return (*shiftOps)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_shiftExpression_return (*shiftExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_addOps_return (*addOps)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_additiveExpression_return (*additiveExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_multOps_return (*multOps)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_multiplicativeExpression_return (*multiplicativeExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_postfixExpression_return (*postfixExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_unaryOps_return (*unaryOps)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_unaryExpression_return (*unaryExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_primaryExpression_return (*primaryExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_vectorLiteral_return (*vectorLiteral)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_dollarExpression_return (*dollarExpression)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_arrayLiteral_return (*arrayLiteral)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_objectLiteral_return (*objectLiteral)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_patternLiteral_return (*patternLiteral)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_propertyNameAndValue_return (*propertyNameAndValue)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_nameValueProto_return (*nameValueProto)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_propertyName_return (*propertyName)	(struct EmersonParser_Ctx_struct * ctx);
     EmersonParser_literal_return (*literal)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred1_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred4_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred8_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred11_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred14_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred22_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred24_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred25_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred26_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred28_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred29_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred36_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred41_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred44_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred46_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred56_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred58_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred73_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred77_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred79_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred80_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred83_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred84_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred91_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred102_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred110_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred122_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred124_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred138_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred141_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred146_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred157_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred161_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred166_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred167_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred172_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred173_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred179_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred181_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred184_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred186_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred191_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred193_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred197_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred199_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred201_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred204_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred207_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred282_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred298_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred304_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred305_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred321_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred322_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred333_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred336_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred341_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred344_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred349_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred352_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred353_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred354_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred363_Emerson)	(struct EmersonParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct EmersonParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pEmersonParser EmersonParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pEmersonParser EmersonParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define T__159      159
#define T__158      158
#define MOD      75
#define T__160      160
#define DO      14
#define LEFT_SHIFT_ASSIGN      47
#define NOT      87
#define COND_EXPR_NOIN      95
#define T__167      167
#define TRIPLE_SHIFT      70
#define EOF      -1
#define T__168      168
#define T__165      165
#define T__166      166
#define T__163      163
#define T__164      164
#define UNARY_PLUS      84
#define T__161      161
#define SingleStringCharacter      112
#define T__162      162
#define T__148      148
#define T__147      147
#define T__149      149
#define PATTERN_LITERAL      101
#define INSTANCE_OF      66
#define RETURN      23
#define UnicodeLetter      127
#define NOOP      31
#define WhiteSpace      133
#define MESSAGE_SEND      98
#define T__154      154
#define T__155      155
#define T__156      156
#define T__157      157
#define T__150      150
#define T__151      151
#define T__152      152
#define UnicodeCombiningMark      130
#define T__153      153
#define T__139      139
#define LTERM      107
#define T__138      138
#define UnicodeDigit      128
#define T__137      137
#define T__136      136
#define NumericLiteral      110
#define UNARY_MINUS      85
#define DoubleStringCharacter      111
#define VALUE      105
#define T__141      141
#define T__142      142
#define T__140      140
#define BLANK_NAME_VAL_PROT      103
#define T__145      145
#define T__146      146
#define T__143      143
#define T__144      144
#define TYPEOF      81
#define COND_EXPR      94
#define LESS_THAN      62
#define COMPLEMENT      86
#define LEFT_SHIFT      68
#define NAME_VALUE      78
#define CALL      5
#define CharacterEscapeSequence      114
#define T__134      134
#define T__135      135
#define PLUSPLUS      82
#define SUB      72
#define HexDigit      121
#define NOT_EQUALS      59
#define PAREN      100
#define T__202      202
#define T__203      203
#define T__204      204
#define T__205      205
#define T__206      206
#define T__207      207
#define T__208      208
#define T__209      209
#define WHEN_CHECKED_LIST_SUBSEQUENT      28
#define ARRAY_INDEX      6
#define RIGHT_SHIFT_ASSIGN      48
#define SLIST      9
#define IDENT      60
#define T__210      210
#define T__212      212
#define T__211      211
#define GREATER_THAN      63
#define EXP_ASSIGN      51
#define UnicodeEscapeSequence      116
#define FUNC_DECL      90
#define NOT_IDENT      61
#define StringLiteral      109
#define OR_ASSIGN      52
#define FORCOND      18
#define VECTOR      30
#define WHEN      26
#define HexIntegerLiteral      123
#define NonEscapeCharacter      118
#define LESS_THAN_EQUAL      64
#define DOLLAR_EXPRESSION      32
#define DIV      74
#define SUB_ASSIGN      46
#define WHEN_PRED      29
#define OBJ_LITERAL      77
#define WHILE      15
#define MOD_ASSIGN      44
#define CASE      39
#define NEW      25
#define MINUSMINUS      83
#define ARGLIST      92
#define EQUALS      58
#define ARRAY_LITERAL      76
#define DecimalDigit      120
#define FUNC_EXPR      91
#define DIV_ASSIGN      43
#define BREAK      21
#define Identifier      108
#define NAME      104
#define BIT_OR      55
#define Comment      131
#define EXP      56
#define NAME_VALUE_PROTO      102
#define SingleEscapeCharacter      117
#define WHEN_CHECKED_LIST_FIRST      27
#define ExponentPart      124
#define VAR      12
#define VOID      80
#define FORINIT      17
#define GREATER_THAN_EQUAL      65
#define ADD_ASSIGN      45
#define SWITCH      38
#define ADD_OP      71
#define IdentifierStart      125
#define FUNC_PARAMS      89
#define MULT      73
#define EMPTY_FUNC_BODY      97
#define TRY      33
#define T__200      200
#define T__201      201
#define FUNC      8
#define OR      53
#define VARLIST      11
#define CATCH      35
#define MESSAGE_RECV      99
#define EscapeSequence      113
#define THROW      34
#define UnicodeConnectorPunctuation      129
#define DELETE_OP      79
#define HexEscapeSequence      115
#define BIT_AND      57
#define MULT_ASSIGN      42
#define LineComment      132
#define FOR      16
#define AND      54
#define AND_ASSIGN      50
#define IF      10
#define EXPR_LIST      93
#define T__199      199
#define T__198      198
#define PROG      13
#define T__197      197
#define T__196      196
#define IN      67
#define T__195      195
#define T__194      194
#define T__193      193
#define CONTINUE      22
#define T__192      192
#define T__191      191
#define T__190      190
#define FORITER      19
#define RIGHT_SHIFT      69
#define EscapeCharacter      119
#define UNDEF      4
#define DOT      7
#define TERNARYOP      96
#define IdentifierPart      126
#define WITH      24
#define T__184      184
#define T__183      183
#define T__186      186
#define T__185      185
#define T__188      188
#define T__187      187
#define T__189      189
#define T__180      180
#define T__182      182
#define DEFAULT      37
#define T__181      181
#define POSTEXPR      88
#define TRIPLE_SHIFT_ASSIGN      49
#define FORIN      20
#define DecimalLiteral      122
#define T__175      175
#define T__174      174
#define T__173      173
#define T__172      172
#define T__179      179
#define T__178      178
#define T__177      177
#define T__176      176
#define FINALLY      36
#define LABEL      40
#define T__171      171
#define T__170      170
#define ASSIGN      41
#define T__169      169
#define PROTO      106
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for EmersonParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
