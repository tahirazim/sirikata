/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//Emerson.g
 *     -                            On : 2011-08-30 16:29:05
 *     -                for the parser : EmersonParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

  #include <stdlib.h>
  #include <stdio.h>
  #include "Util.h"

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "EmersonParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pEmersonParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pEmersonParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pEmersonParser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   EmersonParserTokenNames[212+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "UNDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "ARRAY_INDEX",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "SLIST",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "VARLIST",
        (pANTLR3_UINT8) "VAR",
        (pANTLR3_UINT8) "PROG",
        (pANTLR3_UINT8) "DO",
        (pANTLR3_UINT8) "WHILE",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FORINIT",
        (pANTLR3_UINT8) "FORCOND",
        (pANTLR3_UINT8) "FORITER",
        (pANTLR3_UINT8) "FORIN",
        (pANTLR3_UINT8) "BREAK",
        (pANTLR3_UINT8) "CONTINUE",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "NEW",
        (pANTLR3_UINT8) "WHEN",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_FIRST",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_SUBSEQUENT",
        (pANTLR3_UINT8) "WHEN_PRED",
        (pANTLR3_UINT8) "VECTOR",
        (pANTLR3_UINT8) "QUATERNION",
        (pANTLR3_UINT8) "QUATERNION_AXISANGLE",
        (pANTLR3_UINT8) "NOOP",
        (pANTLR3_UINT8) "STATEMENT_BLOCK",
        (pANTLR3_UINT8) "DOLLAR_EXPRESSION",
        (pANTLR3_UINT8) "TRY",
        (pANTLR3_UINT8) "THROW",
        (pANTLR3_UINT8) "CATCH",
        (pANTLR3_UINT8) "FINALLY",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "SWITCH",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "CASE_BLOCK",
        (pANTLR3_UINT8) "LABEL",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "MULT_ASSIGN",
        (pANTLR3_UINT8) "DIV_ASSIGN",
        (pANTLR3_UINT8) "MOD_ASSIGN",
        (pANTLR3_UINT8) "ADD_ASSIGN",
        (pANTLR3_UINT8) "SUB_ASSIGN",
        (pANTLR3_UINT8) "AND_ASSIGN",
        (pANTLR3_UINT8) "EXP_ASSIGN",
        (pANTLR3_UINT8) "OR_ASSIGN",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "EXP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "EQUALS",
        (pANTLR3_UINT8) "NOT_EQUALS",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "NOT_IDENT",
        (pANTLR3_UINT8) "LESS_THAN",
        (pANTLR3_UINT8) "GREATER_THAN",
        (pANTLR3_UINT8) "LESS_THAN_EQUAL",
        (pANTLR3_UINT8) "GREATER_THAN_EQUAL",
        (pANTLR3_UINT8) "INSTANCE_OF",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "ADD_OP",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "MULT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "ARRAY_LITERAL",
        (pANTLR3_UINT8) "OBJ_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE",
        (pANTLR3_UINT8) "DELETE_OP",
        (pANTLR3_UINT8) "VOID",
        (pANTLR3_UINT8) "TYPEOF",
        (pANTLR3_UINT8) "EVAL",
        (pANTLR3_UINT8) "PLUSPLUS",
        (pANTLR3_UINT8) "MINUSMINUS",
        (pANTLR3_UINT8) "UNARY_PLUS",
        (pANTLR3_UINT8) "UNARY_MINUS",
        (pANTLR3_UINT8) "COMPLEMENT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "POSTEXPR",
        (pANTLR3_UINT8) "FUNC_PARAMS",
        (pANTLR3_UINT8) "FUNC_DECL",
        (pANTLR3_UINT8) "FUNC_EXPR",
        (pANTLR3_UINT8) "ARGLIST",
        (pANTLR3_UINT8) "TERNARYOP",
        (pANTLR3_UINT8) "TERNARYOP_NO_IN",
        (pANTLR3_UINT8) "EMPTY_FUNC_BODY",
        (pANTLR3_UINT8) "MESSAGE_RECV_NO_SENDER_NO_IN",
        (pANTLR3_UINT8) "MESSAGE_RECV_AND_SENDER_NO_IN",
        (pANTLR3_UINT8) "MESSAGE_RECV_NO_SENDER",
        (pANTLR3_UINT8) "MESSAGE_RECV_AND_SENDER",
        (pANTLR3_UINT8) "PAREN",
        (pANTLR3_UINT8) "PATTERN_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE_PROTO",
        (pANTLR3_UINT8) "BLANK_NAME_VAL_PROT",
        (pANTLR3_UINT8) "NAME",
        (pANTLR3_UINT8) "VALUE",
        (pANTLR3_UINT8) "PROTO",
        (pANTLR3_UINT8) "EXPR",
        (pANTLR3_UINT8) "EXPR_NO_IN",
        (pANTLR3_UINT8) "VERBATIM",
        (pANTLR3_UINT8) "SEND_CONSTRUCT",
        (pANTLR3_UINT8) "SENDER_CONSTRUCT",
        (pANTLR3_UINT8) "SEND_CONSTRUCT_NO_IN",
        (pANTLR3_UINT8) "SENDER_CONSTRUCT_NO_IN",
        (pANTLR3_UINT8) "LTERM",
        (pANTLR3_UINT8) "Identifier",
        (pANTLR3_UINT8) "NumericLiteral",
        (pANTLR3_UINT8) "StringLiteral",
        (pANTLR3_UINT8) "VerbatimStringCharacter",
        (pANTLR3_UINT8) "DoubleStringCharacter",
        (pANTLR3_UINT8) "SingleStringCharacter",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "CharacterEscapeSequence",
        (pANTLR3_UINT8) "HexEscapeSequence",
        (pANTLR3_UINT8) "UnicodeEscapeSequence",
        (pANTLR3_UINT8) "SingleEscapeCharacter",
        (pANTLR3_UINT8) "NonEscapeCharacter",
        (pANTLR3_UINT8) "EscapeCharacter",
        (pANTLR3_UINT8) "DecimalDigit",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "DecimalLiteral",
        (pANTLR3_UINT8) "HexIntegerLiteral",
        (pANTLR3_UINT8) "ExponentPart",
        (pANTLR3_UINT8) "IdentifierStart",
        (pANTLR3_UINT8) "IdentifierPart",
        (pANTLR3_UINT8) "UnicodeLetter",
        (pANTLR3_UINT8) "UnicodeDigit",
        (pANTLR3_UINT8) "UnicodeConnectorPunctuation",
        (pANTLR3_UINT8) "UnicodeCombiningMark",
        (pANTLR3_UINT8) "Comment",
        (pANTLR3_UINT8) "LineComment",
        (pANTLR3_UINT8) "WhiteSpace",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'var'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'with'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'throw'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'finally'",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'&='",
        (pANTLR3_UINT8) "'^='",
        (pANTLR3_UINT8) "'|='",
        (pANTLR3_UINT8) "'<<'",
        (pANTLR3_UINT8) "'>>'",
        (pANTLR3_UINT8) "'#'",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'^'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'==='",
        (pANTLR3_UINT8) "'!=='",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'instanceof'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'delete'",
        (pANTLR3_UINT8) "'void'",
        (pANTLR3_UINT8) "'typeof'",
        (pANTLR3_UINT8) "'eval'",
        (pANTLR3_UINT8) "'~'",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'`'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static EmersonParser_program_return	program    (pEmersonParser ctx);
static EmersonParser_sourceElements_return	sourceElements    (pEmersonParser ctx);
static EmersonParser_sourceElement_return	sourceElement    (pEmersonParser ctx);
static EmersonParser_functionDeclaration_return	functionDeclaration    (pEmersonParser ctx);
static EmersonParser_functionExpression_return	functionExpression    (pEmersonParser ctx);
static EmersonParser_formalParameterList_return	formalParameterList    (pEmersonParser ctx);
static EmersonParser_functionBody_return	functionBody    (pEmersonParser ctx);
static EmersonParser_statement_return	statement    (pEmersonParser ctx);
static EmersonParser_statementBlock_return	statementBlock    (pEmersonParser ctx);
static EmersonParser_emptyStatement_return	emptyStatement    (pEmersonParser ctx);
static EmersonParser_statementList_return	statementList    (pEmersonParser ctx);
static EmersonParser_variableStatement_return	variableStatement    (pEmersonParser ctx);
static EmersonParser_variableDeclarationList_return	variableDeclarationList    (pEmersonParser ctx);
static EmersonParser_variableDeclarationListNoIn_return	variableDeclarationListNoIn    (pEmersonParser ctx);
static EmersonParser_variableDeclaration_return	variableDeclaration    (pEmersonParser ctx);
static EmersonParser_variableDeclarationNoIn_return	variableDeclarationNoIn    (pEmersonParser ctx);
static EmersonParser_initialiser_return	initialiser    (pEmersonParser ctx);
static EmersonParser_initialiserNoIn_return	initialiserNoIn    (pEmersonParser ctx);
static EmersonParser_expressionStatement_return	expressionStatement    (pEmersonParser ctx);
static EmersonParser_ifStatement_return	ifStatement    (pEmersonParser ctx);
static EmersonParser_iterationStatement_return	iterationStatement    (pEmersonParser ctx);
static EmersonParser_doWhileStatement_return	doWhileStatement    (pEmersonParser ctx);
static EmersonParser_whileStatement_return	whileStatement    (pEmersonParser ctx);
static EmersonParser_forStatement_return	forStatement    (pEmersonParser ctx);
static EmersonParser_forStatementInitialiserPart_return	forStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_forInStatement_return	forInStatement    (pEmersonParser ctx);
static EmersonParser_forInStatementInitialiserPart_return	forInStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_continueStatement_return	continueStatement    (pEmersonParser ctx);
static EmersonParser_breakStatement_return	breakStatement    (pEmersonParser ctx);
static EmersonParser_returnStatement_return	returnStatement    (pEmersonParser ctx);
static EmersonParser_withStatement_return	withStatement    (pEmersonParser ctx);
static EmersonParser_switchStatement_return	switchStatement    (pEmersonParser ctx);
static EmersonParser_caseBlock_return	caseBlock    (pEmersonParser ctx);
static EmersonParser_caseClause_return	caseClause    (pEmersonParser ctx);
static EmersonParser_defaultClause_return	defaultClause    (pEmersonParser ctx);
static EmersonParser_caseClauseSeenDefault_return	caseClauseSeenDefault    (pEmersonParser ctx);
static EmersonParser_throwStatement_return	throwStatement    (pEmersonParser ctx);
static EmersonParser_tryStatement_return	tryStatement    (pEmersonParser ctx);
static EmersonParser_catchFinallyBlock_return	catchFinallyBlock    (pEmersonParser ctx);
static EmersonParser_catchBlock_return	catchBlock    (pEmersonParser ctx);
static EmersonParser_finallyBlock_return	finallyBlock    (pEmersonParser ctx);
static EmersonParser_memAndCallExpression_return	memAndCallExpression    (pEmersonParser ctx);
static EmersonParser_expression_return	expression    (pEmersonParser ctx);
static EmersonParser_expressionNoIn_return	expressionNoIn    (pEmersonParser ctx);
static EmersonParser_assignmentExpression_return	assignmentExpression    (pEmersonParser ctx);
static EmersonParser_assignmentExpressionNoIn_return	assignmentExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_leftHandSideExpression_return	leftHandSideExpression    (pEmersonParser ctx);
static EmersonParser_newExpression_return	newExpression    (pEmersonParser ctx);
static EmersonParser_indexSuffix1_return	indexSuffix1    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix1_return	propertyReferenceSuffix1    (pEmersonParser ctx);
static EmersonParser_memberExpression_return	memberExpression    (pEmersonParser ctx);
static EmersonParser_memberExpressionSuffix_return	memberExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_callExpression_return	callExpression    (pEmersonParser ctx);
static EmersonParser_callExpressionSuffix_return	callExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_arguments_return	arguments    (pEmersonParser ctx);
static EmersonParser_indexSuffix_return	indexSuffix    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix_return	propertyReferenceSuffix    (pEmersonParser ctx);
static EmersonParser_assignmentOperator_return	assignmentOperator    (pEmersonParser ctx);
static EmersonParser_conditionalExpression_return	conditionalExpression    (pEmersonParser ctx);
static EmersonParser_msgRecvConstruct_return	msgRecvConstruct    (pEmersonParser ctx);
static EmersonParser_msgConstruct_return	msgConstruct    (pEmersonParser ctx);
static EmersonParser_msgSenderConstruct_return	msgSenderConstruct    (pEmersonParser ctx);
static EmersonParser_ternaryExpression_return	ternaryExpression    (pEmersonParser ctx);
static EmersonParser_conditionalExpressionNoIn_return	conditionalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_msgRecvConstructNoIn_return	msgRecvConstructNoIn    (pEmersonParser ctx);
static EmersonParser_msgConstructNoIn_return	msgConstructNoIn    (pEmersonParser ctx);
static EmersonParser_msgSenderConstructNoIn_return	msgSenderConstructNoIn    (pEmersonParser ctx);
static EmersonParser_ternaryExpressionNoIn_return	ternaryExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalORExpression_return	logicalORExpression    (pEmersonParser ctx);
static EmersonParser_logicalANDExpression_return	logicalANDExpression    (pEmersonParser ctx);
static EmersonParser_logicalORExpressionNoIn_return	logicalORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalANDExpressionNoIn_return	logicalANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpression_return	bitwiseORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpressionNoIn_return	bitwiseORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpression_return	bitwiseXORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpressionNoIn_return	bitwiseXORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpression_return	bitwiseANDExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpressionNoIn_return	bitwiseANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_equalityExpression_return	equalityExpression    (pEmersonParser ctx);
static EmersonParser_equalityOps_return	equalityOps    (pEmersonParser ctx);
static EmersonParser_equalityExpressionNoIn_return	equalityExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_relationalOps_return	relationalOps    (pEmersonParser ctx);
static EmersonParser_relationalExpression_return	relationalExpression    (pEmersonParser ctx);
static EmersonParser_relationalOpsNoIn_return	relationalOpsNoIn    (pEmersonParser ctx);
static EmersonParser_addOps_return	addOps    (pEmersonParser ctx);
static EmersonParser_relationalExpressionNoIn_return	relationalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_additiveExpression_return	additiveExpression    (pEmersonParser ctx);
static EmersonParser_multOps_return	multOps    (pEmersonParser ctx);
static EmersonParser_multiplicativeExpression_return	multiplicativeExpression    (pEmersonParser ctx);
static EmersonParser_postfixExpression_return	postfixExpression    (pEmersonParser ctx);
static EmersonParser_unaryOps_return	unaryOps    (pEmersonParser ctx);
static EmersonParser_unaryExpression_return	unaryExpression    (pEmersonParser ctx);
static EmersonParser_primaryExpression_return	primaryExpression    (pEmersonParser ctx);
static EmersonParser_vectorLiteral_return	vectorLiteral    (pEmersonParser ctx);
static EmersonParser_quaternionLiteral_return	quaternionLiteral    (pEmersonParser ctx);
static EmersonParser_vectorLiteralField_return	vectorLiteralField    (pEmersonParser ctx);
static EmersonParser_dollarExpression_return	dollarExpression    (pEmersonParser ctx);
static EmersonParser_arrayLiteral_return	arrayLiteral    (pEmersonParser ctx);
static EmersonParser_objectLiteral_return	objectLiteral    (pEmersonParser ctx);
static EmersonParser_patternLiteral_return	patternLiteral    (pEmersonParser ctx);
static EmersonParser_propertyNameAndValue_return	propertyNameAndValue    (pEmersonParser ctx);
static EmersonParser_nameValueProto_return	nameValueProto    (pEmersonParser ctx);
static EmersonParser_propertyName_return	propertyName    (pEmersonParser ctx);
static EmersonParser_literal_return	literal    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred1_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred4_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred8_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred11_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred14_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred22_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred24_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred26_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred28_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred36_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred40_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred50_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred52_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred60_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred62_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred63_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred66_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred67_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred74_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred85_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred93_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred105_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred110_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred118_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred121_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred124_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred126_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred129_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred131_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred135_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred137_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred142_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred150_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred152_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred154_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred155_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred158_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred161_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred162_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred168_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred170_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred173_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred175_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred180_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred182_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred186_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred188_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred190_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred193_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred196_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred214_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred217_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred220_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred223_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred228_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred231_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred234_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred236_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred238_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred243_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred290_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred298_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred301_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred307_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred308_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred320_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred321_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred326_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred327_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred344_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred353_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred358_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred359_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred360_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred363_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred366_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred372_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred375_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred381_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred384_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred385_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred386_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred395_Emerson    (pEmersonParser ctx);
static void	EmersonParserFree(pEmersonParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = ".//Emerson.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return EmersonParserNewSSD(instream, NULL);
}

/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pEmersonParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pEmersonParser) ANTLR3_CALLOC(1, sizeof(EmersonParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in EmersonParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our EmersonParser interface
     */
    ctx->program	= program;
    ctx->sourceElements	= sourceElements;
    ctx->sourceElement	= sourceElement;
    ctx->functionDeclaration	= functionDeclaration;
    ctx->functionExpression	= functionExpression;
    ctx->formalParameterList	= formalParameterList;
    ctx->functionBody	= functionBody;
    ctx->statement	= statement;
    ctx->statementBlock	= statementBlock;
    ctx->emptyStatement	= emptyStatement;
    ctx->statementList	= statementList;
    ctx->variableStatement	= variableStatement;
    ctx->variableDeclarationList	= variableDeclarationList;
    ctx->variableDeclarationListNoIn	= variableDeclarationListNoIn;
    ctx->variableDeclaration	= variableDeclaration;
    ctx->variableDeclarationNoIn	= variableDeclarationNoIn;
    ctx->initialiser	= initialiser;
    ctx->initialiserNoIn	= initialiserNoIn;
    ctx->expressionStatement	= expressionStatement;
    ctx->ifStatement	= ifStatement;
    ctx->iterationStatement	= iterationStatement;
    ctx->doWhileStatement	= doWhileStatement;
    ctx->whileStatement	= whileStatement;
    ctx->forStatement	= forStatement;
    ctx->forStatementInitialiserPart	= forStatementInitialiserPart;
    ctx->forInStatement	= forInStatement;
    ctx->forInStatementInitialiserPart	= forInStatementInitialiserPart;
    ctx->continueStatement	= continueStatement;
    ctx->breakStatement	= breakStatement;
    ctx->returnStatement	= returnStatement;
    ctx->withStatement	= withStatement;
    ctx->switchStatement	= switchStatement;
    ctx->caseBlock	= caseBlock;
    ctx->caseClause	= caseClause;
    ctx->defaultClause	= defaultClause;
    ctx->caseClauseSeenDefault	= caseClauseSeenDefault;
    ctx->throwStatement	= throwStatement;
    ctx->tryStatement	= tryStatement;
    ctx->catchFinallyBlock	= catchFinallyBlock;
    ctx->catchBlock	= catchBlock;
    ctx->finallyBlock	= finallyBlock;
    ctx->memAndCallExpression	= memAndCallExpression;
    ctx->expression	= expression;
    ctx->expressionNoIn	= expressionNoIn;
    ctx->assignmentExpression	= assignmentExpression;
    ctx->assignmentExpressionNoIn	= assignmentExpressionNoIn;
    ctx->leftHandSideExpression	= leftHandSideExpression;
    ctx->newExpression	= newExpression;
    ctx->indexSuffix1	= indexSuffix1;
    ctx->propertyReferenceSuffix1	= propertyReferenceSuffix1;
    ctx->memberExpression	= memberExpression;
    ctx->memberExpressionSuffix	= memberExpressionSuffix;
    ctx->callExpression	= callExpression;
    ctx->callExpressionSuffix	= callExpressionSuffix;
    ctx->arguments	= arguments;
    ctx->indexSuffix	= indexSuffix;
    ctx->propertyReferenceSuffix	= propertyReferenceSuffix;
    ctx->assignmentOperator	= assignmentOperator;
    ctx->conditionalExpression	= conditionalExpression;
    ctx->msgRecvConstruct	= msgRecvConstruct;
    ctx->msgConstruct	= msgConstruct;
    ctx->msgSenderConstruct	= msgSenderConstruct;
    ctx->ternaryExpression	= ternaryExpression;
    ctx->conditionalExpressionNoIn	= conditionalExpressionNoIn;
    ctx->msgRecvConstructNoIn	= msgRecvConstructNoIn;
    ctx->msgConstructNoIn	= msgConstructNoIn;
    ctx->msgSenderConstructNoIn	= msgSenderConstructNoIn;
    ctx->ternaryExpressionNoIn	= ternaryExpressionNoIn;
    ctx->logicalORExpression	= logicalORExpression;
    ctx->logicalANDExpression	= logicalANDExpression;
    ctx->logicalORExpressionNoIn	= logicalORExpressionNoIn;
    ctx->logicalANDExpressionNoIn	= logicalANDExpressionNoIn;
    ctx->bitwiseORExpression	= bitwiseORExpression;
    ctx->bitwiseORExpressionNoIn	= bitwiseORExpressionNoIn;
    ctx->bitwiseXORExpression	= bitwiseXORExpression;
    ctx->bitwiseXORExpressionNoIn	= bitwiseXORExpressionNoIn;
    ctx->bitwiseANDExpression	= bitwiseANDExpression;
    ctx->bitwiseANDExpressionNoIn	= bitwiseANDExpressionNoIn;
    ctx->equalityExpression	= equalityExpression;
    ctx->equalityOps	= equalityOps;
    ctx->equalityExpressionNoIn	= equalityExpressionNoIn;
    ctx->relationalOps	= relationalOps;
    ctx->relationalExpression	= relationalExpression;
    ctx->relationalOpsNoIn	= relationalOpsNoIn;
    ctx->addOps	= addOps;
    ctx->relationalExpressionNoIn	= relationalExpressionNoIn;
    ctx->additiveExpression	= additiveExpression;
    ctx->multOps	= multOps;
    ctx->multiplicativeExpression	= multiplicativeExpression;
    ctx->postfixExpression	= postfixExpression;
    ctx->unaryOps	= unaryOps;
    ctx->unaryExpression	= unaryExpression;
    ctx->primaryExpression	= primaryExpression;
    ctx->vectorLiteral	= vectorLiteral;
    ctx->quaternionLiteral	= quaternionLiteral;
    ctx->vectorLiteralField	= vectorLiteralField;
    ctx->dollarExpression	= dollarExpression;
    ctx->arrayLiteral	= arrayLiteral;
    ctx->objectLiteral	= objectLiteral;
    ctx->patternLiteral	= patternLiteral;
    ctx->propertyNameAndValue	= propertyNameAndValue;
    ctx->nameValueProto	= nameValueProto;
    ctx->propertyName	= propertyName;
    ctx->literal	= literal;
    ctx->synpred1_Emerson	= synpred1_Emerson;
    ctx->synpred4_Emerson	= synpred4_Emerson;
    ctx->synpred8_Emerson	= synpred8_Emerson;
    ctx->synpred11_Emerson	= synpred11_Emerson;
    ctx->synpred14_Emerson	= synpred14_Emerson;
    ctx->synpred22_Emerson	= synpred22_Emerson;
    ctx->synpred24_Emerson	= synpred24_Emerson;
    ctx->synpred26_Emerson	= synpred26_Emerson;
    ctx->synpred28_Emerson	= synpred28_Emerson;
    ctx->synpred36_Emerson	= synpred36_Emerson;
    ctx->synpred40_Emerson	= synpred40_Emerson;
    ctx->synpred50_Emerson	= synpred50_Emerson;
    ctx->synpred52_Emerson	= synpred52_Emerson;
    ctx->synpred60_Emerson	= synpred60_Emerson;
    ctx->synpred62_Emerson	= synpred62_Emerson;
    ctx->synpred63_Emerson	= synpred63_Emerson;
    ctx->synpred66_Emerson	= synpred66_Emerson;
    ctx->synpred67_Emerson	= synpred67_Emerson;
    ctx->synpred74_Emerson	= synpred74_Emerson;
    ctx->synpred85_Emerson	= synpred85_Emerson;
    ctx->synpred93_Emerson	= synpred93_Emerson;
    ctx->synpred105_Emerson	= synpred105_Emerson;
    ctx->synpred110_Emerson	= synpred110_Emerson;
    ctx->synpred118_Emerson	= synpred118_Emerson;
    ctx->synpred121_Emerson	= synpred121_Emerson;
    ctx->synpred124_Emerson	= synpred124_Emerson;
    ctx->synpred126_Emerson	= synpred126_Emerson;
    ctx->synpred129_Emerson	= synpred129_Emerson;
    ctx->synpred131_Emerson	= synpred131_Emerson;
    ctx->synpred135_Emerson	= synpred135_Emerson;
    ctx->synpred137_Emerson	= synpred137_Emerson;
    ctx->synpred142_Emerson	= synpred142_Emerson;
    ctx->synpred150_Emerson	= synpred150_Emerson;
    ctx->synpred152_Emerson	= synpred152_Emerson;
    ctx->synpred154_Emerson	= synpred154_Emerson;
    ctx->synpred155_Emerson	= synpred155_Emerson;
    ctx->synpred158_Emerson	= synpred158_Emerson;
    ctx->synpred161_Emerson	= synpred161_Emerson;
    ctx->synpred162_Emerson	= synpred162_Emerson;
    ctx->synpred168_Emerson	= synpred168_Emerson;
    ctx->synpred170_Emerson	= synpred170_Emerson;
    ctx->synpred173_Emerson	= synpred173_Emerson;
    ctx->synpred175_Emerson	= synpred175_Emerson;
    ctx->synpred180_Emerson	= synpred180_Emerson;
    ctx->synpred182_Emerson	= synpred182_Emerson;
    ctx->synpred186_Emerson	= synpred186_Emerson;
    ctx->synpred188_Emerson	= synpred188_Emerson;
    ctx->synpred190_Emerson	= synpred190_Emerson;
    ctx->synpred193_Emerson	= synpred193_Emerson;
    ctx->synpred196_Emerson	= synpred196_Emerson;
    ctx->synpred214_Emerson	= synpred214_Emerson;
    ctx->synpred217_Emerson	= synpred217_Emerson;
    ctx->synpred220_Emerson	= synpred220_Emerson;
    ctx->synpred223_Emerson	= synpred223_Emerson;
    ctx->synpred228_Emerson	= synpred228_Emerson;
    ctx->synpred231_Emerson	= synpred231_Emerson;
    ctx->synpred234_Emerson	= synpred234_Emerson;
    ctx->synpred236_Emerson	= synpred236_Emerson;
    ctx->synpred238_Emerson	= synpred238_Emerson;
    ctx->synpred243_Emerson	= synpred243_Emerson;
    ctx->synpred290_Emerson	= synpred290_Emerson;
    ctx->synpred298_Emerson	= synpred298_Emerson;
    ctx->synpred301_Emerson	= synpred301_Emerson;
    ctx->synpred307_Emerson	= synpred307_Emerson;
    ctx->synpred308_Emerson	= synpred308_Emerson;
    ctx->synpred320_Emerson	= synpred320_Emerson;
    ctx->synpred321_Emerson	= synpred321_Emerson;
    ctx->synpred326_Emerson	= synpred326_Emerson;
    ctx->synpred327_Emerson	= synpred327_Emerson;
    ctx->synpred344_Emerson	= synpred344_Emerson;
    ctx->synpred353_Emerson	= synpred353_Emerson;
    ctx->synpred358_Emerson	= synpred358_Emerson;
    ctx->synpred359_Emerson	= synpred359_Emerson;
    ctx->synpred360_Emerson	= synpred360_Emerson;
    ctx->synpred363_Emerson	= synpred363_Emerson;
    ctx->synpred366_Emerson	= synpred366_Emerson;
    ctx->synpred372_Emerson	= synpred372_Emerson;
    ctx->synpred375_Emerson	= synpred375_Emerson;
    ctx->synpred381_Emerson	= synpred381_Emerson;
    ctx->synpred384_Emerson	= synpred384_Emerson;
    ctx->synpred385_Emerson	= synpred385_Emerson;
    ctx->synpred386_Emerson	= synpred386_Emerson;
    ctx->synpred395_Emerson	= synpred395_Emerson;
    ctx->free			= EmersonParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

    /* Create a LIST for recording rule memos.
     */
     RULEMEMO    = antlr3IntTrieNew(15);	/* 16 bit depth is enough for 32768 rules! */
	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = EmersonParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 EmersonParserFree(pEmersonParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	if	(RULEMEMO != NULL)
	{
		RULEMEMO->free(RULEMEMO);
		RULEMEMO = NULL;
	}	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return EmersonParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program909  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program909_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program909	= { FOLLOW_LTERM_in_program909_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_program913  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_program913_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_program913	= { FOLLOW_sourceElements_in_program913_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program916  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program916	= { FOLLOW_LTERM_in_program916_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_program919  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_program919_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_program919	= { FOLLOW_EOF_in_program919_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements948  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements948_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements948	= { FOLLOW_sourceElement_in_sourceElements948_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_sourceElements951  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_sourceElements951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_sourceElements951	= { FOLLOW_LTERM_in_sourceElements951_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements954  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements954_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements954	= { FOLLOW_sourceElement_in_sourceElements954_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_sourceElement975  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_sourceElement975_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_sourceElement975	= { FOLLOW_functionDeclaration_in_sourceElement975_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_sourceElement984  */
static	ANTLR3_BITWORD FOLLOW_statement_in_sourceElement984_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_sourceElement984	= { FOLLOW_statement_in_sourceElement984_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_functionDeclaration1001  */
static	ANTLR3_BITWORD FOLLOW_141_in_functionDeclaration1001_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_functionDeclaration1001	= { FOLLOW_141_in_functionDeclaration1001_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration1003  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration1003_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration1003	= { FOLLOW_LTERM_in_functionDeclaration1003_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionDeclaration1006  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionDeclaration1006_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionDeclaration1006	= { FOLLOW_Identifier_in_functionDeclaration1006_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration1008  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration1008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration1008	= { FOLLOW_LTERM_in_functionDeclaration1008_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionDeclaration1012  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionDeclaration1012_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionDeclaration1012	= { FOLLOW_formalParameterList_in_functionDeclaration1012_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration1015  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration1015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration1015	= { FOLLOW_LTERM_in_functionDeclaration1015_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionDeclaration1018  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionDeclaration1018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionDeclaration1018	= { FOLLOW_functionBody_in_functionDeclaration1018_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_functionExpression1043  */
static	ANTLR3_BITWORD FOLLOW_141_in_functionExpression1043_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_functionExpression1043	= { FOLLOW_141_in_functionExpression1043_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1045  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1045	= { FOLLOW_LTERM_in_functionExpression1045_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionExpression1048  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionExpression1048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionExpression1048	= { FOLLOW_Identifier_in_functionExpression1048_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1051  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1051_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1051	= { FOLLOW_LTERM_in_functionExpression1051_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_functionExpression1054  */
static	ANTLR3_BITWORD FOLLOW_142_in_functionExpression1054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_functionExpression1054	= { FOLLOW_142_in_functionExpression1054_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1056  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1056_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1056	= { FOLLOW_LTERM_in_functionExpression1056_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionExpression1059  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionExpression1059_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionExpression1059	= { FOLLOW_formalParameterList_in_functionExpression1059_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1062  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1062_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1062	= { FOLLOW_LTERM_in_functionExpression1062_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_functionExpression1065  */
static	ANTLR3_BITWORD FOLLOW_143_in_functionExpression1065_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_functionExpression1065	= { FOLLOW_143_in_functionExpression1065_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1067  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1067_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1067	= { FOLLOW_LTERM_in_functionExpression1067_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionExpression1070  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionExpression1070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionExpression1070	= { FOLLOW_functionBody_in_functionExpression1070_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList1098  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList1098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList1098	= { FOLLOW_Identifier_in_formalParameterList1098_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_formalParameterList1101  */
static	ANTLR3_BITWORD FOLLOW_144_in_formalParameterList1101_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_formalParameterList1101	= { FOLLOW_144_in_formalParameterList1101_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList1103  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList1103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList1103	= { FOLLOW_LTERM_in_formalParameterList1103_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList1106  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList1106_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList1106	= { FOLLOW_Identifier_in_formalParameterList1106_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_functionBody1129  */
static	ANTLR3_BITWORD FOLLOW_145_in_functionBody1129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_functionBody1129	= { FOLLOW_145_in_functionBody1129_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1131  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1131	= { FOLLOW_LTERM_in_functionBody1131_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_functionBody1134  */
static	ANTLR3_BITWORD FOLLOW_146_in_functionBody1134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_functionBody1134	= { FOLLOW_146_in_functionBody1134_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_functionBody1145  */
static	ANTLR3_BITWORD FOLLOW_145_in_functionBody1145_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_functionBody1145	= { FOLLOW_145_in_functionBody1145_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1147  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1147	= { FOLLOW_LTERM_in_functionBody1147_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_functionBody1151  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_functionBody1151_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_functionBody1151	= { FOLLOW_sourceElements_in_functionBody1151_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1158  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1158_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1158	= { FOLLOW_LTERM_in_functionBody1158_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_functionBody1161  */
static	ANTLR3_BITWORD FOLLOW_146_in_functionBody1161_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_functionBody1161	= { FOLLOW_146_in_functionBody1161_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_statement1186  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_statement1186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_statement1186	= { FOLLOW_switchStatement_in_statement1186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_emptyStatement_in_statement1191  */
static	ANTLR3_BITWORD FOLLOW_emptyStatement_in_statement1191_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_emptyStatement_in_statement1191	= { FOLLOW_emptyStatement_in_statement1191_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_statement1203  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_statement1203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_statement1203	= { FOLLOW_statementBlock_in_statement1203_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableStatement_in_statement1208  */
static	ANTLR3_BITWORD FOLLOW_variableStatement_in_statement1208_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableStatement_in_statement1208	= { FOLLOW_variableStatement_in_statement1208_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_statement1213  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_statement1213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_statement1213	= { FOLLOW_expressionStatement_in_statement1213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement1218  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement1218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement1218	= { FOLLOW_ifStatement_in_statement1218_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iterationStatement_in_statement1223  */
static	ANTLR3_BITWORD FOLLOW_iterationStatement_in_statement1223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iterationStatement_in_statement1223	= { FOLLOW_iterationStatement_in_statement1223_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_continueStatement_in_statement1228  */
static	ANTLR3_BITWORD FOLLOW_continueStatement_in_statement1228_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_continueStatement_in_statement1228	= { FOLLOW_continueStatement_in_statement1228_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_statement1233  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_statement1233_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_statement1233	= { FOLLOW_breakStatement_in_statement1233_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement1238  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement1238_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement1238	= { FOLLOW_returnStatement_in_statement1238_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_withStatement_in_statement1243  */
static	ANTLR3_BITWORD FOLLOW_withStatement_in_statement1243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_withStatement_in_statement1243	= { FOLLOW_withStatement_in_statement1243_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throwStatement_in_statement1248  */
static	ANTLR3_BITWORD FOLLOW_throwStatement_in_statement1248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throwStatement_in_statement1248	= { FOLLOW_throwStatement_in_statement1248_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tryStatement_in_statement1253  */
static	ANTLR3_BITWORD FOLLOW_tryStatement_in_statement1253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tryStatement_in_statement1253	= { FOLLOW_tryStatement_in_statement1253_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_statementBlock1265  */
static	ANTLR3_BITWORD FOLLOW_145_in_statementBlock1265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75E6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_statementBlock1265	= { FOLLOW_145_in_statementBlock1265_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1267  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1267_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75E6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1267	= { FOLLOW_LTERM_in_statementBlock1267_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_statementBlock1270  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_statementBlock1270_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_statementBlock1270	= { FOLLOW_statementList_in_statementBlock1270_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1273  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1273	= { FOLLOW_LTERM_in_statementBlock1273_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_statementBlock1276  */
static	ANTLR3_BITWORD FOLLOW_146_in_statementBlock1276_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_statementBlock1276	= { FOLLOW_146_in_statementBlock1276_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_emptyStatement1312  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_emptyStatement1312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_emptyStatement1312	= { FOLLOW_LTERM_in_emptyStatement1312_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_emptyStatement1315  */
static	ANTLR3_BITWORD FOLLOW_147_in_emptyStatement1315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_emptyStatement1315	= { FOLLOW_147_in_emptyStatement1315_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList1343  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList1343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList1343	= { FOLLOW_statement_in_statementList1343_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementList1346  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementList1346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementList1346	= { FOLLOW_LTERM_in_statementList1346_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList1349  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList1349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList1349	= { FOLLOW_statement_in_statementList1349_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_148_in_variableStatement1373  */
static	ANTLR3_BITWORD FOLLOW_148_in_variableStatement1373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_148_in_variableStatement1373	= { FOLLOW_148_in_variableStatement1373_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1375  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1375	= { FOLLOW_LTERM_in_variableStatement1375_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationList_in_variableStatement1378  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationList_in_variableStatement1378_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationList_in_variableStatement1378	= { FOLLOW_variableDeclarationList_in_variableStatement1378_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1381  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1381	= { FOLLOW_LTERM_in_variableStatement1381_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_variableStatement1385  */
static	ANTLR3_BITWORD FOLLOW_147_in_variableStatement1385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_variableStatement1385	= { FOLLOW_147_in_variableStatement1385_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1407  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1407	= { FOLLOW_variableDeclaration_in_variableDeclarationList1407_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1410  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1410_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1410	= { FOLLOW_LTERM_in_variableDeclarationList1410_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_variableDeclarationList1413  */
static	ANTLR3_BITWORD FOLLOW_144_in_variableDeclarationList1413_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_variableDeclarationList1413	= { FOLLOW_144_in_variableDeclarationList1413_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1415  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1415	= { FOLLOW_LTERM_in_variableDeclarationList1415_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1418  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1418_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1418	= { FOLLOW_variableDeclaration_in_variableDeclarationList1418_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1437  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1437	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1437_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1440  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1440_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1440	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1440_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_variableDeclarationListNoIn1443  */
static	ANTLR3_BITWORD FOLLOW_144_in_variableDeclarationListNoIn1443_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_variableDeclarationListNoIn1443	= { FOLLOW_144_in_variableDeclarationListNoIn1443_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1445  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1445_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1445	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1445_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1448  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1448_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1448	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1448_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclaration1467  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclaration1467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclaration1467	= { FOLLOW_Identifier_in_variableDeclaration1467_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclaration1469  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclaration1469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclaration1469	= { FOLLOW_LTERM_in_variableDeclaration1469_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiser_in_variableDeclaration1472  */
static	ANTLR3_BITWORD FOLLOW_initialiser_in_variableDeclaration1472_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiser_in_variableDeclaration1472	= { FOLLOW_initialiser_in_variableDeclaration1472_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclarationNoIn1496  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclarationNoIn1496_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclarationNoIn1496	= { FOLLOW_Identifier_in_variableDeclarationNoIn1496_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationNoIn1498  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationNoIn1498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationNoIn1498	= { FOLLOW_LTERM_in_variableDeclarationNoIn1498_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1501  */
static	ANTLR3_BITWORD FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1501_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1501	= { FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1501_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_initialiser1526  */
static	ANTLR3_BITWORD FOLLOW_149_in_initialiser1526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_initialiser1526	= { FOLLOW_149_in_initialiser1526_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiser1528  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiser1528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiser1528	= { FOLLOW_LTERM_in_initialiser1528_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_initialiser1531  */
static	ANTLR3_BITWORD FOLLOW_expression_in_initialiser1531_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_initialiser1531	= { FOLLOW_expression_in_initialiser1531_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_initialiserNoIn1548  */
static	ANTLR3_BITWORD FOLLOW_149_in_initialiserNoIn1548_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_initialiserNoIn1548	= { FOLLOW_149_in_initialiserNoIn1548_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiserNoIn1550  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiserNoIn1550_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiserNoIn1550	= { FOLLOW_LTERM_in_initialiserNoIn1550_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_initialiserNoIn1553  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_initialiserNoIn1553_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_initialiserNoIn1553	= { FOLLOW_expressionNoIn_in_initialiserNoIn1553_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionStatement1571  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionStatement1571_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionStatement1571	= { FOLLOW_expression_in_expressionStatement1571_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionStatement1574  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionStatement1574_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionStatement1574	= { FOLLOW_LTERM_in_expressionStatement1574_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_expressionStatement1578  */
static	ANTLR3_BITWORD FOLLOW_147_in_expressionStatement1578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_expressionStatement1578	= { FOLLOW_147_in_expressionStatement1578_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_150_in_ifStatement1598  */
static	ANTLR3_BITWORD FOLLOW_150_in_ifStatement1598_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_150_in_ifStatement1598	= { FOLLOW_150_in_ifStatement1598_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1600  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1600_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1600	= { FOLLOW_LTERM_in_ifStatement1600_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_ifStatement1603  */
static	ANTLR3_BITWORD FOLLOW_142_in_ifStatement1603_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_ifStatement1603	= { FOLLOW_142_in_ifStatement1603_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1605  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1605_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1605	= { FOLLOW_LTERM_in_ifStatement1605_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1608  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1608_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1608	= { FOLLOW_expression_in_ifStatement1608_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1610  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1610_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1610	= { FOLLOW_LTERM_in_ifStatement1610_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_ifStatement1613  */
static	ANTLR3_BITWORD FOLLOW_143_in_ifStatement1613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_ifStatement1613	= { FOLLOW_143_in_ifStatement1613_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1615  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1615_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1615	= { FOLLOW_LTERM_in_ifStatement1615_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1620  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1620	= { FOLLOW_statement_in_ifStatement1620_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1623  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1623_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1623	= { FOLLOW_LTERM_in_ifStatement1623_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_ifStatement1626  */
static	ANTLR3_BITWORD FOLLOW_151_in_ifStatement1626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_ifStatement1626	= { FOLLOW_151_in_ifStatement1626_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1628  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1628	= { FOLLOW_LTERM_in_ifStatement1628_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1633  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1633_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1633	= { FOLLOW_statement_in_ifStatement1633_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_doWhileStatement_in_iterationStatement1665  */
static	ANTLR3_BITWORD FOLLOW_doWhileStatement_in_iterationStatement1665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_doWhileStatement_in_iterationStatement1665	= { FOLLOW_doWhileStatement_in_iterationStatement1665_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_iterationStatement1670  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_iterationStatement1670_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_iterationStatement1670	= { FOLLOW_whileStatement_in_iterationStatement1670_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_iterationStatement1675  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_iterationStatement1675_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_iterationStatement1675	= { FOLLOW_forStatement_in_iterationStatement1675_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatement_in_iterationStatement1680  */
static	ANTLR3_BITWORD FOLLOW_forInStatement_in_iterationStatement1680_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatement_in_iterationStatement1680	= { FOLLOW_forInStatement_in_iterationStatement1680_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_doWhileStatement1692  */
static	ANTLR3_BITWORD FOLLOW_152_in_doWhileStatement1692_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_doWhileStatement1692	= { FOLLOW_152_in_doWhileStatement1692_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1694  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1694_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1694	= { FOLLOW_LTERM_in_doWhileStatement1694_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_doWhileStatement1697  */
static	ANTLR3_BITWORD FOLLOW_statement_in_doWhileStatement1697_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_doWhileStatement1697	= { FOLLOW_statement_in_doWhileStatement1697_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1699  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1699	= { FOLLOW_LTERM_in_doWhileStatement1699_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_153_in_doWhileStatement1702  */
static	ANTLR3_BITWORD FOLLOW_153_in_doWhileStatement1702_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_153_in_doWhileStatement1702	= { FOLLOW_153_in_doWhileStatement1702_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1704  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1704_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1704	= { FOLLOW_LTERM_in_doWhileStatement1704_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_doWhileStatement1707  */
static	ANTLR3_BITWORD FOLLOW_142_in_doWhileStatement1707_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001C000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_doWhileStatement1707	= { FOLLOW_142_in_doWhileStatement1707_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_doWhileStatement1709  */
static	ANTLR3_BITWORD FOLLOW_expression_in_doWhileStatement1709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_doWhileStatement1709	= { FOLLOW_expression_in_doWhileStatement1709_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_doWhileStatement1711  */
static	ANTLR3_BITWORD FOLLOW_143_in_doWhileStatement1711_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_doWhileStatement1711	= { FOLLOW_143_in_doWhileStatement1711_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1714  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1714_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1714	= { FOLLOW_LTERM_in_doWhileStatement1714_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_doWhileStatement1718  */
static	ANTLR3_BITWORD FOLLOW_147_in_doWhileStatement1718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_doWhileStatement1718	= { FOLLOW_147_in_doWhileStatement1718_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_153_in_whileStatement1744  */
static	ANTLR3_BITWORD FOLLOW_153_in_whileStatement1744_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_153_in_whileStatement1744	= { FOLLOW_153_in_whileStatement1744_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1746  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1746_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1746	= { FOLLOW_LTERM_in_whileStatement1746_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_whileStatement1749  */
static	ANTLR3_BITWORD FOLLOW_142_in_whileStatement1749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_whileStatement1749	= { FOLLOW_142_in_whileStatement1749_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1751  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1751	= { FOLLOW_LTERM_in_whileStatement1751_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1754  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1754_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1754	= { FOLLOW_expression_in_whileStatement1754_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1756  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1756_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1756	= { FOLLOW_LTERM_in_whileStatement1756_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_whileStatement1759  */
static	ANTLR3_BITWORD FOLLOW_143_in_whileStatement1759_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_whileStatement1759	= { FOLLOW_143_in_whileStatement1759_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1761  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1761_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1761	= { FOLLOW_LTERM_in_whileStatement1761_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1764  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1764_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1764	= { FOLLOW_statement_in_whileStatement1764_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_154_in_forStatement1787  */
static	ANTLR3_BITWORD FOLLOW_154_in_forStatement1787_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_154_in_forStatement1787	= { FOLLOW_154_in_forStatement1787_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1789  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1789	= { FOLLOW_LTERM_in_forStatement1789_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_forStatement1792  */
static	ANTLR3_BITWORD FOLLOW_142_in_forStatement1792_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000300001A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_forStatement1792	= { FOLLOW_142_in_forStatement1792_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1795  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1795_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000126000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1795	= { FOLLOW_LTERM_in_forStatement1795_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatementInitialiserPart_in_forStatement1800  */
static	ANTLR3_BITWORD FOLLOW_forStatementInitialiserPart_in_forStatement1800_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatementInitialiserPart_in_forStatement1800	= { FOLLOW_forStatementInitialiserPart_in_forStatement1800_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1804  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1804	= { FOLLOW_LTERM_in_forStatement1804_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_forStatement1807  */
static	ANTLR3_BITWORD FOLLOW_147_in_forStatement1807_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000300000A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_forStatement1807	= { FOLLOW_147_in_forStatement1807_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1810  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1810_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1810	= { FOLLOW_LTERM_in_forStatement1810_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1815  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1815_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1815	= { FOLLOW_expression_in_forStatement1815_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1819  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1819_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1819	= { FOLLOW_LTERM_in_forStatement1819_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_forStatement1822  */
static	ANTLR3_BITWORD FOLLOW_147_in_forStatement1822_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x000003000002E000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_forStatement1822	= { FOLLOW_147_in_forStatement1822_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1825  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1825	= { FOLLOW_LTERM_in_forStatement1825_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1830  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1830_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1830	= { FOLLOW_expression_in_forStatement1830_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1834  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1834	= { FOLLOW_LTERM_in_forStatement1834_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_forStatement1837  */
static	ANTLR3_BITWORD FOLLOW_143_in_forStatement1837_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_forStatement1837	= { FOLLOW_143_in_forStatement1837_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1839  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1839_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1839	= { FOLLOW_LTERM_in_forStatement1839_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forStatement1842  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forStatement1842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forStatement1842	= { FOLLOW_statement_in_forStatement1842_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_forStatementInitialiserPart1891  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_forStatementInitialiserPart1891_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_forStatementInitialiserPart1891	= { FOLLOW_expressionNoIn_in_forStatementInitialiserPart1891_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_148_in_forStatementInitialiserPart1896  */
static	ANTLR3_BITWORD FOLLOW_148_in_forStatementInitialiserPart1896_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_148_in_forStatementInitialiserPart1896	= { FOLLOW_148_in_forStatementInitialiserPart1896_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatementInitialiserPart1898  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatementInitialiserPart1898_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatementInitialiserPart1898	= { FOLLOW_LTERM_in_forStatementInitialiserPart1898_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1901  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1901	= { FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1901_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_154_in_forInStatement1921  */
static	ANTLR3_BITWORD FOLLOW_154_in_forInStatement1921_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_154_in_forInStatement1921	= { FOLLOW_154_in_forInStatement1921_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1923  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1923_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1923	= { FOLLOW_LTERM_in_forInStatement1923_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_forInStatement1926  */
static	ANTLR3_BITWORD FOLLOW_142_in_forInStatement1926_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000126000), ANTLR3_UINT64_LIT(0x0000000000F80002) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_forInStatement1926	= { FOLLOW_142_in_forInStatement1926_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1928  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1928_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000126000), ANTLR3_UINT64_LIT(0x0000000000F80002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1928	= { FOLLOW_LTERM_in_forInStatement1928_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatementInitialiserPart_in_forInStatement1931  */
static	ANTLR3_BITWORD FOLLOW_forInStatementInitialiserPart_in_forInStatement1931_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatementInitialiserPart_in_forInStatement1931	= { FOLLOW_forInStatementInitialiserPart_in_forInStatement1931_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1933  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1933	= { FOLLOW_LTERM_in_forInStatement1933_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_forInStatement1936  */
static	ANTLR3_BITWORD FOLLOW_155_in_forInStatement1936_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_forInStatement1936	= { FOLLOW_155_in_forInStatement1936_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1938  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1938	= { FOLLOW_LTERM_in_forInStatement1938_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forInStatement1941  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forInStatement1941_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forInStatement1941	= { FOLLOW_expression_in_forInStatement1941_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1943  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1943_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1943	= { FOLLOW_LTERM_in_forInStatement1943_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_forInStatement1946  */
static	ANTLR3_BITWORD FOLLOW_143_in_forInStatement1946_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_forInStatement1946	= { FOLLOW_143_in_forInStatement1946_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1948  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1948_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1948	= { FOLLOW_LTERM_in_forInStatement1948_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forInStatement1951  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forInStatement1951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forInStatement1951	= { FOLLOW_statement_in_forInStatement1951_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1975  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1975_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1975	= { FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1975_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_148_in_forInStatementInitialiserPart1984  */
static	ANTLR3_BITWORD FOLLOW_148_in_forInStatementInitialiserPart1984_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_148_in_forInStatementInitialiserPart1984	= { FOLLOW_148_in_forInStatementInitialiserPart1984_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatementInitialiserPart1986  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatementInitialiserPart1986_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatementInitialiserPart1986	= { FOLLOW_LTERM_in_forInStatementInitialiserPart1986_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1989  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1989_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1989	= { FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1989_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_continueStatement2008  */
static	ANTLR3_BITWORD FOLLOW_156_in_continueStatement2008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_continueStatement2008	= { FOLLOW_156_in_continueStatement2008_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_continueStatement2010  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_continueStatement2010_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_continueStatement2010	= { FOLLOW_Identifier_in_continueStatement2010_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_continueStatement2014  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_continueStatement2014_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_continueStatement2014	= { FOLLOW_LTERM_in_continueStatement2014_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_continueStatement2018  */
static	ANTLR3_BITWORD FOLLOW_147_in_continueStatement2018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_continueStatement2018	= { FOLLOW_147_in_continueStatement2018_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_breakStatement2040  */
static	ANTLR3_BITWORD FOLLOW_157_in_breakStatement2040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_breakStatement2040	= { FOLLOW_157_in_breakStatement2040_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_breakStatement2042  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_breakStatement2042_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_breakStatement2042	= { FOLLOW_Identifier_in_breakStatement2042_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_breakStatement2046  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_breakStatement2046_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_breakStatement2046	= { FOLLOW_LTERM_in_breakStatement2046_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_breakStatement2050  */
static	ANTLR3_BITWORD FOLLOW_147_in_breakStatement2050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_breakStatement2050	= { FOLLOW_147_in_breakStatement2050_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_returnStatement2071  */
static	ANTLR3_BITWORD FOLLOW_158_in_returnStatement2071_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000300000A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_returnStatement2071	= { FOLLOW_158_in_returnStatement2071_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2073  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2073	= { FOLLOW_expression_in_returnStatement2073_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_returnStatement2077  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_returnStatement2077_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_returnStatement2077	= { FOLLOW_LTERM_in_returnStatement2077_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_returnStatement2081  */
static	ANTLR3_BITWORD FOLLOW_147_in_returnStatement2081_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_returnStatement2081	= { FOLLOW_147_in_returnStatement2081_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_withStatement2103  */
static	ANTLR3_BITWORD FOLLOW_159_in_withStatement2103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_withStatement2103	= { FOLLOW_159_in_withStatement2103_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2105  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2105	= { FOLLOW_LTERM_in_withStatement2105_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_withStatement2108  */
static	ANTLR3_BITWORD FOLLOW_142_in_withStatement2108_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_withStatement2108	= { FOLLOW_142_in_withStatement2108_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2110  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2110	= { FOLLOW_LTERM_in_withStatement2110_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_withStatement2113  */
static	ANTLR3_BITWORD FOLLOW_expression_in_withStatement2113_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_withStatement2113	= { FOLLOW_expression_in_withStatement2113_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2115  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2115_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2115	= { FOLLOW_LTERM_in_withStatement2115_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_withStatement2118  */
static	ANTLR3_BITWORD FOLLOW_143_in_withStatement2118_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_withStatement2118	= { FOLLOW_143_in_withStatement2118_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2120  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2120	= { FOLLOW_LTERM_in_withStatement2120_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_withStatement2123  */
static	ANTLR3_BITWORD FOLLOW_statement_in_withStatement2123_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_withStatement2123	= { FOLLOW_statement_in_withStatement2123_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_switchStatement2146  */
static	ANTLR3_BITWORD FOLLOW_160_in_switchStatement2146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_switchStatement2146	= { FOLLOW_160_in_switchStatement2146_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2148  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2148_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2148	= { FOLLOW_LTERM_in_switchStatement2148_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_switchStatement2151  */
static	ANTLR3_BITWORD FOLLOW_142_in_switchStatement2151_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_switchStatement2151	= { FOLLOW_142_in_switchStatement2151_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2153  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2153_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2153	= { FOLLOW_LTERM_in_switchStatement2153_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_switchStatement2156  */
static	ANTLR3_BITWORD FOLLOW_expression_in_switchStatement2156_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_switchStatement2156	= { FOLLOW_expression_in_switchStatement2156_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2158  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2158_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2158	= { FOLLOW_LTERM_in_switchStatement2158_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_switchStatement2161  */
static	ANTLR3_BITWORD FOLLOW_143_in_switchStatement2161_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_switchStatement2161	= { FOLLOW_143_in_switchStatement2161_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2163  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2163_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2163	= { FOLLOW_LTERM_in_switchStatement2163_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseBlock_in_switchStatement2166  */
static	ANTLR3_BITWORD FOLLOW_caseBlock_in_switchStatement2166_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseBlock_in_switchStatement2166	= { FOLLOW_caseBlock_in_switchStatement2166_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_caseBlock2197  */
static	ANTLR3_BITWORD FOLLOW_145_in_caseBlock2197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000200040000) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_caseBlock2197	= { FOLLOW_145_in_caseBlock2197_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2199  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2199_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000200040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2199	= { FOLLOW_LTERM_in_caseBlock2199_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2204  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2204_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2204	= { FOLLOW_caseClause_in_caseBlock2204_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2207  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2207_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2207	= { FOLLOW_LTERM_in_caseBlock2207_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_caseBlock2210  */
static	ANTLR3_BITWORD FOLLOW_146_in_caseBlock2210_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_caseBlock2210	= { FOLLOW_146_in_caseBlock2210_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_caseBlock2233  */
static	ANTLR3_BITWORD FOLLOW_145_in_caseBlock2233_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_caseBlock2233	= { FOLLOW_145_in_caseBlock2233_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2235  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2235_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2235	= { FOLLOW_LTERM_in_caseBlock2235_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseBlock2240  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseBlock2240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseBlock2240	= { FOLLOW_defaultClause_in_caseBlock2240_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2242  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2242_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2242	= { FOLLOW_LTERM_in_caseBlock2242_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_caseBlock2245  */
static	ANTLR3_BITWORD FOLLOW_146_in_caseBlock2245_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_caseBlock2245	= { FOLLOW_146_in_caseBlock2245_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_161_in_caseClause2289  */
static	ANTLR3_BITWORD FOLLOW_161_in_caseClause2289_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_161_in_caseClause2289	= { FOLLOW_161_in_caseClause2289_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2291  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2291	= { FOLLOW_LTERM_in_caseClause2291_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_caseClause2296  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_caseClause2296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_caseClause2296	= { FOLLOW_ternaryExpression_in_caseClause2296_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2298  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2298_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2298	= { FOLLOW_LTERM_in_caseClause2298_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_caseClause2301  */
static	ANTLR3_BITWORD FOLLOW_162_in_caseClause2301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000339F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_caseClause2301	= { FOLLOW_162_in_caseClause2301_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2303  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2303_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000339F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2303	= { FOLLOW_LTERM_in_caseClause2303_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2306  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2306_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2306	= { FOLLOW_statementList_in_caseClause2306_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2309  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2309	= { FOLLOW_LTERM_in_caseClause2309_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseClause2312  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseClause2312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseClause2312	= { FOLLOW_defaultClause_in_caseClause2312_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_161_in_caseClause2339  */
static	ANTLR3_BITWORD FOLLOW_161_in_caseClause2339_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_161_in_caseClause2339	= { FOLLOW_161_in_caseClause2339_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2341  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2341_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2341	= { FOLLOW_LTERM_in_caseClause2341_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_caseClause2346  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_caseClause2346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_caseClause2346	= { FOLLOW_ternaryExpression_in_caseClause2346_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2348  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2348_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2348	= { FOLLOW_LTERM_in_caseClause2348_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_caseClause2351  */
static	ANTLR3_BITWORD FOLLOW_162_in_caseClause2351_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000333F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_caseClause2351	= { FOLLOW_162_in_caseClause2351_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2353  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000333F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2353	= { FOLLOW_LTERM_in_caseClause2353_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2356  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2356_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2356	= { FOLLOW_statementList_in_caseClause2356_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2359  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2359_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2359	= { FOLLOW_LTERM_in_caseClause2359_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseClause2362  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseClause2362_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseClause2362	= { FOLLOW_caseClause_in_caseClause2362_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_163_in_defaultClause2391  */
static	ANTLR3_BITWORD FOLLOW_163_in_defaultClause2391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_163_in_defaultClause2391	= { FOLLOW_163_in_defaultClause2391_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2393  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2393_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2393	= { FOLLOW_LTERM_in_defaultClause2393_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_defaultClause2396  */
static	ANTLR3_BITWORD FOLLOW_162_in_defaultClause2396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000333F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_defaultClause2396	= { FOLLOW_162_in_defaultClause2396_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2398  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000333F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2398	= { FOLLOW_LTERM_in_defaultClause2398_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_defaultClause2401  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_defaultClause2401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_defaultClause2401	= { FOLLOW_statementList_in_defaultClause2401_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2404  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2404	= { FOLLOW_LTERM_in_defaultClause2404_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClauseSeenDefault_in_defaultClause2407  */
static	ANTLR3_BITWORD FOLLOW_caseClauseSeenDefault_in_defaultClause2407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClauseSeenDefault_in_defaultClause2407	= { FOLLOW_caseClauseSeenDefault_in_defaultClause2407_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_161_in_caseClauseSeenDefault2447  */
static	ANTLR3_BITWORD FOLLOW_161_in_caseClauseSeenDefault2447_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_161_in_caseClauseSeenDefault2447	= { FOLLOW_161_in_caseClauseSeenDefault2447_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClauseSeenDefault2449  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClauseSeenDefault2449_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClauseSeenDefault2449	= { FOLLOW_LTERM_in_caseClauseSeenDefault2449_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_caseClauseSeenDefault2454  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_caseClauseSeenDefault2454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_caseClauseSeenDefault2454	= { FOLLOW_ternaryExpression_in_caseClauseSeenDefault2454_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClauseSeenDefault2456  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClauseSeenDefault2456_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClauseSeenDefault2456	= { FOLLOW_LTERM_in_caseClauseSeenDefault2456_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_caseClauseSeenDefault2459  */
static	ANTLR3_BITWORD FOLLOW_162_in_caseClauseSeenDefault2459_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000333F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_caseClauseSeenDefault2459	= { FOLLOW_162_in_caseClauseSeenDefault2459_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClauseSeenDefault2461  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClauseSeenDefault2461_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000333F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClauseSeenDefault2461	= { FOLLOW_LTERM_in_caseClauseSeenDefault2461_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClauseSeenDefault2464  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClauseSeenDefault2464_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClauseSeenDefault2464	= { FOLLOW_statementList_in_caseClauseSeenDefault2464_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClauseSeenDefault2467  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClauseSeenDefault2467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClauseSeenDefault2467	= { FOLLOW_LTERM_in_caseClauseSeenDefault2467_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault2470  */
static	ANTLR3_BITWORD FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault2470_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault2470	= { FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault2470_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_164_in_throwStatement2532  */
static	ANTLR3_BITWORD FOLLOW_164_in_throwStatement2532_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001C000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_164_in_throwStatement2532	= { FOLLOW_164_in_throwStatement2532_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_throwStatement2534  */
static	ANTLR3_BITWORD FOLLOW_expression_in_throwStatement2534_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_throwStatement2534	= { FOLLOW_expression_in_throwStatement2534_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_throwStatement2537  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_throwStatement2537_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_throwStatement2537	= { FOLLOW_LTERM_in_throwStatement2537_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_throwStatement2541  */
static	ANTLR3_BITWORD FOLLOW_147_in_throwStatement2541_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_throwStatement2541	= { FOLLOW_147_in_throwStatement2541_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_tryStatement2569  */
static	ANTLR3_BITWORD FOLLOW_165_in_tryStatement2569_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_tryStatement2569	= { FOLLOW_165_in_tryStatement2569_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2571  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2571_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2571	= { FOLLOW_LTERM_in_tryStatement2571_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_tryStatement2574  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_tryStatement2574_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x000000C000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_tryStatement2574	= { FOLLOW_statementBlock_in_tryStatement2574_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2576  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2576_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x000000C000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2576	= { FOLLOW_LTERM_in_tryStatement2576_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchFinallyBlock_in_tryStatement2579  */
static	ANTLR3_BITWORD FOLLOW_catchFinallyBlock_in_tryStatement2579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_catchFinallyBlock_in_tryStatement2579	= { FOLLOW_catchFinallyBlock_in_tryStatement2579_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchBlock_in_catchFinallyBlock2614  */
static	ANTLR3_BITWORD FOLLOW_catchBlock_in_catchFinallyBlock2614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x000000C000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_catchBlock_in_catchFinallyBlock2614	= { FOLLOW_catchBlock_in_catchFinallyBlock2614_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchFinallyBlock2616  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchFinallyBlock2616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x000000C000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchFinallyBlock2616	= { FOLLOW_LTERM_in_catchFinallyBlock2616_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock2619  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock2619_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock2619	= { FOLLOW_finallyBlock_in_catchFinallyBlock2619_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock2640  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock2640_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock2640	= { FOLLOW_finallyBlock_in_catchFinallyBlock2640_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_catchBlock2689  */
static	ANTLR3_BITWORD FOLLOW_166_in_catchBlock2689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_catchBlock2689	= { FOLLOW_166_in_catchBlock2689_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2691  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2691_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2691	= { FOLLOW_LTERM_in_catchBlock2691_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_catchBlock2694  */
static	ANTLR3_BITWORD FOLLOW_142_in_catchBlock2694_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_catchBlock2694	= { FOLLOW_142_in_catchBlock2694_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2696  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2696_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2696	= { FOLLOW_LTERM_in_catchBlock2696_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchBlock2699  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchBlock2699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchBlock2699	= { FOLLOW_Identifier_in_catchBlock2699_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2701  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2701_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2701	= { FOLLOW_LTERM_in_catchBlock2701_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_catchBlock2704  */
static	ANTLR3_BITWORD FOLLOW_143_in_catchBlock2704_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_catchBlock2704	= { FOLLOW_143_in_catchBlock2704_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2706  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2706_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2706	= { FOLLOW_LTERM_in_catchBlock2706_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchBlock2709  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchBlock2709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchBlock2709	= { FOLLOW_statementBlock_in_catchBlock2709_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_finallyBlock2754  */
static	ANTLR3_BITWORD FOLLOW_167_in_finallyBlock2754_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_finallyBlock2754	= { FOLLOW_167_in_finallyBlock2754_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_finallyBlock2756  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_finallyBlock2756_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_finallyBlock2756	= { FOLLOW_LTERM_in_finallyBlock2756_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyBlock2760  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyBlock2760_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyBlock2760	= { FOLLOW_statementBlock_in_finallyBlock2760_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_memAndCallExpression2804  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_memAndCallExpression2804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_memAndCallExpression2804	= { FOLLOW_callExpression_in_memAndCallExpression2804_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memAndCallExpression2820  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memAndCallExpression2820_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memAndCallExpression2820	= { FOLLOW_memberExpression_in_memAndCallExpression2820_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression2860  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression2860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression2860	= { FOLLOW_assignmentExpression_in_expression2860_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_expression2864  */
static	ANTLR3_BITWORD FOLLOW_144_in_expression2864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_expression2864	= { FOLLOW_144_in_expression2864_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expression2866  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expression2866_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expression2866	= { FOLLOW_LTERM_in_expression2866_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression2869  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression2869_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression2869	= { FOLLOW_assignmentExpression_in_expression2869_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2907  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2907_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2907	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2907_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_expressionNoIn2911  */
static	ANTLR3_BITWORD FOLLOW_144_in_expressionNoIn2911_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_expressionNoIn2911	= { FOLLOW_144_in_expressionNoIn2911_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionNoIn2913  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionNoIn2913_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionNoIn2913	= { FOLLOW_LTERM_in_expressionNoIn2913_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2916  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2916	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2916_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpression2955  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpression2955_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpression2955	= { FOLLOW_conditionalExpression_in_assignmentExpression2955_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression2967  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression2967_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x000FF00000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression2967	= { FOLLOW_leftHandSideExpression_in_assignmentExpression2967_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2969  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x000FF00000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2969	= { FOLLOW_LTERM_in_assignmentExpression2969_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpression2972  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpression2972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpression2972	= { FOLLOW_assignmentOperator_in_assignmentExpression2972_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2974  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2974_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2974	= { FOLLOW_LTERM_in_assignmentExpression2974_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpression2977  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpression2977_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpression2977	= { FOLLOW_assignmentExpression_in_assignmentExpression2977_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn3022  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn3022_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn3022	= { FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn3022_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3034  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3034_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x000FF00000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3034	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3034_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn3036  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn3036_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x000FF00000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn3036	= { FOLLOW_LTERM_in_assignmentExpressionNoIn3036_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3039  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3039_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3039	= { FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3039_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn3041  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn3041_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn3041	= { FOLLOW_LTERM_in_assignmentExpressionNoIn3041_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3044  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3044_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3044	= { FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3044_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_leftHandSideExpression3092  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_leftHandSideExpression3092_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_leftHandSideExpression3092	= { FOLLOW_callExpression_in_leftHandSideExpression3092_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_leftHandSideExpression3101  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_leftHandSideExpression3101_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_leftHandSideExpression3101	= { FOLLOW_newExpression_in_leftHandSideExpression3101_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_newExpression3117  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_newExpression3117_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_newExpression3117	= { FOLLOW_memberExpression_in_newExpression3117_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_newExpression3126  */
static	ANTLR3_BITWORD FOLLOW_168_in_newExpression3126_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000F80002) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_newExpression3126	= { FOLLOW_168_in_newExpression3126_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_newExpression3128  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_newExpression3128_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000F80002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_newExpression3128	= { FOLLOW_LTERM_in_newExpression3128_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_newExpression3131  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_newExpression3131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_newExpression3131	= { FOLLOW_newExpression_in_newExpression3131_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_indexSuffix13153  */
static	ANTLR3_BITWORD FOLLOW_169_in_indexSuffix13153_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_indexSuffix13153	= { FOLLOW_169_in_indexSuffix13153_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix13155  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix13155_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix13155	= { FOLLOW_LTERM_in_indexSuffix13155_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix13158  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix13158_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix13158	= { FOLLOW_expression_in_indexSuffix13158_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix13160  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix13160_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix13160	= { FOLLOW_LTERM_in_indexSuffix13160_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_170_in_indexSuffix13163  */
static	ANTLR3_BITWORD FOLLOW_170_in_indexSuffix13163_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_170_in_indexSuffix13163	= { FOLLOW_170_in_indexSuffix13163_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_171_in_propertyReferenceSuffix13180  */
static	ANTLR3_BITWORD FOLLOW_171_in_propertyReferenceSuffix13180_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_171_in_propertyReferenceSuffix13180	= { FOLLOW_171_in_propertyReferenceSuffix13180_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix13182  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix13182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix13182	= { FOLLOW_LTERM_in_propertyReferenceSuffix13182_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix13185  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix13185_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix13185	= { FOLLOW_Identifier_in_propertyReferenceSuffix13185_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primaryExpression_in_memberExpression3202  */
static	ANTLR3_BITWORD FOLLOW_primaryExpression_in_memberExpression3202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_primaryExpression_in_memberExpression3202	= { FOLLOW_primaryExpression_in_memberExpression3202_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3211  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3211	= { FOLLOW_LTERM_in_memberExpression3211_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3214  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3214_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3214	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3214_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3231  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3231	= { FOLLOW_LTERM_in_memberExpression3231_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3234  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3234	= { FOLLOW_indexSuffix1_in_memberExpression3234_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionExpression_in_memberExpression3253  */
static	ANTLR3_BITWORD FOLLOW_functionExpression_in_memberExpression3253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_functionExpression_in_memberExpression3253	= { FOLLOW_functionExpression_in_memberExpression3253_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3261  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3261	= { FOLLOW_LTERM_in_memberExpression3261_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3264  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3264_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3264	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3264_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3280  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3280_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3280	= { FOLLOW_LTERM_in_memberExpression3280_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3283  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3283	= { FOLLOW_indexSuffix1_in_memberExpression3283_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_memberExpression3302  */
static	ANTLR3_BITWORD FOLLOW_168_in_memberExpression3302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000F80002) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_memberExpression3302	= { FOLLOW_168_in_memberExpression3302_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3304  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000F80002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3304	= { FOLLOW_LTERM_in_memberExpression3304_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression3309  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression3309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression3309	= { FOLLOW_memberExpression_in_memberExpression3309_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3311  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3311	= { FOLLOW_LTERM_in_memberExpression3311_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_memberExpression3314  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_memberExpression3314_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_memberExpression3314	= { FOLLOW_arguments_in_memberExpression3314_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3329  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3329_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3329	= { FOLLOW_LTERM_in_memberExpression3329_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3332  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3332	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3332_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3347  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3347_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3347	= { FOLLOW_LTERM_in_memberExpression3347_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3350  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3350_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3350	= { FOLLOW_indexSuffix1_in_memberExpression3350_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_memberExpressionSuffix3387  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_memberExpressionSuffix3387_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_memberExpressionSuffix3387	= { FOLLOW_indexSuffix_in_memberExpressionSuffix3387_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3397  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3397_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3397	= { FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3397_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_callExpression3417  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_callExpression3417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_callExpression3417	= { FOLLOW_memberExpression_in_callExpression3417_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3419  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3419_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3419	= { FOLLOW_LTERM_in_callExpression3419_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3422  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3422_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3422	= { FOLLOW_arguments_in_callExpression3422_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3436  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3436	= { FOLLOW_LTERM_in_callExpression3436_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3439  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3439_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3439	= { FOLLOW_arguments_in_callExpression3439_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3454  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3454	= { FOLLOW_LTERM_in_callExpression3454_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_callExpression3457  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_callExpression3457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_callExpression3457	= { FOLLOW_indexSuffix1_in_callExpression3457_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3472  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3472_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3472	= { FOLLOW_LTERM_in_callExpression3472_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_callExpression3475  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_callExpression3475_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_callExpression3475	= { FOLLOW_propertyReferenceSuffix1_in_callExpression3475_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpressionSuffix3502  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpressionSuffix3502_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpressionSuffix3502	= { FOLLOW_arguments_in_callExpressionSuffix3502_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_callExpressionSuffix3511  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_callExpressionSuffix3511_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_callExpressionSuffix3511	= { FOLLOW_indexSuffix_in_callExpressionSuffix3511_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3520  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3520	= { FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3520_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_arguments3542  */
static	ANTLR3_BITWORD FOLLOW_142_in_arguments3542_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x000003000002E000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_arguments3542	= { FOLLOW_142_in_arguments3542_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3544  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3544_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x000003000002E000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3544	= { FOLLOW_LTERM_in_arguments3544_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments3548  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments3548_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments3548	= { FOLLOW_assignmentExpression_in_arguments3548_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3552  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3552	= { FOLLOW_LTERM_in_arguments3552_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_arguments3555  */
static	ANTLR3_BITWORD FOLLOW_143_in_arguments3555_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_arguments3555	= { FOLLOW_143_in_arguments3555_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_arguments3569  */
static	ANTLR3_BITWORD FOLLOW_142_in_arguments3569_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_arguments3569	= { FOLLOW_142_in_arguments3569_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3571  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3571_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3571	= { FOLLOW_LTERM_in_arguments3571_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments3574  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments3574_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000018000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments3574	= { FOLLOW_assignmentExpression_in_arguments3574_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_arguments3577  */
static	ANTLR3_BITWORD FOLLOW_144_in_arguments3577_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_arguments3577	= { FOLLOW_144_in_arguments3577_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3579  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3579	= { FOLLOW_LTERM_in_arguments3579_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments3582  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments3582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000018000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments3582	= { FOLLOW_assignmentExpression_in_arguments3582_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3586  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3586	= { FOLLOW_LTERM_in_arguments3586_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_arguments3589  */
static	ANTLR3_BITWORD FOLLOW_143_in_arguments3589_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_arguments3589	= { FOLLOW_143_in_arguments3589_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_indexSuffix3615  */
static	ANTLR3_BITWORD FOLLOW_169_in_indexSuffix3615_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_indexSuffix3615	= { FOLLOW_169_in_indexSuffix3615_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3617  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3617_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3617	= { FOLLOW_LTERM_in_indexSuffix3617_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix3620  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix3620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix3620	= { FOLLOW_expression_in_indexSuffix3620_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3622  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3622_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3622	= { FOLLOW_LTERM_in_indexSuffix3622_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_170_in_indexSuffix3625  */
static	ANTLR3_BITWORD FOLLOW_170_in_indexSuffix3625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_170_in_indexSuffix3625	= { FOLLOW_170_in_indexSuffix3625_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_171_in_propertyReferenceSuffix3646  */
static	ANTLR3_BITWORD FOLLOW_171_in_propertyReferenceSuffix3646_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_171_in_propertyReferenceSuffix3646	= { FOLLOW_171_in_propertyReferenceSuffix3646_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix3648  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix3648_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix3648	= { FOLLOW_LTERM_in_propertyReferenceSuffix3648_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix3651  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix3651_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix3651	= { FOLLOW_Identifier_in_propertyReferenceSuffix3651_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_assignmentOperator3679  */
static	ANTLR3_BITWORD FOLLOW_149_in_assignmentOperator3679_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_assignmentOperator3679	= { FOLLOW_149_in_assignmentOperator3679_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_172_in_assignmentOperator3688  */
static	ANTLR3_BITWORD FOLLOW_172_in_assignmentOperator3688_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_172_in_assignmentOperator3688	= { FOLLOW_172_in_assignmentOperator3688_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_173_in_assignmentOperator3697  */
static	ANTLR3_BITWORD FOLLOW_173_in_assignmentOperator3697_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_173_in_assignmentOperator3697	= { FOLLOW_173_in_assignmentOperator3697_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_174_in_assignmentOperator3707  */
static	ANTLR3_BITWORD FOLLOW_174_in_assignmentOperator3707_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_174_in_assignmentOperator3707	= { FOLLOW_174_in_assignmentOperator3707_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_assignmentOperator3716  */
static	ANTLR3_BITWORD FOLLOW_175_in_assignmentOperator3716_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_assignmentOperator3716	= { FOLLOW_175_in_assignmentOperator3716_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_assignmentOperator3725  */
static	ANTLR3_BITWORD FOLLOW_176_in_assignmentOperator3725_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_assignmentOperator3725	= { FOLLOW_176_in_assignmentOperator3725_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_177_in_assignmentOperator3735  */
static	ANTLR3_BITWORD FOLLOW_177_in_assignmentOperator3735_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_177_in_assignmentOperator3735	= { FOLLOW_177_in_assignmentOperator3735_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_assignmentOperator3743  */
static	ANTLR3_BITWORD FOLLOW_178_in_assignmentOperator3743_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_assignmentOperator3743	= { FOLLOW_178_in_assignmentOperator3743_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_assignmentOperator3752  */
static	ANTLR3_BITWORD FOLLOW_179_in_assignmentOperator3752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_assignmentOperator3752	= { FOLLOW_179_in_assignmentOperator3752_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstruct_in_conditionalExpression3785  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstruct_in_conditionalExpression3785_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstruct_in_conditionalExpression3785	= { FOLLOW_msgRecvConstruct_in_conditionalExpression3785_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct3823  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct3823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct3823	= { FOLLOW_msgConstruct_in_msgRecvConstruct3823_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstruct3842  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstruct3842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstruct3842	= { FOLLOW_LTERM_in_msgRecvConstruct3842_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_msgRecvConstruct3845  */
static	ANTLR3_BITWORD FOLLOW_180_in_msgRecvConstruct3845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_msgRecvConstruct3845	= { FOLLOW_180_in_msgRecvConstruct3845_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstruct3847  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstruct3847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstruct3847	= { FOLLOW_LTERM_in_msgRecvConstruct3847_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct3852  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct3852_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct3852	= { FOLLOW_msgConstruct_in_msgRecvConstruct3852_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_msgRecvConstruct3854  */
static	ANTLR3_BITWORD FOLLOW_180_in_msgRecvConstruct3854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001C000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_msgRecvConstruct3854	= { FOLLOW_180_in_msgRecvConstruct3854_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct3858  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct3858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct3858	= { FOLLOW_msgConstruct_in_msgRecvConstruct3858_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstruct3889  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstruct3889_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstruct3889	= { FOLLOW_LTERM_in_msgRecvConstruct3889_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_msgRecvConstruct3892  */
static	ANTLR3_BITWORD FOLLOW_180_in_msgRecvConstruct3892_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_msgRecvConstruct3892	= { FOLLOW_180_in_msgRecvConstruct3892_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstruct3894  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstruct3894_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstruct3894	= { FOLLOW_LTERM_in_msgRecvConstruct3894_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct3899  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct3899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct3899	= { FOLLOW_msgConstruct_in_msgRecvConstruct3899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstruct_in_msgConstruct3941  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstruct_in_msgConstruct3941_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstruct_in_msgConstruct3941	= { FOLLOW_msgSenderConstruct_in_msgConstruct3941_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgConstruct3959  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgConstruct3959_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgConstruct3959	= { FOLLOW_LTERM_in_msgConstruct3959_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_msgConstruct3962  */
static	ANTLR3_BITWORD FOLLOW_181_in_msgConstruct3962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_msgConstruct3962	= { FOLLOW_181_in_msgConstruct3962_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgConstruct3964  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgConstruct3964_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgConstruct3964	= { FOLLOW_LTERM_in_msgConstruct3964_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstruct_in_msgConstruct3969  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstruct_in_msgConstruct3969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstruct_in_msgConstruct3969	= { FOLLOW_msgSenderConstruct_in_msgConstruct3969_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_msgSenderConstruct4009  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_msgSenderConstruct4009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_msgSenderConstruct4009	= { FOLLOW_ternaryExpression_in_msgSenderConstruct4009_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSenderConstruct4027  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSenderConstruct4027_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSenderConstruct4027	= { FOLLOW_LTERM_in_msgSenderConstruct4027_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_msgSenderConstruct4030  */
static	ANTLR3_BITWORD FOLLOW_182_in_msgSenderConstruct4030_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_msgSenderConstruct4030	= { FOLLOW_182_in_msgSenderConstruct4030_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSenderConstruct4032  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSenderConstruct4032_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSenderConstruct4032	= { FOLLOW_LTERM_in_msgSenderConstruct4032_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_msgSenderConstruct4037  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_msgSenderConstruct4037_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_msgSenderConstruct4037	= { FOLLOW_ternaryExpression_in_msgSenderConstruct4037_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_ternaryExpression4078  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_ternaryExpression4078_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_ternaryExpression4078	= { FOLLOW_logicalORExpression_in_ternaryExpression4078_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpression4086  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpression4086_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpression4086	= { FOLLOW_LTERM_in_ternaryExpression4086_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_ternaryExpression4089  */
static	ANTLR3_BITWORD FOLLOW_183_in_ternaryExpression4089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_ternaryExpression4089	= { FOLLOW_183_in_ternaryExpression4089_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpression4091  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpression4091_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpression4091	= { FOLLOW_LTERM_in_ternaryExpression4091_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_ternaryExpression4096  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_ternaryExpression4096_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_ternaryExpression4096	= { FOLLOW_assignmentExpression_in_ternaryExpression4096_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpression4098  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpression4098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpression4098	= { FOLLOW_LTERM_in_ternaryExpression4098_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_ternaryExpression4101  */
static	ANTLR3_BITWORD FOLLOW_162_in_ternaryExpression4101_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_ternaryExpression4101	= { FOLLOW_162_in_ternaryExpression4101_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpression4103  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpression4103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpression4103	= { FOLLOW_LTERM_in_ternaryExpression4103_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_ternaryExpression4108  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_ternaryExpression4108_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_ternaryExpression4108	= { FOLLOW_assignmentExpression_in_ternaryExpression4108_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn4151  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn4151_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn4151	= { FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn4151_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4178  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0010030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4178	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4178_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstructNoIn4197  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstructNoIn4197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstructNoIn4197	= { FOLLOW_LTERM_in_msgRecvConstructNoIn4197_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_msgRecvConstructNoIn4200  */
static	ANTLR3_BITWORD FOLLOW_180_in_msgRecvConstructNoIn4200_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_msgRecvConstructNoIn4200	= { FOLLOW_180_in_msgRecvConstructNoIn4200_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstructNoIn4202  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstructNoIn4202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstructNoIn4202	= { FOLLOW_LTERM_in_msgRecvConstructNoIn4202_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4207  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4207_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4207	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4207_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_msgRecvConstructNoIn4209  */
static	ANTLR3_BITWORD FOLLOW_180_in_msgRecvConstructNoIn4209_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001C000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_msgRecvConstructNoIn4209	= { FOLLOW_180_in_msgRecvConstructNoIn4209_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4213  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x001C000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4213	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4213_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4246  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4246_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4246	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4246_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstructNoIn4248  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstructNoIn4248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstructNoIn4248	= { FOLLOW_LTERM_in_msgRecvConstructNoIn4248_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_msgRecvConstructNoIn4251  */
static	ANTLR3_BITWORD FOLLOW_180_in_msgRecvConstructNoIn4251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_msgRecvConstructNoIn4251	= { FOLLOW_180_in_msgRecvConstructNoIn4251_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstructNoIn4253  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstructNoIn4253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstructNoIn4253	= { FOLLOW_LTERM_in_msgRecvConstructNoIn4253_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4258  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4258_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4258	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4258_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4311  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4311	= { FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4311_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgConstructNoIn4329  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgConstructNoIn4329_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgConstructNoIn4329	= { FOLLOW_LTERM_in_msgConstructNoIn4329_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_msgConstructNoIn4332  */
static	ANTLR3_BITWORD FOLLOW_181_in_msgConstructNoIn4332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001C000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_msgConstructNoIn4332	= { FOLLOW_181_in_msgConstructNoIn4332_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4336  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4336_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4336	= { FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4336_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4384  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4384_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4384	= { FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4384_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSenderConstructNoIn4402  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSenderConstructNoIn4402_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSenderConstructNoIn4402	= { FOLLOW_LTERM_in_msgSenderConstructNoIn4402_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_msgSenderConstructNoIn4405  */
static	ANTLR3_BITWORD FOLLOW_182_in_msgSenderConstructNoIn4405_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001C000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_msgSenderConstructNoIn4405	= { FOLLOW_182_in_msgSenderConstructNoIn4405_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4409  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4409	= { FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4409_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn4475  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn4475_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn4475	= { FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn4475_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpressionNoIn4483  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpressionNoIn4483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpressionNoIn4483	= { FOLLOW_LTERM_in_ternaryExpressionNoIn4483_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_ternaryExpressionNoIn4486  */
static	ANTLR3_BITWORD FOLLOW_183_in_ternaryExpressionNoIn4486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_ternaryExpressionNoIn4486	= { FOLLOW_183_in_ternaryExpressionNoIn4486_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpressionNoIn4488  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpressionNoIn4488_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpressionNoIn4488	= { FOLLOW_LTERM_in_ternaryExpressionNoIn4488_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4493  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4493	= { FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4493_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpressionNoIn4495  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpressionNoIn4495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpressionNoIn4495	= { FOLLOW_LTERM_in_ternaryExpressionNoIn4495_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_ternaryExpressionNoIn4498  */
static	ANTLR3_BITWORD FOLLOW_162_in_ternaryExpressionNoIn4498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_ternaryExpressionNoIn4498	= { FOLLOW_162_in_ternaryExpressionNoIn4498_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpressionNoIn4500  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpressionNoIn4500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpressionNoIn4500	= { FOLLOW_LTERM_in_ternaryExpressionNoIn4500_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4505  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4505_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4505	= { FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4505_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression4558  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression4558_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression4558	= { FOLLOW_logicalANDExpression_in_logicalORExpression4558_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression4565  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression4565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression4565	= { FOLLOW_LTERM_in_logicalORExpression4565_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_logicalORExpression4568  */
static	ANTLR3_BITWORD FOLLOW_184_in_logicalORExpression4568_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_logicalORExpression4568	= { FOLLOW_184_in_logicalORExpression4568_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression4570  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression4570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression4570	= { FOLLOW_LTERM_in_logicalORExpression4570_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression4573  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression4573_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression4573	= { FOLLOW_logicalANDExpression_in_logicalORExpression4573_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression4600  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression4600_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression4600	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression4600_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression4607  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression4607_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression4607	= { FOLLOW_LTERM_in_logicalANDExpression4607_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_185_in_logicalANDExpression4610  */
static	ANTLR3_BITWORD FOLLOW_185_in_logicalANDExpression4610_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_185_in_logicalANDExpression4610	= { FOLLOW_185_in_logicalANDExpression4610_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression4612  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression4612_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression4612	= { FOLLOW_LTERM_in_logicalANDExpression4612_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression4615  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression4615_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression4615	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression4615_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4643  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4643_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4643	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4643_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn4650  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn4650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn4650	= { FOLLOW_LTERM_in_logicalORExpressionNoIn4650_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_logicalORExpressionNoIn4653  */
static	ANTLR3_BITWORD FOLLOW_184_in_logicalORExpressionNoIn4653_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_logicalORExpressionNoIn4653	= { FOLLOW_184_in_logicalORExpressionNoIn4653_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn4655  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn4655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn4655	= { FOLLOW_LTERM_in_logicalORExpressionNoIn4655_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4658  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4658	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4658_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4687  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4687	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4687_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn4695  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn4695_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn4695	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn4695_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_185_in_logicalANDExpressionNoIn4698  */
static	ANTLR3_BITWORD FOLLOW_185_in_logicalANDExpressionNoIn4698_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_185_in_logicalANDExpressionNoIn4698	= { FOLLOW_185_in_logicalANDExpressionNoIn4698_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn4700  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn4700_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn4700	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn4700_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4703  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4703_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0200000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4703	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4703_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4730  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4730_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4730	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4730_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression4738  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression4738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression4738	= { FOLLOW_LTERM_in_bitwiseORExpression4738_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_186_in_bitwiseORExpression4741  */
static	ANTLR3_BITWORD FOLLOW_186_in_bitwiseORExpression4741_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_186_in_bitwiseORExpression4741	= { FOLLOW_186_in_bitwiseORExpression4741_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression4743  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression4743_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression4743	= { FOLLOW_LTERM_in_bitwiseORExpression4743_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4746  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4746_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4746	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4746_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4773  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4773	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4773_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn4781  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn4781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn4781	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn4781_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_186_in_bitwiseORExpressionNoIn4784  */
static	ANTLR3_BITWORD FOLLOW_186_in_bitwiseORExpressionNoIn4784_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_186_in_bitwiseORExpressionNoIn4784	= { FOLLOW_186_in_bitwiseORExpressionNoIn4784_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn4786  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn4786_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn4786	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn4786_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4789  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0400000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4789	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4789_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4815  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4815_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4815	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4815_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression4823  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression4823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression4823	= { FOLLOW_LTERM_in_bitwiseXORExpression4823_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_187_in_bitwiseXORExpression4826  */
static	ANTLR3_BITWORD FOLLOW_187_in_bitwiseXORExpression4826_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_187_in_bitwiseXORExpression4826	= { FOLLOW_187_in_bitwiseXORExpression4826_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression4828  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression4828_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression4828	= { FOLLOW_LTERM_in_bitwiseXORExpression4828_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4831  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4831_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4831	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4831_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4858  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4858	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4858_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4865  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4865_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4865	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4865_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_187_in_bitwiseXORExpressionNoIn4868  */
static	ANTLR3_BITWORD FOLLOW_187_in_bitwiseXORExpressionNoIn4868_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_187_in_bitwiseXORExpressionNoIn4868	= { FOLLOW_187_in_bitwiseXORExpressionNoIn4868_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4870  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4870	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4870_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4873  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4873_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0800000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4873	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4873_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression4901  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression4901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression4901	= { FOLLOW_equalityExpression_in_bitwiseANDExpression4901_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression4909  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression4909_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression4909	= { FOLLOW_LTERM_in_bitwiseANDExpression4909_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_188_in_bitwiseANDExpression4912  */
static	ANTLR3_BITWORD FOLLOW_188_in_bitwiseANDExpression4912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_188_in_bitwiseANDExpression4912	= { FOLLOW_188_in_bitwiseANDExpression4912_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression4914  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression4914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression4914	= { FOLLOW_LTERM_in_bitwiseANDExpression4914_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression4917  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression4917_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression4917	= { FOLLOW_equalityExpression_in_bitwiseANDExpression4917_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4945  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4945	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4945_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4953  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4953	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4953_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_188_in_bitwiseANDExpressionNoIn4956  */
static	ANTLR3_BITWORD FOLLOW_188_in_bitwiseANDExpressionNoIn4956_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_188_in_bitwiseANDExpressionNoIn4956	= { FOLLOW_188_in_bitwiseANDExpressionNoIn4956_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4958  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4958_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4958	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4958_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4961  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4961	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4961_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression4988  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression4988_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0xE000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression4988	= { FOLLOW_relationalExpression_in_equalityExpression4988_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression4995  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression4995_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0xE000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression4995	= { FOLLOW_LTERM_in_equalityExpression4995_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpression4998  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpression4998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpression4998	= { FOLLOW_equalityOps_in_equalityExpression4998_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression5000  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression5000_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression5000	= { FOLLOW_LTERM_in_equalityExpression5000_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression5003  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression5003_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0xE000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression5003	= { FOLLOW_relationalExpression_in_equalityExpression5003_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_189_in_equalityOps5029  */
static	ANTLR3_BITWORD FOLLOW_189_in_equalityOps5029_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_189_in_equalityOps5029	= { FOLLOW_189_in_equalityOps5029_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_equalityOps5039  */
static	ANTLR3_BITWORD FOLLOW_190_in_equalityOps5039_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_equalityOps5039	= { FOLLOW_190_in_equalityOps5039_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_equalityOps5049  */
static	ANTLR3_BITWORD FOLLOW_191_in_equalityOps5049_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_equalityOps5049	= { FOLLOW_191_in_equalityOps5049_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_equalityOps5059  */
static	ANTLR3_BITWORD FOLLOW_192_in_equalityOps5059_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_equalityOps5059	= { FOLLOW_192_in_equalityOps5059_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5083  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5083_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0xE000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5083	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5083_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn5090  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn5090_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0xE000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn5090	= { FOLLOW_LTERM_in_equalityExpressionNoIn5090_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpressionNoIn5093  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpressionNoIn5093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpressionNoIn5093	= { FOLLOW_equalityOps_in_equalityExpressionNoIn5093_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn5095  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn5095_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn5095	= { FOLLOW_LTERM_in_equalityExpressionNoIn5095_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5098  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0xE000000000000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5098	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5098_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_relationalOps5130  */
static	ANTLR3_BITWORD FOLLOW_193_in_relationalOps5130_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_relationalOps5130	= { FOLLOW_193_in_relationalOps5130_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_relationalOps5141  */
static	ANTLR3_BITWORD FOLLOW_194_in_relationalOps5141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_relationalOps5141	= { FOLLOW_194_in_relationalOps5141_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_relationalOps5152  */
static	ANTLR3_BITWORD FOLLOW_195_in_relationalOps5152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_relationalOps5152	= { FOLLOW_195_in_relationalOps5152_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_196_in_relationalOps5162  */
static	ANTLR3_BITWORD FOLLOW_196_in_relationalOps5162_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_196_in_relationalOps5162	= { FOLLOW_196_in_relationalOps5162_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_197_in_relationalOps5172  */
static	ANTLR3_BITWORD FOLLOW_197_in_relationalOps5172_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_197_in_relationalOps5172	= { FOLLOW_197_in_relationalOps5172_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_relationalOps5182  */
static	ANTLR3_BITWORD FOLLOW_155_in_relationalOps5182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_relationalOps5182	= { FOLLOW_155_in_relationalOps5182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpression5215  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpression5215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000008000000), ANTLR3_UINT64_LIT(0x000000000000003E) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpression5215	= { FOLLOW_additiveExpression_in_relationalExpression5215_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression5223  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression5223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000008000000), ANTLR3_UINT64_LIT(0x000000000000003E) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression5223	= { FOLLOW_LTERM_in_relationalExpression5223_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_relationalExpression5226  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_relationalExpression5226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_relationalExpression5226	= { FOLLOW_relationalOps_in_relationalExpression5226_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression5228  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression5228_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression5228	= { FOLLOW_LTERM_in_relationalExpression5228_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpression5231  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpression5231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000008000000), ANTLR3_UINT64_LIT(0x000000000000003E) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpression5231	= { FOLLOW_additiveExpression_in_relationalExpression5231_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_relationalOpsNoIn5262  */
static	ANTLR3_BITWORD FOLLOW_193_in_relationalOpsNoIn5262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_relationalOpsNoIn5262	= { FOLLOW_193_in_relationalOpsNoIn5262_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_relationalOpsNoIn5273  */
static	ANTLR3_BITWORD FOLLOW_194_in_relationalOpsNoIn5273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_relationalOpsNoIn5273	= { FOLLOW_194_in_relationalOpsNoIn5273_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_relationalOpsNoIn5284  */
static	ANTLR3_BITWORD FOLLOW_195_in_relationalOpsNoIn5284_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_relationalOpsNoIn5284	= { FOLLOW_195_in_relationalOpsNoIn5284_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_196_in_relationalOpsNoIn5294  */
static	ANTLR3_BITWORD FOLLOW_196_in_relationalOpsNoIn5294_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_196_in_relationalOpsNoIn5294	= { FOLLOW_196_in_relationalOpsNoIn5294_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_197_in_relationalOpsNoIn5304  */
static	ANTLR3_BITWORD FOLLOW_197_in_relationalOpsNoIn5304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_197_in_relationalOpsNoIn5304	= { FOLLOW_197_in_relationalOpsNoIn5304_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_198_in_addOps5319  */
static	ANTLR3_BITWORD FOLLOW_198_in_addOps5319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_198_in_addOps5319	= { FOLLOW_198_in_addOps5319_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_199_in_addOps5329  */
static	ANTLR3_BITWORD FOLLOW_199_in_addOps5329_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_199_in_addOps5329	= { FOLLOW_199_in_addOps5329_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpressionNoIn5354  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpressionNoIn5354_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000000000003E) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpressionNoIn5354	= { FOLLOW_additiveExpression_in_relationalExpressionNoIn5354_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn5362  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn5362_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000000000003E) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn5362	= { FOLLOW_LTERM_in_relationalExpressionNoIn5362_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5365  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5365_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5365	= { FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5365_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn5367  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn5367_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn5367	= { FOLLOW_LTERM_in_relationalExpressionNoIn5367_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpressionNoIn5370  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpressionNoIn5370_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000000000003E) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpressionNoIn5370	= { FOLLOW_additiveExpression_in_relationalExpressionNoIn5370_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression5397  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression5397_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000000000C0) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression5397	= { FOLLOW_multiplicativeExpression_in_additiveExpression5397_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression5404  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression5404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000000000C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression5404	= { FOLLOW_LTERM_in_additiveExpression5404_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_additiveExpression5407  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_additiveExpression5407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_additiveExpression5407	= { FOLLOW_addOps_in_additiveExpression5407_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression5409  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression5409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression5409	= { FOLLOW_LTERM_in_additiveExpression5409_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression5412  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression5412_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000000000C0) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression5412	= { FOLLOW_multiplicativeExpression_in_additiveExpression5412_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_200_in_multOps5437  */
static	ANTLR3_BITWORD FOLLOW_200_in_multOps5437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_200_in_multOps5437	= { FOLLOW_200_in_multOps5437_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_201_in_multOps5447  */
static	ANTLR3_BITWORD FOLLOW_201_in_multOps5447_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_201_in_multOps5447	= { FOLLOW_201_in_multOps5447_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_202_in_multOps5457  */
static	ANTLR3_BITWORD FOLLOW_202_in_multOps5457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_202_in_multOps5457	= { FOLLOW_202_in_multOps5457_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression5476  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression5476_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000700) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression5476	= { FOLLOW_unaryExpression_in_multiplicativeExpression5476_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression5485  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression5485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000700) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression5485	= { FOLLOW_LTERM_in_multiplicativeExpression5485_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multOps_in_multiplicativeExpression5488  */
static	ANTLR3_BITWORD FOLLOW_multOps_in_multiplicativeExpression5488_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_multOps_in_multiplicativeExpression5488	= { FOLLOW_multOps_in_multiplicativeExpression5488_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression5490  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression5490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression5490	= { FOLLOW_LTERM_in_multiplicativeExpression5490_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression5493  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression5493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000700) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression5493	= { FOLLOW_unaryExpression_in_multiplicativeExpression5493_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression5520  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression5520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression5520	= { FOLLOW_leftHandSideExpression_in_postfixExpression5520_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_203_in_postfixExpression5522  */
static	ANTLR3_BITWORD FOLLOW_203_in_postfixExpression5522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_203_in_postfixExpression5522	= { FOLLOW_203_in_postfixExpression5522_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression5536  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression5536_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression5536	= { FOLLOW_leftHandSideExpression_in_postfixExpression5536_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_204_in_postfixExpression5538  */
static	ANTLR3_BITWORD FOLLOW_204_in_postfixExpression5538_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_204_in_postfixExpression5538	= { FOLLOW_204_in_postfixExpression5538_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression5551  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression5551_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression5551	= { FOLLOW_leftHandSideExpression_in_postfixExpression5551_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_205_in_unaryOps5565  */
static	ANTLR3_BITWORD FOLLOW_205_in_unaryOps5565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_205_in_unaryOps5565	= { FOLLOW_205_in_unaryOps5565_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_206_in_unaryOps5575  */
static	ANTLR3_BITWORD FOLLOW_206_in_unaryOps5575_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_206_in_unaryOps5575	= { FOLLOW_206_in_unaryOps5575_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_207_in_unaryOps5585  */
static	ANTLR3_BITWORD FOLLOW_207_in_unaryOps5585_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_207_in_unaryOps5585	= { FOLLOW_207_in_unaryOps5585_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_208_in_unaryOps5595  */
static	ANTLR3_BITWORD FOLLOW_208_in_unaryOps5595_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_208_in_unaryOps5595	= { FOLLOW_208_in_unaryOps5595_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_204_in_unaryOps5605  */
static	ANTLR3_BITWORD FOLLOW_204_in_unaryOps5605_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_204_in_unaryOps5605	= { FOLLOW_204_in_unaryOps5605_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_203_in_unaryOps5616  */
static	ANTLR3_BITWORD FOLLOW_203_in_unaryOps5616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_203_in_unaryOps5616	= { FOLLOW_203_in_unaryOps5616_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_198_in_unaryOps5627  */
static	ANTLR3_BITWORD FOLLOW_198_in_unaryOps5627_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_198_in_unaryOps5627	= { FOLLOW_198_in_unaryOps5627_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_199_in_unaryOps5639  */
static	ANTLR3_BITWORD FOLLOW_199_in_unaryOps5639_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_199_in_unaryOps5639	= { FOLLOW_199_in_unaryOps5639_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_209_in_unaryOps5651  */
static	ANTLR3_BITWORD FOLLOW_209_in_unaryOps5651_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_209_in_unaryOps5651	= { FOLLOW_209_in_unaryOps5651_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_210_in_unaryOps5663  */
static	ANTLR3_BITWORD FOLLOW_210_in_unaryOps5663_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_210_in_unaryOps5663	= { FOLLOW_210_in_unaryOps5663_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_unaryExpression5689  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_unaryExpression5689_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_unaryExpression5689	= { FOLLOW_postfixExpression_in_unaryExpression5689_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryOps_in_unaryExpression5705  */
static	ANTLR3_BITWORD FOLLOW_unaryOps_in_unaryExpression5705_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001C000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryOps_in_unaryExpression5705	= { FOLLOW_unaryOps_in_unaryExpression5705_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_unaryExpression5709  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_unaryExpression5709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_unaryExpression5709	= { FOLLOW_unaryExpression_in_unaryExpression5709_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_211_in_primaryExpression5738  */
static	ANTLR3_BITWORD FOLLOW_211_in_primaryExpression5738_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_211_in_primaryExpression5738	= { FOLLOW_211_in_primaryExpression5738_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteral_in_primaryExpression5756  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteral_in_primaryExpression5756_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteral_in_primaryExpression5756	= { FOLLOW_vectorLiteral_in_primaryExpression5756_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_quaternionLiteral_in_primaryExpression5774  */
static	ANTLR3_BITWORD FOLLOW_quaternionLiteral_in_primaryExpression5774_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_quaternionLiteral_in_primaryExpression5774	= { FOLLOW_quaternionLiteral_in_primaryExpression5774_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_primaryExpression5779  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_primaryExpression5779_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_primaryExpression5779	= { FOLLOW_Identifier_in_primaryExpression5779_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dollarExpression_in_primaryExpression5791  */
static	ANTLR3_BITWORD FOLLOW_dollarExpression_in_primaryExpression5791_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dollarExpression_in_primaryExpression5791	= { FOLLOW_dollarExpression_in_primaryExpression5791_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primaryExpression5796  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primaryExpression5796_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primaryExpression5796	= { FOLLOW_literal_in_primaryExpression5796_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayLiteral_in_primaryExpression5801  */
static	ANTLR3_BITWORD FOLLOW_arrayLiteral_in_primaryExpression5801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayLiteral_in_primaryExpression5801	= { FOLLOW_arrayLiteral_in_primaryExpression5801_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_primaryExpression5806  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_primaryExpression5806_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_primaryExpression5806	= { FOLLOW_objectLiteral_in_primaryExpression5806_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_patternLiteral_in_primaryExpression5818  */
static	ANTLR3_BITWORD FOLLOW_patternLiteral_in_primaryExpression5818_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_patternLiteral_in_primaryExpression5818	= { FOLLOW_patternLiteral_in_primaryExpression5818_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_primaryExpression5823  */
static	ANTLR3_BITWORD FOLLOW_142_in_primaryExpression5823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_primaryExpression5823	= { FOLLOW_142_in_primaryExpression5823_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression5825  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression5825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression5825	= { FOLLOW_LTERM_in_primaryExpression5825_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primaryExpression5828  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primaryExpression5828_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primaryExpression5828	= { FOLLOW_expression_in_primaryExpression5828_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression5830  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression5830_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression5830	= { FOLLOW_LTERM_in_primaryExpression5830_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_primaryExpression5833  */
static	ANTLR3_BITWORD FOLLOW_143_in_primaryExpression5833_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_primaryExpression5833	= { FOLLOW_143_in_primaryExpression5833_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_vectorLiteral5861  */
static	ANTLR3_BITWORD FOLLOW_193_in_vectorLiteral5861_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_vectorLiteral5861	= { FOLLOW_193_in_vectorLiteral5861_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5863  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5863	= { FOLLOW_LTERM_in_vectorLiteral5863_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral5868  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral5868_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral5868	= { FOLLOW_vectorLiteralField_in_vectorLiteral5868_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5870  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5870	= { FOLLOW_LTERM_in_vectorLiteral5870_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_vectorLiteral5873  */
static	ANTLR3_BITWORD FOLLOW_144_in_vectorLiteral5873_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_vectorLiteral5873	= { FOLLOW_144_in_vectorLiteral5873_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5875  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5875_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5875	= { FOLLOW_LTERM_in_vectorLiteral5875_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral5880  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral5880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral5880	= { FOLLOW_vectorLiteralField_in_vectorLiteral5880_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5882  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5882_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5882	= { FOLLOW_LTERM_in_vectorLiteral5882_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_vectorLiteral5885  */
static	ANTLR3_BITWORD FOLLOW_144_in_vectorLiteral5885_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_vectorLiteral5885	= { FOLLOW_144_in_vectorLiteral5885_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5887  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5887_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5887	= { FOLLOW_LTERM_in_vectorLiteral5887_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral5892  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral5892_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral5892	= { FOLLOW_vectorLiteralField_in_vectorLiteral5892_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5894  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5894_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5894	= { FOLLOW_LTERM_in_vectorLiteral5894_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_vectorLiteral5897  */
static	ANTLR3_BITWORD FOLLOW_194_in_vectorLiteral5897_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_vectorLiteral5897	= { FOLLOW_194_in_vectorLiteral5897_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_quaternionLiteral5937  */
static	ANTLR3_BITWORD FOLLOW_193_in_quaternionLiteral5937_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_quaternionLiteral5937	= { FOLLOW_193_in_quaternionLiteral5937_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5939  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5939	= { FOLLOW_LTERM_in_quaternionLiteral5939_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral5944  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral5944_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral5944	= { FOLLOW_vectorLiteralField_in_quaternionLiteral5944_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5946  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5946_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5946	= { FOLLOW_LTERM_in_quaternionLiteral5946_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_quaternionLiteral5949  */
static	ANTLR3_BITWORD FOLLOW_144_in_quaternionLiteral5949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_quaternionLiteral5949	= { FOLLOW_144_in_quaternionLiteral5949_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5951  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5951	= { FOLLOW_LTERM_in_quaternionLiteral5951_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral5956  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral5956_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral5956	= { FOLLOW_vectorLiteralField_in_quaternionLiteral5956_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5958  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5958_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5958	= { FOLLOW_LTERM_in_quaternionLiteral5958_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_quaternionLiteral5961  */
static	ANTLR3_BITWORD FOLLOW_144_in_quaternionLiteral5961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_quaternionLiteral5961	= { FOLLOW_144_in_quaternionLiteral5961_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5963  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5963_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5963	= { FOLLOW_LTERM_in_quaternionLiteral5963_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral5968  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral5968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral5968	= { FOLLOW_vectorLiteralField_in_quaternionLiteral5968_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5970  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5970	= { FOLLOW_LTERM_in_quaternionLiteral5970_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_quaternionLiteral5973  */
static	ANTLR3_BITWORD FOLLOW_144_in_quaternionLiteral5973_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_quaternionLiteral5973	= { FOLLOW_144_in_quaternionLiteral5973_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5975  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5975_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5975	= { FOLLOW_LTERM_in_quaternionLiteral5975_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral5980  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral5980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral5980	= { FOLLOW_vectorLiteralField_in_quaternionLiteral5980_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral5982  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral5982_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral5982	= { FOLLOW_LTERM_in_quaternionLiteral5982_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_quaternionLiteral5984  */
static	ANTLR3_BITWORD FOLLOW_194_in_quaternionLiteral5984_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_quaternionLiteral5984	= { FOLLOW_194_in_quaternionLiteral5984_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_quaternionLiteral6014  */
static	ANTLR3_BITWORD FOLLOW_193_in_quaternionLiteral6014_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_quaternionLiteral6014	= { FOLLOW_193_in_quaternionLiteral6014_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6016  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6016_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6016	= { FOLLOW_LTERM_in_quaternionLiteral6016_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral6021  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral6021_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral6021	= { FOLLOW_vectorLiteralField_in_quaternionLiteral6021_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6023  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6023	= { FOLLOW_LTERM_in_quaternionLiteral6023_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_quaternionLiteral6026  */
static	ANTLR3_BITWORD FOLLOW_144_in_quaternionLiteral6026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_quaternionLiteral6026	= { FOLLOW_144_in_quaternionLiteral6026_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6028  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6028	= { FOLLOW_LTERM_in_quaternionLiteral6028_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral6033  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral6033_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral6033	= { FOLLOW_vectorLiteralField_in_quaternionLiteral6033_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6035  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6035	= { FOLLOW_LTERM_in_quaternionLiteral6035_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_quaternionLiteral6038  */
static	ANTLR3_BITWORD FOLLOW_144_in_quaternionLiteral6038_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_quaternionLiteral6038	= { FOLLOW_144_in_quaternionLiteral6038_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6040  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6040	= { FOLLOW_LTERM_in_quaternionLiteral6040_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral6045  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral6045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral6045	= { FOLLOW_vectorLiteralField_in_quaternionLiteral6045_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6047  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6047	= { FOLLOW_LTERM_in_quaternionLiteral6047_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_quaternionLiteral6050  */
static	ANTLR3_BITWORD FOLLOW_147_in_quaternionLiteral6050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_quaternionLiteral6050	= { FOLLOW_147_in_quaternionLiteral6050_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6052  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6052_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6052	= { FOLLOW_LTERM_in_quaternionLiteral6052_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral6057  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral6057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral6057	= { FOLLOW_vectorLiteralField_in_quaternionLiteral6057_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6059  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6059_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6059	= { FOLLOW_LTERM_in_quaternionLiteral6059_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_quaternionLiteral6061  */
static	ANTLR3_BITWORD FOLLOW_194_in_quaternionLiteral6061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_quaternionLiteral6061	= { FOLLOW_194_in_quaternionLiteral6061_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_quaternionLiteral6091  */
static	ANTLR3_BITWORD FOLLOW_193_in_quaternionLiteral6091_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_quaternionLiteral6091	= { FOLLOW_193_in_quaternionLiteral6091_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6093  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6093	= { FOLLOW_LTERM_in_quaternionLiteral6093_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral6098  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral6098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral6098	= { FOLLOW_vectorLiteralField_in_quaternionLiteral6098_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6100  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6100	= { FOLLOW_LTERM_in_quaternionLiteral6100_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_quaternionLiteral6103  */
static	ANTLR3_BITWORD FOLLOW_147_in_quaternionLiteral6103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_quaternionLiteral6103	= { FOLLOW_147_in_quaternionLiteral6103_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6105  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6105	= { FOLLOW_LTERM_in_quaternionLiteral6105_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_quaternionLiteral6110  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_quaternionLiteral6110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_quaternionLiteral6110	= { FOLLOW_vectorLiteralField_in_quaternionLiteral6110_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_quaternionLiteral6112  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_quaternionLiteral6112_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_quaternionLiteral6112	= { FOLLOW_LTERM_in_quaternionLiteral6112_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_quaternionLiteral6114  */
static	ANTLR3_BITWORD FOLLOW_194_in_quaternionLiteral6114_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_quaternionLiteral6114	= { FOLLOW_194_in_quaternionLiteral6114_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_vectorLiteralField6162  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_vectorLiteralField6162_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_vectorLiteralField6162	= { FOLLOW_additiveExpression_in_vectorLiteralField6162_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_vectorLiteralField6175  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_vectorLiteralField6175_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_vectorLiteralField6175	= { FOLLOW_NumericLiteral_in_vectorLiteralField6175_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_vectorLiteralField6187  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_vectorLiteralField6187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_vectorLiteralField6187	= { FOLLOW_callExpression_in_vectorLiteralField6187_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_vectorLiteralField6200  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_vectorLiteralField6200_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_vectorLiteralField6200	= { FOLLOW_memberExpression_in_vectorLiteralField6200_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_212_in_dollarExpression6234  */
static	ANTLR3_BITWORD FOLLOW_212_in_dollarExpression6234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_212_in_dollarExpression6234	= { FOLLOW_212_in_dollarExpression6234_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_dollarExpression6236  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_dollarExpression6236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0006000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_dollarExpression6236	= { FOLLOW_LTERM_in_dollarExpression6236_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_dollarExpression6239  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_dollarExpression6239_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_dollarExpression6239	= { FOLLOW_Identifier_in_dollarExpression6239_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_dollarExpression6241  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_dollarExpression6241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_dollarExpression6241	= { FOLLOW_LTERM_in_dollarExpression6241_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_212_in_dollarExpression6244  */
static	ANTLR3_BITWORD FOLLOW_212_in_dollarExpression6244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_212_in_dollarExpression6244	= { FOLLOW_212_in_dollarExpression6244_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_arrayLiteral6280  */
static	ANTLR3_BITWORD FOLLOW_169_in_arrayLiteral6280_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000070000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_arrayLiteral6280	= { FOLLOW_169_in_arrayLiteral6280_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral6282  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral6282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000070000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral6282	= { FOLLOW_LTERM_in_arrayLiteral6282_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral6286  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral6286_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral6286	= { FOLLOW_expression_in_arrayLiteral6286_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral6290  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral6290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral6290	= { FOLLOW_LTERM_in_arrayLiteral6290_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_170_in_arrayLiteral6293  */
static	ANTLR3_BITWORD FOLLOW_170_in_arrayLiteral6293_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_170_in_arrayLiteral6293	= { FOLLOW_170_in_arrayLiteral6293_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_arrayLiteral6308  */
static	ANTLR3_BITWORD FOLLOW_169_in_arrayLiteral6308_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_arrayLiteral6308	= { FOLLOW_169_in_arrayLiteral6308_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral6310  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral6310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral6310	= { FOLLOW_LTERM_in_arrayLiteral6310_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral6315  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral6315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000040000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral6315	= { FOLLOW_expression_in_arrayLiteral6315_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_arrayLiteral6318  */
static	ANTLR3_BITWORD FOLLOW_144_in_arrayLiteral6318_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_arrayLiteral6318	= { FOLLOW_144_in_arrayLiteral6318_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral6320  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral6320_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral6320	= { FOLLOW_LTERM_in_arrayLiteral6320_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral6325  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral6325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000040000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral6325	= { FOLLOW_expression_in_arrayLiteral6325_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_arrayLiteral6330  */
static	ANTLR3_BITWORD FOLLOW_144_in_arrayLiteral6330_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_arrayLiteral6330	= { FOLLOW_144_in_arrayLiteral6330_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral6334  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral6334_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral6334	= { FOLLOW_LTERM_in_arrayLiteral6334_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_170_in_arrayLiteral6337  */
static	ANTLR3_BITWORD FOLLOW_170_in_arrayLiteral6337_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_170_in_arrayLiteral6337	= { FOLLOW_170_in_arrayLiteral6337_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_objectLiteral6369  */
static	ANTLR3_BITWORD FOLLOW_145_in_objectLiteral6369_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_objectLiteral6369	= { FOLLOW_145_in_objectLiteral6369_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral6371  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral6371_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral6371	= { FOLLOW_LTERM_in_objectLiteral6371_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral6374  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral6374_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral6374	= { FOLLOW_propertyNameAndValue_in_objectLiteral6374_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral6377  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral6377_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral6377	= { FOLLOW_LTERM_in_objectLiteral6377_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_objectLiteral6380  */
static	ANTLR3_BITWORD FOLLOW_146_in_objectLiteral6380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_objectLiteral6380	= { FOLLOW_146_in_objectLiteral6380_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_objectLiteral6395  */
static	ANTLR3_BITWORD FOLLOW_145_in_objectLiteral6395_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_objectLiteral6395	= { FOLLOW_145_in_objectLiteral6395_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral6397  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral6397_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral6397	= { FOLLOW_LTERM_in_objectLiteral6397_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral6402  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral6402_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000050000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral6402	= { FOLLOW_propertyNameAndValue_in_objectLiteral6402_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_objectLiteral6405  */
static	ANTLR3_BITWORD FOLLOW_144_in_objectLiteral6405_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_objectLiteral6405	= { FOLLOW_144_in_objectLiteral6405_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral6407  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral6407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral6407	= { FOLLOW_LTERM_in_objectLiteral6407_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral6412  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral6412_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000050000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral6412	= { FOLLOW_propertyNameAndValue_in_objectLiteral6412_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_objectLiteral6417  */
static	ANTLR3_BITWORD FOLLOW_144_in_objectLiteral6417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_objectLiteral6417	= { FOLLOW_144_in_objectLiteral6417_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral6421  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral6421_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral6421	= { FOLLOW_LTERM_in_objectLiteral6421_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_objectLiteral6428  */
static	ANTLR3_BITWORD FOLLOW_146_in_objectLiteral6428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_objectLiteral6428	= { FOLLOW_146_in_objectLiteral6428_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_patternLiteral6454  */
static	ANTLR3_BITWORD FOLLOW_145_in_patternLiteral6454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000000400040000) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_patternLiteral6454	= { FOLLOW_145_in_patternLiteral6454_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral6456  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral6456_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000000400040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral6456	= { FOLLOW_LTERM_in_patternLiteral6456_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral6459  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral6459_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral6459	= { FOLLOW_nameValueProto_in_patternLiteral6459_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral6462  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral6462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral6462	= { FOLLOW_LTERM_in_patternLiteral6462_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_patternLiteral6465  */
static	ANTLR3_BITWORD FOLLOW_146_in_patternLiteral6465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_patternLiteral6465	= { FOLLOW_146_in_patternLiteral6465_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_patternLiteral6480  */
static	ANTLR3_BITWORD FOLLOW_145_in_patternLiteral6480_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_patternLiteral6480	= { FOLLOW_145_in_patternLiteral6480_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral6482  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral6482_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral6482	= { FOLLOW_LTERM_in_patternLiteral6482_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral6488  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral6488_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000050000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral6488	= { FOLLOW_nameValueProto_in_patternLiteral6488_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_patternLiteral6491  */
static	ANTLR3_BITWORD FOLLOW_144_in_patternLiteral6491_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_patternLiteral6491	= { FOLLOW_144_in_patternLiteral6491_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral6493  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral6493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral6493	= { FOLLOW_LTERM_in_patternLiteral6493_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral6498  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral6498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000050000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral6498	= { FOLLOW_nameValueProto_in_patternLiteral6498_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral6502  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral6502_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral6502	= { FOLLOW_LTERM_in_patternLiteral6502_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_patternLiteral6505  */
static	ANTLR3_BITWORD FOLLOW_146_in_patternLiteral6505_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_patternLiteral6505	= { FOLLOW_146_in_patternLiteral6505_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_propertyNameAndValue6535  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_propertyNameAndValue6535_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_propertyNameAndValue6535	= { FOLLOW_propertyName_in_propertyNameAndValue6535_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue6537  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue6537_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue6537	= { FOLLOW_LTERM_in_propertyNameAndValue6537_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_propertyNameAndValue6540  */
static	ANTLR3_BITWORD FOLLOW_162_in_propertyNameAndValue6540_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_propertyNameAndValue6540	= { FOLLOW_162_in_propertyNameAndValue6540_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue6542  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue6542_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue6542	= { FOLLOW_LTERM_in_propertyNameAndValue6542_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_propertyNameAndValue6545  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_propertyNameAndValue6545_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_propertyNameAndValue6545	= { FOLLOW_assignmentExpression_in_propertyNameAndValue6545_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_nameValueProto6578  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_nameValueProto6578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_nameValueProto6578	= { FOLLOW_propertyName_in_nameValueProto6578_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6580  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6580_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6580	= { FOLLOW_LTERM_in_nameValueProto6580_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_nameValueProto6584  */
static	ANTLR3_BITWORD FOLLOW_162_in_nameValueProto6584_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030400026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_nameValueProto6584	= { FOLLOW_162_in_nameValueProto6584_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6587  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6587_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030400026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6587	= { FOLLOW_LTERM_in_nameValueProto6587_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_nameValueProto6593  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_nameValueProto6593_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_nameValueProto6593	= { FOLLOW_assignmentExpression_in_nameValueProto6593_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6595  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6595_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6595	= { FOLLOW_LTERM_in_nameValueProto6595_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_nameValueProto6600  */
static	ANTLR3_BITWORD FOLLOW_162_in_nameValueProto6600_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_nameValueProto6600	= { FOLLOW_162_in_nameValueProto6600_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6602  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6602_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6602	= { FOLLOW_LTERM_in_nameValueProto6602_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_nameValueProto6609  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_nameValueProto6609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_nameValueProto6609	= { FOLLOW_assignmentExpression_in_nameValueProto6609_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6653  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6653_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6653	= { FOLLOW_LTERM_in_nameValueProto6653_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_nameValueProto6656  */
static	ANTLR3_BITWORD FOLLOW_162_in_nameValueProto6656_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_nameValueProto6656	= { FOLLOW_162_in_nameValueProto6656_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6658  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6658	= { FOLLOW_LTERM_in_nameValueProto6658_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_nameValueProto6661  */
static	ANTLR3_BITWORD FOLLOW_162_in_nameValueProto6661_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_nameValueProto6661	= { FOLLOW_162_in_nameValueProto6661_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_propertyName0  */
static	ANTLR3_BITWORD FOLLOW_set_in_propertyName0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_propertyName0	= { FOLLOW_set_in_propertyName0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred1_Emerson909  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred1_Emerson909_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred1_Emerson909	= { FOLLOW_LTERM_in_synpred1_Emerson909_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred4_Emerson951  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred4_Emerson951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred4_Emerson951	= { FOLLOW_LTERM_in_synpred4_Emerson951_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred8_Emerson1008  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred8_Emerson1008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred8_Emerson1008	= { FOLLOW_LTERM_in_synpred8_Emerson1008_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred11_Emerson1045  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred11_Emerson1045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred11_Emerson1045	= { FOLLOW_LTERM_in_synpred11_Emerson1045_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred14_Emerson1056  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred14_Emerson1056_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred14_Emerson1056	= { FOLLOW_LTERM_in_synpred14_Emerson1056_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred22_Emerson1147  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred22_Emerson1147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred22_Emerson1147	= { FOLLOW_LTERM_in_synpred22_Emerson1147_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_synpred24_Emerson1181  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_synpred24_Emerson1181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_synpred24_Emerson1181	= { FOLLOW_switchStatement_in_synpred24_Emerson1181_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_synpred26_Emerson1203  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_synpred26_Emerson1203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_synpred26_Emerson1203	= { FOLLOW_statementBlock_in_synpred26_Emerson1203_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_synpred28_Emerson1213  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_synpred28_Emerson1213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_synpred28_Emerson1213	= { FOLLOW_expressionStatement_in_synpred28_Emerson1213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred36_Emerson1267  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred36_Emerson1267_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred36_Emerson1267	= { FOLLOW_LTERM_in_synpred36_Emerson1267_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred40_Emerson1346  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred40_Emerson1346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred40_Emerson1346	= { FOLLOW_LTERM_in_synpred40_Emerson1346_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred50_Emerson1469  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred50_Emerson1469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred50_Emerson1469	= { FOLLOW_LTERM_in_synpred50_Emerson1469_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred52_Emerson1498  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred52_Emerson1498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred52_Emerson1498	= { FOLLOW_LTERM_in_synpred52_Emerson1498_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred60_Emerson1615  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred60_Emerson1615_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred60_Emerson1615	= { FOLLOW_LTERM_in_synpred60_Emerson1615_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred62_Emerson1628  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred62_Emerson1628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred62_Emerson1628	= { FOLLOW_LTERM_in_synpred62_Emerson1628_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred63_Emerson1623  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred63_Emerson1623_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred63_Emerson1623	= { FOLLOW_LTERM_in_synpred63_Emerson1623_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_synpred63_Emerson1626  */
static	ANTLR3_BITWORD FOLLOW_151_in_synpred63_Emerson1626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_synpred63_Emerson1626	= { FOLLOW_151_in_synpred63_Emerson1626_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred63_Emerson1628  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred63_Emerson1628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000331F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred63_Emerson1628	= { FOLLOW_LTERM_in_synpred63_Emerson1628_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred63_Emerson1633  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred63_Emerson1633_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred63_Emerson1633	= { FOLLOW_statement_in_synpred63_Emerson1633_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_synpred66_Emerson1675  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_synpred66_Emerson1675_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_synpred66_Emerson1675	= { FOLLOW_forStatement_in_synpred66_Emerson1675_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred67_Emerson1694  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred67_Emerson1694_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred67_Emerson1694	= { FOLLOW_LTERM_in_synpred67_Emerson1694_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred74_Emerson1761  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred74_Emerson1761_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred74_Emerson1761	= { FOLLOW_LTERM_in_synpred74_Emerson1761_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred85_Emerson1839  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred85_Emerson1839_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred85_Emerson1839	= { FOLLOW_LTERM_in_synpred85_Emerson1839_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred93_Emerson1948  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred93_Emerson1948_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred93_Emerson1948	= { FOLLOW_LTERM_in_synpred93_Emerson1948_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred105_Emerson2120  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred105_Emerson2120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred105_Emerson2120	= { FOLLOW_LTERM_in_synpred105_Emerson2120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred110_Emerson2199  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred110_Emerson2199_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred110_Emerson2199	= { FOLLOW_LTERM_in_synpred110_Emerson2199_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred118_Emerson2303  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred118_Emerson2303_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred118_Emerson2303	= { FOLLOW_LTERM_in_synpred118_Emerson2303_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_161_in_synpred121_Emerson2289  */
static	ANTLR3_BITWORD FOLLOW_161_in_synpred121_Emerson2289_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_161_in_synpred121_Emerson2289	= { FOLLOW_161_in_synpred121_Emerson2289_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred121_Emerson2291  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred121_Emerson2291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred121_Emerson2291	= { FOLLOW_LTERM_in_synpred121_Emerson2291_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_synpred121_Emerson2296  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_synpred121_Emerson2296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_synpred121_Emerson2296	= { FOLLOW_ternaryExpression_in_synpred121_Emerson2296_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred121_Emerson2298  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred121_Emerson2298_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred121_Emerson2298	= { FOLLOW_LTERM_in_synpred121_Emerson2298_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_synpred121_Emerson2301  */
static	ANTLR3_BITWORD FOLLOW_162_in_synpred121_Emerson2301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000339F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_synpred121_Emerson2301	= { FOLLOW_162_in_synpred121_Emerson2301_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred121_Emerson2303  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred121_Emerson2303_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x00000339F75A6000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred121_Emerson2303	= { FOLLOW_LTERM_in_synpred121_Emerson2303_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_synpred121_Emerson2306  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_synpred121_Emerson2306_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_synpred121_Emerson2306	= { FOLLOW_statementList_in_synpred121_Emerson2306_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred121_Emerson2309  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred121_Emerson2309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred121_Emerson2309	= { FOLLOW_LTERM_in_synpred121_Emerson2309_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_synpred121_Emerson2312  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_synpred121_Emerson2312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_synpred121_Emerson2312	= { FOLLOW_defaultClause_in_synpred121_Emerson2312_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred124_Emerson2353  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred124_Emerson2353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred124_Emerson2353	= { FOLLOW_LTERM_in_synpred124_Emerson2353_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred126_Emerson2359  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred126_Emerson2359_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred126_Emerson2359	= { FOLLOW_LTERM_in_synpred126_Emerson2359_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred129_Emerson2398  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred129_Emerson2398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred129_Emerson2398	= { FOLLOW_LTERM_in_synpred129_Emerson2398_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred131_Emerson2404  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred131_Emerson2404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred131_Emerson2404	= { FOLLOW_LTERM_in_synpred131_Emerson2404_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred135_Emerson2461  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred135_Emerson2461_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred135_Emerson2461	= { FOLLOW_LTERM_in_synpred135_Emerson2461_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred137_Emerson2467  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred137_Emerson2467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred137_Emerson2467	= { FOLLOW_LTERM_in_synpred137_Emerson2467_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred142_Emerson2616  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred142_Emerson2616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred142_Emerson2616	= { FOLLOW_LTERM_in_synpred142_Emerson2616_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred150_Emerson2804  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred150_Emerson2804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred150_Emerson2804	= { FOLLOW_callExpression_in_synpred150_Emerson2804_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_synpred152_Emerson2864  */
static	ANTLR3_BITWORD FOLLOW_144_in_synpred152_Emerson2864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_synpred152_Emerson2864	= { FOLLOW_144_in_synpred152_Emerson2864_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred152_Emerson2866  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred152_Emerson2866_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred152_Emerson2866	= { FOLLOW_LTERM_in_synpred152_Emerson2866_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred152_Emerson2869  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred152_Emerson2869_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred152_Emerson2869	= { FOLLOW_assignmentExpression_in_synpred152_Emerson2869_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_synpred154_Emerson2911  */
static	ANTLR3_BITWORD FOLLOW_144_in_synpred154_Emerson2911_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_synpred154_Emerson2911	= { FOLLOW_144_in_synpred154_Emerson2911_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred154_Emerson2913  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred154_Emerson2913_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred154_Emerson2913	= { FOLLOW_LTERM_in_synpred154_Emerson2913_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_synpred154_Emerson2916  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_synpred154_Emerson2916_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_synpred154_Emerson2916	= { FOLLOW_assignmentExpressionNoIn_in_synpred154_Emerson2916_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_synpred155_Emerson2955  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_synpred155_Emerson2955_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_synpred155_Emerson2955	= { FOLLOW_conditionalExpression_in_synpred155_Emerson2955_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_synpred158_Emerson3022  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_synpred158_Emerson3022_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_synpred158_Emerson3022	= { FOLLOW_conditionalExpressionNoIn_in_synpred158_Emerson3022_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred161_Emerson3092  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred161_Emerson3092_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred161_Emerson3092	= { FOLLOW_callExpression_in_synpred161_Emerson3092_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred162_Emerson3117  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred162_Emerson3117_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred162_Emerson3117	= { FOLLOW_memberExpression_in_synpred162_Emerson3117_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred168_Emerson3211  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred168_Emerson3211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred168_Emerson3211	= { FOLLOW_LTERM_in_synpred168_Emerson3211_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred168_Emerson3214  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred168_Emerson3214_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred168_Emerson3214	= { FOLLOW_propertyReferenceSuffix1_in_synpred168_Emerson3214_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred170_Emerson3231  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred170_Emerson3231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred170_Emerson3231	= { FOLLOW_LTERM_in_synpred170_Emerson3231_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred170_Emerson3234  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred170_Emerson3234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred170_Emerson3234	= { FOLLOW_indexSuffix1_in_synpred170_Emerson3234_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred173_Emerson3261  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred173_Emerson3261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred173_Emerson3261	= { FOLLOW_LTERM_in_synpred173_Emerson3261_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred173_Emerson3264  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred173_Emerson3264_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred173_Emerson3264	= { FOLLOW_propertyReferenceSuffix1_in_synpred173_Emerson3264_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred175_Emerson3280  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred175_Emerson3280_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred175_Emerson3280	= { FOLLOW_LTERM_in_synpred175_Emerson3280_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred175_Emerson3283  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred175_Emerson3283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred175_Emerson3283	= { FOLLOW_indexSuffix1_in_synpred175_Emerson3283_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred180_Emerson3329  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred180_Emerson3329_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred180_Emerson3329	= { FOLLOW_LTERM_in_synpred180_Emerson3329_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred180_Emerson3332  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred180_Emerson3332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred180_Emerson3332	= { FOLLOW_propertyReferenceSuffix1_in_synpred180_Emerson3332_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred182_Emerson3347  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred182_Emerson3347_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred182_Emerson3347	= { FOLLOW_LTERM_in_synpred182_Emerson3347_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred182_Emerson3350  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred182_Emerson3350_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred182_Emerson3350	= { FOLLOW_indexSuffix1_in_synpred182_Emerson3350_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred186_Emerson3436  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred186_Emerson3436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred186_Emerson3436	= { FOLLOW_LTERM_in_synpred186_Emerson3436_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_synpred186_Emerson3439  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_synpred186_Emerson3439_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_synpred186_Emerson3439	= { FOLLOW_arguments_in_synpred186_Emerson3439_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred188_Emerson3454  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred188_Emerson3454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x00000A0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred188_Emerson3454	= { FOLLOW_LTERM_in_synpred188_Emerson3454_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred188_Emerson3457  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred188_Emerson3457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred188_Emerson3457	= { FOLLOW_indexSuffix1_in_synpred188_Emerson3457_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred190_Emerson3472  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred190_Emerson3472_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred190_Emerson3472	= { FOLLOW_LTERM_in_synpred190_Emerson3472_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred190_Emerson3475  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred190_Emerson3475_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred190_Emerson3475	= { FOLLOW_propertyReferenceSuffix1_in_synpred190_Emerson3475_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred193_Emerson3544  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred193_Emerson3544_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred193_Emerson3544	= { FOLLOW_LTERM_in_synpred193_Emerson3544_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_synpred196_Emerson3542  */
static	ANTLR3_BITWORD FOLLOW_142_in_synpred196_Emerson3542_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x000003000002E000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_synpred196_Emerson3542	= { FOLLOW_142_in_synpred196_Emerson3542_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred196_Emerson3544  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred196_Emerson3544_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x000003000002E000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred196_Emerson3544	= { FOLLOW_LTERM_in_synpred196_Emerson3544_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred196_Emerson3548  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred196_Emerson3548_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred196_Emerson3548	= { FOLLOW_assignmentExpression_in_synpred196_Emerson3548_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred196_Emerson3552  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred196_Emerson3552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred196_Emerson3552	= { FOLLOW_LTERM_in_synpred196_Emerson3552_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_synpred196_Emerson3555  */
static	ANTLR3_BITWORD FOLLOW_143_in_synpred196_Emerson3555_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_synpred196_Emerson3555	= { FOLLOW_143_in_synpred196_Emerson3555_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred214_Emerson3842  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred214_Emerson3842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred214_Emerson3842	= { FOLLOW_LTERM_in_synpred214_Emerson3842_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_synpred214_Emerson3845  */
static	ANTLR3_BITWORD FOLLOW_180_in_synpred214_Emerson3845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_synpred214_Emerson3845	= { FOLLOW_180_in_synpred214_Emerson3845_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred214_Emerson3847  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred214_Emerson3847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred214_Emerson3847	= { FOLLOW_LTERM_in_synpred214_Emerson3847_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_synpred214_Emerson3852  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_synpred214_Emerson3852_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_synpred214_Emerson3852	= { FOLLOW_msgConstruct_in_synpred214_Emerson3852_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_synpred214_Emerson3854  */
static	ANTLR3_BITWORD FOLLOW_180_in_synpred214_Emerson3854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001C000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_synpred214_Emerson3854	= { FOLLOW_180_in_synpred214_Emerson3854_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_synpred214_Emerson3858  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_synpred214_Emerson3858_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_synpred214_Emerson3858	= { FOLLOW_msgConstruct_in_synpred214_Emerson3858_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred217_Emerson3889  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred217_Emerson3889_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred217_Emerson3889	= { FOLLOW_LTERM_in_synpred217_Emerson3889_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_synpred217_Emerson3892  */
static	ANTLR3_BITWORD FOLLOW_180_in_synpred217_Emerson3892_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_synpred217_Emerson3892	= { FOLLOW_180_in_synpred217_Emerson3892_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred217_Emerson3894  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred217_Emerson3894_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred217_Emerson3894	= { FOLLOW_LTERM_in_synpred217_Emerson3894_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_synpred217_Emerson3899  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_synpred217_Emerson3899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_synpred217_Emerson3899	= { FOLLOW_msgConstruct_in_synpred217_Emerson3899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred220_Emerson3959  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred220_Emerson3959_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred220_Emerson3959	= { FOLLOW_LTERM_in_synpred220_Emerson3959_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_synpred220_Emerson3962  */
static	ANTLR3_BITWORD FOLLOW_181_in_synpred220_Emerson3962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_synpred220_Emerson3962	= { FOLLOW_181_in_synpred220_Emerson3962_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred220_Emerson3964  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred220_Emerson3964_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred220_Emerson3964	= { FOLLOW_LTERM_in_synpred220_Emerson3964_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstruct_in_synpred220_Emerson3969  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstruct_in_synpred220_Emerson3969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstruct_in_synpred220_Emerson3969	= { FOLLOW_msgSenderConstruct_in_synpred220_Emerson3969_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred223_Emerson4027  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred223_Emerson4027_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred223_Emerson4027	= { FOLLOW_LTERM_in_synpred223_Emerson4027_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_synpred223_Emerson4030  */
static	ANTLR3_BITWORD FOLLOW_182_in_synpred223_Emerson4030_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_synpred223_Emerson4030	= { FOLLOW_182_in_synpred223_Emerson4030_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred223_Emerson4032  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred223_Emerson4032_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred223_Emerson4032	= { FOLLOW_LTERM_in_synpred223_Emerson4032_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_synpred223_Emerson4037  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_synpred223_Emerson4037_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_synpred223_Emerson4037	= { FOLLOW_ternaryExpression_in_synpred223_Emerson4037_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred228_Emerson4086  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred228_Emerson4086_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred228_Emerson4086	= { FOLLOW_LTERM_in_synpred228_Emerson4086_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_synpred228_Emerson4089  */
static	ANTLR3_BITWORD FOLLOW_183_in_synpred228_Emerson4089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_synpred228_Emerson4089	= { FOLLOW_183_in_synpred228_Emerson4089_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred228_Emerson4091  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred228_Emerson4091_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred228_Emerson4091	= { FOLLOW_LTERM_in_synpred228_Emerson4091_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred228_Emerson4096  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred228_Emerson4096_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred228_Emerson4096	= { FOLLOW_assignmentExpression_in_synpred228_Emerson4096_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred228_Emerson4098  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred228_Emerson4098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred228_Emerson4098	= { FOLLOW_LTERM_in_synpred228_Emerson4098_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_synpred228_Emerson4101  */
static	ANTLR3_BITWORD FOLLOW_162_in_synpred228_Emerson4101_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_synpred228_Emerson4101	= { FOLLOW_162_in_synpred228_Emerson4101_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred228_Emerson4103  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred228_Emerson4103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred228_Emerson4103	= { FOLLOW_LTERM_in_synpred228_Emerson4103_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred228_Emerson4108  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred228_Emerson4108_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred228_Emerson4108	= { FOLLOW_assignmentExpression_in_synpred228_Emerson4108_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred231_Emerson4197  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred231_Emerson4197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred231_Emerson4197	= { FOLLOW_LTERM_in_synpred231_Emerson4197_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_synpred231_Emerson4200  */
static	ANTLR3_BITWORD FOLLOW_180_in_synpred231_Emerson4200_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_synpred231_Emerson4200	= { FOLLOW_180_in_synpred231_Emerson4200_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred231_Emerson4202  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred231_Emerson4202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred231_Emerson4202	= { FOLLOW_LTERM_in_synpred231_Emerson4202_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_synpred231_Emerson4207  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_synpred231_Emerson4207_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_synpred231_Emerson4207	= { FOLLOW_msgConstructNoIn_in_synpred231_Emerson4207_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_synpred231_Emerson4209  */
static	ANTLR3_BITWORD FOLLOW_180_in_synpred231_Emerson4209_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001C000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_synpred231_Emerson4209	= { FOLLOW_180_in_synpred231_Emerson4209_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_synpred231_Emerson4213  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_synpred231_Emerson4213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_synpred231_Emerson4213	= { FOLLOW_msgConstructNoIn_in_synpred231_Emerson4213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_synpred234_Emerson4246  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_synpred234_Emerson4246_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_synpred234_Emerson4246	= { FOLLOW_msgConstructNoIn_in_synpred234_Emerson4246_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred234_Emerson4248  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred234_Emerson4248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred234_Emerson4248	= { FOLLOW_LTERM_in_synpred234_Emerson4248_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_synpred234_Emerson4251  */
static	ANTLR3_BITWORD FOLLOW_180_in_synpred234_Emerson4251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_synpred234_Emerson4251	= { FOLLOW_180_in_synpred234_Emerson4251_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred234_Emerson4253  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred234_Emerson4253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred234_Emerson4253	= { FOLLOW_LTERM_in_synpred234_Emerson4253_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_synpred234_Emerson4258  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_synpred234_Emerson4258_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_synpred234_Emerson4258	= { FOLLOW_msgConstructNoIn_in_synpred234_Emerson4258_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred236_Emerson4329  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred236_Emerson4329_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred236_Emerson4329	= { FOLLOW_LTERM_in_synpred236_Emerson4329_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_synpred236_Emerson4332  */
static	ANTLR3_BITWORD FOLLOW_181_in_synpred236_Emerson4332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001C000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_synpred236_Emerson4332	= { FOLLOW_181_in_synpred236_Emerson4332_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstructNoIn_in_synpred236_Emerson4336  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstructNoIn_in_synpred236_Emerson4336_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstructNoIn_in_synpred236_Emerson4336	= { FOLLOW_msgSenderConstructNoIn_in_synpred236_Emerson4336_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred238_Emerson4402  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred238_Emerson4402_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred238_Emerson4402	= { FOLLOW_LTERM_in_synpred238_Emerson4402_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_synpred238_Emerson4405  */
static	ANTLR3_BITWORD FOLLOW_182_in_synpred238_Emerson4405_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001C000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_synpred238_Emerson4405	= { FOLLOW_182_in_synpred238_Emerson4405_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_synpred238_Emerson4409  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_synpred238_Emerson4409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_synpred238_Emerson4409	= { FOLLOW_ternaryExpressionNoIn_in_synpred238_Emerson4409_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred243_Emerson4483  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred243_Emerson4483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred243_Emerson4483	= { FOLLOW_LTERM_in_synpred243_Emerson4483_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_synpred243_Emerson4486  */
static	ANTLR3_BITWORD FOLLOW_183_in_synpred243_Emerson4486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_synpred243_Emerson4486	= { FOLLOW_183_in_synpred243_Emerson4486_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred243_Emerson4488  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred243_Emerson4488_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred243_Emerson4488	= { FOLLOW_LTERM_in_synpred243_Emerson4488_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_synpred243_Emerson4493  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_synpred243_Emerson4493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_synpred243_Emerson4493	= { FOLLOW_assignmentExpressionNoIn_in_synpred243_Emerson4493_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred243_Emerson4495  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred243_Emerson4495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred243_Emerson4495	= { FOLLOW_LTERM_in_synpred243_Emerson4495_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_synpred243_Emerson4498  */
static	ANTLR3_BITWORD FOLLOW_162_in_synpred243_Emerson4498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_synpred243_Emerson4498	= { FOLLOW_162_in_synpred243_Emerson4498_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred243_Emerson4500  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred243_Emerson4500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred243_Emerson4500	= { FOLLOW_LTERM_in_synpred243_Emerson4500_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_synpred243_Emerson4505  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_synpred243_Emerson4505_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_synpred243_Emerson4505	= { FOLLOW_assignmentExpressionNoIn_in_synpred243_Emerson4505_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred290_Emerson5223  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred290_Emerson5223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000008000000), ANTLR3_UINT64_LIT(0x000000000000003E) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred290_Emerson5223	= { FOLLOW_LTERM_in_synpred290_Emerson5223_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_synpred290_Emerson5226  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_synpred290_Emerson5226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_synpred290_Emerson5226	= { FOLLOW_relationalOps_in_synpred290_Emerson5226_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred290_Emerson5228  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred290_Emerson5228_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred290_Emerson5228	= { FOLLOW_LTERM_in_synpred290_Emerson5228_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_synpred290_Emerson5231  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_synpred290_Emerson5231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_synpred290_Emerson5231	= { FOLLOW_additiveExpression_in_synpred290_Emerson5231_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred298_Emerson5362  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred298_Emerson5362_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000000000003E) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred298_Emerson5362	= { FOLLOW_LTERM_in_synpred298_Emerson5362_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_synpred298_Emerson5365  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_synpred298_Emerson5365_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_synpred298_Emerson5365	= { FOLLOW_relationalOpsNoIn_in_synpred298_Emerson5365_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred298_Emerson5367  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred298_Emerson5367_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred298_Emerson5367	= { FOLLOW_LTERM_in_synpred298_Emerson5367_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_synpred298_Emerson5370  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_synpred298_Emerson5370_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_synpred298_Emerson5370	= { FOLLOW_additiveExpression_in_synpred298_Emerson5370_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred301_Emerson5404  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred301_Emerson5404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000000000C0) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred301_Emerson5404	= { FOLLOW_LTERM_in_synpred301_Emerson5404_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_synpred301_Emerson5407  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_synpred301_Emerson5407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_synpred301_Emerson5407	= { FOLLOW_addOps_in_synpred301_Emerson5407_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred301_Emerson5409  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred301_Emerson5409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred301_Emerson5409	= { FOLLOW_LTERM_in_synpred301_Emerson5409_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_synpred301_Emerson5412  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_synpred301_Emerson5412_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_synpred301_Emerson5412	= { FOLLOW_multiplicativeExpression_in_synpred301_Emerson5412_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred307_Emerson5520  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred307_Emerson5520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred307_Emerson5520	= { FOLLOW_leftHandSideExpression_in_synpred307_Emerson5520_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_203_in_synpred307_Emerson5522  */
static	ANTLR3_BITWORD FOLLOW_203_in_synpred307_Emerson5522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_203_in_synpred307_Emerson5522	= { FOLLOW_203_in_synpred307_Emerson5522_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred308_Emerson5536  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred308_Emerson5536_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred308_Emerson5536	= { FOLLOW_leftHandSideExpression_in_synpred308_Emerson5536_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_204_in_synpred308_Emerson5538  */
static	ANTLR3_BITWORD FOLLOW_204_in_synpred308_Emerson5538_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_204_in_synpred308_Emerson5538	= { FOLLOW_204_in_synpred308_Emerson5538_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteral_in_synpred320_Emerson5751  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteral_in_synpred320_Emerson5751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteral_in_synpred320_Emerson5751	= { FOLLOW_vectorLiteral_in_synpred320_Emerson5751_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_quaternionLiteral_in_synpred321_Emerson5769  */
static	ANTLR3_BITWORD FOLLOW_quaternionLiteral_in_synpred321_Emerson5769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_quaternionLiteral_in_synpred321_Emerson5769	= { FOLLOW_quaternionLiteral_in_synpred321_Emerson5769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_synpred326_Emerson5806  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_synpred326_Emerson5806_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_synpred326_Emerson5806	= { FOLLOW_objectLiteral_in_synpred326_Emerson5806_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_patternLiteral_in_synpred327_Emerson5818  */
static	ANTLR3_BITWORD FOLLOW_patternLiteral_in_synpred327_Emerson5818_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_patternLiteral_in_synpred327_Emerson5818	= { FOLLOW_patternLiteral_in_synpred327_Emerson5818_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_synpred344_Emerson5937  */
static	ANTLR3_BITWORD FOLLOW_193_in_synpred344_Emerson5937_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_synpred344_Emerson5937	= { FOLLOW_193_in_synpred344_Emerson5937_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred344_Emerson5939  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred344_Emerson5939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred344_Emerson5939	= { FOLLOW_LTERM_in_synpred344_Emerson5939_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred344_Emerson5944  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred344_Emerson5944_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred344_Emerson5944	= { FOLLOW_vectorLiteralField_in_synpred344_Emerson5944_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred344_Emerson5946  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred344_Emerson5946_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred344_Emerson5946	= { FOLLOW_LTERM_in_synpred344_Emerson5946_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_synpred344_Emerson5949  */
static	ANTLR3_BITWORD FOLLOW_144_in_synpred344_Emerson5949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_synpred344_Emerson5949	= { FOLLOW_144_in_synpred344_Emerson5949_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred344_Emerson5951  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred344_Emerson5951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred344_Emerson5951	= { FOLLOW_LTERM_in_synpred344_Emerson5951_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred344_Emerson5956  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred344_Emerson5956_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred344_Emerson5956	= { FOLLOW_vectorLiteralField_in_synpred344_Emerson5956_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred344_Emerson5958  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred344_Emerson5958_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred344_Emerson5958	= { FOLLOW_LTERM_in_synpred344_Emerson5958_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_synpred344_Emerson5961  */
static	ANTLR3_BITWORD FOLLOW_144_in_synpred344_Emerson5961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_synpred344_Emerson5961	= { FOLLOW_144_in_synpred344_Emerson5961_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred344_Emerson5963  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred344_Emerson5963_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred344_Emerson5963	= { FOLLOW_LTERM_in_synpred344_Emerson5963_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred344_Emerson5968  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred344_Emerson5968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred344_Emerson5968	= { FOLLOW_vectorLiteralField_in_synpred344_Emerson5968_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred344_Emerson5970  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred344_Emerson5970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred344_Emerson5970	= { FOLLOW_LTERM_in_synpred344_Emerson5970_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_synpred344_Emerson5973  */
static	ANTLR3_BITWORD FOLLOW_144_in_synpred344_Emerson5973_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_synpred344_Emerson5973	= { FOLLOW_144_in_synpred344_Emerson5973_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred344_Emerson5975  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred344_Emerson5975_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred344_Emerson5975	= { FOLLOW_LTERM_in_synpred344_Emerson5975_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred344_Emerson5980  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred344_Emerson5980_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred344_Emerson5980	= { FOLLOW_vectorLiteralField_in_synpred344_Emerson5980_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred344_Emerson5982  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred344_Emerson5982_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred344_Emerson5982	= { FOLLOW_LTERM_in_synpred344_Emerson5982_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_synpred344_Emerson5984  */
static	ANTLR3_BITWORD FOLLOW_194_in_synpred344_Emerson5984_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_synpred344_Emerson5984	= { FOLLOW_194_in_synpred344_Emerson5984_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_synpred353_Emerson6014  */
static	ANTLR3_BITWORD FOLLOW_193_in_synpred353_Emerson6014_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_synpred353_Emerson6014	= { FOLLOW_193_in_synpred353_Emerson6014_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred353_Emerson6016  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred353_Emerson6016_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred353_Emerson6016	= { FOLLOW_LTERM_in_synpred353_Emerson6016_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred353_Emerson6021  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred353_Emerson6021_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred353_Emerson6021	= { FOLLOW_vectorLiteralField_in_synpred353_Emerson6021_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred353_Emerson6023  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred353_Emerson6023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred353_Emerson6023	= { FOLLOW_LTERM_in_synpred353_Emerson6023_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_synpred353_Emerson6026  */
static	ANTLR3_BITWORD FOLLOW_144_in_synpred353_Emerson6026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_synpred353_Emerson6026	= { FOLLOW_144_in_synpred353_Emerson6026_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred353_Emerson6028  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred353_Emerson6028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred353_Emerson6028	= { FOLLOW_LTERM_in_synpred353_Emerson6028_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred353_Emerson6033  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred353_Emerson6033_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred353_Emerson6033	= { FOLLOW_vectorLiteralField_in_synpred353_Emerson6033_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred353_Emerson6035  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred353_Emerson6035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred353_Emerson6035	= { FOLLOW_LTERM_in_synpred353_Emerson6035_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_synpred353_Emerson6038  */
static	ANTLR3_BITWORD FOLLOW_144_in_synpred353_Emerson6038_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_synpred353_Emerson6038	= { FOLLOW_144_in_synpred353_Emerson6038_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred353_Emerson6040  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred353_Emerson6040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred353_Emerson6040	= { FOLLOW_LTERM_in_synpred353_Emerson6040_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred353_Emerson6045  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred353_Emerson6045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred353_Emerson6045	= { FOLLOW_vectorLiteralField_in_synpred353_Emerson6045_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred353_Emerson6047  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred353_Emerson6047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred353_Emerson6047	= { FOLLOW_LTERM_in_synpred353_Emerson6047_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_synpred353_Emerson6050  */
static	ANTLR3_BITWORD FOLLOW_147_in_synpred353_Emerson6050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_synpred353_Emerson6050	= { FOLLOW_147_in_synpred353_Emerson6050_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred353_Emerson6052  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred353_Emerson6052_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000030000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred353_Emerson6052	= { FOLLOW_LTERM_in_synpred353_Emerson6052_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_synpred353_Emerson6057  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_synpred353_Emerson6057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_synpred353_Emerson6057	= { FOLLOW_vectorLiteralField_in_synpred353_Emerson6057_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred353_Emerson6059  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred353_Emerson6059_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred353_Emerson6059	= { FOLLOW_LTERM_in_synpred353_Emerson6059_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_synpred353_Emerson6061  */
static	ANTLR3_BITWORD FOLLOW_194_in_synpred353_Emerson6061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_synpred353_Emerson6061	= { FOLLOW_194_in_synpred353_Emerson6061_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_synpred358_Emerson6162  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_synpred358_Emerson6162_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_synpred358_Emerson6162	= { FOLLOW_additiveExpression_in_synpred358_Emerson6162_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_synpred359_Emerson6175  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_synpred359_Emerson6175_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_synpred359_Emerson6175	= { FOLLOW_NumericLiteral_in_synpred359_Emerson6175_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred360_Emerson6187  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred360_Emerson6187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred360_Emerson6187	= { FOLLOW_callExpression_in_synpred360_Emerson6187_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred363_Emerson6282  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred363_Emerson6282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred363_Emerson6282	= { FOLLOW_LTERM_in_synpred363_Emerson6282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_synpred366_Emerson6280  */
static	ANTLR3_BITWORD FOLLOW_169_in_synpred366_Emerson6280_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000070000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_synpred366_Emerson6280	= { FOLLOW_169_in_synpred366_Emerson6280_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred366_Emerson6282  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred366_Emerson6282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000070000026000), ANTLR3_UINT64_LIT(0x0000000000FFF8C2) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred366_Emerson6282	= { FOLLOW_LTERM_in_synpred366_Emerson6282_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred366_Emerson6286  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred366_Emerson6286_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred366_Emerson6286	= { FOLLOW_expression_in_synpred366_Emerson6286_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred366_Emerson6290  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred366_Emerson6290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred366_Emerson6290	= { FOLLOW_LTERM_in_synpred366_Emerson6290_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_170_in_synpred366_Emerson6293  */
static	ANTLR3_BITWORD FOLLOW_170_in_synpred366_Emerson6293_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_170_in_synpred366_Emerson6293	= { FOLLOW_170_in_synpred366_Emerson6293_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred372_Emerson6371  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred372_Emerson6371_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred372_Emerson6371	= { FOLLOW_LTERM_in_synpred372_Emerson6371_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_synpred375_Emerson6369  */
static	ANTLR3_BITWORD FOLLOW_145_in_synpred375_Emerson6369_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_synpred375_Emerson6369	= { FOLLOW_145_in_synpred375_Emerson6369_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred375_Emerson6371  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred375_Emerson6371_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred375_Emerson6371	= { FOLLOW_LTERM_in_synpred375_Emerson6371_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_synpred375_Emerson6374  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_synpred375_Emerson6374_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_synpred375_Emerson6374	= { FOLLOW_propertyNameAndValue_in_synpred375_Emerson6374_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred375_Emerson6377  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred375_Emerson6377_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred375_Emerson6377	= { FOLLOW_LTERM_in_synpred375_Emerson6377_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_synpred375_Emerson6380  */
static	ANTLR3_BITWORD FOLLOW_146_in_synpred375_Emerson6380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_synpred375_Emerson6380	= { FOLLOW_146_in_synpred375_Emerson6380_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred381_Emerson6456  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred381_Emerson6456_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred381_Emerson6456	= { FOLLOW_LTERM_in_synpred381_Emerson6456_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_synpred384_Emerson6454  */
static	ANTLR3_BITWORD FOLLOW_145_in_synpred384_Emerson6454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000000400040000) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_synpred384_Emerson6454	= { FOLLOW_145_in_synpred384_Emerson6454_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred384_Emerson6456  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred384_Emerson6456_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x001E000000000000), ANTLR3_UINT64_LIT(0x0000000400040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred384_Emerson6456	= { FOLLOW_LTERM_in_synpred384_Emerson6456_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_synpred384_Emerson6459  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_synpred384_Emerson6459_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_synpred384_Emerson6459	= { FOLLOW_nameValueProto_in_synpred384_Emerson6459_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred384_Emerson6462  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred384_Emerson6462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred384_Emerson6462	= { FOLLOW_LTERM_in_synpred384_Emerson6462_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_synpred384_Emerson6465  */
static	ANTLR3_BITWORD FOLLOW_146_in_synpred384_Emerson6465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_synpred384_Emerson6465	= { FOLLOW_146_in_synpred384_Emerson6465_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred385_Emerson6482  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred385_Emerson6482_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred385_Emerson6482	= { FOLLOW_LTERM_in_synpred385_Emerson6482_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred386_Emerson6493  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred386_Emerson6493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred386_Emerson6493	= { FOLLOW_LTERM_in_synpred386_Emerson6493_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred395_Emerson6602  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred395_Emerson6602_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred395_Emerson6602	= { FOLLOW_LTERM_in_synpred395_Emerson6602_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    146:14: ( sourceElements )?
 */
static const ANTLR3_INT32 dfa2_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa2_eof[4] =
    {
	3, -1, 3, -1
    };
static const ANTLR3_INT32 dfa2_min[4] =
    {
	113, -1, 113, -1
    };
static const ANTLR3_INT32 dfa2_max[4] =
    {
	215, -1, 147, -1
    };
static const ANTLR3_INT32 dfa2_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa2_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa2_T_empty	    NULL

static const ANTLR3_INT32 dfa2_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 
	1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1
    };static const ANTLR3_INT32 dfa2_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa2_transitions[] =
{
    dfa2_T0, dfa2_T_empty, dfa2_T1, dfa2_T_empty	
};


/* Declare tracking structure for Cyclic DFA 2
 */
static
ANTLR3_CYCLIC_DFA cdfa2
    =	{
	    2,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"146:14: ( sourceElements )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa2_eot,	    /* EOT table			    */
	    dfa2_eof,	    /* EOF table			    */
	    dfa2_min,	    /* Minimum tokens for each state    */
	    dfa2_max,	    /* Maximum tokens for each state    */
	    dfa2_accept,	/* Accept table			    */
	    dfa2_special,	/* Special transition states	    */
	    dfa2_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 2
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 151:25: ( ( LTERM )* sourceElement )*
 */
static const ANTLR3_INT32 dfa5_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_eof[4] =
    {
	2, 2, -1, -1
    };
static const ANTLR3_INT32 dfa5_min[4] =
    {
	113, 113, -1, -1
    };
static const ANTLR3_INT32 dfa5_max[4] =
    {
	215, 215, -1, -1
    };
static const ANTLR3_INT32 dfa5_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa5_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa5_T_empty	    NULL

static const ANTLR3_INT32 dfa5_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, -1, -1, 3, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 3, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa5_transitions[] =
{
    dfa5_T0, dfa5_T0, dfa5_T_empty, dfa5_T_empty	
};


/* Declare tracking structure for Cyclic DFA 5
 */
static
ANTLR3_CYCLIC_DFA cdfa5
    =	{
	    5,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 151:25: ( ( LTERM )* sourceElement )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa5_eot,	    /* EOT table			    */
	    dfa5_eof,	    /* EOF table			    */
	    dfa5_min,	    /* Minimum tokens for each state    */
	    dfa5_max,	    /* Maximum tokens for each state    */
	    dfa5_accept,	/* Accept table			    */
	    dfa5_special,	/* Special transition states	    */
	    dfa5_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 5
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    154:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static const ANTLR3_INT32 dfa6_eot[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa6_eof[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa6_min[7] =
    {
	113, 113, -1, 113, 113, 113, -1
    };
static const ANTLR3_INT32 dfa6_max[7] =
    {
	215, 142, -1, 142, 145, 145, -1
    };
static const ANTLR3_INT32 dfa6_accept[7] =
    {
	-1, -1, 2, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa6_special[7] =
    {	
	-1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa6_T_empty	    NULL

static const ANTLR3_INT32 dfa6_T0[] =
    {
	5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 6
    };static const ANTLR3_INT32 dfa6_T1[] =
    {
	2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, 2, -1, 2, 2, -1, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, -1, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };static const ANTLR3_INT32 dfa6_T2[] =
    {
	3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa6_transitions[] =
{
    dfa6_T1, dfa6_T2, dfa6_T_empty, dfa6_T2, dfa6_T0, dfa6_T0, dfa6_T_empty	
};


/* Declare tracking structure for Cyclic DFA 6
 */
static
ANTLR3_CYCLIC_DFA cdfa6
    =	{
	    6,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"154:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa6_eot,	    /* EOT table			    */
	    dfa6_eof,	    /* EOF table			    */
	    dfa6_min,	    /* Minimum tokens for each state    */
	    dfa6_max,	    /* Maximum tokens for each state    */
	    dfa6_accept,	/* Accept table			    */
	    dfa6_special,	/* Special transition states	    */
	    dfa6_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 6
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    172:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa23_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_min[5] =
    {
	145, 113, 113, -1, -1
    };
static const ANTLR3_INT32 dfa23_max[5] =
    {
	145, 215, 215, -1, -1
    };
static const ANTLR3_INT32 dfa23_accept[5] =
    {
	-1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa23_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa23_T_empty	    NULL

static const ANTLR3_INT32 dfa23_T0[] =
    {
	2, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, 4, 3, 4, 4, -1, 4, -1, 
	4, 4, 4, -1, 4, 4, 4, 4, 4, -1, -1, -1, 4, 4, -1, -1, 4, 4, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, 4, 4, -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4
    };static const ANTLR3_INT32 dfa23_T1[] =
    {
	1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa23_transitions[] =
{
    dfa23_T1, dfa23_T0, dfa23_T0, dfa23_T_empty, dfa23_T_empty	
};


/* Declare tracking structure for Cyclic DFA 23
 */
static
ANTLR3_CYCLIC_DFA cdfa23
    =	{
	    23,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"172:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa23_eot,	    /* EOT table			    */
	    dfa23_eof,	    /* EOF table			    */
	    dfa23_min,	    /* Minimum tokens for each state    */
	    dfa23_max,	    /* Maximum tokens for each state    */
	    dfa23_accept,	/* Accept table			    */
	    dfa23_special,	/* Special transition states	    */
	    dfa23_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 23
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    178:1: statement : ( ( switchStatement )=> switchStatement | emptyStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );
 */
static const ANTLR3_INT32 dfa24_eot[36] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa24_eof[36] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa24_min[36] =
    {
	113, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa24_max[36] =
    {
	215, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa24_accept[36] =
    {
	-1, 1, 2, -1, -1, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 6, 7, -1, -1, 8, 9, 10, 11, 12, 13, 3
    };
static const ANTLR3_INT32 dfa24_special[36] =
    {	
	0, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa24_T_empty	    NULL

static const ANTLR3_INT32 dfa24_T0[] =
    {
	2, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 6, -1, -1, 4, -1, 2, 5, -1, 25, 
	-1, 26, 26, 26, -1, 29, 30, 31, 32, 1, -1, -1, -1, 33, 34, -1, -1, 6, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 6, -1, -1, -1, -1, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6
    };static const ANTLR3_INT32 dfa24_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa24_transitions[] =
{
    dfa24_T0, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T1, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty	
};

static ANTLR3_INT32 dfa24_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA24_0;

    	    ANTLR3_MARKER index24_0;


    		LA24_0 = LA(1);

    	 
    	    index24_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA24_0 == 160) && (synpred24_Emerson(ctx)))
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA24_0 == LTERM || LA24_0 == 147) )
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA24_0 == 145) )
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA24_0 == 148) )
    	    {
    	        s = 5;
    	    }

    	    else if ( (((LA24_0 >= Identifier) && (LA24_0 <= StringLiteral)) || ((LA24_0 >= 141) && (LA24_0 <= 142)) || ((LA24_0 >= 168) && (LA24_0 <= 169)) || LA24_0 == 193 || ((LA24_0 >= 198) && (LA24_0 <= 199)) || ((LA24_0 >= 203) && (LA24_0 <= 215))) )
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA24_0 == 150) )
    	    {
    	        s = 25;
    	    }

    	    else if ( (((LA24_0 >= 152) && (LA24_0 <= 154))) )
    	    {
    	        s = 26;
    	    }

    	    else if ( (LA24_0 == 156) )
    	    {
    	        s = 29;
    	    }

    	    else if ( (LA24_0 == 157) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (LA24_0 == 158) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (LA24_0 == 159) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (LA24_0 == 164) )
    	    {
    	        s = 33;
    	    }

    	    else if ( (LA24_0 == 165) )
    	    {
    	        s = 34;
    	    }

    	 
    		SEEK(index24_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA24_4;

    	    ANTLR3_MARKER index24_4;


    		LA24_4 = LA(1);

    	 
    	    index24_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 35;
    	    }

    	    else if ( (synpred28_Emerson(ctx)) )
    	    {
    	        s = 6;
    	    }

    	 
    		SEEK(index24_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"178:1: statement : ( ( switchStatement )=> switchStatement | emptyStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );";
    EXCEPTION->decisionNum  = 24;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 24
 */
static
ANTLR3_CYCLIC_DFA cdfa24
    =	{
	    24,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"178:1: statement : ( ( switchStatement )=> switchStatement | emptyStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );",	
	    (CDFA_SPECIAL_FUNC) dfa24_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa24_eot,	    /* EOT table			    */
	    dfa24_eof,	    /* EOF table			    */
	    dfa24_min,	    /* Minimum tokens for each state    */
	    dfa24_max,	    /* Maximum tokens for each state    */
	    dfa24_accept,	/* Accept table			    */
	    dfa24_special,	/* Special transition states	    */
	    dfa24_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 24
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    195:15: ( statementList )?
 */
static const ANTLR3_INT32 dfa26_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa26_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa26_min[4] =
    {
	113, -1, 113, -1
    };
static const ANTLR3_INT32 dfa26_max[4] =
    {
	215, -1, 147, -1
    };
static const ANTLR3_INT32 dfa26_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa26_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa26_T_empty	    NULL

static const ANTLR3_INT32 dfa26_T0[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 1
    };static const ANTLR3_INT32 dfa26_T1[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 3, 1, 1, -1, 1, -1, 
	1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa26_transitions[] =
{
    dfa26_T1, dfa26_T_empty, dfa26_T0, dfa26_T_empty	
};


/* Declare tracking structure for Cyclic DFA 26
 */
static
ANTLR3_CYCLIC_DFA cdfa26
    =	{
	    26,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"195:15: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa26_eot,	    /* EOT table			    */
	    dfa26_eof,	    /* EOF table			    */
	    dfa26_min,	    /* Minimum tokens for each state    */
	    dfa26_max,	    /* Maximum tokens for each state    */
	    dfa26_accept,	/* Accept table			    */
	    dfa26_special,	/* Special transition states	    */
	    dfa26_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 26
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 204:14: ( ( LTERM )* statement )*
 */
static const ANTLR3_INT32 dfa30_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa30_eof[4] =
    {
	2, 2, -1, -1
    };
static const ANTLR3_INT32 dfa30_min[4] =
    {
	113, 113, -1, -1
    };
static const ANTLR3_INT32 dfa30_max[4] =
    {
	215, 215, -1, -1
    };
static const ANTLR3_INT32 dfa30_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa30_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa30_T_empty	    NULL

static const ANTLR3_INT32 dfa30_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, 3, 2, -1, 2, 3, 3, -1, -1, 3, 3, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 3, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa30_transitions[] =
{
    dfa30_T0, dfa30_T0, dfa30_T_empty, dfa30_T_empty	
};


/* Declare tracking structure for Cyclic DFA 30
 */
static
ANTLR3_CYCLIC_DFA cdfa30
    =	{
	    30,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 204:14: ( ( LTERM )* statement )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa30_eot,	    /* EOT table			    */
	    dfa30_eof,	    /* EOF table			    */
	    dfa30_min,	    /* Minimum tokens for each state    */
	    dfa30_max,	    /* Maximum tokens for each state    */
	    dfa30_accept,	/* Accept table			    */
	    dfa30_special,	/* Special transition states	    */
	    dfa30_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 30
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 212:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
 */
static const ANTLR3_INT32 dfa35_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa35_eof[5] =
    {
	-1, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa35_min[5] =
    {
	113, 113, -1, -1, 113
    };
static const ANTLR3_INT32 dfa35_max[5] =
    {
	147, 215, -1, -1, 215
    };
static const ANTLR3_INT32 dfa35_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa35_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa35_T_empty	    NULL

static const ANTLR3_INT32 dfa35_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 2
    };static const ANTLR3_INT32 dfa35_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 3, 2, 2, 2, 2, -1, 2, 2, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa35_transitions[] =
{
    dfa35_T0, dfa35_T1, dfa35_T_empty, dfa35_T_empty, dfa35_T1	
};


/* Declare tracking structure for Cyclic DFA 35
 */
static
ANTLR3_CYCLIC_DFA cdfa35
    =	{
	    35,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 212:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa35_eot,	    /* EOT table			    */
	    dfa35_eof,	    /* EOF table			    */
	    dfa35_min,	    /* Minimum tokens for each state    */
	    dfa35_max,	    /* Maximum tokens for each state    */
	    dfa35_accept,	/* Accept table			    */
	    dfa35_special,	/* Special transition states	    */
	    dfa35_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 35
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 216:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
 */
static const ANTLR3_INT32 dfa38_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa38_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa38_min[4] =
    {
	113, 113, -1, -1
    };
static const ANTLR3_INT32 dfa38_max[4] =
    {
	147, 147, -1, -1
    };
static const ANTLR3_INT32 dfa38_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa38_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa38_T_empty	    NULL

static const ANTLR3_INT32 dfa38_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa38_transitions[] =
{
    dfa38_T0, dfa38_T0, dfa38_T_empty, dfa38_T_empty	
};


/* Declare tracking structure for Cyclic DFA 38
 */
static
ANTLR3_CYCLIC_DFA cdfa38
    =	{
	    38,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 216:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa38_eot,	    /* EOT table			    */
	    dfa38_eof,	    /* EOF table			    */
	    dfa38_min,	    /* Minimum tokens for each state    */
	    dfa38_max,	    /* Maximum tokens for each state    */
	    dfa38_accept,	/* Accept table			    */
	    dfa38_special,	/* Special transition states	    */
	    dfa38_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 38
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    261:21: ( ( LTERM )* init= forStatementInitialiserPart )?
 */
static const ANTLR3_INT32 dfa64_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa64_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa64_min[4] =
    {
	113, 113, -1, -1
    };
static const ANTLR3_INT32 dfa64_max[4] =
    {
	215, 215, -1, -1
    };
static const ANTLR3_INT32 dfa64_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa64_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa64_T_empty	    NULL

static const ANTLR3_INT32 dfa64_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 3, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa64_transitions[] =
{
    dfa64_T0, dfa64_T0, dfa64_T_empty, dfa64_T_empty	
};


/* Declare tracking structure for Cyclic DFA 64
 */
static
ANTLR3_CYCLIC_DFA cdfa64
    =	{
	    64,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"261:21: ( ( LTERM )* init= forStatementInitialiserPart )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa64_eot,	    /* EOT table			    */
	    dfa64_eof,	    /* EOF table			    */
	    dfa64_min,	    /* Minimum tokens for each state    */
	    dfa64_max,	    /* Maximum tokens for each state    */
	    dfa64_accept,	/* Accept table			    */
	    dfa64_special,	/* Special transition states	    */
	    dfa64_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 64
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    261:75: ( ( LTERM )* cond= expression )?
 */
static const ANTLR3_INT32 dfa67_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa67_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa67_min[4] =
    {
	113, 113, -1, -1
    };
static const ANTLR3_INT32 dfa67_max[4] =
    {
	215, 215, -1, -1
    };
static const ANTLR3_INT32 dfa67_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa67_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa67_T_empty	    NULL

static const ANTLR3_INT32 dfa67_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa67_transitions[] =
{
    dfa67_T0, dfa67_T0, dfa67_T_empty, dfa67_T_empty	
};


/* Declare tracking structure for Cyclic DFA 67
 */
static
ANTLR3_CYCLIC_DFA cdfa67
    =	{
	    67,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"261:75: ( ( LTERM )* cond= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa67_eot,	    /* EOT table			    */
	    dfa67_eof,	    /* EOF table			    */
	    dfa67_min,	    /* Minimum tokens for each state    */
	    dfa67_max,	    /* Maximum tokens for each state    */
	    dfa67_accept,	/* Accept table			    */
	    dfa67_special,	/* Special transition states	    */
	    dfa67_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 67
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    261:112: ( ( LTERM )* iter= expression )?
 */
static const ANTLR3_INT32 dfa70_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa70_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa70_min[4] =
    {
	113, 113, -1, -1
    };
static const ANTLR3_INT32 dfa70_max[4] =
    {
	215, 215, -1, -1
    };
static const ANTLR3_INT32 dfa70_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa70_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa70_T_empty	    NULL

static const ANTLR3_INT32 dfa70_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa70_transitions[] =
{
    dfa70_T0, dfa70_T0, dfa70_T_empty, dfa70_T_empty	
};


/* Declare tracking structure for Cyclic DFA 70
 */
static
ANTLR3_CYCLIC_DFA cdfa70
    =	{
	    70,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"261:112: ( ( LTERM )* iter= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa70_eot,	    /* EOT table			    */
	    dfa70_eof,	    /* EOF table			    */
	    dfa70_min,	    /* Minimum tokens for each state    */
	    dfa70_max,	    /* Maximum tokens for each state    */
	    dfa70_accept,	/* Accept table			    */
	    dfa70_special,	/* Special transition states	    */
	    dfa70_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 70
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    300:1: caseBlock : ( '{' ( LTERM )* (case1= caseClause )? ( LTERM )* '}' -> ^( CASE_BLOCK ( $case1)? ) | '{' ( LTERM )* def= defaultClause ( LTERM )* '}' -> ^( CASE_BLOCK $def) );
 */
static const ANTLR3_INT32 dfa102_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa102_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa102_min[5] =
    {
	145, 113, 113, -1, -1
    };
static const ANTLR3_INT32 dfa102_max[5] =
    {
	145, 163, 163, -1, -1
    };
static const ANTLR3_INT32 dfa102_accept[5] =
    {
	-1, -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa102_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa102_T_empty	    NULL

static const ANTLR3_INT32 dfa102_T0[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, 3
    };static const ANTLR3_INT32 dfa102_T1[] =
    {
	1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa102_transitions[] =
{
    dfa102_T1, dfa102_T0, dfa102_T0, dfa102_T_empty, dfa102_T_empty	
};


/* Declare tracking structure for Cyclic DFA 102
 */
static
ANTLR3_CYCLIC_DFA cdfa102
    =	{
	    102,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"300:1: caseBlock : ( '{' ( LTERM )* (case1= caseClause )? ( LTERM )* '}' -> ^( CASE_BLOCK ( $case1)? ) | '{' ( LTERM )* def= defaultClause ( LTERM )* '}' -> ^( CASE_BLOCK $def) );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa102_eot,	    /* EOT table			    */
	    dfa102_eof,	    /* EOF table			    */
	    dfa102_min,	    /* Minimum tokens for each state    */
	    dfa102_max,	    /* Maximum tokens for each state    */
	    dfa102_accept,	/* Accept table			    */
	    dfa102_special,	/* Special transition states	    */
	    dfa102_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 102
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    308:56: ( statementList )?
 */
static const ANTLR3_INT32 dfa106_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa106_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa106_min[4] =
    {
	113, -1, 113, -1
    };
static const ANTLR3_INT32 dfa106_max[4] =
    {
	215, -1, 163, -1
    };
static const ANTLR3_INT32 dfa106_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa106_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa106_T_empty	    NULL

static const ANTLR3_INT32 dfa106_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 
	1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 3, 1, 1, -1, -1, 1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1
    };static const ANTLR3_INT32 dfa106_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa106_transitions[] =
{
    dfa106_T0, dfa106_T_empty, dfa106_T1, dfa106_T_empty	
};


/* Declare tracking structure for Cyclic DFA 106
 */
static
ANTLR3_CYCLIC_DFA cdfa106
    =	{
	    106,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"308:56: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa106_eot,	    /* EOT table			    */
	    dfa106_eof,	    /* EOF table			    */
	    dfa106_min,	    /* Minimum tokens for each state    */
	    dfa106_max,	    /* Maximum tokens for each state    */
	    dfa106_accept,	/* Accept table			    */
	    dfa106_special,	/* Special transition states	    */
	    dfa106_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 106
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    309:64: ( statementList )?
 */
static const ANTLR3_INT32 dfa111_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa111_eof[4] =
    {
	3, -1, 3, -1
    };
static const ANTLR3_INT32 dfa111_min[4] =
    {
	113, -1, 113, -1
    };
static const ANTLR3_INT32 dfa111_max[4] =
    {
	215, -1, 161, -1
    };
static const ANTLR3_INT32 dfa111_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa111_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa111_T_empty	    NULL

static const ANTLR3_INT32 dfa111_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 3, 1, 1, -1, 1, -1, 
	1, 1, 1, -1, 1, 1, 1, 1, 1, 3, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1
    };static const ANTLR3_INT32 dfa111_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa111_transitions[] =
{
    dfa111_T0, dfa111_T_empty, dfa111_T1, dfa111_T_empty	
};


/* Declare tracking structure for Cyclic DFA 111
 */
static
ANTLR3_CYCLIC_DFA cdfa111
    =	{
	    111,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"309:64: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa111_eot,	    /* EOT table			    */
	    dfa111_eof,	    /* EOF table			    */
	    dfa111_min,	    /* Minimum tokens for each state    */
	    dfa111_max,	    /* Maximum tokens for each state    */
	    dfa111_accept,	/* Accept table			    */
	    dfa111_special,	/* Special transition states	    */
	    dfa111_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 111
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    313:32: ( statementList )?
 */
static const ANTLR3_INT32 dfa117_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa117_eof[4] =
    {
	3, -1, 3, -1
    };
static const ANTLR3_INT32 dfa117_min[4] =
    {
	113, -1, 113, -1
    };
static const ANTLR3_INT32 dfa117_max[4] =
    {
	215, -1, 161, -1
    };
static const ANTLR3_INT32 dfa117_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa117_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa117_T_empty	    NULL

static const ANTLR3_INT32 dfa117_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 3, 1, 1, -1, 1, -1, 
	1, 1, 1, -1, 1, 1, 1, 1, 1, 3, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1
    };static const ANTLR3_INT32 dfa117_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa117_transitions[] =
{
    dfa117_T0, dfa117_T_empty, dfa117_T1, dfa117_T_empty	
};


/* Declare tracking structure for Cyclic DFA 117
 */
static
ANTLR3_CYCLIC_DFA cdfa117
    =	{
	    117,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"313:32: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa117_eot,	    /* EOT table			    */
	    dfa117_eof,	    /* EOF table			    */
	    dfa117_min,	    /* Minimum tokens for each state    */
	    dfa117_max,	    /* Maximum tokens for each state    */
	    dfa117_accept,	/* Accept table			    */
	    dfa117_special,	/* Special transition states	    */
	    dfa117_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 117
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    318:64: ( statementList )?
 */
static const ANTLR3_INT32 dfa123_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa123_eof[4] =
    {
	3, -1, 3, -1
    };
static const ANTLR3_INT32 dfa123_min[4] =
    {
	113, -1, 113, -1
    };
static const ANTLR3_INT32 dfa123_max[4] =
    {
	215, -1, 161, -1
    };
static const ANTLR3_INT32 dfa123_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa123_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa123_T_empty	    NULL

static const ANTLR3_INT32 dfa123_T0[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };static const ANTLR3_INT32 dfa123_T1[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 3, 1, 1, -1, 1, -1, 
	1, 1, 1, -1, 1, 1, 1, 1, 1, 3, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa123_transitions[] =
{
    dfa123_T1, dfa123_T_empty, dfa123_T0, dfa123_T_empty	
};


/* Declare tracking structure for Cyclic DFA 123
 */
static
ANTLR3_CYCLIC_DFA cdfa123
    =	{
	    123,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"318:64: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa123_eot,	    /* EOT table			    */
	    dfa123_eof,	    /* EOF table			    */
	    dfa123_min,	    /* Minimum tokens for each state    */
	    dfa123_max,	    /* Maximum tokens for each state    */
	    dfa123_accept,	/* Accept table			    */
	    dfa123_special,	/* Special transition states	    */
	    dfa123_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 123
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    349:1: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );
 */
static const ANTLR3_INT32 dfa137_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa137_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa137_min[13] =
    {
	114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa137_max[13] =
    {
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa137_accept[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa137_special[13] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa137_T_empty	    NULL

static const ANTLR3_INT32 dfa137_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa137_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa137_transitions[] =
{
    dfa137_T0, dfa137_T1, dfa137_T1, dfa137_T1, dfa137_T1, dfa137_T1, dfa137_T1, 
    dfa137_T1, dfa137_T1, dfa137_T1, dfa137_T1, dfa137_T_empty, dfa137_T_empty	
};

static ANTLR3_INT32 dfa137_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA137_1;

    	    ANTLR3_MARKER index137_1;


    		LA137_1 = LA(1);

    	 
    	    index137_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred150_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index137_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA137_2;

    	    ANTLR3_MARKER index137_2;


    		LA137_2 = LA(1);

    	 
    	    index137_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred150_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index137_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA137_3;

    	    ANTLR3_MARKER index137_3;


    		LA137_3 = LA(1);

    	 
    	    index137_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred150_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index137_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA137_4;

    	    ANTLR3_MARKER index137_4;


    		LA137_4 = LA(1);

    	 
    	    index137_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred150_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index137_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA137_5;

    	    ANTLR3_MARKER index137_5;


    		LA137_5 = LA(1);

    	 
    	    index137_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred150_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index137_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA137_6;

    	    ANTLR3_MARKER index137_6;


    		LA137_6 = LA(1);

    	 
    	    index137_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred150_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index137_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA137_7;

    	    ANTLR3_MARKER index137_7;


    		LA137_7 = LA(1);

    	 
    	    index137_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred150_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index137_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA137_8;

    	    ANTLR3_MARKER index137_8;


    		LA137_8 = LA(1);

    	 
    	    index137_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred150_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index137_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA137_9;

    	    ANTLR3_MARKER index137_9;


    		LA137_9 = LA(1);

    	 
    	    index137_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred150_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index137_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA137_10;

    	    ANTLR3_MARKER index137_10;


    		LA137_10 = LA(1);

    	 
    	    index137_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred150_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index137_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"349:1: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );";
    EXCEPTION->decisionNum  = 137;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 137
 */
static
ANTLR3_CYCLIC_DFA cdfa137
    =	{
	    137,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"349:1: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa137_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa137_eot,	    /* EOT table			    */
	    dfa137_eof,	    /* EOF table			    */
	    dfa137_min,	    /* Minimum tokens for each state    */
	    dfa137_max,	    /* Maximum tokens for each state    */
	    dfa137_accept,	/* Accept table			    */
	    dfa137_special,	/* Special transition states	    */
	    dfa137_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 137
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 362:36: ( ',' ( LTERM )* assignmentExpressionNoIn )*
 */
static const ANTLR3_INT32 dfa141_eot[6] =
    {
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa141_eof[6] =
    {
	1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa141_min[6] =
    {
	113, -1, 113, 113, -1, 0
    };
static const ANTLR3_INT32 dfa141_max[6] =
    {
	155, -1, 215, 215, -1, 0
    };
static const ANTLR3_INT32 dfa141_accept[6] =
    {
	-1, 2, -1, -1, 1, -1
    };
static const ANTLR3_INT32 dfa141_special[6] =
    {	
	-1, -1, -1, -1, -1, 0
    };

/** Used when there is no transition table entry for a particular state */
#define dfa141_T_empty	    NULL

static const ANTLR3_INT32 dfa141_T0[] =
    {
	-1
    };static const ANTLR3_INT32 dfa141_T1[] =
    {
	3, 5, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, 4, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, 4, 4, -1, -1, -1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 4
    };static const ANTLR3_INT32 dfa141_T2[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 1, -1, -1, 
	-1, -1, -1, -1, -1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa141_transitions[] =
{
    dfa141_T2, dfa141_T_empty, dfa141_T1, dfa141_T1, dfa141_T_empty, dfa141_T0	
};

static ANTLR3_INT32 dfa141_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA141_5;

    	    ANTLR3_MARKER index141_5;


    		LA141_5 = LA(1);

    	 
    	    index141_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 4;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index141_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 362:36: ( ',' ( LTERM )* assignmentExpressionNoIn )*";
    EXCEPTION->decisionNum  = 141;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 141
 */
static
ANTLR3_CYCLIC_DFA cdfa141
    =	{
	    141,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 362:36: ( ',' ( LTERM )* assignmentExpressionNoIn )*",	
	    (CDFA_SPECIAL_FUNC) dfa141_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa141_eot,	    /* EOT table			    */
	    dfa141_eof,	    /* EOF table			    */
	    dfa141_min,	    /* Minimum tokens for each state    */
	    dfa141_max,	    /* Maximum tokens for each state    */
	    dfa141_accept,	/* Accept table			    */
	    dfa141_special,	/* Special transition states	    */
	    dfa141_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 141
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    366:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static const ANTLR3_INT32 dfa144_eot[22] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa144_eof[22] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa144_min[22] =
    {
	114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa144_max[22] =
    {
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa144_accept[22] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2
    };
static const ANTLR3_INT32 dfa144_special[22] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa144_T_empty	    NULL

static const ANTLR3_INT32 dfa144_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, 11, -1, -1, -1, 11, 11, 11, 
	11, 11, 11, 11, 11, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa144_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa144_transitions[] =
{
    dfa144_T0, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, 
    dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T_empty, dfa144_T_empty, 
    dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, 
    dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty	
};

static ANTLR3_INT32 dfa144_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA144_1;

    	    ANTLR3_MARKER index144_1;


    		LA144_1 = LA(1);

    	 
    	    index144_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index144_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA144_2;

    	    ANTLR3_MARKER index144_2;


    		LA144_2 = LA(1);

    	 
    	    index144_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index144_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA144_3;

    	    ANTLR3_MARKER index144_3;


    		LA144_3 = LA(1);

    	 
    	    index144_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index144_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA144_4;

    	    ANTLR3_MARKER index144_4;


    		LA144_4 = LA(1);

    	 
    	    index144_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index144_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA144_5;

    	    ANTLR3_MARKER index144_5;


    		LA144_5 = LA(1);

    	 
    	    index144_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index144_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA144_6;

    	    ANTLR3_MARKER index144_6;


    		LA144_6 = LA(1);

    	 
    	    index144_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index144_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA144_7;

    	    ANTLR3_MARKER index144_7;


    		LA144_7 = LA(1);

    	 
    	    index144_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index144_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA144_8;

    	    ANTLR3_MARKER index144_8;


    		LA144_8 = LA(1);

    	 
    	    index144_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index144_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA144_9;

    	    ANTLR3_MARKER index144_9;


    		LA144_9 = LA(1);

    	 
    	    index144_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index144_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA144_10;

    	    ANTLR3_MARKER index144_10;


    		LA144_10 = LA(1);

    	 
    	    index144_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred155_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index144_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"366:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );";
    EXCEPTION->decisionNum  = 144;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 144
 */
static
ANTLR3_CYCLIC_DFA cdfa144
    =	{
	    144,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"366:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa144_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa144_eot,	    /* EOT table			    */
	    dfa144_eof,	    /* EOF table			    */
	    dfa144_min,	    /* Minimum tokens for each state    */
	    dfa144_max,	    /* Maximum tokens for each state    */
	    dfa144_accept,	/* Accept table			    */
	    dfa144_special,	/* Special transition states	    */
	    dfa144_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 144
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    371:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static const ANTLR3_INT32 dfa147_eot[22] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa147_eof[22] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa147_min[22] =
    {
	114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa147_max[22] =
    {
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1
    };
static const ANTLR3_INT32 dfa147_accept[22] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2
    };
static const ANTLR3_INT32 dfa147_special[22] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa147_T_empty	    NULL

static const ANTLR3_INT32 dfa147_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, 11, -1, -1, -1, 11, 11, 11, 
	11, 11, 11, 11, 11, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa147_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa147_transitions[] =
{
    dfa147_T0, dfa147_T1, dfa147_T1, dfa147_T1, dfa147_T1, dfa147_T1, dfa147_T1, 
    dfa147_T1, dfa147_T1, dfa147_T1, dfa147_T1, dfa147_T_empty, dfa147_T_empty, 
    dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, 
    dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty	
};

static ANTLR3_INT32 dfa147_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA147_1;

    	    ANTLR3_MARKER index147_1;


    		LA147_1 = LA(1);

    	 
    	    index147_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index147_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA147_2;

    	    ANTLR3_MARKER index147_2;


    		LA147_2 = LA(1);

    	 
    	    index147_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index147_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA147_3;

    	    ANTLR3_MARKER index147_3;


    		LA147_3 = LA(1);

    	 
    	    index147_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index147_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA147_4;

    	    ANTLR3_MARKER index147_4;


    		LA147_4 = LA(1);

    	 
    	    index147_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index147_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA147_5;

    	    ANTLR3_MARKER index147_5;


    		LA147_5 = LA(1);

    	 
    	    index147_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index147_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA147_6;

    	    ANTLR3_MARKER index147_6;


    		LA147_6 = LA(1);

    	 
    	    index147_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index147_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA147_7;

    	    ANTLR3_MARKER index147_7;


    		LA147_7 = LA(1);

    	 
    	    index147_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index147_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA147_8;

    	    ANTLR3_MARKER index147_8;


    		LA147_8 = LA(1);

    	 
    	    index147_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index147_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA147_9;

    	    ANTLR3_MARKER index147_9;


    		LA147_9 = LA(1);

    	 
    	    index147_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index147_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA147_10;

    	    ANTLR3_MARKER index147_10;


    		LA147_10 = LA(1);

    	 
    	    index147_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred158_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index147_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"371:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );";
    EXCEPTION->decisionNum  = 147;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 147
 */
static
ANTLR3_CYCLIC_DFA cdfa147
    =	{
	    147,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"371:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );",	
	    (CDFA_SPECIAL_FUNC) dfa147_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa147_eot,	    /* EOT table			    */
	    dfa147_eof,	    /* EOF table			    */
	    dfa147_min,	    /* Minimum tokens for each state    */
	    dfa147_max,	    /* Maximum tokens for each state    */
	    dfa147_accept,	/* Accept table			    */
	    dfa147_special,	/* Special transition states	    */
	    dfa147_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 147
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    378:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static const ANTLR3_INT32 dfa148_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa148_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa148_min[13] =
    {
	114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa148_max[13] =
    {
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa148_accept[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa148_special[13] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa148_T_empty	    NULL

static const ANTLR3_INT32 dfa148_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa148_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa148_transitions[] =
{
    dfa148_T0, dfa148_T1, dfa148_T1, dfa148_T1, dfa148_T1, dfa148_T1, dfa148_T1, 
    dfa148_T1, dfa148_T1, dfa148_T1, dfa148_T1, dfa148_T_empty, dfa148_T_empty	
};

static ANTLR3_INT32 dfa148_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA148_1;

    	    ANTLR3_MARKER index148_1;


    		LA148_1 = LA(1);

    	 
    	    index148_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred161_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index148_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA148_2;

    	    ANTLR3_MARKER index148_2;


    		LA148_2 = LA(1);

    	 
    	    index148_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred161_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index148_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA148_3;

    	    ANTLR3_MARKER index148_3;


    		LA148_3 = LA(1);

    	 
    	    index148_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred161_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index148_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA148_4;

    	    ANTLR3_MARKER index148_4;


    		LA148_4 = LA(1);

    	 
    	    index148_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred161_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index148_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA148_5;

    	    ANTLR3_MARKER index148_5;


    		LA148_5 = LA(1);

    	 
    	    index148_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred161_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index148_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA148_6;

    	    ANTLR3_MARKER index148_6;


    		LA148_6 = LA(1);

    	 
    	    index148_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred161_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index148_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA148_7;

    	    ANTLR3_MARKER index148_7;


    		LA148_7 = LA(1);

    	 
    	    index148_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred161_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index148_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA148_8;

    	    ANTLR3_MARKER index148_8;


    		LA148_8 = LA(1);

    	 
    	    index148_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred161_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index148_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA148_9;

    	    ANTLR3_MARKER index148_9;


    		LA148_9 = LA(1);

    	 
    	    index148_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred161_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index148_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA148_10;

    	    ANTLR3_MARKER index148_10;


    		LA148_10 = LA(1);

    	 
    	    index148_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred161_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index148_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"378:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );";
    EXCEPTION->decisionNum  = 148;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 148
 */
static
ANTLR3_CYCLIC_DFA cdfa148
    =	{
	    148,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"378:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa148_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa148_eot,	    /* EOT table			    */
	    dfa148_eof,	    /* EOF table			    */
	    dfa148_min,	    /* Minimum tokens for each state    */
	    dfa148_max,	    /* Maximum tokens for each state    */
	    dfa148_accept,	/* Accept table			    */
	    dfa148_special,	/* Special transition states	    */
	    dfa148_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 148
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    383:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static const ANTLR3_INT32 dfa150_eot[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa150_eof[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa150_min[12] =
    {
	114, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa150_max[12] =
    {
	215, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa150_accept[12] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };
static const ANTLR3_INT32 dfa150_special[12] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa150_T_empty	    NULL

static const ANTLR3_INT32 dfa150_T0[] =
    {
	1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa150_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa150_transitions[] =
{
    dfa150_T0, dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, 
    dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, dfa150_T_empty, 
    dfa150_T1, dfa150_T_empty	
};

static ANTLR3_INT32 dfa150_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA150_10;

    	    ANTLR3_MARKER index150_10;


    		LA150_10 = LA(1);

    	 
    	    index150_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred162_Emerson(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index150_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"383:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );";
    EXCEPTION->decisionNum  = 150;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 150
 */
static
ANTLR3_CYCLIC_DFA cdfa150
    =	{
	    150,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"383:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa150_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa150_eot,	    /* EOT table			    */
	    dfa150_eof,	    /* EOF table			    */
	    dfa150_min,	    /* Minimum tokens for each state    */
	    dfa150_max,	    /* Maximum tokens for each state    */
	    dfa150_accept,	/* Accept table			    */
	    dfa150_special,	/* Special transition states	    */
	    dfa150_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 150
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 400:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa156_eot[61] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa156_eof[61] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa156_min[61] =
    {
	113, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa156_max[61] =
    {
	215, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa156_accept[61] =
    {
	-1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa156_special[61] =
    {	
	-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa156_T_empty	    NULL

static const ANTLR3_INT32 dfa156_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 48, 1, 
	59, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa156_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa156_transitions[] =
{
    dfa156_T0, dfa156_T_empty, dfa156_T1, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T1, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty	
};

static ANTLR3_INT32 dfa156_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA156_2;

    	    ANTLR3_MARKER index156_2;


    		LA156_2 = LA(1);

    	 
    	    index156_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 60;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index156_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA156_48;

    	    ANTLR3_MARKER index156_48;


    		LA156_48 = LA(1);

    	 
    	    index156_48 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred170_Emerson(ctx)) )
    	    {
    	        s = 60;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index156_48);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 400:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 156;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 156
 */
static
ANTLR3_CYCLIC_DFA cdfa156
    =	{
	    156,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 400:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa156_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa156_eot,	    /* EOT table			    */
	    dfa156_eof,	    /* EOF table			    */
	    dfa156_min,	    /* Minimum tokens for each state    */
	    dfa156_max,	    /* Maximum tokens for each state    */
	    dfa156_accept,	/* Accept table			    */
	    dfa156_special,	/* Special transition states	    */
	    dfa156_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 156
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 401:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa159_eot[61] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa159_eof[61] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa159_min[61] =
    {
	113, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa159_max[61] =
    {
	215, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa159_accept[61] =
    {
	-1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa159_special[61] =
    {	
	-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa159_T_empty	    NULL

static const ANTLR3_INT32 dfa159_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 48, 1, 
	59, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa159_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa159_transitions[] =
{
    dfa159_T0, dfa159_T_empty, dfa159_T1, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T1, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, dfa159_T_empty, 
    dfa159_T_empty	
};

static ANTLR3_INT32 dfa159_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA159_2;

    	    ANTLR3_MARKER index159_2;


    		LA159_2 = LA(1);

    	 
    	    index159_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (synpred175_Emerson(ctx)) )
    	    {
    	        s = 60;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index159_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA159_48;

    	    ANTLR3_MARKER index159_48;


    		LA159_48 = LA(1);

    	 
    	    index159_48 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred175_Emerson(ctx)) )
    	    {
    	        s = 60;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index159_48);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 401:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 159;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 159
 */
static
ANTLR3_CYCLIC_DFA cdfa159
    =	{
	    159,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 401:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa159_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa159_eot,	    /* EOT table			    */
	    dfa159_eof,	    /* EOF table			    */
	    dfa159_min,	    /* Minimum tokens for each state    */
	    dfa159_max,	    /* Maximum tokens for each state    */
	    dfa159_accept,	/* Accept table			    */
	    dfa159_special,	/* Special transition states	    */
	    dfa159_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 159
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 402:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa164_eot[61] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa164_eof[61] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa164_min[61] =
    {
	113, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa164_max[61] =
    {
	215, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa164_accept[61] =
    {
	-1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa164_special[61] =
    {	
	-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa164_T_empty	    NULL

static const ANTLR3_INT32 dfa164_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 48, 1, 
	59, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa164_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa164_transitions[] =
{
    dfa164_T0, dfa164_T_empty, dfa164_T1, dfa164_T_empty, dfa164_T_empty, 
    dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, 
    dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, 
    dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, 
    dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, 
    dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, 
    dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, 
    dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, 
    dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, 
    dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T1, dfa164_T_empty, 
    dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, 
    dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, dfa164_T_empty, 
    dfa164_T_empty	
};

static ANTLR3_INT32 dfa164_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA164_2;

    	    ANTLR3_MARKER index164_2;


    		LA164_2 = LA(1);

    	 
    	    index164_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred180_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (synpred182_Emerson(ctx)) )
    	    {
    	        s = 60;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index164_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA164_48;

    	    ANTLR3_MARKER index164_48;


    		LA164_48 = LA(1);

    	 
    	    index164_48 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred182_Emerson(ctx)) )
    	    {
    	        s = 60;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index164_48);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 402:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 164;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 164
 */
static
ANTLR3_CYCLIC_DFA cdfa164
    =	{
	    164,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 402:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa164_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa164_eot,	    /* EOT table			    */
	    dfa164_eof,	    /* EOF table			    */
	    dfa164_min,	    /* Minimum tokens for each state    */
	    dfa164_max,	    /* Maximum tokens for each state    */
	    dfa164_accept,	/* Accept table			    */
	    dfa164_special,	/* Special transition states	    */
	    dfa164_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 164
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 413:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa171_eot[62] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa171_eof[62] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa171_min[62] =
    {
	113, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa171_max[62] =
    {
	215, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa171_accept[62] =
    {
	-1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 3, 1, 2
    };
static const ANTLR3_INT32 dfa171_special[62] =
    {	
	-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa171_T_empty	    NULL

static const ANTLR3_INT32 dfa171_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 50, 1, 1, 1, 1, 1, -1, 1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 48, 1, 
	59, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa171_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa171_transitions[] =
{
    dfa171_T0, dfa171_T_empty, dfa171_T1, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T1, dfa171_T_empty, 
    dfa171_T1, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, dfa171_T_empty, 
    dfa171_T_empty, dfa171_T_empty	
};

static ANTLR3_INT32 dfa171_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA171_2;

    	    ANTLR3_MARKER index171_2;


    		LA171_2 = LA(1);

    	 
    	    index171_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred186_Emerson(ctx)) )
    	    {
    	        s = 60;
    	    }

    	    else if ( (synpred188_Emerson(ctx)) )
    	    {
    	        s = 61;
    	    }

    	    else if ( (synpred190_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index171_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA171_48;

    	    ANTLR3_MARKER index171_48;


    		LA171_48 = LA(1);

    	 
    	    index171_48 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred188_Emerson(ctx)) )
    	    {
    	        s = 61;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index171_48);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA171_50;

    	    ANTLR3_MARKER index171_50;


    		LA171_50 = LA(1);

    	 
    	    index171_50 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred186_Emerson(ctx)) )
    	    {
    	        s = 60;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index171_50);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 413:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*";
    EXCEPTION->decisionNum  = 171;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 171
 */
static
ANTLR3_CYCLIC_DFA cdfa171
    =	{
	    171,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 413:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa171_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa171_eot,	    /* EOT table			    */
	    dfa171_eof,	    /* EOF table			    */
	    dfa171_min,	    /* Minimum tokens for each state    */
	    dfa171_max,	    /* Maximum tokens for each state    */
	    dfa171_accept,	/* Accept table			    */
	    dfa171_special,	/* Special transition states	    */
	    dfa171_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 171
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    478:11: (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )?
 */
static const ANTLR3_INT32 dfa207_eot[32] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa207_eof[32] =
    {
	21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa207_min[32] =
    {
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa207_max[32] =
    {
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa207_accept[32] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa207_special[32] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa207_T_empty	    NULL

static const ANTLR3_INT32 dfa207_T0[] =
    {
	21, 3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, 21, 7, -1, 21, -1, -1, -1, 
	-1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, 10, 
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, 21, 21, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 17, 18, -1, -1, -1, 16, 15, 
	11, 12, 13, 14, 19, 20, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa207_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa207_transitions[] =
{
    dfa207_T0, dfa207_T1, dfa207_T1, dfa207_T1, dfa207_T1, dfa207_T1, dfa207_T1, 
    dfa207_T1, dfa207_T1, dfa207_T1, dfa207_T1, dfa207_T1, dfa207_T1, dfa207_T1, 
    dfa207_T1, dfa207_T1, dfa207_T1, dfa207_T1, dfa207_T1, dfa207_T1, dfa207_T1, 
    dfa207_T_empty, dfa207_T_empty, dfa207_T_empty, dfa207_T_empty, dfa207_T_empty, 
    dfa207_T_empty, dfa207_T_empty, dfa207_T_empty, dfa207_T_empty, dfa207_T_empty, 
    dfa207_T_empty	
};

static ANTLR3_INT32 dfa207_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA207_1;

    	    ANTLR3_MARKER index207_1;


    		LA207_1 = LA(1);

    	 
    	    index207_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA207_2;

    	    ANTLR3_MARKER index207_2;


    		LA207_2 = LA(1);

    	 
    	    index207_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA207_3;

    	    ANTLR3_MARKER index207_3;


    		LA207_3 = LA(1);

    	 
    	    index207_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA207_4;

    	    ANTLR3_MARKER index207_4;


    		LA207_4 = LA(1);

    	 
    	    index207_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA207_5;

    	    ANTLR3_MARKER index207_5;


    		LA207_5 = LA(1);

    	 
    	    index207_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA207_6;

    	    ANTLR3_MARKER index207_6;


    		LA207_6 = LA(1);

    	 
    	    index207_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA207_7;

    	    ANTLR3_MARKER index207_7;


    		LA207_7 = LA(1);

    	 
    	    index207_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA207_8;

    	    ANTLR3_MARKER index207_8;


    		LA207_8 = LA(1);

    	 
    	    index207_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA207_9;

    	    ANTLR3_MARKER index207_9;


    		LA207_9 = LA(1);

    	 
    	    index207_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA207_10;

    	    ANTLR3_MARKER index207_10;


    		LA207_10 = LA(1);

    	 
    	    index207_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA207_11;

    	    ANTLR3_MARKER index207_11;


    		LA207_11 = LA(1);

    	 
    	    index207_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 11:
        
    	{
    	    ANTLR3_UINT32 LA207_12;

    	    ANTLR3_MARKER index207_12;


    		LA207_12 = LA(1);

    	 
    	    index207_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 12:
        
    	{
    	    ANTLR3_UINT32 LA207_13;

    	    ANTLR3_MARKER index207_13;


    		LA207_13 = LA(1);

    	 
    	    index207_13 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_13);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 13:
        
    	{
    	    ANTLR3_UINT32 LA207_14;

    	    ANTLR3_MARKER index207_14;


    		LA207_14 = LA(1);

    	 
    	    index207_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 14:
        
    	{
    	    ANTLR3_UINT32 LA207_15;

    	    ANTLR3_MARKER index207_15;


    		LA207_15 = LA(1);

    	 
    	    index207_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 15:
        
    	{
    	    ANTLR3_UINT32 LA207_16;

    	    ANTLR3_MARKER index207_16;


    		LA207_16 = LA(1);

    	 
    	    index207_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 16:
        
    	{
    	    ANTLR3_UINT32 LA207_17;

    	    ANTLR3_MARKER index207_17;


    		LA207_17 = LA(1);

    	 
    	    index207_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 17:
        
    	{
    	    ANTLR3_UINT32 LA207_18;

    	    ANTLR3_MARKER index207_18;


    		LA207_18 = LA(1);

    	 
    	    index207_18 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_18);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 18:
        
    	{
    	    ANTLR3_UINT32 LA207_19;

    	    ANTLR3_MARKER index207_19;


    		LA207_19 = LA(1);

    	 
    	    index207_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 19:
        
    	{
    	    ANTLR3_UINT32 LA207_20;

    	    ANTLR3_MARKER index207_20;


    		LA207_20 = LA(1);

    	 
    	    index207_20 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred234_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 21;
    	    }

    	 
    		SEEK(index207_20);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"478:11: (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )?";
    EXCEPTION->decisionNum  = 207;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 207
 */
static
ANTLR3_CYCLIC_DFA cdfa207
    =	{
	    207,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"478:11: (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )?",	
	    (CDFA_SPECIAL_FUNC) dfa207_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa207_eot,	    /* EOT table			    */
	    dfa207_eof,	    /* EOF table			    */
	    dfa207_min,	    /* Minimum tokens for each state    */
	    dfa207_max,	    /* Maximum tokens for each state    */
	    dfa207_accept,	/* Accept table			    */
	    dfa207_special,	/* Special transition states	    */
	    dfa207_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 207
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 500:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
 */
static const ANTLR3_INT32 dfa219_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa219_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa219_min[5] =
    {
	113, 113, -1, -1, 113
    };
static const ANTLR3_INT32 dfa219_max[5] =
    {
	184, 215, -1, -1, 215
    };
static const ANTLR3_INT32 dfa219_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa219_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa219_T_empty	    NULL

static const ANTLR3_INT32 dfa219_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa219_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa219_transitions[] =
{
    dfa219_T1, dfa219_T0, dfa219_T_empty, dfa219_T_empty, dfa219_T0	
};


/* Declare tracking structure for Cyclic DFA 219
 */
static
ANTLR3_CYCLIC_DFA cdfa219
    =	{
	    219,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 500:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa219_eot,	    /* EOT table			    */
	    dfa219_eof,	    /* EOF table			    */
	    dfa219_min,	    /* Minimum tokens for each state    */
	    dfa219_max,	    /* Maximum tokens for each state    */
	    dfa219_accept,	/* Accept table			    */
	    dfa219_special,	/* Special transition states	    */
	    dfa219_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 219
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 504:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
 */
static const ANTLR3_INT32 dfa222_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa222_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa222_min[5] =
    {
	113, 113, -1, -1, 113
    };
static const ANTLR3_INT32 dfa222_max[5] =
    {
	185, 215, -1, -1, 215
    };
static const ANTLR3_INT32 dfa222_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa222_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa222_T_empty	    NULL

static const ANTLR3_INT32 dfa222_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa222_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa222_transitions[] =
{
    dfa222_T1, dfa222_T0, dfa222_T_empty, dfa222_T_empty, dfa222_T0	
};


/* Declare tracking structure for Cyclic DFA 222
 */
static
ANTLR3_CYCLIC_DFA cdfa222
    =	{
	    222,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 504:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa222_eot,	    /* EOT table			    */
	    dfa222_eof,	    /* EOF table			    */
	    dfa222_min,	    /* Minimum tokens for each state    */
	    dfa222_max,	    /* Maximum tokens for each state    */
	    dfa222_accept,	/* Accept table			    */
	    dfa222_special,	/* Special transition states	    */
	    dfa222_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 222
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 508:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa225_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa225_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa225_min[4] =
    {
	113, 113, -1, -1
    };
static const ANTLR3_INT32 dfa225_max[4] =
    {
	215, 184, -1, -1
    };
static const ANTLR3_INT32 dfa225_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa225_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa225_T_empty	    NULL

static const ANTLR3_INT32 dfa225_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3
    };static const ANTLR3_INT32 dfa225_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa225_transitions[] =
{
    dfa225_T1, dfa225_T0, dfa225_T_empty, dfa225_T_empty	
};


/* Declare tracking structure for Cyclic DFA 225
 */
static
ANTLR3_CYCLIC_DFA cdfa225
    =	{
	    225,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 508:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa225_eot,	    /* EOT table			    */
	    dfa225_eof,	    /* EOF table			    */
	    dfa225_min,	    /* Minimum tokens for each state    */
	    dfa225_max,	    /* Maximum tokens for each state    */
	    dfa225_accept,	/* Accept table			    */
	    dfa225_special,	/* Special transition states	    */
	    dfa225_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 225
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 513:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa228_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa228_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa228_min[4] =
    {
	113, 113, -1, -1
    };
static const ANTLR3_INT32 dfa228_max[4] =
    {
	215, 185, -1, -1
    };
static const ANTLR3_INT32 dfa228_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa228_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa228_T_empty	    NULL

static const ANTLR3_INT32 dfa228_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa228_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa228_transitions[] =
{
    dfa228_T0, dfa228_T1, dfa228_T_empty, dfa228_T_empty	
};


/* Declare tracking structure for Cyclic DFA 228
 */
static
ANTLR3_CYCLIC_DFA cdfa228
    =	{
	    228,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 513:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa228_eot,	    /* EOT table			    */
	    dfa228_eof,	    /* EOF table			    */
	    dfa228_min,	    /* Minimum tokens for each state    */
	    dfa228_max,	    /* Maximum tokens for each state    */
	    dfa228_accept,	/* Accept table			    */
	    dfa228_special,	/* Special transition states	    */
	    dfa228_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 228
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 517:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
 */
static const ANTLR3_INT32 dfa231_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa231_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa231_min[5] =
    {
	113, 113, -1, -1, 113
    };
static const ANTLR3_INT32 dfa231_max[5] =
    {
	186, 215, -1, -1, 215
    };
static const ANTLR3_INT32 dfa231_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa231_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa231_T_empty	    NULL

static const ANTLR3_INT32 dfa231_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa231_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa231_transitions[] =
{
    dfa231_T1, dfa231_T0, dfa231_T_empty, dfa231_T_empty, dfa231_T0	
};


/* Declare tracking structure for Cyclic DFA 231
 */
static
ANTLR3_CYCLIC_DFA cdfa231
    =	{
	    231,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 517:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa231_eot,	    /* EOT table			    */
	    dfa231_eof,	    /* EOF table			    */
	    dfa231_min,	    /* Minimum tokens for each state    */
	    dfa231_max,	    /* Maximum tokens for each state    */
	    dfa231_accept,	/* Accept table			    */
	    dfa231_special,	/* Special transition states	    */
	    dfa231_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 231
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 521:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa234_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa234_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa234_min[4] =
    {
	113, 113, -1, -1
    };
static const ANTLR3_INT32 dfa234_max[4] =
    {
	215, 186, -1, -1
    };
static const ANTLR3_INT32 dfa234_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa234_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa234_T_empty	    NULL

static const ANTLR3_INT32 dfa234_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa234_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa234_transitions[] =
{
    dfa234_T0, dfa234_T1, dfa234_T_empty, dfa234_T_empty	
};


/* Declare tracking structure for Cyclic DFA 234
 */
static
ANTLR3_CYCLIC_DFA cdfa234
    =	{
	    234,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 521:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa234_eot,	    /* EOT table			    */
	    dfa234_eof,	    /* EOF table			    */
	    dfa234_min,	    /* Minimum tokens for each state    */
	    dfa234_max,	    /* Maximum tokens for each state    */
	    dfa234_accept,	/* Accept table			    */
	    dfa234_special,	/* Special transition states	    */
	    dfa234_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 234
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 525:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
 */
static const ANTLR3_INT32 dfa237_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa237_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa237_min[5] =
    {
	113, 113, -1, -1, 113
    };
static const ANTLR3_INT32 dfa237_max[5] =
    {
	187, 215, -1, -1, 215
    };
static const ANTLR3_INT32 dfa237_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa237_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa237_T_empty	    NULL

static const ANTLR3_INT32 dfa237_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 3
    };static const ANTLR3_INT32 dfa237_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa237_transitions[] =
{
    dfa237_T0, dfa237_T1, dfa237_T_empty, dfa237_T_empty, dfa237_T1	
};


/* Declare tracking structure for Cyclic DFA 237
 */
static
ANTLR3_CYCLIC_DFA cdfa237
    =	{
	    237,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 525:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa237_eot,	    /* EOT table			    */
	    dfa237_eof,	    /* EOF table			    */
	    dfa237_min,	    /* Minimum tokens for each state    */
	    dfa237_max,	    /* Maximum tokens for each state    */
	    dfa237_accept,	/* Accept table			    */
	    dfa237_special,	/* Special transition states	    */
	    dfa237_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 237
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 529:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa240_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa240_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa240_min[4] =
    {
	113, 113, -1, -1
    };
static const ANTLR3_INT32 dfa240_max[4] =
    {
	215, 187, -1, -1
    };
static const ANTLR3_INT32 dfa240_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa240_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa240_T_empty	    NULL

static const ANTLR3_INT32 dfa240_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 3, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa240_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa240_transitions[] =
{
    dfa240_T0, dfa240_T1, dfa240_T_empty, dfa240_T_empty	
};


/* Declare tracking structure for Cyclic DFA 240
 */
static
ANTLR3_CYCLIC_DFA cdfa240
    =	{
	    240,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 529:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa240_eot,	    /* EOT table			    */
	    dfa240_eof,	    /* EOF table			    */
	    dfa240_min,	    /* Minimum tokens for each state    */
	    dfa240_max,	    /* Maximum tokens for each state    */
	    dfa240_accept,	/* Accept table			    */
	    dfa240_special,	/* Special transition states	    */
	    dfa240_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 240
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 533:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
 */
static const ANTLR3_INT32 dfa243_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa243_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa243_min[5] =
    {
	113, 113, -1, -1, 113
    };
static const ANTLR3_INT32 dfa243_max[5] =
    {
	188, 215, -1, -1, 215
    };
static const ANTLR3_INT32 dfa243_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa243_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa243_T_empty	    NULL

static const ANTLR3_INT32 dfa243_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	3
    };static const ANTLR3_INT32 dfa243_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa243_transitions[] =
{
    dfa243_T0, dfa243_T1, dfa243_T_empty, dfa243_T_empty, dfa243_T1	
};


/* Declare tracking structure for Cyclic DFA 243
 */
static
ANTLR3_CYCLIC_DFA cdfa243
    =	{
	    243,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 533:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa243_eot,	    /* EOT table			    */
	    dfa243_eof,	    /* EOF table			    */
	    dfa243_min,	    /* Minimum tokens for each state    */
	    dfa243_max,	    /* Maximum tokens for each state    */
	    dfa243_accept,	/* Accept table			    */
	    dfa243_special,	/* Special transition states	    */
	    dfa243_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 243
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 537:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa246_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa246_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa246_min[4] =
    {
	113, 113, -1, -1
    };
static const ANTLR3_INT32 dfa246_max[4] =
    {
	215, 188, -1, -1
    };
static const ANTLR3_INT32 dfa246_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa246_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa246_T_empty	    NULL

static const ANTLR3_INT32 dfa246_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 3, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa246_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa246_transitions[] =
{
    dfa246_T0, dfa246_T1, dfa246_T_empty, dfa246_T_empty	
};


/* Declare tracking structure for Cyclic DFA 246
 */
static
ANTLR3_CYCLIC_DFA cdfa246
    =	{
	    246,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 537:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa246_eot,	    /* EOT table			    */
	    dfa246_eof,	    /* EOF table			    */
	    dfa246_min,	    /* Minimum tokens for each state    */
	    dfa246_max,	    /* Maximum tokens for each state    */
	    dfa246_accept,	/* Accept table			    */
	    dfa246_special,	/* Special transition states	    */
	    dfa246_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 246
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 541:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
 */
static const ANTLR3_INT32 dfa249_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa249_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa249_min[5] =
    {
	113, 113, -1, -1, 113
    };
static const ANTLR3_INT32 dfa249_max[5] =
    {
	192, 215, -1, -1, 215
    };
static const ANTLR3_INT32 dfa249_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa249_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa249_T_empty	    NULL

static const ANTLR3_INT32 dfa249_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa249_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa249_transitions[] =
{
    dfa249_T1, dfa249_T0, dfa249_T_empty, dfa249_T_empty, dfa249_T0	
};


/* Declare tracking structure for Cyclic DFA 249
 */
static
ANTLR3_CYCLIC_DFA cdfa249
    =	{
	    249,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 541:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa249_eot,	    /* EOT table			    */
	    dfa249_eof,	    /* EOF table			    */
	    dfa249_min,	    /* Minimum tokens for each state    */
	    dfa249_max,	    /* Maximum tokens for each state    */
	    dfa249_accept,	/* Accept table			    */
	    dfa249_special,	/* Special transition states	    */
	    dfa249_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 249
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 553:65: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa253_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa253_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa253_min[4] =
    {
	113, 113, -1, -1
    };
static const ANTLR3_INT32 dfa253_max[4] =
    {
	215, 192, -1, -1
    };
static const ANTLR3_INT32 dfa253_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa253_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa253_T_empty	    NULL

static const ANTLR3_INT32 dfa253_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 
	3, 3, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };static const ANTLR3_INT32 dfa253_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa253_transitions[] =
{
    dfa253_T0, dfa253_T1, dfa253_T_empty, dfa253_T_empty	
};


/* Declare tracking structure for Cyclic DFA 253
 */
static
ANTLR3_CYCLIC_DFA cdfa253
    =	{
	    253,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 553:65: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa253_eot,	    /* EOT table			    */
	    dfa253_eof,	    /* EOF table			    */
	    dfa253_min,	    /* Minimum tokens for each state    */
	    dfa253_max,	    /* Maximum tokens for each state    */
	    dfa253_accept,	/* Accept table			    */
	    dfa253_special,	/* Special transition states	    */
	    dfa253_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 253
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 568:54: ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )*
 */
static const ANTLR3_INT32 dfa257_eot[28] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa257_eof[28] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa257_min[28] =
    {
	113, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa257_max[28] =
    {
	197, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa257_accept[28] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa257_special[28] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa257_T_empty	    NULL

static const ANTLR3_INT32 dfa257_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 22, 22, 22, 22, 22
    };static const ANTLR3_INT32 dfa257_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa257_transitions[] =
{
    dfa257_T0, dfa257_T1, dfa257_T_empty, dfa257_T_empty, dfa257_T_empty, 
    dfa257_T_empty, dfa257_T_empty, dfa257_T_empty, dfa257_T_empty, dfa257_T_empty, 
    dfa257_T_empty, dfa257_T_empty, dfa257_T_empty, dfa257_T_empty, dfa257_T_empty, 
    dfa257_T_empty, dfa257_T_empty, dfa257_T_empty, dfa257_T_empty, dfa257_T_empty, 
    dfa257_T_empty, dfa257_T_empty, dfa257_T_empty, dfa257_T_empty, dfa257_T_empty, 
    dfa257_T_empty, dfa257_T_empty, dfa257_T_empty	
};

static ANTLR3_INT32 dfa257_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA257_1;

    	    ANTLR3_MARKER index257_1;


    		LA257_1 = LA(1);

    	 
    	    index257_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred290_Emerson(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index257_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 568:54: ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )*";
    EXCEPTION->decisionNum  = 257;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 257
 */
static
ANTLR3_CYCLIC_DFA cdfa257
    =	{
	    257,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 568:54: ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa257_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa257_eot,	    /* EOT table			    */
	    dfa257_eof,	    /* EOF table			    */
	    dfa257_min,	    /* Minimum tokens for each state    */
	    dfa257_max,	    /* Maximum tokens for each state    */
	    dfa257_accept,	/* Accept table			    */
	    dfa257_special,	/* Special transition states	    */
	    dfa257_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 257
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 586:54: ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )*
 */
static const ANTLR3_INT32 dfa262_eot[44] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa262_eof[44] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa262_min[44] =
    {
	113, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa262_max[44] =
    {
	215, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa262_accept[44] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa262_special[44] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa262_T_empty	    NULL

static const ANTLR3_INT32 dfa262_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 16, 40, 40, 40, 40, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };static const ANTLR3_INT32 dfa262_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa262_transitions[] =
{
    dfa262_T0, dfa262_T1, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T1, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty	
};

static ANTLR3_INT32 dfa262_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA262_1;

    	    ANTLR3_MARKER index262_1;


    		LA262_1 = LA(1);

    	 
    	    index262_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred298_Emerson(ctx)) )
    	    {
    	        s = 40;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index262_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA262_16;

    	    ANTLR3_MARKER index262_16;


    		LA262_16 = LA(1);

    	 
    	    index262_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred298_Emerson(ctx)) )
    	    {
    	        s = 40;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index262_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 586:54: ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )*";
    EXCEPTION->decisionNum  = 262;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 262
 */
static
ANTLR3_CYCLIC_DFA cdfa262
    =	{
	    262,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 586:54: ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa262_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa262_eot,	    /* EOT table			    */
	    dfa262_eof,	    /* EOF table			    */
	    dfa262_min,	    /* Minimum tokens for each state    */
	    dfa262_max,	    /* Maximum tokens for each state    */
	    dfa262_accept,	/* Accept table			    */
	    dfa262_special,	/* Special transition states	    */
	    dfa262_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 262
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 591:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
 */
static const ANTLR3_INT32 dfa265_eot[48] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa265_eof[48] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa265_min[48] =
    {
	113, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa265_max[48] =
    {
	215, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa265_accept[48] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa265_special[48] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa265_T_empty	    NULL

static const ANTLR3_INT32 dfa265_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 43, 44, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2
    };static const ANTLR3_INT32 dfa265_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa265_transitions[] =
{
    dfa265_T0, dfa265_T1, dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, 
    dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, 
    dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, 
    dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, 
    dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, 
    dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, 
    dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, 
    dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, 
    dfa265_T_empty, dfa265_T_empty, dfa265_T_empty, dfa265_T1, dfa265_T1, 
    dfa265_T_empty, dfa265_T_empty, dfa265_T_empty	
};

static ANTLR3_INT32 dfa265_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA265_1;

    	    ANTLR3_MARKER index265_1;


    		LA265_1 = LA(1);

    	 
    	    index265_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred301_Emerson(ctx)) )
    	    {
    	        s = 47;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index265_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA265_43;

    	    ANTLR3_MARKER index265_43;


    		LA265_43 = LA(1);

    	 
    	    index265_43 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred301_Emerson(ctx)) )
    	    {
    	        s = 47;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index265_43);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA265_44;

    	    ANTLR3_MARKER index265_44;


    		LA265_44 = LA(1);

    	 
    	    index265_44 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred301_Emerson(ctx)) )
    	    {
    	        s = 47;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index265_44);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 591:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*";
    EXCEPTION->decisionNum  = 265;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 265
 */
static
ANTLR3_CYCLIC_DFA cdfa265
    =	{
	    265,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 591:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa265_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa265_eot,	    /* EOT table			    */
	    dfa265_eof,	    /* EOF table			    */
	    dfa265_min,	    /* Minimum tokens for each state    */
	    dfa265_max,	    /* Maximum tokens for each state    */
	    dfa265_accept,	/* Accept table			    */
	    dfa265_special,	/* Special transition states	    */
	    dfa265_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 265
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 601:44: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
 */
static const ANTLR3_INT32 dfa269_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa269_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa269_min[5] =
    {
	113, 113, -1, -1, 113
    };
static const ANTLR3_INT32 dfa269_max[5] =
    {
	215, 215, -1, -1, 215
    };
static const ANTLR3_INT32 dfa269_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa269_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa269_T_empty	    NULL

static const ANTLR3_INT32 dfa269_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa269_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa269_transitions[] =
{
    dfa269_T1, dfa269_T0, dfa269_T_empty, dfa269_T_empty, dfa269_T0	
};


/* Declare tracking structure for Cyclic DFA 269
 */
static
ANTLR3_CYCLIC_DFA cdfa269
    =	{
	    269,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 601:44: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa269_eot,	    /* EOT table			    */
	    dfa269_eof,	    /* EOF table			    */
	    dfa269_min,	    /* Minimum tokens for each state    */
	    dfa269_max,	    /* Maximum tokens for each state    */
	    dfa269_accept,	/* Accept table			    */
	    dfa269_special,	/* Special transition states	    */
	    dfa269_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 269
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    605:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );
 */
static const ANTLR3_INT32 dfa270_eot[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa270_eof[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa270_min[14] =
    {
	114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa270_max[14] =
    {
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa270_accept[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3
    };
static const ANTLR3_INT32 dfa270_special[14] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa270_T_empty	    NULL

static const ANTLR3_INT32 dfa270_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa270_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa270_transitions[] =
{
    dfa270_T0, dfa270_T1, dfa270_T1, dfa270_T1, dfa270_T1, dfa270_T1, dfa270_T1, 
    dfa270_T1, dfa270_T1, dfa270_T1, dfa270_T1, dfa270_T_empty, dfa270_T_empty, 
    dfa270_T_empty	
};

static ANTLR3_INT32 dfa270_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA270_1;

    	    ANTLR3_MARKER index270_1;


    		LA270_1 = LA(1);

    	 
    	    index270_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred307_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred308_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index270_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA270_2;

    	    ANTLR3_MARKER index270_2;


    		LA270_2 = LA(1);

    	 
    	    index270_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred307_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred308_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index270_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA270_3;

    	    ANTLR3_MARKER index270_3;


    		LA270_3 = LA(1);

    	 
    	    index270_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred307_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred308_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index270_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA270_4;

    	    ANTLR3_MARKER index270_4;


    		LA270_4 = LA(1);

    	 
    	    index270_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred307_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred308_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index270_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA270_5;

    	    ANTLR3_MARKER index270_5;


    		LA270_5 = LA(1);

    	 
    	    index270_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred307_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred308_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index270_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA270_6;

    	    ANTLR3_MARKER index270_6;


    		LA270_6 = LA(1);

    	 
    	    index270_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred307_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred308_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index270_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA270_7;

    	    ANTLR3_MARKER index270_7;


    		LA270_7 = LA(1);

    	 
    	    index270_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred307_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred308_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index270_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA270_8;

    	    ANTLR3_MARKER index270_8;


    		LA270_8 = LA(1);

    	 
    	    index270_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred307_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred308_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index270_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA270_9;

    	    ANTLR3_MARKER index270_9;


    		LA270_9 = LA(1);

    	 
    	    index270_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred307_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred308_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index270_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA270_10;

    	    ANTLR3_MARKER index270_10;


    		LA270_10 = LA(1);

    	 
    	    index270_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred307_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred308_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index270_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"605:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );";
    EXCEPTION->decisionNum  = 270;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 270
 */
static
ANTLR3_CYCLIC_DFA cdfa270
    =	{
	    270,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"605:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa270_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa270_eot,	    /* EOT table			    */
	    dfa270_eof,	    /* EOF table			    */
	    dfa270_min,	    /* Minimum tokens for each state    */
	    dfa270_max,	    /* Maximum tokens for each state    */
	    dfa270_accept,	/* Accept table			    */
	    dfa270_special,	/* Special transition states	    */
	    dfa270_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 270
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    632:1: primaryExpression : ( 'this' | ( vectorLiteral )=> vectorLiteral | ( quaternionLiteral )=> quaternionLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );
 */
static const ANTLR3_INT32 dfa275_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa275_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa275_min[13] =
    {
	114, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa275_max[13] =
    {
	215, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa275_accept[13] =
    {
	-1, 1, -1, 4, 5, 6, 7, -1, 10, 2, 3, 8, 9
    };
static const ANTLR3_INT32 dfa275_special[13] =
    {	
	-1, -1, 0, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa275_T_empty	    NULL

static const ANTLR3_INT32 dfa275_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa275_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa275_transitions[] =
{
    dfa275_T0, dfa275_T_empty, dfa275_T1, dfa275_T_empty, dfa275_T_empty, 
    dfa275_T_empty, dfa275_T_empty, dfa275_T1, dfa275_T_empty, dfa275_T_empty, 
    dfa275_T_empty, dfa275_T_empty, dfa275_T_empty	
};

static ANTLR3_INT32 dfa275_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA275_2;

    	    ANTLR3_MARKER index275_2;


    		LA275_2 = LA(1);

    	 
    	    index275_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred320_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (synpred321_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index275_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA275_7;

    	    ANTLR3_MARKER index275_7;


    		LA275_7 = LA(1);

    	 
    	    index275_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred326_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred327_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index275_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"632:1: primaryExpression : ( 'this' | ( vectorLiteral )=> vectorLiteral | ( quaternionLiteral )=> quaternionLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );";
    EXCEPTION->decisionNum  = 275;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 275
 */
static
ANTLR3_CYCLIC_DFA cdfa275
    =	{
	    275,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"632:1: primaryExpression : ( 'this' | ( vectorLiteral )=> vectorLiteral | ( quaternionLiteral )=> quaternionLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa275_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa275_eot,	    /* EOT table			    */
	    dfa275_eof,	    /* EOF table			    */
	    dfa275_min,	    /* Minimum tokens for each state    */
	    dfa275_max,	    /* Maximum tokens for each state    */
	    dfa275_accept,	/* Accept table			    */
	    dfa275_special,	/* Special transition states	    */
	    dfa275_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 275
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    658:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );
 */
static const ANTLR3_INT32 dfa303_eot[25] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa303_eof[25] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa303_min[25] =
    {
	114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa303_max[25] =
    {
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa303_accept[25] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 3, 4, 2
    };
static const ANTLR3_INT32 dfa303_special[25] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	10, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa303_T_empty	    NULL

static const ANTLR3_INT32 dfa303_T0[] =
    {
	3, 5, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, 11, -1, -1, -1, 11, 11, 11, 
	11, 11, 11, 11, 11, 1, 4, 21, 21, 21
    };static const ANTLR3_INT32 dfa303_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa303_transitions[] =
{
    dfa303_T0, dfa303_T1, dfa303_T1, dfa303_T1, dfa303_T1, dfa303_T1, dfa303_T1, 
    dfa303_T1, dfa303_T1, dfa303_T1, dfa303_T1, dfa303_T_empty, dfa303_T_empty, 
    dfa303_T_empty, dfa303_T_empty, dfa303_T_empty, dfa303_T_empty, dfa303_T_empty, 
    dfa303_T_empty, dfa303_T_empty, dfa303_T_empty, dfa303_T1, dfa303_T_empty, 
    dfa303_T_empty, dfa303_T_empty	
};

static ANTLR3_INT32 dfa303_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA303_1;

    	    ANTLR3_MARKER index303_1;


    		LA303_1 = LA(1);

    	 
    	    index303_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred360_Emerson(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index303_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA303_2;

    	    ANTLR3_MARKER index303_2;


    		LA303_2 = LA(1);

    	 
    	    index303_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred360_Emerson(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index303_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA303_3;

    	    ANTLR3_MARKER index303_3;


    		LA303_3 = LA(1);

    	 
    	    index303_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred360_Emerson(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index303_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA303_4;

    	    ANTLR3_MARKER index303_4;


    		LA303_4 = LA(1);

    	 
    	    index303_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred360_Emerson(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index303_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA303_5;

    	    ANTLR3_MARKER index303_5;


    		LA303_5 = LA(1);

    	 
    	    index303_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred359_Emerson(ctx)) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (synpred360_Emerson(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index303_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA303_6;

    	    ANTLR3_MARKER index303_6;


    		LA303_6 = LA(1);

    	 
    	    index303_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred360_Emerson(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index303_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA303_7;

    	    ANTLR3_MARKER index303_7;


    		LA303_7 = LA(1);

    	 
    	    index303_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred360_Emerson(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index303_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA303_8;

    	    ANTLR3_MARKER index303_8;


    		LA303_8 = LA(1);

    	 
    	    index303_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred360_Emerson(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index303_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA303_9;

    	    ANTLR3_MARKER index303_9;


    		LA303_9 = LA(1);

    	 
    	    index303_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred360_Emerson(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index303_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA303_10;

    	    ANTLR3_MARKER index303_10;


    		LA303_10 = LA(1);

    	 
    	    index303_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred360_Emerson(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index303_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA303_21;

    	    ANTLR3_MARKER index303_21;


    		LA303_21 = LA(1);

    	 
    	    index303_21 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred358_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred360_Emerson(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 23;
    	    }

    	 
    		SEEK(index303_21);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"658:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );";
    EXCEPTION->decisionNum  = 303;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 303
 */
static
ANTLR3_CYCLIC_DFA cdfa303
    =	{
	    303,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"658:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa303_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa303_eot,	    /* EOT table			    */
	    dfa303_eof,	    /* EOF table			    */
	    dfa303_min,	    /* Minimum tokens for each state    */
	    dfa303_max,	    /* Maximum tokens for each state    */
	    dfa303_accept,	/* Accept table			    */
	    dfa303_special,	/* Special transition states	    */
	    dfa303_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 303
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 674:30: ( ',' ( LTERM )* e2= expression )*
 */
static const ANTLR3_INT32 dfa311_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa311_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa311_min[5] =
    {
	113, 113, -1, 113, -1
    };
static const ANTLR3_INT32 dfa311_max[5] =
    {
	170, 215, -1, 215, -1
    };
static const ANTLR3_INT32 dfa311_accept[5] =
    {
	-1, -1, 2, -1, 1
    };
static const ANTLR3_INT32 dfa311_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa311_T_empty	    NULL

static const ANTLR3_INT32 dfa311_T0[] =
    {
	3, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, 4, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
	4, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 4, -1, -1, -1, -1, 4, 4, -1, -1, -1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4
    };static const ANTLR3_INT32 dfa311_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa311_transitions[] =
{
    dfa311_T1, dfa311_T0, dfa311_T_empty, dfa311_T0, dfa311_T_empty	
};


/* Declare tracking structure for Cyclic DFA 311
 */
static
ANTLR3_CYCLIC_DFA cdfa311
    =	{
	    311,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 674:30: ( ',' ( LTERM )* e2= expression )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa311_eot,	    /* EOT table			    */
	    dfa311_eof,	    /* EOF table			    */
	    dfa311_min,	    /* Minimum tokens for each state    */
	    dfa311_max,	    /* Maximum tokens for each state    */
	    dfa311_accept,	/* Accept table			    */
	    dfa311_special,	/* Special transition states	    */
	    dfa311_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 311
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 680:40: ( ',' ( LTERM )* p2= propertyNameAndValue )*
 */
static const ANTLR3_INT32 dfa320_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa320_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa320_min[5] =
    {
	113, 113, -1, 113, -1
    };
static const ANTLR3_INT32 dfa320_max[5] =
    {
	146, 146, -1, 146, -1
    };
static const ANTLR3_INT32 dfa320_accept[5] =
    {
	-1, -1, 2, -1, 1
    };
static const ANTLR3_INT32 dfa320_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa320_T_empty	    NULL

static const ANTLR3_INT32 dfa320_T0[] =
    {
	3, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };static const ANTLR3_INT32 dfa320_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa320_transitions[] =
{
    dfa320_T1, dfa320_T0, dfa320_T_empty, dfa320_T0, dfa320_T_empty	
};


/* Declare tracking structure for Cyclic DFA 320
 */
static
ANTLR3_CYCLIC_DFA cdfa320
    =	{
	    320,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 680:40: ( ',' ( LTERM )* p2= propertyNameAndValue )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa320_eot,	    /* EOT table			    */
	    dfa320_eof,	    /* EOF table			    */
	    dfa320_min,	    /* Minimum tokens for each state    */
	    dfa320_max,	    /* Maximum tokens for each state    */
	    dfa320_accept,	/* Accept table			    */
	    dfa320_special,	/* Special transition states	    */
	    dfa320_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 320
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    685:16: ( nameValueProto )?
 */
static const ANTLR3_INT32 dfa325_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa325_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa325_min[4] =
    {
	113, -1, 113, -1
    };
static const ANTLR3_INT32 dfa325_max[4] =
    {
	162, -1, 162, -1
    };
static const ANTLR3_INT32 dfa325_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa325_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa325_T_empty	    NULL

static const ANTLR3_INT32 dfa325_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };static const ANTLR3_INT32 dfa325_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa325_transitions[] =
{
    dfa325_T0, dfa325_T_empty, dfa325_T1, dfa325_T_empty	
};


/* Declare tracking structure for Cyclic DFA 325
 */
static
ANTLR3_CYCLIC_DFA cdfa325
    =	{
	    325,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"685:16: ( nameValueProto )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa325_eot,	    /* EOT table			    */
	    dfa325_eof,	    /* EOF table			    */
	    dfa325_min,	    /* Minimum tokens for each state    */
	    dfa325_max,	    /* Maximum tokens for each state    */
	    dfa325_accept,	/* Accept table			    */
	    dfa325_special,	/* Special transition states	    */
	    dfa325_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 325
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    308:56: ( statementList )?
 */
static const ANTLR3_INT32 dfa362_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa362_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa362_min[4] =
    {
	113, -1, 113, -1
    };
static const ANTLR3_INT32 dfa362_max[4] =
    {
	215, -1, 163, -1
    };
static const ANTLR3_INT32 dfa362_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa362_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa362_T_empty	    NULL

static const ANTLR3_INT32 dfa362_T0[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };static const ANTLR3_INT32 dfa362_T1[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 
	1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 3, 1, 1, -1, -1, 1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa362_transitions[] =
{
    dfa362_T1, dfa362_T_empty, dfa362_T0, dfa362_T_empty	
};


/* Declare tracking structure for Cyclic DFA 362
 */
static
ANTLR3_CYCLIC_DFA cdfa362
    =	{
	    362,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"308:56: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa362_eot,	    /* EOT table			    */
	    dfa362_eof,	    /* EOF table			    */
	    dfa362_min,	    /* Minimum tokens for each state    */
	    dfa362_max,	    /* Maximum tokens for each state    */
	    dfa362_accept,	/* Accept table			    */
	    dfa362_special,	/* Special transition states	    */
	    dfa362_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 362
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    685:16: ( nameValueProto )?
 */
static const ANTLR3_INT32 dfa466_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa466_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa466_min[4] =
    {
	113, -1, 113, -1
    };
static const ANTLR3_INT32 dfa466_max[4] =
    {
	162, -1, 162, -1
    };
static const ANTLR3_INT32 dfa466_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa466_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa466_T_empty	    NULL

static const ANTLR3_INT32 dfa466_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };static const ANTLR3_INT32 dfa466_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa466_transitions[] =
{
    dfa466_T0, dfa466_T_empty, dfa466_T1, dfa466_T_empty	
};


/* Declare tracking structure for Cyclic DFA 466
 */
static
ANTLR3_CYCLIC_DFA cdfa466
    =	{
	    466,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"685:16: ( nameValueProto )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa466_eot,	    /* EOT table			    */
	    dfa466_eof,	    /* EOF table			    */
	    dfa466_min,	    /* Minimum tokens for each state    */
	    dfa466_max,	    /* Maximum tokens for each state    */
	    dfa466_accept,	/* Accept table			    */
	    dfa466_special,	/* Special transition states	    */
	    dfa466_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 466
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * .//Emerson.g:145:1: program : (a= LTERM )* ( sourceElements )? ( LTERM )* EOF -> ^( PROG ( sourceElements )? ) ;
 */
static EmersonParser_program_return
program(pEmersonParser ctx)
{   
    EmersonParser_program_return retval;
    ANTLR3_UINT32 program_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    a;
    pANTLR3_COMMON_TOKEN    LTERM2;
    pANTLR3_COMMON_TOKEN    EOF3;
    EmersonParser_sourceElements_return sourceElements1;
    #undef	RETURN_TYPE_sourceElements1
    #define	RETURN_TYPE_sourceElements1 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE a_tree;
    pANTLR3_BASE_TREE LTERM2_tree;
    pANTLR3_BASE_TREE EOF3_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    program_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(1)) )
    {
    	retval.start = 0;

        return retval; 
    }
    a       = NULL;
    LTERM2       = NULL;
    EOF3       = NULL;
    sourceElements1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    a_tree   = NULL;
    LTERM2_tree   = NULL;
    EOF3_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:146:2: ( (a= LTERM )* ( sourceElements )? ( LTERM )* EOF -> ^( PROG ( sourceElements )? ) )
        // .//Emerson.g:146:4: (a= LTERM )* ( sourceElements )? ( LTERM )* EOF
        {

            // .//Emerson.g:146:5: (a= LTERM )*

            for (;;)
            {
                int alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA1_0 = LA(1);
                    if ( (LA1_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA1_2 = LA(2);
                            if ( (synpred1_Emerson(ctx)) ) 
                            {
                                alt1=1;
                            }

                        }
                    }

                }
                switch (alt1) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: a= LTERM
            	    {
            	        a = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program909); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, a, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:146:14: ( sourceElements )?
            {
                int alt2=2;
                alt2 = cdfa2.predict(ctx, RECOGNIZER, ISTREAM, &cdfa2);
                if  (HASEXCEPTION())
                {
                    goto ruleprogramEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt2) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: sourceElements
            	    {
            	        FOLLOWPUSH(FOLLOW_sourceElements_in_program913);
            	        sourceElements1=sourceElements(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements1.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:146:30: ( LTERM )*

            for (;;)
            {
                int alt3=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA3_0 = LA(1);
                    if ( (LA3_0 == LTERM) ) 
                    {
                        alt3=1;
                    }

                }
                switch (alt3) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM2 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program916); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM2, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */

            EOF3 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_program919); 
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF3, NULL); }


             
            /* AST REWRITE
             * elements          : sourceElements
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 146:41: -> ^( PROG ( sourceElements )? )
            	{
            	    // .//Emerson.g:146:44: ^( PROG ( sourceElements )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PROG, (pANTLR3_UINT8)"PROG"), root_1));

            	        // .//Emerson.g:146:51: ( sourceElements )?
            	        {
            	        	if ( (stream_sourceElements != NULL && stream_sourceElements->hasNext(stream_sourceElements))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

            	        	}
            	        	if ( stream_sourceElements != NULL) stream_sourceElements->reset(stream_sourceElements);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(1, program_StartIndex); }
    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start sourceElements
 * .//Emerson.g:150:1: sourceElements : sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ ;
 */
static EmersonParser_sourceElements_return
sourceElements(pEmersonParser ctx)
{   
    EmersonParser_sourceElements_return retval;
    ANTLR3_UINT32 sourceElements_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM5;
    EmersonParser_sourceElement_return sourceElement4;
    #undef	RETURN_TYPE_sourceElement4
    #define	RETURN_TYPE_sourceElement4 EmersonParser_sourceElement_return

    EmersonParser_sourceElement_return sourceElement6;
    #undef	RETURN_TYPE_sourceElement6
    #define	RETURN_TYPE_sourceElement6 EmersonParser_sourceElement_return

    pANTLR3_BASE_TREE LTERM5_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElement;
    /* Initialize rule variables
     */
    sourceElements_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(2)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM5       = NULL;
    sourceElement4.tree = NULL;

    sourceElement6.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM5_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_sourceElement   = NULL;
    #define CREATE_stream_sourceElement  if (stream_sourceElement == NULL) {stream_sourceElement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:151:9: ( sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ )
        // .//Emerson.g:151:11: sourceElement ( ( LTERM )* sourceElement )*
        {
            FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements948);
            sourceElement4=sourceElement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceElementsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement4.tree, NULL); }

            // .//Emerson.g:151:25: ( ( LTERM )* sourceElement )*

            for (;;)
            {
                int alt5=2;
                alt5 = cdfa5.predict(ctx, RECOGNIZER, ISTREAM, &cdfa5);
                if  (HASEXCEPTION())
                {
                    goto rulesourceElementsEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt5) 
                {
            	case 1:
            	    // .//Emerson.g:151:26: ( LTERM )* sourceElement
            	    {

            	        // .//Emerson.g:151:26: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt4=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA4_0 = LA(1);
            	                if ( (LA4_0 == LTERM) ) 
            	                {
            	                    {
            	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                        */
            	                        int LA4_2 = LA(2);
            	                        if ( (synpred4_Emerson(ctx)) ) 
            	                        {
            	                            alt4=1;
            	                        }

            	                    }
            	                }

            	            }
            	            switch (alt4) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM5 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_sourceElements951); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesourceElementsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM5, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop4;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop4: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements954);
            	        sourceElement6=sourceElement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceElementsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement6.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop5;	/* break out of the loop */
            	    break;
                }
            }
            loop5: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : sourceElement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 151:49: -> ( sourceElement )+
            	{
            	    if ((stream_sourceElement == NULL || !stream_sourceElement->hasNext(stream_sourceElement))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_sourceElement->hasNext(stream_sourceElement))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElement == NULL ? NULL : stream_sourceElement->nextTree(stream_sourceElement));

            	    	}
            	    	stream_sourceElement->reset(stream_sourceElement);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementsEx; /* Prevent compiler warnings */
    rulesourceElementsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_sourceElement != NULL) stream_sourceElement->free(stream_sourceElement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(2, sourceElements_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElements */

/** 
 * $ANTLR start sourceElement
 * .//Emerson.g:154:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static EmersonParser_sourceElement_return
sourceElement(pEmersonParser ctx)
{   
    EmersonParser_sourceElement_return retval;
    ANTLR3_UINT32 sourceElement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_functionDeclaration_return functionDeclaration7;
    #undef	RETURN_TYPE_functionDeclaration7
    #define	RETURN_TYPE_functionDeclaration7 EmersonParser_functionDeclaration_return

    EmersonParser_statement_return statement8;
    #undef	RETURN_TYPE_statement8
    #define	RETURN_TYPE_statement8 EmersonParser_statement_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionDeclaration;
    /* Initialize rule variables
     */
    sourceElement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(3)) )
    {
    	retval.start = 0;

        return retval; 
    }
    functionDeclaration7.tree = NULL;

    statement8.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_functionDeclaration   = NULL;
    #define CREATE_stream_functionDeclaration  if (stream_functionDeclaration == NULL) {stream_functionDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionDeclaration"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:155:2: ( functionDeclaration -> functionDeclaration | statement -> statement )
            
            ANTLR3_UINT32 alt6;

            alt6=2;

            alt6 = cdfa6.predict(ctx, RECOGNIZER, ISTREAM, &cdfa6);
            if  (HASEXCEPTION())
            {
                goto rulesourceElementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt6) 
            {
        	case 1:
        	    // .//Emerson.g:155:4: functionDeclaration
        	    {
        	        FOLLOWPUSH(FOLLOW_functionDeclaration_in_sourceElement975);
        	        functionDeclaration7=functionDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_functionDeclaration; stream_functionDeclaration->add(stream_functionDeclaration, functionDeclaration7.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : functionDeclaration
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 155:24: -> functionDeclaration
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionDeclaration == NULL ? NULL : stream_functionDeclaration->nextTree(stream_functionDeclaration));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:156:4: statement
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_sourceElement984);
        	        statement8=statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement8.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : statement
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 156:14: -> statement
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementEx; /* Prevent compiler warnings */
    rulesourceElementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_functionDeclaration != NULL) stream_functionDeclaration->free(stream_functionDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(3, sourceElement_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElement */

/** 
 * $ANTLR start functionDeclaration
 * .//Emerson.g:160:1: functionDeclaration : 'function' ( LTERM )* Identifier ( LTERM )* ( formalParameterList )? ( LTERM )* functionBody -> ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) ;
 */
static EmersonParser_functionDeclaration_return
functionDeclaration(pEmersonParser ctx)
{   
    EmersonParser_functionDeclaration_return retval;
    ANTLR3_UINT32 functionDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal9;
    pANTLR3_COMMON_TOKEN    LTERM10;
    pANTLR3_COMMON_TOKEN    Identifier11;
    pANTLR3_COMMON_TOKEN    LTERM12;
    pANTLR3_COMMON_TOKEN    LTERM14;
    EmersonParser_formalParameterList_return formalParameterList13;
    #undef	RETURN_TYPE_formalParameterList13
    #define	RETURN_TYPE_formalParameterList13 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody15;
    #undef	RETURN_TYPE_functionBody15
    #define	RETURN_TYPE_functionBody15 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal9_tree;
    pANTLR3_BASE_TREE LTERM10_tree;
    pANTLR3_BASE_TREE Identifier11_tree;
    pANTLR3_BASE_TREE LTERM12_tree;
    pANTLR3_BASE_TREE LTERM14_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(4)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal9       = NULL;
    LTERM10       = NULL;
    Identifier11       = NULL;
    LTERM12       = NULL;
    LTERM14       = NULL;
    formalParameterList13.tree = NULL;

    functionBody15.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal9_tree   = NULL;
    LTERM10_tree   = NULL;
    Identifier11_tree   = NULL;
    LTERM12_tree   = NULL;
    LTERM14_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:161:2: ( 'function' ( LTERM )* Identifier ( LTERM )* ( formalParameterList )? ( LTERM )* functionBody -> ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) )
        // .//Emerson.g:161:4: 'function' ( LTERM )* Identifier ( LTERM )* ( formalParameterList )? ( LTERM )* functionBody
        {
            string_literal9 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_functionDeclaration1001); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, string_literal9, NULL); }


            // .//Emerson.g:161:15: ( LTERM )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == LTERM) ) 
                    {
                        alt7=1;
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM10 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration1003); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM10, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */

            Identifier11 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionDeclaration1006); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier11, NULL); }


            // .//Emerson.g:161:33: ( LTERM )*

            for (;;)
            {
                int alt8=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA8_2 = LA(2);
                            if ( (synpred8_Emerson(ctx)) ) 
                            {
                                alt8=1;
                            }

                        }
                    }

                }
                switch (alt8) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM12 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration1008); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM12, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:161:41: ( formalParameterList )?
            {
                int alt9=2;
                {
                    int LA9_0 = LA(1);
                    if ( (LA9_0 == Identifier) ) 
                    {
                        alt9=1;
                    }
                }
                switch (alt9) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionDeclaration1012);
            	        formalParameterList13=formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList13.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:161:62: ( LTERM )*

            for (;;)
            {
                int alt10=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA10_0 = LA(1);
                    if ( (LA10_0 == LTERM) ) 
                    {
                        alt10=1;
                    }

                }
                switch (alt10) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM14 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration1015); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM14, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionDeclaration1018);
            functionBody15=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody15.tree, NULL); }

             
            /* AST REWRITE
             * elements          : functionBody, Identifier, formalParameterList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 161:82: -> ^( FUNC_DECL Identifier ( formalParameterList )? functionBody )
            	{
            	    // .//Emerson.g:161:85: ^( FUNC_DECL Identifier ( formalParameterList )? functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_DECL, (pANTLR3_UINT8)"FUNC_DECL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:161:109: ( formalParameterList )?
            	        {
            	        	if ( (stream_formalParameterList != NULL && stream_formalParameterList->hasNext(stream_formalParameterList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));

            	        	}
            	        	if ( stream_formalParameterList != NULL) stream_formalParameterList->reset(stream_formalParameterList);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionDeclarationEx; /* Prevent compiler warnings */
    rulefunctionDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(4, functionDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end functionDeclaration */

/** 
 * $ANTLR start functionExpression
 * .//Emerson.g:164:1: functionExpression : 'function' ( LTERM )* ( Identifier )? ( LTERM )* '(' ( LTERM )* ( formalParameterList )? ( LTERM )* ')' ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) ;
 */
static EmersonParser_functionExpression_return
functionExpression(pEmersonParser ctx)
{   
    EmersonParser_functionExpression_return retval;
    ANTLR3_UINT32 functionExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal16;
    pANTLR3_COMMON_TOKEN    LTERM17;
    pANTLR3_COMMON_TOKEN    Identifier18;
    pANTLR3_COMMON_TOKEN    LTERM19;
    pANTLR3_COMMON_TOKEN    char_literal20;
    pANTLR3_COMMON_TOKEN    LTERM21;
    pANTLR3_COMMON_TOKEN    LTERM23;
    pANTLR3_COMMON_TOKEN    char_literal24;
    pANTLR3_COMMON_TOKEN    LTERM25;
    EmersonParser_formalParameterList_return formalParameterList22;
    #undef	RETURN_TYPE_formalParameterList22
    #define	RETURN_TYPE_formalParameterList22 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody26;
    #undef	RETURN_TYPE_functionBody26
    #define	RETURN_TYPE_functionBody26 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal16_tree;
    pANTLR3_BASE_TREE LTERM17_tree;
    pANTLR3_BASE_TREE Identifier18_tree;
    pANTLR3_BASE_TREE LTERM19_tree;
    pANTLR3_BASE_TREE char_literal20_tree;
    pANTLR3_BASE_TREE LTERM21_tree;
    pANTLR3_BASE_TREE LTERM23_tree;
    pANTLR3_BASE_TREE char_literal24_tree;
    pANTLR3_BASE_TREE LTERM25_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(5)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal16       = NULL;
    LTERM17       = NULL;
    Identifier18       = NULL;
    LTERM19       = NULL;
    char_literal20       = NULL;
    LTERM21       = NULL;
    LTERM23       = NULL;
    char_literal24       = NULL;
    LTERM25       = NULL;
    formalParameterList22.tree = NULL;

    functionBody26.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal16_tree   = NULL;
    LTERM17_tree   = NULL;
    Identifier18_tree   = NULL;
    LTERM19_tree   = NULL;
    char_literal20_tree   = NULL;
    LTERM21_tree   = NULL;
    LTERM23_tree   = NULL;
    char_literal24_tree   = NULL;
    LTERM25_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:165:2: ( 'function' ( LTERM )* ( Identifier )? ( LTERM )* '(' ( LTERM )* ( formalParameterList )? ( LTERM )* ')' ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) )
        // .//Emerson.g:165:4: 'function' ( LTERM )* ( Identifier )? ( LTERM )* '(' ( LTERM )* ( formalParameterList )? ( LTERM )* ')' ( LTERM )* functionBody
        {
            string_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_functionExpression1043); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, string_literal16, NULL); }


            // .//Emerson.g:165:15: ( LTERM )*

            for (;;)
            {
                int alt11=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA11_0 = LA(1);
                    if ( (LA11_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA11_2 = LA(2);
                            if ( (synpred11_Emerson(ctx)) ) 
                            {
                                alt11=1;
                            }

                        }
                    }

                }
                switch (alt11) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM17 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1045); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM17, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:165:22: ( Identifier )?
            {
                int alt12=2;
                {
                    int LA12_0 = LA(1);
                    if ( (LA12_0 == Identifier) ) 
                    {
                        alt12=1;
                    }
                }
                switch (alt12) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier18 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionExpression1048); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier18, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:165:34: ( LTERM )*

            for (;;)
            {
                int alt13=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA13_0 = LA(1);
                    if ( (LA13_0 == LTERM) ) 
                    {
                        alt13=1;
                    }

                }
                switch (alt13) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM19 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1051); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM19, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */

            char_literal20 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_functionExpression1054); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal20, NULL); }


            // .//Emerson.g:165:45: ( LTERM )*

            for (;;)
            {
                int alt14=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA14_0 = LA(1);
                    if ( (LA14_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA14_2 = LA(2);
                            if ( (synpred14_Emerson(ctx)) ) 
                            {
                                alt14=1;
                            }

                        }
                    }

                }
                switch (alt14) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM21 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1056); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM21, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:165:52: ( formalParameterList )?
            {
                int alt15=2;
                {
                    int LA15_0 = LA(1);
                    if ( (LA15_0 == Identifier) ) 
                    {
                        alt15=1;
                    }
                }
                switch (alt15) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionExpression1059);
            	        formalParameterList22=formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList22.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:165:73: ( LTERM )*

            for (;;)
            {
                int alt16=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA16_0 = LA(1);
                    if ( (LA16_0 == LTERM) ) 
                    {
                        alt16=1;
                    }

                }
                switch (alt16) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM23 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1062); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM23, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */

            char_literal24 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_functionExpression1065); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal24, NULL); }


            // .//Emerson.g:165:84: ( LTERM )*

            for (;;)
            {
                int alt17=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA17_0 = LA(1);
                    if ( (LA17_0 == LTERM) ) 
                    {
                        alt17=1;
                    }

                }
                switch (alt17) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM25 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1067); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM25, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionExpression1070);
            functionBody26=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody26.tree, NULL); }

             
            /* AST REWRITE
             * elements          : Identifier, formalParameterList, functionBody
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 165:104: -> ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody )
            	{
            	    // .//Emerson.g:165:107: ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_EXPR, (pANTLR3_UINT8)"FUNC_EXPR"), root_1));

            	        // .//Emerson.g:165:120: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }
            	        // .//Emerson.g:165:133: ( formalParameterList )?
            	        {
            	        	if ( (stream_formalParameterList != NULL && stream_formalParameterList->hasNext(stream_formalParameterList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));

            	        	}
            	        	if ( stream_formalParameterList != NULL) stream_formalParameterList->reset(stream_formalParameterList);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionExpressionEx; /* Prevent compiler warnings */
    rulefunctionExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(5, functionExpression_StartIndex); }
    return retval;
}
/* $ANTLR end functionExpression */

/** 
 * $ANTLR start formalParameterList
 * .//Emerson.g:168:1: formalParameterList : Identifier ( ',' ( LTERM )* Identifier )* -> ^( FUNC_PARAMS ( Identifier )+ ) ;
 */
static EmersonParser_formalParameterList_return
formalParameterList(pEmersonParser ctx)
{   
    EmersonParser_formalParameterList_return retval;
    ANTLR3_UINT32 formalParameterList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier27;
    pANTLR3_COMMON_TOKEN    char_literal28;
    pANTLR3_COMMON_TOKEN    LTERM29;
    pANTLR3_COMMON_TOKEN    Identifier30;

    pANTLR3_BASE_TREE Identifier27_tree;
    pANTLR3_BASE_TREE char_literal28_tree;
    pANTLR3_BASE_TREE LTERM29_tree;
    pANTLR3_BASE_TREE Identifier30_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    formalParameterList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(6)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier27       = NULL;
    char_literal28       = NULL;
    LTERM29       = NULL;
    Identifier30       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    Identifier27_tree   = NULL;
    char_literal28_tree   = NULL;
    LTERM29_tree   = NULL;
    Identifier30_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:169:2: ( Identifier ( ',' ( LTERM )* Identifier )* -> ^( FUNC_PARAMS ( Identifier )+ ) )
        // .//Emerson.g:169:4: Identifier ( ',' ( LTERM )* Identifier )*
        {
            Identifier27 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList1098); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier27, NULL); }


            // .//Emerson.g:169:15: ( ',' ( LTERM )* Identifier )*

            for (;;)
            {
                int alt19=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA19_0 = LA(1);
                    if ( (LA19_0 == 144) ) 
                    {
                        alt19=1;
                    }

                }
                switch (alt19) 
                {
            	case 1:
            	    // .//Emerson.g:169:16: ',' ( LTERM )* Identifier
            	    {
            	        char_literal28 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_formalParameterList1101); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal28, NULL); }


            	        // .//Emerson.g:169:20: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt18=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA18_0 = LA(1);
            	                if ( (LA18_0 == LTERM) ) 
            	                {
            	                    alt18=1;
            	                }

            	            }
            	            switch (alt18) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM29 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList1103); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM29, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop18;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop18: ; /* Jump out to here if this rule does not match */

            	        Identifier30 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList1106); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier30, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop19;	/* break out of the loop */
            	    break;
                }
            }
            loop19: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 169:40: -> ^( FUNC_PARAMS ( Identifier )+ )
            	{
            	    // .//Emerson.g:169:43: ^( FUNC_PARAMS ( Identifier )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_PARAMS, (pANTLR3_UINT8)"FUNC_PARAMS"), root_1));

            	        if ((stream_Identifier == NULL || !stream_Identifier->hasNext(stream_Identifier))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_Identifier->hasNext(stream_Identifier))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	stream_Identifier->reset(stream_Identifier);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalParameterListEx; /* Prevent compiler warnings */
    ruleformalParameterListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(6, formalParameterList_StartIndex); }
    return retval;
}
/* $ANTLR end formalParameterList */

/** 
 * $ANTLR start functionBody
 * .//Emerson.g:172:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static EmersonParser_functionBody_return
functionBody(pEmersonParser ctx)
{   
    EmersonParser_functionBody_return retval;
    ANTLR3_UINT32 functionBody_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal31;
    pANTLR3_COMMON_TOKEN    LTERM32;
    pANTLR3_COMMON_TOKEN    char_literal33;
    pANTLR3_COMMON_TOKEN    char_literal34;
    pANTLR3_COMMON_TOKEN    LTERM35;
    pANTLR3_COMMON_TOKEN    LTERM37;
    pANTLR3_COMMON_TOKEN    char_literal38;
    EmersonParser_sourceElements_return sourceElements36;
    #undef	RETURN_TYPE_sourceElements36
    #define	RETURN_TYPE_sourceElements36 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE char_literal31_tree;
    pANTLR3_BASE_TREE LTERM32_tree;
    pANTLR3_BASE_TREE char_literal33_tree;
    pANTLR3_BASE_TREE char_literal34_tree;
    pANTLR3_BASE_TREE LTERM35_tree;
    pANTLR3_BASE_TREE LTERM37_tree;
    pANTLR3_BASE_TREE char_literal38_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    functionBody_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(7)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal31       = NULL;
    LTERM32       = NULL;
    char_literal33       = NULL;
    char_literal34       = NULL;
    LTERM35       = NULL;
    LTERM37       = NULL;
    char_literal38       = NULL;
    sourceElements36.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal31_tree   = NULL;
    LTERM32_tree   = NULL;
    char_literal33_tree   = NULL;
    char_literal34_tree   = NULL;
    LTERM35_tree   = NULL;
    LTERM37_tree   = NULL;
    char_literal38_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:173:2: ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt23;

            alt23=2;

            alt23 = cdfa23.predict(ctx, RECOGNIZER, ISTREAM, &cdfa23);
            if  (HASEXCEPTION())
            {
                goto rulefunctionBodyEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt23) 
            {
        	case 1:
        	    // .//Emerson.g:173:4: '{' ( LTERM )* '}'
        	    {
        	        char_literal31 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_functionBody1129); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal31, NULL); }


        	        // .//Emerson.g:173:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt20=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA20_0 = LA(1);
        	                if ( (LA20_0 == LTERM) ) 
        	                {
        	                    alt20=1;
        	                }

        	            }
        	            switch (alt20) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM32 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1131); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM32, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop20;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop20: ; /* Jump out to here if this rule does not match */

        	        char_literal33 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_functionBody1134); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal33, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 173:19: -> ^( EMPTY_FUNC_BODY )
        	        	{
        	        	    // .//Emerson.g:173:22: ^( EMPTY_FUNC_BODY )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EMPTY_FUNC_BODY, (pANTLR3_UINT8)"EMPTY_FUNC_BODY"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:174:4: '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}'
        	    {
        	        char_literal34 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_functionBody1145); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal34, NULL); }


        	        // .//Emerson.g:174:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt21=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA21_0 = LA(1);
        	                if ( (LA21_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA21_2 = LA(2);
        	                        if ( (synpred22_Emerson(ctx)) ) 
        	                        {
        	                            alt21=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt21) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM35 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1147); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM35, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop21;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop21: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:174:15: ( sourceElements -> sourceElements )
        	        // .//Emerson.g:174:16: sourceElements
        	        {
        	            FOLLOWPUSH(FOLLOW_sourceElements_in_functionBody1151);
        	            sourceElements36=sourceElements(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulefunctionBodyEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements36.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : sourceElements
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 174:31: -> sourceElements
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:174:50: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt22=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA22_0 = LA(1);
        	                if ( (LA22_0 == LTERM) ) 
        	                {
        	                    alt22=1;
        	                }

        	            }
        	            switch (alt22) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM37 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1158); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM37, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop22;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop22: ; /* Jump out to here if this rule does not match */

        	        char_literal38 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_functionBody1161); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal38, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionBodyEx; /* Prevent compiler warnings */
    rulefunctionBodyEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(7, functionBody_StartIndex); }
    return retval;
}
/* $ANTLR end functionBody */

/** 
 * $ANTLR start statement
 * .//Emerson.g:178:1: statement : ( ( switchStatement )=> switchStatement | emptyStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );
 */
static EmersonParser_statement_return
statement(pEmersonParser ctx)
{   
    EmersonParser_statement_return retval;
    ANTLR3_UINT32 statement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_switchStatement_return switchStatement39;
    #undef	RETURN_TYPE_switchStatement39
    #define	RETURN_TYPE_switchStatement39 EmersonParser_switchStatement_return

    EmersonParser_emptyStatement_return emptyStatement40;
    #undef	RETURN_TYPE_emptyStatement40
    #define	RETURN_TYPE_emptyStatement40 EmersonParser_emptyStatement_return

    EmersonParser_statementBlock_return statementBlock41;
    #undef	RETURN_TYPE_statementBlock41
    #define	RETURN_TYPE_statementBlock41 EmersonParser_statementBlock_return

    EmersonParser_variableStatement_return variableStatement42;
    #undef	RETURN_TYPE_variableStatement42
    #define	RETURN_TYPE_variableStatement42 EmersonParser_variableStatement_return

    EmersonParser_expressionStatement_return expressionStatement43;
    #undef	RETURN_TYPE_expressionStatement43
    #define	RETURN_TYPE_expressionStatement43 EmersonParser_expressionStatement_return

    EmersonParser_ifStatement_return ifStatement44;
    #undef	RETURN_TYPE_ifStatement44
    #define	RETURN_TYPE_ifStatement44 EmersonParser_ifStatement_return

    EmersonParser_iterationStatement_return iterationStatement45;
    #undef	RETURN_TYPE_iterationStatement45
    #define	RETURN_TYPE_iterationStatement45 EmersonParser_iterationStatement_return

    EmersonParser_continueStatement_return continueStatement46;
    #undef	RETURN_TYPE_continueStatement46
    #define	RETURN_TYPE_continueStatement46 EmersonParser_continueStatement_return

    EmersonParser_breakStatement_return breakStatement47;
    #undef	RETURN_TYPE_breakStatement47
    #define	RETURN_TYPE_breakStatement47 EmersonParser_breakStatement_return

    EmersonParser_returnStatement_return returnStatement48;
    #undef	RETURN_TYPE_returnStatement48
    #define	RETURN_TYPE_returnStatement48 EmersonParser_returnStatement_return

    EmersonParser_withStatement_return withStatement49;
    #undef	RETURN_TYPE_withStatement49
    #define	RETURN_TYPE_withStatement49 EmersonParser_withStatement_return

    EmersonParser_throwStatement_return throwStatement50;
    #undef	RETURN_TYPE_throwStatement50
    #define	RETURN_TYPE_throwStatement50 EmersonParser_throwStatement_return

    EmersonParser_tryStatement_return tryStatement51;
    #undef	RETURN_TYPE_tryStatement51
    #define	RETURN_TYPE_tryStatement51 EmersonParser_tryStatement_return


    /* Initialize rule variables
     */
    statement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(8)) )
    {
    	retval.start = 0;

        return retval; 
    }
    switchStatement39.tree = NULL;

    emptyStatement40.tree = NULL;

    statementBlock41.tree = NULL;

    variableStatement42.tree = NULL;

    expressionStatement43.tree = NULL;

    ifStatement44.tree = NULL;

    iterationStatement45.tree = NULL;

    continueStatement46.tree = NULL;

    breakStatement47.tree = NULL;

    returnStatement48.tree = NULL;

    withStatement49.tree = NULL;

    throwStatement50.tree = NULL;

    tryStatement51.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:179:9: ( ( switchStatement )=> switchStatement | emptyStatement | statementBlock | variableStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement )
            
            ANTLR3_UINT32 alt24;

            alt24=13;

            alt24 = cdfa24.predict(ctx, RECOGNIZER, ISTREAM, &cdfa24);
            if  (HASEXCEPTION())
            {
                goto rulestatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt24) 
            {
        	case 1:
        	    // .//Emerson.g:179:11: ( switchStatement )=> switchStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_switchStatement_in_statement1186);
        	        switchStatement39=switchStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switchStatement39.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:180:4: emptyStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_emptyStatement_in_statement1191);
        	        emptyStatement40=emptyStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, emptyStatement40.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:181:11: statementBlock
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_statementBlock_in_statement1203);
        	        statementBlock41=statementBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statementBlock41.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:182:4: variableStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableStatement_in_statement1208);
        	        variableStatement42=variableStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableStatement42.tree);

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:183:4: expressionStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionStatement_in_statement1213);
        	        expressionStatement43=expressionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionStatement43.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:184:4: ifStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement1218);
        	        ifStatement44=ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ifStatement44.tree);

        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:185:4: iterationStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_iterationStatement_in_statement1223);
        	        iterationStatement45=iterationStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, iterationStatement45.tree);

        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:186:4: continueStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_continueStatement_in_statement1228);
        	        continueStatement46=continueStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, continueStatement46.tree);

        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:187:4: breakStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_breakStatement_in_statement1233);
        	        breakStatement47=breakStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, breakStatement47.tree);

        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:188:4: returnStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement1238);
        	        returnStatement48=returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, returnStatement48.tree);

        	    }
        	    break;
        	case 11:
        	    // .//Emerson.g:189:4: withStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_withStatement_in_statement1243);
        	        withStatement49=withStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, withStatement49.tree);

        	    }
        	    break;
        	case 12:
        	    // .//Emerson.g:190:4: throwStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_throwStatement_in_statement1248);
        	        throwStatement50=throwStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, throwStatement50.tree);

        	    }
        	    break;
        	case 13:
        	    // .//Emerson.g:191:4: tryStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_tryStatement_in_statement1253);
        	        tryStatement51=tryStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tryStatement51.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(8, statement_StartIndex); }
    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start statementBlock
 * .//Emerson.g:194:1: statementBlock : '{' ( LTERM )* ( statementList )? ( LTERM )* '}' -> ^( STATEMENT_BLOCK ( statementList )? ) ;
 */
static EmersonParser_statementBlock_return
statementBlock(pEmersonParser ctx)
{   
    EmersonParser_statementBlock_return retval;
    ANTLR3_UINT32 statementBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal52;
    pANTLR3_COMMON_TOKEN    LTERM53;
    pANTLR3_COMMON_TOKEN    LTERM55;
    pANTLR3_COMMON_TOKEN    char_literal56;
    EmersonParser_statementList_return statementList54;
    #undef	RETURN_TYPE_statementList54
    #define	RETURN_TYPE_statementList54 EmersonParser_statementList_return

    pANTLR3_BASE_TREE char_literal52_tree;
    pANTLR3_BASE_TREE LTERM53_tree;
    pANTLR3_BASE_TREE LTERM55_tree;
    pANTLR3_BASE_TREE char_literal56_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    statementBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(9)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal52       = NULL;
    LTERM53       = NULL;
    LTERM55       = NULL;
    char_literal56       = NULL;
    statementList54.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal52_tree   = NULL;
    LTERM53_tree   = NULL;
    LTERM55_tree   = NULL;
    char_literal56_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:195:2: ( '{' ( LTERM )* ( statementList )? ( LTERM )* '}' -> ^( STATEMENT_BLOCK ( statementList )? ) )
        // .//Emerson.g:195:4: '{' ( LTERM )* ( statementList )? ( LTERM )* '}'
        {
            char_literal52 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_statementBlock1265); 
            if  (HASEXCEPTION())
            {
                goto rulestatementBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal52, NULL); }


            // .//Emerson.g:195:8: ( LTERM )*

            for (;;)
            {
                int alt25=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA25_0 = LA(1);
                    if ( (LA25_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA25_2 = LA(2);
                            if ( (synpred36_Emerson(ctx)) ) 
                            {
                                alt25=1;
                            }

                        }
                    }

                }
                switch (alt25) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM53 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1267); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM53, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop25;	/* break out of the loop */
            	    break;
                }
            }
            loop25: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:195:15: ( statementList )?
            {
                int alt26=2;
                alt26 = cdfa26.predict(ctx, RECOGNIZER, ISTREAM, &cdfa26);
                if  (HASEXCEPTION())
                {
                    goto rulestatementBlockEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt26) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_statementBlock1270);
            	        statementList54=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList54.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:195:30: ( LTERM )*

            for (;;)
            {
                int alt27=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA27_0 = LA(1);
                    if ( (LA27_0 == LTERM) ) 
                    {
                        alt27=1;
                    }

                }
                switch (alt27) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM55 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1273); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM55, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop27;	/* break out of the loop */
            	    break;
                }
            }
            loop27: ; /* Jump out to here if this rule does not match */

            char_literal56 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_statementBlock1276); 
            if  (HASEXCEPTION())
            {
                goto rulestatementBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal56, NULL); }


             
            /* AST REWRITE
             * elements          : statementList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 195:41: -> ^( STATEMENT_BLOCK ( statementList )? )
            	{
            	    // .//Emerson.g:195:44: ^( STATEMENT_BLOCK ( statementList )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, STATEMENT_BLOCK, (pANTLR3_UINT8)"STATEMENT_BLOCK"), root_1));

            	        // .//Emerson.g:195:62: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementBlockEx; /* Prevent compiler warnings */
    rulestatementBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(9, statementBlock_StartIndex); }
    return retval;
}
/* $ANTLR end statementBlock */

/** 
 * $ANTLR start emptyStatement
 * .//Emerson.g:198:1: emptyStatement : ( LTERM )* ';' -> ^( NOOP ) ;
 */
static EmersonParser_emptyStatement_return
emptyStatement(pEmersonParser ctx)
{   
    EmersonParser_emptyStatement_return retval;
    ANTLR3_UINT32 emptyStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM57;
    pANTLR3_COMMON_TOKEN    char_literal58;

    pANTLR3_BASE_TREE LTERM57_tree;
    pANTLR3_BASE_TREE char_literal58_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;

    /* Initialize rule variables
     */
    emptyStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(10)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM57       = NULL;
    char_literal58       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    LTERM57_tree   = NULL;
    char_literal58_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:199:9: ( ( LTERM )* ';' -> ^( NOOP ) )
        // .//Emerson.g:199:11: ( LTERM )* ';'
        {

            // .//Emerson.g:199:11: ( LTERM )*

            for (;;)
            {
                int alt28=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA28_0 = LA(1);
                    if ( (LA28_0 == LTERM) ) 
                    {
                        alt28=1;
                    }

                }
                switch (alt28) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM57 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_emptyStatement1312); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleemptyStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM57, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop28;	/* break out of the loop */
            	    break;
                }
            }
            loop28: ; /* Jump out to here if this rule does not match */

            char_literal58 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_emptyStatement1315); 
            if  (HASEXCEPTION())
            {
                goto ruleemptyStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal58, NULL); }


             
            /* AST REWRITE
             * elements          : 
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 199:22: -> ^( NOOP )
            	{
            	    // .//Emerson.g:199:25: ^( NOOP )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOOP, (pANTLR3_UINT8)"NOOP"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleemptyStatementEx; /* Prevent compiler warnings */
    ruleemptyStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(10, emptyStatement_StartIndex); }
    return retval;
}
/* $ANTLR end emptyStatement */

/** 
 * $ANTLR start statementList
 * .//Emerson.g:203:1: statementList : statement ( ( LTERM )* statement )* -> ^( SLIST ( statement )+ ) ;
 */
static EmersonParser_statementList_return
statementList(pEmersonParser ctx)
{   
    EmersonParser_statementList_return retval;
    ANTLR3_UINT32 statementList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM60;
    EmersonParser_statement_return statement59;
    #undef	RETURN_TYPE_statement59
    #define	RETURN_TYPE_statement59 EmersonParser_statement_return

    EmersonParser_statement_return statement61;
    #undef	RETURN_TYPE_statement61
    #define	RETURN_TYPE_statement61 EmersonParser_statement_return

    pANTLR3_BASE_TREE LTERM60_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    statementList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(11)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM60       = NULL;
    statement59.tree = NULL;

    statement61.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM60_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:204:2: ( statement ( ( LTERM )* statement )* -> ^( SLIST ( statement )+ ) )
        // .//Emerson.g:204:4: statement ( ( LTERM )* statement )*
        {
            FOLLOWPUSH(FOLLOW_statement_in_statementList1343);
            statement59=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestatementListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement59.tree, NULL); }

            // .//Emerson.g:204:14: ( ( LTERM )* statement )*

            for (;;)
            {
                int alt30=2;
                alt30 = cdfa30.predict(ctx, RECOGNIZER, ISTREAM, &cdfa30);
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt30) 
                {
            	case 1:
            	    // .//Emerson.g:204:15: ( LTERM )* statement
            	    {

            	        // .//Emerson.g:204:15: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt29=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA29_0 = LA(1);
            	                if ( (LA29_0 == LTERM) ) 
            	                {
            	                    {
            	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                        */
            	                        int LA29_2 = LA(2);
            	                        if ( (synpred40_Emerson(ctx)) ) 
            	                        {
            	                            alt29=1;
            	                        }

            	                    }
            	                }

            	            }
            	            switch (alt29) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM60 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementList1346); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulestatementListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM60, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop29;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop29: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_statement_in_statementList1349);
            	        statement61=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement61.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop30;	/* break out of the loop */
            	    break;
                }
            }
            loop30: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 204:34: -> ^( SLIST ( statement )+ )
            	{
            	    // .//Emerson.g:204:37: ^( SLIST ( statement )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SLIST, (pANTLR3_UINT8)"SLIST"), root_1));

            	        if ((stream_statement == NULL || !stream_statement->hasNext(stream_statement))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_statement->hasNext(stream_statement))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        	}
            	        	stream_statement->reset(stream_statement);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(11, statementList_StartIndex); }
    return retval;
}
/* $ANTLR end statementList */

/** 
 * $ANTLR start variableStatement
 * .//Emerson.g:207:1: variableStatement : 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) ;
 */
static EmersonParser_variableStatement_return
variableStatement(pEmersonParser ctx)
{   
    EmersonParser_variableStatement_return retval;
    ANTLR3_UINT32 variableStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal62;
    pANTLR3_COMMON_TOKEN    LTERM63;
    pANTLR3_COMMON_TOKEN    LTERM65;
    pANTLR3_COMMON_TOKEN    char_literal66;
    EmersonParser_variableDeclarationList_return variableDeclarationList64;
    #undef	RETURN_TYPE_variableDeclarationList64
    #define	RETURN_TYPE_variableDeclarationList64 EmersonParser_variableDeclarationList_return

    pANTLR3_BASE_TREE string_literal62_tree;
    pANTLR3_BASE_TREE LTERM63_tree;
    pANTLR3_BASE_TREE LTERM65_tree;
    pANTLR3_BASE_TREE char_literal66_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_148;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationList;
    /* Initialize rule variables
     */
    variableStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(12)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal62       = NULL;
    LTERM63       = NULL;
    LTERM65       = NULL;
    char_literal66       = NULL;
    variableDeclarationList64.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal62_tree   = NULL;
    LTERM63_tree   = NULL;
    LTERM65_tree   = NULL;
    char_literal66_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_148   = NULL;
    #define CREATE_stream_148  if (stream_148 == NULL) {stream_148 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 148"); } 
    stream_variableDeclarationList   = NULL;
    #define CREATE_stream_variableDeclarationList  if (stream_variableDeclarationList == NULL) {stream_variableDeclarationList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:208:2: ( 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) )
        // .//Emerson.g:208:4: 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' )
        {
            string_literal62 = (pANTLR3_COMMON_TOKEN) MATCHT(148, &FOLLOW_148_in_variableStatement1373); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_148; stream_148->add(stream_148, string_literal62, NULL); }


            // .//Emerson.g:208:10: ( LTERM )*

            for (;;)
            {
                int alt31=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA31_0 = LA(1);
                    if ( (LA31_0 == LTERM) ) 
                    {
                        alt31=1;
                    }

                }
                switch (alt31) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM63 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1375); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM63, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop31;	/* break out of the loop */
            	    break;
                }
            }
            loop31: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_variableDeclarationList_in_variableStatement1378);
            variableDeclarationList64=variableDeclarationList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationList; stream_variableDeclarationList->add(stream_variableDeclarationList, variableDeclarationList64.tree, NULL); }

            // .//Emerson.g:208:41: ( LTERM | ';' )
            {
                int alt32=2;

                {
                    int LA32_0 = LA(1);
                    if ( (LA32_0 == LTERM) ) 
                    {
                        alt32=1;
                    }
                    else if ( (LA32_0 == 147) ) 
                    {
                        alt32=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 32;
                        EXCEPTION->state        = 0;


                        goto rulevariableStatementEx;
                    }
                }
                switch (alt32) 
                {
            	case 1:
            	    // .//Emerson.g:208:42: LTERM
            	    {
            	        LTERM65 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1381); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM65, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:208:50: ';'
            	    {
            	        char_literal66 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_variableStatement1385); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal66, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : variableDeclarationList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 208:55: -> ^( VARLIST variableDeclarationList )
            	{
            	    // .//Emerson.g:208:58: ^( VARLIST variableDeclarationList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationList == NULL ? NULL : stream_variableDeclarationList->nextTree(stream_variableDeclarationList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableStatementEx; /* Prevent compiler warnings */
    rulevariableStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_148 != NULL) stream_148->free(stream_148);
        if (stream_variableDeclarationList != NULL) stream_variableDeclarationList->free(stream_variableDeclarationList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(12, variableStatement_StartIndex); }
    return retval;
}
/* $ANTLR end variableStatement */

/** 
 * $ANTLR start variableDeclarationList
 * .//Emerson.g:211:1: variableDeclarationList : variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ ;
 */
static EmersonParser_variableDeclarationList_return
variableDeclarationList(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationList_return retval;
    ANTLR3_UINT32 variableDeclarationList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM68;
    pANTLR3_COMMON_TOKEN    char_literal69;
    pANTLR3_COMMON_TOKEN    LTERM70;
    EmersonParser_variableDeclaration_return variableDeclaration67;
    #undef	RETURN_TYPE_variableDeclaration67
    #define	RETURN_TYPE_variableDeclaration67 EmersonParser_variableDeclaration_return

    EmersonParser_variableDeclaration_return variableDeclaration71;
    #undef	RETURN_TYPE_variableDeclaration71
    #define	RETURN_TYPE_variableDeclaration71 EmersonParser_variableDeclaration_return

    pANTLR3_BASE_TREE LTERM68_tree;
    pANTLR3_BASE_TREE char_literal69_tree;
    pANTLR3_BASE_TREE LTERM70_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclaration;
    /* Initialize rule variables
     */
    variableDeclarationList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(13)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM68       = NULL;
    char_literal69       = NULL;
    LTERM70       = NULL;
    variableDeclaration67.tree = NULL;

    variableDeclaration71.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM68_tree   = NULL;
    char_literal69_tree   = NULL;
    LTERM70_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_variableDeclaration   = NULL;
    #define CREATE_stream_variableDeclaration  if (stream_variableDeclaration == NULL) {stream_variableDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclaration"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:212:2: ( variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ )
        // .//Emerson.g:212:4: variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1407);
            variableDeclaration67=variableDeclaration(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration67.tree, NULL); }

            // .//Emerson.g:212:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*

            for (;;)
            {
                int alt35=2;
                alt35 = cdfa35.predict(ctx, RECOGNIZER, ISTREAM, &cdfa35);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt35) 
                {
            	case 1:
            	    // .//Emerson.g:212:25: ( LTERM )* ',' ( LTERM )* variableDeclaration
            	    {

            	        // .//Emerson.g:212:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt33=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA33_0 = LA(1);
            	                if ( (LA33_0 == LTERM) ) 
            	                {
            	                    alt33=1;
            	                }

            	            }
            	            switch (alt33) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM68 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1410); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM68, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop33;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop33: ; /* Jump out to here if this rule does not match */

            	        char_literal69 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_variableDeclarationList1413); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal69, NULL); }


            	        // .//Emerson.g:212:36: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt34=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA34_0 = LA(1);
            	                if ( (LA34_0 == LTERM) ) 
            	                {
            	                    alt34=1;
            	                }

            	            }
            	            switch (alt34) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM70 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1415); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM70, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop34;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop34: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1418);
            	        variableDeclaration71=variableDeclaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration71.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop35;	/* break out of the loop */
            	    break;
                }
            }
            loop35: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclaration
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 212:65: -> ( variableDeclaration )+
            	{
            	    if ((stream_variableDeclaration == NULL || !stream_variableDeclaration->hasNext(stream_variableDeclaration))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclaration->hasNext(stream_variableDeclaration))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclaration == NULL ? NULL : stream_variableDeclaration->nextTree(stream_variableDeclaration));

            	    	}
            	    	stream_variableDeclaration->reset(stream_variableDeclaration);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListEx; /* Prevent compiler warnings */
    rulevariableDeclarationListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_variableDeclaration != NULL) stream_variableDeclaration->free(stream_variableDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(13, variableDeclarationList_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationList */

/** 
 * $ANTLR start variableDeclarationListNoIn
 * .//Emerson.g:215:1: variableDeclarationListNoIn : variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ ;
 */
static EmersonParser_variableDeclarationListNoIn_return
variableDeclarationListNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationListNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationListNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM73;
    pANTLR3_COMMON_TOKEN    char_literal74;
    pANTLR3_COMMON_TOKEN    LTERM75;
    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn72;
    #undef	RETURN_TYPE_variableDeclarationNoIn72
    #define	RETURN_TYPE_variableDeclarationNoIn72 EmersonParser_variableDeclarationNoIn_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn76;
    #undef	RETURN_TYPE_variableDeclarationNoIn76
    #define	RETURN_TYPE_variableDeclarationNoIn76 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE LTERM73_tree;
    pANTLR3_BASE_TREE char_literal74_tree;
    pANTLR3_BASE_TREE LTERM75_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    variableDeclarationListNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(14)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM73       = NULL;
    char_literal74       = NULL;
    LTERM75       = NULL;
    variableDeclarationNoIn72.tree = NULL;

    variableDeclarationNoIn76.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM73_tree   = NULL;
    char_literal74_tree   = NULL;
    LTERM75_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:216:2: ( variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ )
        // .//Emerson.g:216:4: variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1437);
            variableDeclarationNoIn72=variableDeclarationNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn72.tree, NULL); }

            // .//Emerson.g:216:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*

            for (;;)
            {
                int alt38=2;
                alt38 = cdfa38.predict(ctx, RECOGNIZER, ISTREAM, &cdfa38);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt38) 
                {
            	case 1:
            	    // .//Emerson.g:216:29: ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn
            	    {

            	        // .//Emerson.g:216:29: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt36=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA36_0 = LA(1);
            	                if ( (LA36_0 == LTERM) ) 
            	                {
            	                    alt36=1;
            	                }

            	            }
            	            switch (alt36) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM73 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1440); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM73, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop36;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop36: ; /* Jump out to here if this rule does not match */

            	        char_literal74 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_variableDeclarationListNoIn1443); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal74, NULL); }


            	        // .//Emerson.g:216:40: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt37=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA37_0 = LA(1);
            	                if ( (LA37_0 == LTERM) ) 
            	                {
            	                    alt37=1;
            	                }

            	            }
            	            switch (alt37) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM75 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1445); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM75, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop37;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop37: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1448);
            	        variableDeclarationNoIn76=variableDeclarationNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn76.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop38;	/* break out of the loop */
            	    break;
                }
            }
            loop38: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclarationNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 216:73: -> ( variableDeclarationNoIn )+
            	{
            	    if ((stream_variableDeclarationNoIn == NULL || !stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

            	    	}
            	    	stream_variableDeclarationNoIn->reset(stream_variableDeclarationNoIn);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationListNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(14, variableDeclarationListNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationListNoIn */

/** 
 * $ANTLR start variableDeclaration
 * .//Emerson.g:219:1: variableDeclaration : Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) ;
 */
static EmersonParser_variableDeclaration_return
variableDeclaration(pEmersonParser ctx)
{   
    EmersonParser_variableDeclaration_return retval;
    ANTLR3_UINT32 variableDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier77;
    pANTLR3_COMMON_TOKEN    LTERM78;
    EmersonParser_initialiser_return initialiser79;
    #undef	RETURN_TYPE_initialiser79
    #define	RETURN_TYPE_initialiser79 EmersonParser_initialiser_return

    pANTLR3_BASE_TREE Identifier77_tree;
    pANTLR3_BASE_TREE LTERM78_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiser;
    /* Initialize rule variables
     */
    variableDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(15)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier77       = NULL;
    LTERM78       = NULL;
    initialiser79.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier77_tree   = NULL;
    LTERM78_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiser   = NULL;
    #define CREATE_stream_initialiser  if (stream_initialiser == NULL) {stream_initialiser = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiser"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:220:2: ( Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) )
        // .//Emerson.g:220:4: Identifier ( LTERM )* ( initialiser )?
        {
            Identifier77 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclaration1467); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier77, NULL); }


            // .//Emerson.g:220:15: ( LTERM )*

            for (;;)
            {
                int alt39=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA39_0 = LA(1);
                    if ( (LA39_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA39_2 = LA(2);
                            if ( (synpred50_Emerson(ctx)) ) 
                            {
                                alt39=1;
                            }

                        }
                    }

                }
                switch (alt39) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM78 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclaration1469); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM78, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop39;	/* break out of the loop */
            	    break;
                }
            }
            loop39: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:220:22: ( initialiser )?
            {
                int alt40=2;
                {
                    int LA40_0 = LA(1);
                    if ( (LA40_0 == 149) ) 
                    {
                        alt40=1;
                    }
                }
                switch (alt40) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiser
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiser_in_variableDeclaration1472);
            	        initialiser79=initialiser(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiser; stream_initialiser->add(stream_initialiser, initialiser79.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : initialiser, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 220:35: -> ^( VAR Identifier ( initialiser )? )
            	{
            	    // .//Emerson.g:220:38: ^( VAR Identifier ( initialiser )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:220:55: ( initialiser )?
            	        {
            	        	if ( (stream_initialiser != NULL && stream_initialiser->hasNext(stream_initialiser))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiser == NULL ? NULL : stream_initialiser->nextTree(stream_initialiser));

            	        	}
            	        	if ( stream_initialiser != NULL) stream_initialiser->reset(stream_initialiser);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationEx; /* Prevent compiler warnings */
    rulevariableDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiser != NULL) stream_initialiser->free(stream_initialiser);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(15, variableDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclaration */

/** 
 * $ANTLR start variableDeclarationNoIn
 * .//Emerson.g:223:1: variableDeclarationNoIn : Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) ;
 */
static EmersonParser_variableDeclarationNoIn_return
variableDeclarationNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier80;
    pANTLR3_COMMON_TOKEN    LTERM81;
    EmersonParser_initialiserNoIn_return initialiserNoIn82;
    #undef	RETURN_TYPE_initialiserNoIn82
    #define	RETURN_TYPE_initialiserNoIn82 EmersonParser_initialiserNoIn_return

    pANTLR3_BASE_TREE Identifier80_tree;
    pANTLR3_BASE_TREE LTERM81_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiserNoIn;
    /* Initialize rule variables
     */
    variableDeclarationNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(16)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier80       = NULL;
    LTERM81       = NULL;
    initialiserNoIn82.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier80_tree   = NULL;
    LTERM81_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiserNoIn   = NULL;
    #define CREATE_stream_initialiserNoIn  if (stream_initialiserNoIn == NULL) {stream_initialiserNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiserNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:224:2: ( Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) )
        // .//Emerson.g:224:4: Identifier ( LTERM )* ( initialiserNoIn )?
        {
            Identifier80 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclarationNoIn1496); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier80, NULL); }


            // .//Emerson.g:224:15: ( LTERM )*

            for (;;)
            {
                int alt41=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA41_0 = LA(1);
                    if ( (LA41_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA41_2 = LA(2);
                            if ( (synpred52_Emerson(ctx)) ) 
                            {
                                alt41=1;
                            }

                        }
                    }

                }
                switch (alt41) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM81 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationNoIn1498); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM81, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop41;	/* break out of the loop */
            	    break;
                }
            }
            loop41: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:224:22: ( initialiserNoIn )?
            {
                int alt42=2;
                {
                    int LA42_0 = LA(1);
                    if ( (LA42_0 == 149) ) 
                    {
                        alt42=1;
                    }
                }
                switch (alt42) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiserNoIn
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1501);
            	        initialiserNoIn82=initialiserNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiserNoIn; stream_initialiserNoIn->add(stream_initialiserNoIn, initialiserNoIn82.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : initialiserNoIn, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 224:39: -> ^( VAR Identifier ( initialiserNoIn )? )
            	{
            	    // .//Emerson.g:224:43: ^( VAR Identifier ( initialiserNoIn )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:224:60: ( initialiserNoIn )?
            	        {
            	        	if ( (stream_initialiserNoIn != NULL && stream_initialiserNoIn->hasNext(stream_initialiserNoIn))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiserNoIn == NULL ? NULL : stream_initialiserNoIn->nextTree(stream_initialiserNoIn));

            	        	}
            	        	if ( stream_initialiserNoIn != NULL) stream_initialiserNoIn->reset(stream_initialiserNoIn);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiserNoIn != NULL) stream_initialiserNoIn->free(stream_initialiserNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(16, variableDeclarationNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationNoIn */

/** 
 * $ANTLR start initialiser
 * .//Emerson.g:227:1: initialiser : '=' ( LTERM )* expression -> expression ;
 */
static EmersonParser_initialiser_return
initialiser(pEmersonParser ctx)
{   
    EmersonParser_initialiser_return retval;
    ANTLR3_UINT32 initialiser_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal83;
    pANTLR3_COMMON_TOKEN    LTERM84;
    EmersonParser_expression_return expression85;
    #undef	RETURN_TYPE_expression85
    #define	RETURN_TYPE_expression85 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal83_tree;
    pANTLR3_BASE_TREE LTERM84_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_149;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    initialiser_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(17)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal83       = NULL;
    LTERM84       = NULL;
    expression85.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal83_tree   = NULL;
    LTERM84_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_149   = NULL;
    #define CREATE_stream_149  if (stream_149 == NULL) {stream_149 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 149"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:228:2: ( '=' ( LTERM )* expression -> expression )
        // .//Emerson.g:228:4: '=' ( LTERM )* expression
        {
            char_literal83 = (pANTLR3_COMMON_TOKEN) MATCHT(149, &FOLLOW_149_in_initialiser1526); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_149; stream_149->add(stream_149, char_literal83, NULL); }


            // .//Emerson.g:228:8: ( LTERM )*

            for (;;)
            {
                int alt43=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA43_0 = LA(1);
                    if ( (LA43_0 == LTERM) ) 
                    {
                        alt43=1;
                    }

                }
                switch (alt43) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM84 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiser1528); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM84, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop43;	/* break out of the loop */
            	    break;
                }
            }
            loop43: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_initialiser1531);
            expression85=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression85.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 228:26: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserEx; /* Prevent compiler warnings */
    ruleinitialiserEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_149 != NULL) stream_149->free(stream_149);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(17, initialiser_StartIndex); }
    return retval;
}
/* $ANTLR end initialiser */

/** 
 * $ANTLR start initialiserNoIn
 * .//Emerson.g:231:1: initialiserNoIn : '=' ( LTERM )* expressionNoIn -> expressionNoIn ;
 */
static EmersonParser_initialiserNoIn_return
initialiserNoIn(pEmersonParser ctx)
{   
    EmersonParser_initialiserNoIn_return retval;
    ANTLR3_UINT32 initialiserNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal86;
    pANTLR3_COMMON_TOKEN    LTERM87;
    EmersonParser_expressionNoIn_return expressionNoIn88;
    #undef	RETURN_TYPE_expressionNoIn88
    #define	RETURN_TYPE_expressionNoIn88 EmersonParser_expressionNoIn_return

    pANTLR3_BASE_TREE char_literal86_tree;
    pANTLR3_BASE_TREE LTERM87_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_149;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expressionNoIn;
    /* Initialize rule variables
     */
    initialiserNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(18)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal86       = NULL;
    LTERM87       = NULL;
    expressionNoIn88.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal86_tree   = NULL;
    LTERM87_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_149   = NULL;
    #define CREATE_stream_149  if (stream_149 == NULL) {stream_149 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 149"); } 
    stream_expressionNoIn   = NULL;
    #define CREATE_stream_expressionNoIn  if (stream_expressionNoIn == NULL) {stream_expressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:232:2: ( '=' ( LTERM )* expressionNoIn -> expressionNoIn )
        // .//Emerson.g:232:4: '=' ( LTERM )* expressionNoIn
        {
            char_literal86 = (pANTLR3_COMMON_TOKEN) MATCHT(149, &FOLLOW_149_in_initialiserNoIn1548); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_149; stream_149->add(stream_149, char_literal86, NULL); }


            // .//Emerson.g:232:8: ( LTERM )*

            for (;;)
            {
                int alt44=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA44_0 = LA(1);
                    if ( (LA44_0 == LTERM) ) 
                    {
                        alt44=1;
                    }

                }
                switch (alt44) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM87 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiserNoIn1550); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM87, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop44;	/* break out of the loop */
            	    break;
                }
            }
            loop44: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expressionNoIn_in_initialiserNoIn1553);
            expressionNoIn88=expressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expressionNoIn; stream_expressionNoIn->add(stream_expressionNoIn, expressionNoIn88.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 232:30: -> expressionNoIn
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expressionNoIn == NULL ? NULL : stream_expressionNoIn->nextTree(stream_expressionNoIn));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserNoInEx; /* Prevent compiler warnings */
    ruleinitialiserNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_149 != NULL) stream_149->free(stream_149);
        if (stream_expressionNoIn != NULL) stream_expressionNoIn->free(stream_expressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(18, initialiserNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end initialiserNoIn */

/** 
 * $ANTLR start expressionStatement
 * .//Emerson.g:236:1: expressionStatement : expression ( LTERM | ';' ) -> expression ;
 */
static EmersonParser_expressionStatement_return
expressionStatement(pEmersonParser ctx)
{   
    EmersonParser_expressionStatement_return retval;
    ANTLR3_UINT32 expressionStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM90;
    pANTLR3_COMMON_TOKEN    char_literal91;
    EmersonParser_expression_return expression89;
    #undef	RETURN_TYPE_expression89
    #define	RETURN_TYPE_expression89 EmersonParser_expression_return

    pANTLR3_BASE_TREE LTERM90_tree;
    pANTLR3_BASE_TREE char_literal91_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    expressionStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(19)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM90       = NULL;
    char_literal91       = NULL;
    expression89.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM90_tree   = NULL;
    char_literal91_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:237:2: ( expression ( LTERM | ';' ) -> expression )
        // .//Emerson.g:237:4: expression ( LTERM | ';' )
        {
            FOLLOWPUSH(FOLLOW_expression_in_expressionStatement1571);
            expression89=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression89.tree, NULL); }

            // .//Emerson.g:237:15: ( LTERM | ';' )
            {
                int alt45=2;

                {
                    int LA45_0 = LA(1);
                    if ( (LA45_0 == LTERM) ) 
                    {
                        alt45=1;
                    }
                    else if ( (LA45_0 == 147) ) 
                    {
                        alt45=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 45;
                        EXCEPTION->state        = 0;


                        goto ruleexpressionStatementEx;
                    }
                }
                switch (alt45) 
                {
            	case 1:
            	    // .//Emerson.g:237:16: LTERM
            	    {
            	        LTERM90 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionStatement1574); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM90, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:237:24: ';'
            	    {
            	        char_literal91 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_expressionStatement1578); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal91, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 237:29: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionStatementEx; /* Prevent compiler warnings */
    ruleexpressionStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(19, expressionStatement_StartIndex); }
    return retval;
}
/* $ANTLR end expressionStatement */

/** 
 * $ANTLR start ifStatement
 * .//Emerson.g:241:1: ifStatement : 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) ;
 */
static EmersonParser_ifStatement_return
ifStatement(pEmersonParser ctx)
{   
    EmersonParser_ifStatement_return retval;
    ANTLR3_UINT32 ifStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal92;
    pANTLR3_COMMON_TOKEN    LTERM93;
    pANTLR3_COMMON_TOKEN    char_literal94;
    pANTLR3_COMMON_TOKEN    LTERM95;
    pANTLR3_COMMON_TOKEN    LTERM97;
    pANTLR3_COMMON_TOKEN    char_literal98;
    pANTLR3_COMMON_TOKEN    LTERM99;
    pANTLR3_COMMON_TOKEN    LTERM100;
    pANTLR3_COMMON_TOKEN    string_literal101;
    pANTLR3_COMMON_TOKEN    LTERM102;
    EmersonParser_statement_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_statement_return

    EmersonParser_statement_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_statement_return

    EmersonParser_expression_return expression96;
    #undef	RETURN_TYPE_expression96
    #define	RETURN_TYPE_expression96 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal92_tree;
    pANTLR3_BASE_TREE LTERM93_tree;
    pANTLR3_BASE_TREE char_literal94_tree;
    pANTLR3_BASE_TREE LTERM95_tree;
    pANTLR3_BASE_TREE LTERM97_tree;
    pANTLR3_BASE_TREE char_literal98_tree;
    pANTLR3_BASE_TREE LTERM99_tree;
    pANTLR3_BASE_TREE LTERM100_tree;
    pANTLR3_BASE_TREE string_literal101_tree;
    pANTLR3_BASE_TREE LTERM102_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_150;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_151;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    ifStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(20)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal92       = NULL;
    LTERM93       = NULL;
    char_literal94       = NULL;
    LTERM95       = NULL;
    LTERM97       = NULL;
    char_literal98       = NULL;
    LTERM99       = NULL;
    LTERM100       = NULL;
    string_literal101       = NULL;
    LTERM102       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    expression96.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal92_tree   = NULL;
    LTERM93_tree   = NULL;
    char_literal94_tree   = NULL;
    LTERM95_tree   = NULL;
    LTERM97_tree   = NULL;
    char_literal98_tree   = NULL;
    LTERM99_tree   = NULL;
    LTERM100_tree   = NULL;
    string_literal101_tree   = NULL;
    LTERM102_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_150   = NULL;
    #define CREATE_stream_150  if (stream_150 == NULL) {stream_150 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 150"); } 
    stream_151   = NULL;
    #define CREATE_stream_151  if (stream_151 == NULL) {stream_151 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 151"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:242:5: ( 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) )
        // .//Emerson.g:242:7: 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
        {
            string_literal92 = (pANTLR3_COMMON_TOKEN) MATCHT(150, &FOLLOW_150_in_ifStatement1598); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_150; stream_150->add(stream_150, string_literal92, NULL); }


            // .//Emerson.g:242:12: ( LTERM )*

            for (;;)
            {
                int alt46=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA46_0 = LA(1);
                    if ( (LA46_0 == LTERM) ) 
                    {
                        alt46=1;
                    }

                }
                switch (alt46) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM93 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1600); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM93, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop46;	/* break out of the loop */
            	    break;
                }
            }
            loop46: ; /* Jump out to here if this rule does not match */

            char_literal94 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_ifStatement1603); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal94, NULL); }


            // .//Emerson.g:242:23: ( LTERM )*

            for (;;)
            {
                int alt47=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA47_0 = LA(1);
                    if ( (LA47_0 == LTERM) ) 
                    {
                        alt47=1;
                    }

                }
                switch (alt47) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM95 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1605); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM95, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop47;	/* break out of the loop */
            	    break;
                }
            }
            loop47: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_ifStatement1608);
            expression96=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression96.tree, NULL); }

            // .//Emerson.g:242:41: ( LTERM )*

            for (;;)
            {
                int alt48=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA48_0 = LA(1);
                    if ( (LA48_0 == LTERM) ) 
                    {
                        alt48=1;
                    }

                }
                switch (alt48) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM97 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1610); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM97, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop48;	/* break out of the loop */
            	    break;
                }
            }
            loop48: ; /* Jump out to here if this rule does not match */

            char_literal98 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_ifStatement1613); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal98, NULL); }


            // .//Emerson.g:242:52: ( LTERM )*

            for (;;)
            {
                int alt49=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA49_0 = LA(1);
                    if ( (LA49_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA49_2 = LA(2);
                            if ( (synpred60_Emerson(ctx)) ) 
                            {
                                alt49=1;
                            }

                        }
                    }

                }
                switch (alt49) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM99 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1615); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM99, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop49;	/* break out of the loop */
            	    break;
                }
            }
            loop49: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_ifStatement1620);
            s1=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s1.tree, NULL); }

            // .//Emerson.g:242:72: ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
            {
                int alt52=2;
                {
                    int LA52_0 = LA(1);
                    if ( (LA52_0 == LTERM) ) 
                    {
                        {
                            int LA52_1 = LA(2);
                            if ( (synpred63_Emerson(ctx)) ) 
                            {
                                alt52=1;
                            }
                        }
                    }
                    else if ( (LA52_0 == 151) ) 
                    {
                        {
                            int LA52_2 = LA(2);
                            if ( (synpred63_Emerson(ctx)) ) 
                            {
                                alt52=1;
                            }
                        }
                    }
                }
                switch (alt52) 
                {
            	case 1:
            	    // .//Emerson.g:242:73: ( LTERM )* 'else' ( LTERM )* s2= statement
            	    {

            	        // .//Emerson.g:242:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt50=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA50_0 = LA(1);
            	                if ( (LA50_0 == LTERM) ) 
            	                {
            	                    alt50=1;
            	                }

            	            }
            	            switch (alt50) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM100 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1623); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM100, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop50;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop50: ; /* Jump out to here if this rule does not match */

            	        string_literal101 = (pANTLR3_COMMON_TOKEN) MATCHT(151, &FOLLOW_151_in_ifStatement1626); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_151; stream_151->add(stream_151, string_literal101, NULL); }


            	        // .//Emerson.g:242:87: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt51=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA51_0 = LA(1);
            	                if ( (LA51_0 == LTERM) ) 
            	                {
            	                    {
            	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                        */
            	                        int LA51_2 = LA(2);
            	                        if ( (synpred62_Emerson(ctx)) ) 
            	                        {
            	                            alt51=1;
            	                        }

            	                    }
            	                }

            	            }
            	            switch (alt51) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM102 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1628); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM102, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop51;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop51: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1633);
            	        s2=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s2.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : s2, s1, expression
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 242:109: -> ^( IF expression $s1 ( $s2)? )
            	{
            	    // .//Emerson.g:242:112: ^( IF expression $s1 ( $s2)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IF, (pANTLR3_UINT8)"IF"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//Emerson.g:242:132: ( $s2)?
            	        {
            	        	if ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if ( stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_150 != NULL) stream_150->free(stream_150);
        if (stream_151 != NULL) stream_151->free(stream_151);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(20, ifStatement_StartIndex); }
    return retval;
}
/* $ANTLR end ifStatement */

/** 
 * $ANTLR start iterationStatement
 * .//Emerson.g:245:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
 */
static EmersonParser_iterationStatement_return
iterationStatement(pEmersonParser ctx)
{   
    EmersonParser_iterationStatement_return retval;
    ANTLR3_UINT32 iterationStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_doWhileStatement_return doWhileStatement103;
    #undef	RETURN_TYPE_doWhileStatement103
    #define	RETURN_TYPE_doWhileStatement103 EmersonParser_doWhileStatement_return

    EmersonParser_whileStatement_return whileStatement104;
    #undef	RETURN_TYPE_whileStatement104
    #define	RETURN_TYPE_whileStatement104 EmersonParser_whileStatement_return

    EmersonParser_forStatement_return forStatement105;
    #undef	RETURN_TYPE_forStatement105
    #define	RETURN_TYPE_forStatement105 EmersonParser_forStatement_return

    EmersonParser_forInStatement_return forInStatement106;
    #undef	RETURN_TYPE_forInStatement106
    #define	RETURN_TYPE_forInStatement106 EmersonParser_forInStatement_return


    /* Initialize rule variables
     */
    iterationStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(21)) )
    {
    	retval.start = 0;

        return retval; 
    }
    doWhileStatement103.tree = NULL;

    whileStatement104.tree = NULL;

    forStatement105.tree = NULL;

    forInStatement106.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:246:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
            
            ANTLR3_UINT32 alt53;

            alt53=4;

            switch ( LA(1) ) 
            {
            case 152:
            	{
            		alt53=1;
            	}
                break;
            case 153:
            	{
            		alt53=2;
            	}
                break;
            case 154:
            	{

            		{
            		    int LA53_3 = LA(2);
            		    if ( (synpred66_Emerson(ctx)) ) 
            		    {
            		        alt53=3;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt53=4;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 53;
            		        EXCEPTION->state        = 3;


            		        goto ruleiterationStatementEx;
            		    }
            		}
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 53;
                EXCEPTION->state        = 0;


                goto ruleiterationStatementEx;
            }

            switch (alt53) 
            {
        	case 1:
        	    // .//Emerson.g:246:4: doWhileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_doWhileStatement_in_iterationStatement1665);
        	        doWhileStatement103=doWhileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, doWhileStatement103.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:247:4: whileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_whileStatement_in_iterationStatement1670);
        	        whileStatement104=whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, whileStatement104.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:248:4: forStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forStatement_in_iterationStatement1675);
        	        forStatement105=forStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forStatement105.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:249:4: forInStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forInStatement_in_iterationStatement1680);
        	        forInStatement106=forInStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forInStatement106.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleiterationStatementEx; /* Prevent compiler warnings */
    ruleiterationStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(21, iterationStatement_StartIndex); }
    return retval;
}
/* $ANTLR end iterationStatement */

/** 
 * $ANTLR start doWhileStatement
 * .//Emerson.g:252:1: doWhileStatement : 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) ;
 */
static EmersonParser_doWhileStatement_return
doWhileStatement(pEmersonParser ctx)
{   
    EmersonParser_doWhileStatement_return retval;
    ANTLR3_UINT32 doWhileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal107;
    pANTLR3_COMMON_TOKEN    LTERM108;
    pANTLR3_COMMON_TOKEN    LTERM110;
    pANTLR3_COMMON_TOKEN    string_literal111;
    pANTLR3_COMMON_TOKEN    LTERM112;
    pANTLR3_COMMON_TOKEN    char_literal113;
    pANTLR3_COMMON_TOKEN    char_literal115;
    pANTLR3_COMMON_TOKEN    LTERM116;
    pANTLR3_COMMON_TOKEN    char_literal117;
    EmersonParser_statement_return statement109;
    #undef	RETURN_TYPE_statement109
    #define	RETURN_TYPE_statement109 EmersonParser_statement_return

    EmersonParser_expression_return expression114;
    #undef	RETURN_TYPE_expression114
    #define	RETURN_TYPE_expression114 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal107_tree;
    pANTLR3_BASE_TREE LTERM108_tree;
    pANTLR3_BASE_TREE LTERM110_tree;
    pANTLR3_BASE_TREE string_literal111_tree;
    pANTLR3_BASE_TREE LTERM112_tree;
    pANTLR3_BASE_TREE char_literal113_tree;
    pANTLR3_BASE_TREE char_literal115_tree;
    pANTLR3_BASE_TREE LTERM116_tree;
    pANTLR3_BASE_TREE char_literal117_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_152;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_153;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    doWhileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(22)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal107       = NULL;
    LTERM108       = NULL;
    LTERM110       = NULL;
    string_literal111       = NULL;
    LTERM112       = NULL;
    char_literal113       = NULL;
    char_literal115       = NULL;
    LTERM116       = NULL;
    char_literal117       = NULL;
    statement109.tree = NULL;

    expression114.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal107_tree   = NULL;
    LTERM108_tree   = NULL;
    LTERM110_tree   = NULL;
    string_literal111_tree   = NULL;
    LTERM112_tree   = NULL;
    char_literal113_tree   = NULL;
    char_literal115_tree   = NULL;
    LTERM116_tree   = NULL;
    char_literal117_tree   = NULL;

    stream_152   = NULL;
    #define CREATE_stream_152  if (stream_152 == NULL) {stream_152 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 152"); } 
    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_153   = NULL;
    #define CREATE_stream_153  if (stream_153 == NULL) {stream_153 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 153"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:253:2: ( 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) )
        // .//Emerson.g:253:4: 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' )
        {
            string_literal107 = (pANTLR3_COMMON_TOKEN) MATCHT(152, &FOLLOW_152_in_doWhileStatement1692); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_152; stream_152->add(stream_152, string_literal107, NULL); }


            // .//Emerson.g:253:9: ( LTERM )*

            for (;;)
            {
                int alt54=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA54_0 = LA(1);
                    if ( (LA54_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA54_2 = LA(2);
                            if ( (synpred67_Emerson(ctx)) ) 
                            {
                                alt54=1;
                            }

                        }
                    }

                }
                switch (alt54) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM108 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1694); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM108, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop54;	/* break out of the loop */
            	    break;
                }
            }
            loop54: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_doWhileStatement1697);
            statement109=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement109.tree, NULL); }

            // .//Emerson.g:253:26: ( LTERM )*

            for (;;)
            {
                int alt55=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA55_0 = LA(1);
                    if ( (LA55_0 == LTERM) ) 
                    {
                        alt55=1;
                    }

                }
                switch (alt55) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM110 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1699); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM110, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop55;	/* break out of the loop */
            	    break;
                }
            }
            loop55: ; /* Jump out to here if this rule does not match */

            string_literal111 = (pANTLR3_COMMON_TOKEN) MATCHT(153, &FOLLOW_153_in_doWhileStatement1702); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_153; stream_153->add(stream_153, string_literal111, NULL); }


            // .//Emerson.g:253:41: ( LTERM )*

            for (;;)
            {
                int alt56=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA56_0 = LA(1);
                    if ( (LA56_0 == LTERM) ) 
                    {
                        alt56=1;
                    }

                }
                switch (alt56) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM112 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1704); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM112, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop56;	/* break out of the loop */
            	    break;
                }
            }
            loop56: ; /* Jump out to here if this rule does not match */

            char_literal113 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_doWhileStatement1707); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal113, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_doWhileStatement1709);
            expression114=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression114.tree, NULL); }
            char_literal115 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_doWhileStatement1711); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal115, NULL); }


            // .//Emerson.g:253:67: ( LTERM | ';' )
            {
                int alt57=2;

                {
                    int LA57_0 = LA(1);
                    if ( (LA57_0 == LTERM) ) 
                    {
                        alt57=1;
                    }
                    else if ( (LA57_0 == 147) ) 
                    {
                        alt57=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 57;
                        EXCEPTION->state        = 0;


                        goto ruledoWhileStatementEx;
                    }
                }
                switch (alt57) 
                {
            	case 1:
            	    // .//Emerson.g:253:68: LTERM
            	    {
            	        LTERM116 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1714); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM116, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:253:76: ';'
            	    {
            	        char_literal117 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_doWhileStatement1718); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal117, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 253:81: -> ^( DO statement expression )
            	{
            	    // .//Emerson.g:253:84: ^( DO statement expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DO, (pANTLR3_UINT8)"DO"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledoWhileStatementEx; /* Prevent compiler warnings */
    ruledoWhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_152 != NULL) stream_152->free(stream_152);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_153 != NULL) stream_153->free(stream_153);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(22, doWhileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end doWhileStatement */

/** 
 * $ANTLR start whileStatement
 * .//Emerson.g:256:1: whileStatement : 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) ;
 */
static EmersonParser_whileStatement_return
whileStatement(pEmersonParser ctx)
{   
    EmersonParser_whileStatement_return retval;
    ANTLR3_UINT32 whileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal118;
    pANTLR3_COMMON_TOKEN    LTERM119;
    pANTLR3_COMMON_TOKEN    char_literal120;
    pANTLR3_COMMON_TOKEN    LTERM121;
    pANTLR3_COMMON_TOKEN    LTERM123;
    pANTLR3_COMMON_TOKEN    char_literal124;
    pANTLR3_COMMON_TOKEN    LTERM125;
    EmersonParser_expression_return expression122;
    #undef	RETURN_TYPE_expression122
    #define	RETURN_TYPE_expression122 EmersonParser_expression_return

    EmersonParser_statement_return statement126;
    #undef	RETURN_TYPE_statement126
    #define	RETURN_TYPE_statement126 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal118_tree;
    pANTLR3_BASE_TREE LTERM119_tree;
    pANTLR3_BASE_TREE char_literal120_tree;
    pANTLR3_BASE_TREE LTERM121_tree;
    pANTLR3_BASE_TREE LTERM123_tree;
    pANTLR3_BASE_TREE char_literal124_tree;
    pANTLR3_BASE_TREE LTERM125_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_153;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    whileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(23)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal118       = NULL;
    LTERM119       = NULL;
    char_literal120       = NULL;
    LTERM121       = NULL;
    LTERM123       = NULL;
    char_literal124       = NULL;
    LTERM125       = NULL;
    expression122.tree = NULL;

    statement126.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal118_tree   = NULL;
    LTERM119_tree   = NULL;
    char_literal120_tree   = NULL;
    LTERM121_tree   = NULL;
    LTERM123_tree   = NULL;
    char_literal124_tree   = NULL;
    LTERM125_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_153   = NULL;
    #define CREATE_stream_153  if (stream_153 == NULL) {stream_153 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 153"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:257:2: ( 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) )
        // .//Emerson.g:257:4: 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal118 = (pANTLR3_COMMON_TOKEN) MATCHT(153, &FOLLOW_153_in_whileStatement1744); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_153; stream_153->add(stream_153, string_literal118, NULL); }


            // .//Emerson.g:257:12: ( LTERM )*

            for (;;)
            {
                int alt58=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA58_0 = LA(1);
                    if ( (LA58_0 == LTERM) ) 
                    {
                        alt58=1;
                    }

                }
                switch (alt58) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM119 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1746); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM119, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop58;	/* break out of the loop */
            	    break;
                }
            }
            loop58: ; /* Jump out to here if this rule does not match */

            char_literal120 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_whileStatement1749); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal120, NULL); }


            // .//Emerson.g:257:23: ( LTERM )*

            for (;;)
            {
                int alt59=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA59_0 = LA(1);
                    if ( (LA59_0 == LTERM) ) 
                    {
                        alt59=1;
                    }

                }
                switch (alt59) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM121 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1751); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM121, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop59;	/* break out of the loop */
            	    break;
                }
            }
            loop59: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1754);
            expression122=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression122.tree, NULL); }

            // .//Emerson.g:257:41: ( LTERM )*

            for (;;)
            {
                int alt60=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA60_0 = LA(1);
                    if ( (LA60_0 == LTERM) ) 
                    {
                        alt60=1;
                    }

                }
                switch (alt60) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM123 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1756); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM123, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop60;	/* break out of the loop */
            	    break;
                }
            }
            loop60: ; /* Jump out to here if this rule does not match */

            char_literal124 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_whileStatement1759); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal124, NULL); }


            // .//Emerson.g:257:52: ( LTERM )*

            for (;;)
            {
                int alt61=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA61_0 = LA(1);
                    if ( (LA61_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA61_2 = LA(2);
                            if ( (synpred74_Emerson(ctx)) ) 
                            {
                                alt61=1;
                            }

                        }
                    }

                }
                switch (alt61) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM125 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1761); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM125, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop61;	/* break out of the loop */
            	    break;
                }
            }
            loop61: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_whileStatement1764);
            statement126=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement126.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 257:69: -> ^( WHILE expression statement )
            	{
            	    // .//Emerson.g:257:72: ^( WHILE expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHILE, (pANTLR3_UINT8)"WHILE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_153 != NULL) stream_153->free(stream_153);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(23, whileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end whileStatement */

/** 
 * $ANTLR start forStatement
 * .//Emerson.g:260:1: forStatement : 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) ;
 */
static EmersonParser_forStatement_return
forStatement(pEmersonParser ctx)
{   
    EmersonParser_forStatement_return retval;
    ANTLR3_UINT32 forStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal127;
    pANTLR3_COMMON_TOKEN    LTERM128;
    pANTLR3_COMMON_TOKEN    char_literal129;
    pANTLR3_COMMON_TOKEN    LTERM130;
    pANTLR3_COMMON_TOKEN    LTERM131;
    pANTLR3_COMMON_TOKEN    char_literal132;
    pANTLR3_COMMON_TOKEN    LTERM133;
    pANTLR3_COMMON_TOKEN    LTERM134;
    pANTLR3_COMMON_TOKEN    char_literal135;
    pANTLR3_COMMON_TOKEN    LTERM136;
    pANTLR3_COMMON_TOKEN    LTERM137;
    pANTLR3_COMMON_TOKEN    char_literal138;
    pANTLR3_COMMON_TOKEN    LTERM139;
    EmersonParser_forStatementInitialiserPart_return init;
    #undef	RETURN_TYPE_init
    #define	RETURN_TYPE_init EmersonParser_forStatementInitialiserPart_return

    EmersonParser_expression_return cond;
    #undef	RETURN_TYPE_cond
    #define	RETURN_TYPE_cond EmersonParser_expression_return

    EmersonParser_expression_return iter;
    #undef	RETURN_TYPE_iter
    #define	RETURN_TYPE_iter EmersonParser_expression_return

    EmersonParser_statement_return statement140;
    #undef	RETURN_TYPE_statement140
    #define	RETURN_TYPE_statement140 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal127_tree;
    pANTLR3_BASE_TREE LTERM128_tree;
    pANTLR3_BASE_TREE char_literal129_tree;
    pANTLR3_BASE_TREE LTERM130_tree;
    pANTLR3_BASE_TREE LTERM131_tree;
    pANTLR3_BASE_TREE char_literal132_tree;
    pANTLR3_BASE_TREE LTERM133_tree;
    pANTLR3_BASE_TREE LTERM134_tree;
    pANTLR3_BASE_TREE char_literal135_tree;
    pANTLR3_BASE_TREE LTERM136_tree;
    pANTLR3_BASE_TREE LTERM137_tree;
    pANTLR3_BASE_TREE char_literal138_tree;
    pANTLR3_BASE_TREE LTERM139_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_154;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forStatementInitialiserPart;
    /* Initialize rule variables
     */
    forStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(24)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal127       = NULL;
    LTERM128       = NULL;
    char_literal129       = NULL;
    LTERM130       = NULL;
    LTERM131       = NULL;
    char_literal132       = NULL;
    LTERM133       = NULL;
    LTERM134       = NULL;
    char_literal135       = NULL;
    LTERM136       = NULL;
    LTERM137       = NULL;
    char_literal138       = NULL;
    LTERM139       = NULL;
    init.tree = NULL;

    cond.tree = NULL;

    iter.tree = NULL;

    statement140.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal127_tree   = NULL;
    LTERM128_tree   = NULL;
    char_literal129_tree   = NULL;
    LTERM130_tree   = NULL;
    LTERM131_tree   = NULL;
    char_literal132_tree   = NULL;
    LTERM133_tree   = NULL;
    LTERM134_tree   = NULL;
    char_literal135_tree   = NULL;
    LTERM136_tree   = NULL;
    LTERM137_tree   = NULL;
    char_literal138_tree   = NULL;
    LTERM139_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_154   = NULL;
    #define CREATE_stream_154  if (stream_154 == NULL) {stream_154 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 154"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forStatementInitialiserPart   = NULL;
    #define CREATE_stream_forStatementInitialiserPart  if (stream_forStatementInitialiserPart == NULL) {stream_forStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:261:2: ( 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) )
        // .//Emerson.g:261:4: 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal127 = (pANTLR3_COMMON_TOKEN) MATCHT(154, &FOLLOW_154_in_forStatement1787); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_154; stream_154->add(stream_154, string_literal127, NULL); }


            // .//Emerson.g:261:10: ( LTERM )*

            for (;;)
            {
                int alt62=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA62_0 = LA(1);
                    if ( (LA62_0 == LTERM) ) 
                    {
                        alt62=1;
                    }

                }
                switch (alt62) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM128 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1789); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM128, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop62;	/* break out of the loop */
            	    break;
                }
            }
            loop62: ; /* Jump out to here if this rule does not match */

            char_literal129 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_forStatement1792); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal129, NULL); }


            // .//Emerson.g:261:21: ( ( LTERM )* init= forStatementInitialiserPart )?
            {
                int alt64=2;
                alt64 = cdfa64.predict(ctx, RECOGNIZER, ISTREAM, &cdfa64);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt64) 
                {
            	case 1:
            	    // .//Emerson.g:261:22: ( LTERM )* init= forStatementInitialiserPart
            	    {

            	        // .//Emerson.g:261:22: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt63=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA63_0 = LA(1);
            	                if ( (LA63_0 == LTERM) ) 
            	                {
            	                    alt63=1;
            	                }

            	            }
            	            switch (alt63) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM130 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1795); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM130, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop63;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop63: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_forStatementInitialiserPart_in_forStatement1800);
            	        init=forStatementInitialiserPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_forStatementInitialiserPart; stream_forStatementInitialiserPart->add(stream_forStatementInitialiserPart, init.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:261:64: ( LTERM )*

            for (;;)
            {
                int alt65=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA65_0 = LA(1);
                    if ( (LA65_0 == LTERM) ) 
                    {
                        alt65=1;
                    }

                }
                switch (alt65) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM131 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1804); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM131, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop65;	/* break out of the loop */
            	    break;
                }
            }
            loop65: ; /* Jump out to here if this rule does not match */

            char_literal132 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_forStatement1807); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal132, NULL); }


            // .//Emerson.g:261:75: ( ( LTERM )* cond= expression )?
            {
                int alt67=2;
                alt67 = cdfa67.predict(ctx, RECOGNIZER, ISTREAM, &cdfa67);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt67) 
                {
            	case 1:
            	    // .//Emerson.g:261:76: ( LTERM )* cond= expression
            	    {

            	        // .//Emerson.g:261:76: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt66=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA66_0 = LA(1);
            	                if ( (LA66_0 == LTERM) ) 
            	                {
            	                    alt66=1;
            	                }

            	            }
            	            switch (alt66) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM133 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1810); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM133, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop66;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop66: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1815);
            	        cond=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, cond.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:261:101: ( LTERM )*

            for (;;)
            {
                int alt68=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA68_0 = LA(1);
                    if ( (LA68_0 == LTERM) ) 
                    {
                        alt68=1;
                    }

                }
                switch (alt68) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM134 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1819); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM134, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop68;	/* break out of the loop */
            	    break;
                }
            }
            loop68: ; /* Jump out to here if this rule does not match */

            char_literal135 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_forStatement1822); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal135, NULL); }


            // .//Emerson.g:261:112: ( ( LTERM )* iter= expression )?
            {
                int alt70=2;
                alt70 = cdfa70.predict(ctx, RECOGNIZER, ISTREAM, &cdfa70);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt70) 
                {
            	case 1:
            	    // .//Emerson.g:261:113: ( LTERM )* iter= expression
            	    {

            	        // .//Emerson.g:261:113: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt69=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA69_0 = LA(1);
            	                if ( (LA69_0 == LTERM) ) 
            	                {
            	                    alt69=1;
            	                }

            	            }
            	            switch (alt69) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM136 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1825); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM136, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop69;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop69: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1830);
            	        iter=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, iter.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:261:138: ( LTERM )*

            for (;;)
            {
                int alt71=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA71_0 = LA(1);
                    if ( (LA71_0 == LTERM) ) 
                    {
                        alt71=1;
                    }

                }
                switch (alt71) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM137 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1834); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM137, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop71;	/* break out of the loop */
            	    break;
                }
            }
            loop71: ; /* Jump out to here if this rule does not match */

            char_literal138 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_forStatement1837); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal138, NULL); }


            // .//Emerson.g:261:149: ( LTERM )*

            for (;;)
            {
                int alt72=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA72_0 = LA(1);
                    if ( (LA72_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA72_2 = LA(2);
                            if ( (synpred85_Emerson(ctx)) ) 
                            {
                                alt72=1;
                            }

                        }
                    }

                }
                switch (alt72) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM139 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1839); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM139, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop72;	/* break out of the loop */
            	    break;
                }
            }
            loop72: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forStatement1842);
            statement140=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement140.tree, NULL); }

             
            /* AST REWRITE
             * elements          : cond, statement, iter, init
             * token labels      : 
             * rule labels       : retval, init, iter, cond
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_init;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_iter;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cond;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_init=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token init", init.tree != NULL ? init.tree : NULL);
            	stream_iter=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token iter", iter.tree != NULL ? iter.tree : NULL);
            	stream_cond=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token cond", cond.tree != NULL ? cond.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 261:166: -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	{
            	    // .//Emerson.g:261:170: ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR"), root_1));

            	        // .//Emerson.g:261:176: ( ^( FORINIT $init) )?
            	        {
            	        	if ( (stream_init != NULL && stream_init->hasNext(stream_init))  )
            	        	{
            	        		// .//Emerson.g:261:176: ^( FORINIT $init)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORINIT, (pANTLR3_UINT8)"FORINIT"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_init == NULL ? NULL : stream_init->nextTree(stream_init));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_init != NULL) stream_init->reset(stream_init);

            	        }
            	        // .//Emerson.g:261:196: ( ^( FORCOND $cond) )?
            	        {
            	        	if ( (stream_cond != NULL && stream_cond->hasNext(stream_cond))  )
            	        	{
            	        		// .//Emerson.g:261:196: ^( FORCOND $cond)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORCOND, (pANTLR3_UINT8)"FORCOND"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_cond == NULL ? NULL : stream_cond->nextTree(stream_cond));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_cond != NULL) stream_cond->reset(stream_cond);

            	        }
            	        // .//Emerson.g:261:215: ( ^( FORITER $iter) )?
            	        {
            	        	if ( (stream_iter != NULL && stream_iter->hasNext(stream_iter))  )
            	        	{
            	        		// .//Emerson.g:261:215: ^( FORITER $iter)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORITER, (pANTLR3_UINT8)"FORITER"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_iter == NULL ? NULL : stream_iter->nextTree(stream_iter));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_iter != NULL) stream_iter->reset(stream_iter);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_init != NULL) stream_init->free(stream_init);
            	if (stream_iter != NULL) stream_iter->free(stream_iter);
            	if (stream_cond != NULL) stream_cond->free(stream_cond);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementEx; /* Prevent compiler warnings */
    ruleforStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_154 != NULL) stream_154->free(stream_154);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forStatementInitialiserPart != NULL) stream_forStatementInitialiserPart->free(stream_forStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(24, forStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forStatement */

/** 
 * $ANTLR start forStatementInitialiserPart
 * .//Emerson.g:264:1: forStatementInitialiserPart : ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) );
 */
static EmersonParser_forStatementInitialiserPart_return
forStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal142;
    pANTLR3_COMMON_TOKEN    LTERM143;
    EmersonParser_expressionNoIn_return expressionNoIn141;
    #undef	RETURN_TYPE_expressionNoIn141
    #define	RETURN_TYPE_expressionNoIn141 EmersonParser_expressionNoIn_return

    EmersonParser_variableDeclarationListNoIn_return variableDeclarationListNoIn144;
    #undef	RETURN_TYPE_variableDeclarationListNoIn144
    #define	RETURN_TYPE_variableDeclarationListNoIn144 EmersonParser_variableDeclarationListNoIn_return

    pANTLR3_BASE_TREE string_literal142_tree;
    pANTLR3_BASE_TREE LTERM143_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_148;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationListNoIn;
    /* Initialize rule variables
     */
    forStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(25)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal142       = NULL;
    LTERM143       = NULL;
    expressionNoIn141.tree = NULL;

    variableDeclarationListNoIn144.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal142_tree   = NULL;
    LTERM143_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_148   = NULL;
    #define CREATE_stream_148  if (stream_148 == NULL) {stream_148 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 148"); } 
    stream_variableDeclarationListNoIn   = NULL;
    #define CREATE_stream_variableDeclarationListNoIn  if (stream_variableDeclarationListNoIn == NULL) {stream_variableDeclarationListNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationListNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:265:2: ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) )
            
            ANTLR3_UINT32 alt74;

            alt74=2;


            {
                int LA74_0 = LA(1);
                if ( (((LA74_0 >= Identifier) && (LA74_0 <= StringLiteral)) || ((LA74_0 >= 141) && (LA74_0 <= 142)) || LA74_0 == 145 || ((LA74_0 >= 168) && (LA74_0 <= 169)) || LA74_0 == 193 || ((LA74_0 >= 198) && (LA74_0 <= 199)) || ((LA74_0 >= 203) && (LA74_0 <= 215))) ) 
                {
                    alt74=1;
                }
                else if ( (LA74_0 == 148) ) 
                {
                    alt74=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 74;
                    EXCEPTION->state        = 0;


                    goto ruleforStatementInitialiserPartEx;
                }
            }
            switch (alt74) 
            {
        	case 1:
        	    // .//Emerson.g:265:4: expressionNoIn
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionNoIn_in_forStatementInitialiserPart1891);
        	        expressionNoIn141=expressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionNoIn141.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:266:4: 'var' ( LTERM )* variableDeclarationListNoIn
        	    {
        	        string_literal142 = (pANTLR3_COMMON_TOKEN) MATCHT(148, &FOLLOW_148_in_forStatementInitialiserPart1896); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_148; stream_148->add(stream_148, string_literal142, NULL); }


        	        // .//Emerson.g:266:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt73=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA73_0 = LA(1);
        	                if ( (LA73_0 == LTERM) ) 
        	                {
        	                    alt73=1;
        	                }

        	            }
        	            switch (alt73) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM143 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatementInitialiserPart1898); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM143, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop73;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop73: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1901);
        	        variableDeclarationListNoIn144=variableDeclarationListNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationListNoIn; stream_variableDeclarationListNoIn->add(stream_variableDeclarationListNoIn, variableDeclarationListNoIn144.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationListNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 266:45: -> ^( VARLIST variableDeclarationListNoIn )
        	        	{
        	        	    // .//Emerson.g:266:48: ^( VARLIST variableDeclarationListNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationListNoIn == NULL ? NULL : stream_variableDeclarationListNoIn->nextTree(stream_variableDeclarationListNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_148 != NULL) stream_148->free(stream_148);
        if (stream_variableDeclarationListNoIn != NULL) stream_variableDeclarationListNoIn->free(stream_variableDeclarationListNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(25, forStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forStatementInitialiserPart */

/** 
 * $ANTLR start forInStatement
 * .//Emerson.g:269:1: forInStatement : 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) ;
 */
static EmersonParser_forInStatement_return
forInStatement(pEmersonParser ctx)
{   
    EmersonParser_forInStatement_return retval;
    ANTLR3_UINT32 forInStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal145;
    pANTLR3_COMMON_TOKEN    LTERM146;
    pANTLR3_COMMON_TOKEN    char_literal147;
    pANTLR3_COMMON_TOKEN    LTERM148;
    pANTLR3_COMMON_TOKEN    LTERM150;
    pANTLR3_COMMON_TOKEN    string_literal151;
    pANTLR3_COMMON_TOKEN    LTERM152;
    pANTLR3_COMMON_TOKEN    LTERM154;
    pANTLR3_COMMON_TOKEN    char_literal155;
    pANTLR3_COMMON_TOKEN    LTERM156;
    EmersonParser_forInStatementInitialiserPart_return forInStatementInitialiserPart149;
    #undef	RETURN_TYPE_forInStatementInitialiserPart149
    #define	RETURN_TYPE_forInStatementInitialiserPart149 EmersonParser_forInStatementInitialiserPart_return

    EmersonParser_expression_return expression153;
    #undef	RETURN_TYPE_expression153
    #define	RETURN_TYPE_expression153 EmersonParser_expression_return

    EmersonParser_statement_return statement157;
    #undef	RETURN_TYPE_statement157
    #define	RETURN_TYPE_statement157 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal145_tree;
    pANTLR3_BASE_TREE LTERM146_tree;
    pANTLR3_BASE_TREE char_literal147_tree;
    pANTLR3_BASE_TREE LTERM148_tree;
    pANTLR3_BASE_TREE LTERM150_tree;
    pANTLR3_BASE_TREE string_literal151_tree;
    pANTLR3_BASE_TREE LTERM152_tree;
    pANTLR3_BASE_TREE LTERM154_tree;
    pANTLR3_BASE_TREE char_literal155_tree;
    pANTLR3_BASE_TREE LTERM156_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_154;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forInStatementInitialiserPart;
    /* Initialize rule variables
     */
    forInStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(26)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal145       = NULL;
    LTERM146       = NULL;
    char_literal147       = NULL;
    LTERM148       = NULL;
    LTERM150       = NULL;
    string_literal151       = NULL;
    LTERM152       = NULL;
    LTERM154       = NULL;
    char_literal155       = NULL;
    LTERM156       = NULL;
    forInStatementInitialiserPart149.tree = NULL;

    expression153.tree = NULL;

    statement157.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal145_tree   = NULL;
    LTERM146_tree   = NULL;
    char_literal147_tree   = NULL;
    LTERM148_tree   = NULL;
    LTERM150_tree   = NULL;
    string_literal151_tree   = NULL;
    LTERM152_tree   = NULL;
    LTERM154_tree   = NULL;
    char_literal155_tree   = NULL;
    LTERM156_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_154   = NULL;
    #define CREATE_stream_154  if (stream_154 == NULL) {stream_154 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 154"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forInStatementInitialiserPart   = NULL;
    #define CREATE_stream_forInStatementInitialiserPart  if (stream_forInStatementInitialiserPart == NULL) {stream_forInStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forInStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:270:2: ( 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) )
        // .//Emerson.g:270:4: 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal145 = (pANTLR3_COMMON_TOKEN) MATCHT(154, &FOLLOW_154_in_forInStatement1921); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_154; stream_154->add(stream_154, string_literal145, NULL); }


            // .//Emerson.g:270:10: ( LTERM )*

            for (;;)
            {
                int alt75=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA75_0 = LA(1);
                    if ( (LA75_0 == LTERM) ) 
                    {
                        alt75=1;
                    }

                }
                switch (alt75) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM146 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1923); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM146, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop75;	/* break out of the loop */
            	    break;
                }
            }
            loop75: ; /* Jump out to here if this rule does not match */

            char_literal147 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_forInStatement1926); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal147, NULL); }


            // .//Emerson.g:270:21: ( LTERM )*

            for (;;)
            {
                int alt76=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA76_0 = LA(1);
                    if ( (LA76_0 == LTERM) ) 
                    {
                        alt76=1;
                    }

                }
                switch (alt76) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM148 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1928); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM148, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop76;	/* break out of the loop */
            	    break;
                }
            }
            loop76: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_forInStatementInitialiserPart_in_forInStatement1931);
            forInStatementInitialiserPart149=forInStatementInitialiserPart(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_forInStatementInitialiserPart; stream_forInStatementInitialiserPart->add(stream_forInStatementInitialiserPart, forInStatementInitialiserPart149.tree, NULL); }

            // .//Emerson.g:270:58: ( LTERM )*

            for (;;)
            {
                int alt77=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA77_0 = LA(1);
                    if ( (LA77_0 == LTERM) ) 
                    {
                        alt77=1;
                    }

                }
                switch (alt77) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM150 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1933); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM150, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop77;	/* break out of the loop */
            	    break;
                }
            }
            loop77: ; /* Jump out to here if this rule does not match */

            string_literal151 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_forInStatement1936); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, string_literal151, NULL); }


            // .//Emerson.g:270:70: ( LTERM )*

            for (;;)
            {
                int alt78=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA78_0 = LA(1);
                    if ( (LA78_0 == LTERM) ) 
                    {
                        alt78=1;
                    }

                }
                switch (alt78) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM152 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1938); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM152, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop78;	/* break out of the loop */
            	    break;
                }
            }
            loop78: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_forInStatement1941);
            expression153=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression153.tree, NULL); }

            // .//Emerson.g:270:88: ( LTERM )*

            for (;;)
            {
                int alt79=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA79_0 = LA(1);
                    if ( (LA79_0 == LTERM) ) 
                    {
                        alt79=1;
                    }

                }
                switch (alt79) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM154 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1943); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM154, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop79;	/* break out of the loop */
            	    break;
                }
            }
            loop79: ; /* Jump out to here if this rule does not match */

            char_literal155 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_forInStatement1946); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal155, NULL); }


            // .//Emerson.g:270:99: ( LTERM )*

            for (;;)
            {
                int alt80=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA80_0 = LA(1);
                    if ( (LA80_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA80_2 = LA(2);
                            if ( (synpred93_Emerson(ctx)) ) 
                            {
                                alt80=1;
                            }

                        }
                    }

                }
                switch (alt80) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM156 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1948); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM156, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop80;	/* break out of the loop */
            	    break;
                }
            }
            loop80: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forInStatement1951);
            statement157=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement157.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, expression, forInStatementInitialiserPart
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 270:116: -> ^( FORIN forInStatementInitialiserPart expression statement )
            	{
            	    // .//Emerson.g:270:119: ^( FORIN forInStatementInitialiserPart expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORIN, (pANTLR3_UINT8)"FORIN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_forInStatementInitialiserPart == NULL ? NULL : stream_forInStatementInitialiserPart->nextTree(stream_forInStatementInitialiserPart));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementEx; /* Prevent compiler warnings */
    ruleforInStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_154 != NULL) stream_154->free(stream_154);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forInStatementInitialiserPart != NULL) stream_forInStatementInitialiserPart->free(stream_forInStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(26, forInStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatement */

/** 
 * $ANTLR start forInStatementInitialiserPart
 * .//Emerson.g:273:1: forInStatementInitialiserPart : ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) );
 */
static EmersonParser_forInStatementInitialiserPart_return
forInStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forInStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forInStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal159;
    pANTLR3_COMMON_TOKEN    LTERM160;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression158;
    #undef	RETURN_TYPE_leftHandSideExpression158
    #define	RETURN_TYPE_leftHandSideExpression158 EmersonParser_leftHandSideExpression_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn161;
    #undef	RETURN_TYPE_variableDeclarationNoIn161
    #define	RETURN_TYPE_variableDeclarationNoIn161 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE string_literal159_tree;
    pANTLR3_BASE_TREE LTERM160_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_148;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    forInStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(27)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal159       = NULL;
    LTERM160       = NULL;
    leftHandSideExpression158.tree = NULL;

    variableDeclarationNoIn161.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal159_tree   = NULL;
    LTERM160_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_148   = NULL;
    #define CREATE_stream_148  if (stream_148 == NULL) {stream_148 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 148"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:274:2: ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) )
            
            ANTLR3_UINT32 alt82;

            alt82=2;


            {
                int LA82_0 = LA(1);
                if ( (((LA82_0 >= Identifier) && (LA82_0 <= StringLiteral)) || ((LA82_0 >= 141) && (LA82_0 <= 142)) || LA82_0 == 145 || ((LA82_0 >= 168) && (LA82_0 <= 169)) || LA82_0 == 193 || ((LA82_0 >= 211) && (LA82_0 <= 215))) ) 
                {
                    alt82=1;
                }
                else if ( (LA82_0 == 148) ) 
                {
                    alt82=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 82;
                    EXCEPTION->state        = 0;


                    goto ruleforInStatementInitialiserPartEx;
                }
            }
            switch (alt82) 
            {
        	case 1:
        	    // .//Emerson.g:274:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1975);
        	        leftHandSideExpression158=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression158.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 274:27: -> leftHandSideExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:275:4: 'var' ( LTERM )* variableDeclarationNoIn
        	    {
        	        string_literal159 = (pANTLR3_COMMON_TOKEN) MATCHT(148, &FOLLOW_148_in_forInStatementInitialiserPart1984); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_148; stream_148->add(stream_148, string_literal159, NULL); }


        	        // .//Emerson.g:275:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt81=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA81_0 = LA(1);
        	                if ( (LA81_0 == LTERM) ) 
        	                {
        	                    alt81=1;
        	                }

        	            }
        	            switch (alt81) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM160 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatementInitialiserPart1986); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforInStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM160, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop81;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop81: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1989);
        	        variableDeclarationNoIn161=variableDeclarationNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn161.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 275:41: -> ^( VAR variableDeclarationNoIn )
        	        	{
        	        	    // .//Emerson.g:275:44: ^( VAR variableDeclarationNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforInStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_148 != NULL) stream_148->free(stream_148);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(27, forInStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatementInitialiserPart */

/** 
 * $ANTLR start continueStatement
 * .//Emerson.g:278:1: continueStatement : 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) ;
 */
static EmersonParser_continueStatement_return
continueStatement(pEmersonParser ctx)
{   
    EmersonParser_continueStatement_return retval;
    ANTLR3_UINT32 continueStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal162;
    pANTLR3_COMMON_TOKEN    Identifier163;
    pANTLR3_COMMON_TOKEN    LTERM164;
    pANTLR3_COMMON_TOKEN    char_literal165;

    pANTLR3_BASE_TREE string_literal162_tree;
    pANTLR3_BASE_TREE Identifier163_tree;
    pANTLR3_BASE_TREE LTERM164_tree;
    pANTLR3_BASE_TREE char_literal165_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_156;

    /* Initialize rule variables
     */
    continueStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(28)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal162       = NULL;
    Identifier163       = NULL;
    LTERM164       = NULL;
    char_literal165       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal162_tree   = NULL;
    Identifier163_tree   = NULL;
    LTERM164_tree   = NULL;
    char_literal165_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_156   = NULL;
    #define CREATE_stream_156  if (stream_156 == NULL) {stream_156 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 156"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:279:2: ( 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) )
        // .//Emerson.g:279:4: 'continue' ( Identifier )? ( LTERM | ';' )
        {
            string_literal162 = (pANTLR3_COMMON_TOKEN) MATCHT(156, &FOLLOW_156_in_continueStatement2008); 
            if  (HASEXCEPTION())
            {
                goto rulecontinueStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_156; stream_156->add(stream_156, string_literal162, NULL); }


            // .//Emerson.g:279:15: ( Identifier )?
            {
                int alt83=2;
                {
                    int LA83_0 = LA(1);
                    if ( (LA83_0 == Identifier) ) 
                    {
                        alt83=1;
                    }
                }
                switch (alt83) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier163 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_continueStatement2010); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier163, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:279:27: ( LTERM | ';' )
            {
                int alt84=2;

                {
                    int LA84_0 = LA(1);
                    if ( (LA84_0 == LTERM) ) 
                    {
                        alt84=1;
                    }
                    else if ( (LA84_0 == 147) ) 
                    {
                        alt84=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 84;
                        EXCEPTION->state        = 0;


                        goto rulecontinueStatementEx;
                    }
                }
                switch (alt84) 
                {
            	case 1:
            	    // .//Emerson.g:279:28: LTERM
            	    {
            	        LTERM164 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_continueStatement2014); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM164, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:279:36: ';'
            	    {
            	        char_literal165 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_continueStatement2018); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal165, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 279:42: -> ^( CONTINUE ( Identifier )? )
            	{
            	    // .//Emerson.g:279:45: ^( CONTINUE ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTINUE, (pANTLR3_UINT8)"CONTINUE"), root_1));

            	        // .//Emerson.g:279:56: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontinueStatementEx; /* Prevent compiler warnings */
    rulecontinueStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_156 != NULL) stream_156->free(stream_156);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(28, continueStatement_StartIndex); }
    return retval;
}
/* $ANTLR end continueStatement */

/** 
 * $ANTLR start breakStatement
 * .//Emerson.g:282:1: breakStatement : 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) ;
 */
static EmersonParser_breakStatement_return
breakStatement(pEmersonParser ctx)
{   
    EmersonParser_breakStatement_return retval;
    ANTLR3_UINT32 breakStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal166;
    pANTLR3_COMMON_TOKEN    Identifier167;
    pANTLR3_COMMON_TOKEN    LTERM168;
    pANTLR3_COMMON_TOKEN    char_literal169;

    pANTLR3_BASE_TREE string_literal166_tree;
    pANTLR3_BASE_TREE Identifier167_tree;
    pANTLR3_BASE_TREE LTERM168_tree;
    pANTLR3_BASE_TREE char_literal169_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;

    /* Initialize rule variables
     */
    breakStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(29)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal166       = NULL;
    Identifier167       = NULL;
    LTERM168       = NULL;
    char_literal169       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal166_tree   = NULL;
    Identifier167_tree   = NULL;
    LTERM168_tree   = NULL;
    char_literal169_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:283:2: ( 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) )
        // .//Emerson.g:283:4: 'break' ( Identifier )? ( LTERM | ';' )
        {
            string_literal166 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_breakStatement2040); 
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, string_literal166, NULL); }


            // .//Emerson.g:283:12: ( Identifier )?
            {
                int alt85=2;
                {
                    int LA85_0 = LA(1);
                    if ( (LA85_0 == Identifier) ) 
                    {
                        alt85=1;
                    }
                }
                switch (alt85) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier167 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_breakStatement2042); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier167, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:283:24: ( LTERM | ';' )
            {
                int alt86=2;

                {
                    int LA86_0 = LA(1);
                    if ( (LA86_0 == LTERM) ) 
                    {
                        alt86=1;
                    }
                    else if ( (LA86_0 == 147) ) 
                    {
                        alt86=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 86;
                        EXCEPTION->state        = 0;


                        goto rulebreakStatementEx;
                    }
                }
                switch (alt86) 
                {
            	case 1:
            	    // .//Emerson.g:283:25: LTERM
            	    {
            	        LTERM168 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_breakStatement2046); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM168, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:283:33: ';'
            	    {
            	        char_literal169 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_breakStatement2050); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal169, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 283:38: -> ^( BREAK ( Identifier )? )
            	{
            	    // .//Emerson.g:283:41: ^( BREAK ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BREAK, (pANTLR3_UINT8)"BREAK"), root_1));

            	        // .//Emerson.g:283:49: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_157 != NULL) stream_157->free(stream_157);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(29, breakStatement_StartIndex); }
    return retval;
}
/* $ANTLR end breakStatement */

/** 
 * $ANTLR start returnStatement
 * .//Emerson.g:286:1: returnStatement : 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) ;
 */
static EmersonParser_returnStatement_return
returnStatement(pEmersonParser ctx)
{   
    EmersonParser_returnStatement_return retval;
    ANTLR3_UINT32 returnStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal170;
    pANTLR3_COMMON_TOKEN    LTERM172;
    pANTLR3_COMMON_TOKEN    char_literal173;
    EmersonParser_expression_return expression171;
    #undef	RETURN_TYPE_expression171
    #define	RETURN_TYPE_expression171 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal170_tree;
    pANTLR3_BASE_TREE LTERM172_tree;
    pANTLR3_BASE_TREE char_literal173_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    returnStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(30)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal170       = NULL;
    LTERM172       = NULL;
    char_literal173       = NULL;
    expression171.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal170_tree   = NULL;
    LTERM172_tree   = NULL;
    char_literal173_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:287:2: ( 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) )
        // .//Emerson.g:287:4: 'return' ( expression )? ( LTERM | ';' )
        {
            string_literal170 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_returnStatement2071); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, string_literal170, NULL); }


            // .//Emerson.g:287:13: ( expression )?
            {
                int alt87=2;
                {
                    int LA87_0 = LA(1);
                    if ( (((LA87_0 >= Identifier) && (LA87_0 <= StringLiteral)) || ((LA87_0 >= 141) && (LA87_0 <= 142)) || LA87_0 == 145 || ((LA87_0 >= 168) && (LA87_0 <= 169)) || LA87_0 == 193 || ((LA87_0 >= 198) && (LA87_0 <= 199)) || ((LA87_0 >= 203) && (LA87_0 <= 215))) ) 
                    {
                        alt87=1;
                    }
                }
                switch (alt87) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2073);
            	        expression171=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression171.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:287:25: ( LTERM | ';' )
            {
                int alt88=2;

                {
                    int LA88_0 = LA(1);
                    if ( (LA88_0 == LTERM) ) 
                    {
                        alt88=1;
                    }
                    else if ( (LA88_0 == 147) ) 
                    {
                        alt88=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 88;
                        EXCEPTION->state        = 0;


                        goto rulereturnStatementEx;
                    }
                }
                switch (alt88) 
                {
            	case 1:
            	    // .//Emerson.g:287:26: LTERM
            	    {
            	        LTERM172 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_returnStatement2077); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM172, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:287:34: ';'
            	    {
            	        char_literal173 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_returnStatement2081); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal173, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 287:39: -> ^( RETURN ( expression )? )
            	{
            	    // .//Emerson.g:287:42: ^( RETURN ( expression )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RETURN, (pANTLR3_UINT8)"RETURN"), root_1));

            	        // .//Emerson.g:287:51: ( expression )?
            	        {
            	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        	}
            	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(30, returnStatement_StartIndex); }
    return retval;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start withStatement
 * .//Emerson.g:290:1: withStatement : 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) ;
 */
static EmersonParser_withStatement_return
withStatement(pEmersonParser ctx)
{   
    EmersonParser_withStatement_return retval;
    ANTLR3_UINT32 withStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal174;
    pANTLR3_COMMON_TOKEN    LTERM175;
    pANTLR3_COMMON_TOKEN    char_literal176;
    pANTLR3_COMMON_TOKEN    LTERM177;
    pANTLR3_COMMON_TOKEN    LTERM179;
    pANTLR3_COMMON_TOKEN    char_literal180;
    pANTLR3_COMMON_TOKEN    LTERM181;
    EmersonParser_expression_return expression178;
    #undef	RETURN_TYPE_expression178
    #define	RETURN_TYPE_expression178 EmersonParser_expression_return

    EmersonParser_statement_return statement182;
    #undef	RETURN_TYPE_statement182
    #define	RETURN_TYPE_statement182 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal174_tree;
    pANTLR3_BASE_TREE LTERM175_tree;
    pANTLR3_BASE_TREE char_literal176_tree;
    pANTLR3_BASE_TREE LTERM177_tree;
    pANTLR3_BASE_TREE LTERM179_tree;
    pANTLR3_BASE_TREE char_literal180_tree;
    pANTLR3_BASE_TREE LTERM181_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    withStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(31)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal174       = NULL;
    LTERM175       = NULL;
    char_literal176       = NULL;
    LTERM177       = NULL;
    LTERM179       = NULL;
    char_literal180       = NULL;
    LTERM181       = NULL;
    expression178.tree = NULL;

    statement182.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal174_tree   = NULL;
    LTERM175_tree   = NULL;
    char_literal176_tree   = NULL;
    LTERM177_tree   = NULL;
    LTERM179_tree   = NULL;
    char_literal180_tree   = NULL;
    LTERM181_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:291:2: ( 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) )
        // .//Emerson.g:291:4: 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal174 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_withStatement2103); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, string_literal174, NULL); }


            // .//Emerson.g:291:11: ( LTERM )*

            for (;;)
            {
                int alt89=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA89_0 = LA(1);
                    if ( (LA89_0 == LTERM) ) 
                    {
                        alt89=1;
                    }

                }
                switch (alt89) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM175 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2105); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM175, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop89;	/* break out of the loop */
            	    break;
                }
            }
            loop89: ; /* Jump out to here if this rule does not match */

            char_literal176 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_withStatement2108); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal176, NULL); }


            // .//Emerson.g:291:22: ( LTERM )*

            for (;;)
            {
                int alt90=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA90_0 = LA(1);
                    if ( (LA90_0 == LTERM) ) 
                    {
                        alt90=1;
                    }

                }
                switch (alt90) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM177 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2110); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM177, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop90;	/* break out of the loop */
            	    break;
                }
            }
            loop90: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_withStatement2113);
            expression178=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression178.tree, NULL); }

            // .//Emerson.g:291:40: ( LTERM )*

            for (;;)
            {
                int alt91=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA91_0 = LA(1);
                    if ( (LA91_0 == LTERM) ) 
                    {
                        alt91=1;
                    }

                }
                switch (alt91) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM179 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2115); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM179, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop91;	/* break out of the loop */
            	    break;
                }
            }
            loop91: ; /* Jump out to here if this rule does not match */

            char_literal180 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_withStatement2118); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal180, NULL); }


            // .//Emerson.g:291:51: ( LTERM )*

            for (;;)
            {
                int alt92=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA92_0 = LA(1);
                    if ( (LA92_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA92_2 = LA(2);
                            if ( (synpred105_Emerson(ctx)) ) 
                            {
                                alt92=1;
                            }

                        }
                    }

                }
                switch (alt92) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM181 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2120); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM181, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop92;	/* break out of the loop */
            	    break;
                }
            }
            loop92: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_withStatement2123);
            statement182=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement182.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 291:68: -> ^( WITH expression statement )
            	{
            	    // .//Emerson.g:291:71: ^( WITH expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WITH, (pANTLR3_UINT8)"WITH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithStatementEx; /* Prevent compiler warnings */
    rulewithStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(31, withStatement_StartIndex); }
    return retval;
}
/* $ANTLR end withStatement */

/** 
 * $ANTLR start switchStatement
 * .//Emerson.g:295:1: switchStatement : 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) ;
 */
static EmersonParser_switchStatement_return
switchStatement(pEmersonParser ctx)
{   
    EmersonParser_switchStatement_return retval;
    ANTLR3_UINT32 switchStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal183;
    pANTLR3_COMMON_TOKEN    LTERM184;
    pANTLR3_COMMON_TOKEN    char_literal185;
    pANTLR3_COMMON_TOKEN    LTERM186;
    pANTLR3_COMMON_TOKEN    LTERM188;
    pANTLR3_COMMON_TOKEN    char_literal189;
    pANTLR3_COMMON_TOKEN    LTERM190;
    EmersonParser_expression_return expression187;
    #undef	RETURN_TYPE_expression187
    #define	RETURN_TYPE_expression187 EmersonParser_expression_return

    EmersonParser_caseBlock_return caseBlock191;
    #undef	RETURN_TYPE_caseBlock191
    #define	RETURN_TYPE_caseBlock191 EmersonParser_caseBlock_return

    pANTLR3_BASE_TREE string_literal183_tree;
    pANTLR3_BASE_TREE LTERM184_tree;
    pANTLR3_BASE_TREE char_literal185_tree;
    pANTLR3_BASE_TREE LTERM186_tree;
    pANTLR3_BASE_TREE LTERM188_tree;
    pANTLR3_BASE_TREE char_literal189_tree;
    pANTLR3_BASE_TREE LTERM190_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseBlock;
    /* Initialize rule variables
     */
    switchStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(32)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal183       = NULL;
    LTERM184       = NULL;
    char_literal185       = NULL;
    LTERM186       = NULL;
    LTERM188       = NULL;
    char_literal189       = NULL;
    LTERM190       = NULL;
    expression187.tree = NULL;

    caseBlock191.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal183_tree   = NULL;
    LTERM184_tree   = NULL;
    char_literal185_tree   = NULL;
    LTERM186_tree   = NULL;
    LTERM188_tree   = NULL;
    char_literal189_tree   = NULL;
    LTERM190_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_caseBlock   = NULL;
    #define CREATE_stream_caseBlock  if (stream_caseBlock == NULL) {stream_caseBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:296:2: ( 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) )
        // .//Emerson.g:296:4: 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock
        {
            string_literal183 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_switchStatement2146); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, string_literal183, NULL); }


            // .//Emerson.g:296:13: ( LTERM )*

            for (;;)
            {
                int alt93=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA93_0 = LA(1);
                    if ( (LA93_0 == LTERM) ) 
                    {
                        alt93=1;
                    }

                }
                switch (alt93) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM184 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2148); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM184, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop93;	/* break out of the loop */
            	    break;
                }
            }
            loop93: ; /* Jump out to here if this rule does not match */

            char_literal185 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_switchStatement2151); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal185, NULL); }


            // .//Emerson.g:296:24: ( LTERM )*

            for (;;)
            {
                int alt94=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA94_0 = LA(1);
                    if ( (LA94_0 == LTERM) ) 
                    {
                        alt94=1;
                    }

                }
                switch (alt94) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM186 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2153); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM186, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop94;	/* break out of the loop */
            	    break;
                }
            }
            loop94: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_switchStatement2156);
            expression187=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression187.tree, NULL); }

            // .//Emerson.g:296:42: ( LTERM )*

            for (;;)
            {
                int alt95=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA95_0 = LA(1);
                    if ( (LA95_0 == LTERM) ) 
                    {
                        alt95=1;
                    }

                }
                switch (alt95) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM188 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2158); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM188, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop95;	/* break out of the loop */
            	    break;
                }
            }
            loop95: ; /* Jump out to here if this rule does not match */

            char_literal189 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_switchStatement2161); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal189, NULL); }


            // .//Emerson.g:296:53: ( LTERM )*

            for (;;)
            {
                int alt96=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA96_0 = LA(1);
                    if ( (LA96_0 == LTERM) ) 
                    {
                        alt96=1;
                    }

                }
                switch (alt96) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM190 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2163); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM190, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop96;	/* break out of the loop */
            	    break;
                }
            }
            loop96: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_caseBlock_in_switchStatement2166);
            caseBlock191=caseBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_caseBlock; stream_caseBlock->add(stream_caseBlock, caseBlock191.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, caseBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 296:70: -> ^( SWITCH expression caseBlock )
            	{
            	    // .//Emerson.g:296:73: ^( SWITCH expression caseBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SWITCH, (pANTLR3_UINT8)"SWITCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_caseBlock == NULL ? NULL : stream_caseBlock->nextTree(stream_caseBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitchStatementEx; /* Prevent compiler warnings */
    ruleswitchStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_caseBlock != NULL) stream_caseBlock->free(stream_caseBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(32, switchStatement_StartIndex); }
    return retval;
}
/* $ANTLR end switchStatement */

/** 
 * $ANTLR start caseBlock
 * .//Emerson.g:300:1: caseBlock : ( '{' ( LTERM )* (case1= caseClause )? ( LTERM )* '}' -> ^( CASE_BLOCK ( $case1)? ) | '{' ( LTERM )* def= defaultClause ( LTERM )* '}' -> ^( CASE_BLOCK $def) );
 */
static EmersonParser_caseBlock_return
caseBlock(pEmersonParser ctx)
{   
    EmersonParser_caseBlock_return retval;
    ANTLR3_UINT32 caseBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal192;
    pANTLR3_COMMON_TOKEN    LTERM193;
    pANTLR3_COMMON_TOKEN    LTERM194;
    pANTLR3_COMMON_TOKEN    char_literal195;
    pANTLR3_COMMON_TOKEN    char_literal196;
    pANTLR3_COMMON_TOKEN    LTERM197;
    pANTLR3_COMMON_TOKEN    LTERM198;
    pANTLR3_COMMON_TOKEN    char_literal199;
    EmersonParser_caseClause_return case1;
    #undef	RETURN_TYPE_case1
    #define	RETURN_TYPE_case1 EmersonParser_caseClause_return

    EmersonParser_defaultClause_return def;
    #undef	RETURN_TYPE_def
    #define	RETURN_TYPE_def EmersonParser_defaultClause_return

    pANTLR3_BASE_TREE char_literal192_tree;
    pANTLR3_BASE_TREE LTERM193_tree;
    pANTLR3_BASE_TREE LTERM194_tree;
    pANTLR3_BASE_TREE char_literal195_tree;
    pANTLR3_BASE_TREE char_literal196_tree;
    pANTLR3_BASE_TREE LTERM197_tree;
    pANTLR3_BASE_TREE LTERM198_tree;
    pANTLR3_BASE_TREE char_literal199_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_defaultClause;
    /* Initialize rule variables
     */
    caseBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(33)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal192       = NULL;
    LTERM193       = NULL;
    LTERM194       = NULL;
    char_literal195       = NULL;
    char_literal196       = NULL;
    LTERM197       = NULL;
    LTERM198       = NULL;
    char_literal199       = NULL;
    case1.tree = NULL;

    def.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal192_tree   = NULL;
    LTERM193_tree   = NULL;
    LTERM194_tree   = NULL;
    char_literal195_tree   = NULL;
    char_literal196_tree   = NULL;
    LTERM197_tree   = NULL;
    LTERM198_tree   = NULL;
    char_literal199_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_caseClause   = NULL;
    #define CREATE_stream_caseClause  if (stream_caseClause == NULL) {stream_caseClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClause"); }
    stream_defaultClause   = NULL;
    #define CREATE_stream_defaultClause  if (stream_defaultClause == NULL) {stream_defaultClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule defaultClause"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:301:9: ( '{' ( LTERM )* (case1= caseClause )? ( LTERM )* '}' -> ^( CASE_BLOCK ( $case1)? ) | '{' ( LTERM )* def= defaultClause ( LTERM )* '}' -> ^( CASE_BLOCK $def) )
            
            ANTLR3_UINT32 alt102;

            alt102=2;

            alt102 = cdfa102.predict(ctx, RECOGNIZER, ISTREAM, &cdfa102);
            if  (HASEXCEPTION())
            {
                goto rulecaseBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt102) 
            {
        	case 1:
        	    // .//Emerson.g:301:12: '{' ( LTERM )* (case1= caseClause )? ( LTERM )* '}'
        	    {
        	        char_literal192 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_caseBlock2197); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal192, NULL); }


        	        // .//Emerson.g:301:16: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt97=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA97_0 = LA(1);
        	                if ( (LA97_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA97_2 = LA(2);
        	                        if ( (synpred110_Emerson(ctx)) ) 
        	                        {
        	                            alt97=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt97) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM193 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2199); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM193, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop97;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop97: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:301:28: (case1= caseClause )?
        	        {
        	            int alt98=2;
        	            {
        	                int LA98_0 = LA(1);
        	                if ( (LA98_0 == 161) ) 
        	                {
        	                    alt98=1;
        	                }
        	            }
        	            switch (alt98) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: case1= caseClause
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2204);
        	        	        case1=caseClause(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, case1.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:301:41: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt99=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA99_0 = LA(1);
        	                if ( (LA99_0 == LTERM) ) 
        	                {
        	                    alt99=1;
        	                }

        	            }
        	            switch (alt99) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM194 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2207); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM194, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop99;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop99: ; /* Jump out to here if this rule does not match */

        	        char_literal195 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_caseBlock2210); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal195, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : case1
        	         * token labels      : 
        	         * rule labels       : retval, case1
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case1;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_case1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token case1", case1.tree != NULL ? case1.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 301:52: -> ^( CASE_BLOCK ( $case1)? )
        	        	{
        	        	    // .//Emerson.g:301:55: ^( CASE_BLOCK ( $case1)? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE_BLOCK, (pANTLR3_UINT8)"CASE_BLOCK"), root_1));

        	        	        // .//Emerson.g:301:68: ( $case1)?
        	        	        {
        	        	        	if ( (stream_case1 != NULL && stream_case1->hasNext(stream_case1))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_case1 == NULL ? NULL : stream_case1->nextTree(stream_case1));

        	        	        	}
        	        	        	if ( stream_case1 != NULL) stream_case1->reset(stream_case1);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_case1 != NULL) stream_case1->free(stream_case1);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:302:12: '{' ( LTERM )* def= defaultClause ( LTERM )* '}'
        	    {
        	        char_literal196 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_caseBlock2233); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal196, NULL); }


        	        // .//Emerson.g:302:16: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt100=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA100_0 = LA(1);
        	                if ( (LA100_0 == LTERM) ) 
        	                {
        	                    alt100=1;
        	                }

        	            }
        	            switch (alt100) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM197 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2235); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM197, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop100;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop100: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseBlock2240);
        	        def=defaultClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_defaultClause; stream_defaultClause->add(stream_defaultClause, def.tree, NULL); }

        	        // .//Emerson.g:302:41: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt101=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA101_0 = LA(1);
        	                if ( (LA101_0 == LTERM) ) 
        	                {
        	                    alt101=1;
        	                }

        	            }
        	            switch (alt101) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM198 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2242); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM198, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop101;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop101: ; /* Jump out to here if this rule does not match */

        	        char_literal199 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_caseBlock2245); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal199, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : def
        	         * token labels      : 
        	         * rule labels       : retval, def
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_def;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_def=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token def", def.tree != NULL ? def.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 302:52: -> ^( CASE_BLOCK $def)
        	        	{
        	        	    // .//Emerson.g:302:55: ^( CASE_BLOCK $def)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE_BLOCK, (pANTLR3_UINT8)"CASE_BLOCK"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_def == NULL ? NULL : stream_def->nextTree(stream_def));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_def != NULL) stream_def->free(stream_def);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseBlockEx; /* Prevent compiler warnings */
    rulecaseBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_caseClause != NULL) stream_caseClause->free(stream_caseClause);
        if (stream_defaultClause != NULL) stream_defaultClause->free(stream_defaultClause);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(33, caseBlock_StartIndex); }
    return retval;
}
/* $ANTLR end caseBlock */

/** 
 * $ANTLR start caseClause
 * .//Emerson.g:307:1: caseClause : ( 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* defaultClause -> ^( CASE $e1 ( statementList )? defaultClause ) | 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClause )? -> ^( CASE $e1 ( statementList )? ( caseClause )? ) );
 */
static EmersonParser_caseClause_return
caseClause(pEmersonParser ctx)
{   
    EmersonParser_caseClause_return retval;
    ANTLR3_UINT32 caseClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal200;
    pANTLR3_COMMON_TOKEN    LTERM201;
    pANTLR3_COMMON_TOKEN    LTERM202;
    pANTLR3_COMMON_TOKEN    char_literal203;
    pANTLR3_COMMON_TOKEN    LTERM204;
    pANTLR3_COMMON_TOKEN    LTERM206;
    pANTLR3_COMMON_TOKEN    string_literal208;
    pANTLR3_COMMON_TOKEN    LTERM209;
    pANTLR3_COMMON_TOKEN    LTERM210;
    pANTLR3_COMMON_TOKEN    char_literal211;
    pANTLR3_COMMON_TOKEN    LTERM212;
    pANTLR3_COMMON_TOKEN    LTERM214;
    EmersonParser_ternaryExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_ternaryExpression_return

    EmersonParser_statementList_return statementList205;
    #undef	RETURN_TYPE_statementList205
    #define	RETURN_TYPE_statementList205 EmersonParser_statementList_return

    EmersonParser_defaultClause_return defaultClause207;
    #undef	RETURN_TYPE_defaultClause207
    #define	RETURN_TYPE_defaultClause207 EmersonParser_defaultClause_return

    EmersonParser_statementList_return statementList213;
    #undef	RETURN_TYPE_statementList213
    #define	RETURN_TYPE_statementList213 EmersonParser_statementList_return

    EmersonParser_caseClause_return caseClause215;
    #undef	RETURN_TYPE_caseClause215
    #define	RETURN_TYPE_caseClause215 EmersonParser_caseClause_return

    pANTLR3_BASE_TREE string_literal200_tree;
    pANTLR3_BASE_TREE LTERM201_tree;
    pANTLR3_BASE_TREE LTERM202_tree;
    pANTLR3_BASE_TREE char_literal203_tree;
    pANTLR3_BASE_TREE LTERM204_tree;
    pANTLR3_BASE_TREE LTERM206_tree;
    pANTLR3_BASE_TREE string_literal208_tree;
    pANTLR3_BASE_TREE LTERM209_tree;
    pANTLR3_BASE_TREE LTERM210_tree;
    pANTLR3_BASE_TREE char_literal211_tree;
    pANTLR3_BASE_TREE LTERM212_tree;
    pANTLR3_BASE_TREE LTERM214_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_161;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_162;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ternaryExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_defaultClause;
    /* Initialize rule variables
     */
    caseClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(34)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal200       = NULL;
    LTERM201       = NULL;
    LTERM202       = NULL;
    char_literal203       = NULL;
    LTERM204       = NULL;
    LTERM206       = NULL;
    string_literal208       = NULL;
    LTERM209       = NULL;
    LTERM210       = NULL;
    char_literal211       = NULL;
    LTERM212       = NULL;
    LTERM214       = NULL;
    e1.tree = NULL;

    statementList205.tree = NULL;

    defaultClause207.tree = NULL;

    statementList213.tree = NULL;

    caseClause215.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal200_tree   = NULL;
    LTERM201_tree   = NULL;
    LTERM202_tree   = NULL;
    char_literal203_tree   = NULL;
    LTERM204_tree   = NULL;
    LTERM206_tree   = NULL;
    string_literal208_tree   = NULL;
    LTERM209_tree   = NULL;
    LTERM210_tree   = NULL;
    char_literal211_tree   = NULL;
    LTERM212_tree   = NULL;
    LTERM214_tree   = NULL;

    stream_161   = NULL;
    #define CREATE_stream_161  if (stream_161 == NULL) {stream_161 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 161"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_162   = NULL;
    #define CREATE_stream_162  if (stream_162 == NULL) {stream_162 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 162"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }
    stream_caseClause   = NULL;
    #define CREATE_stream_caseClause  if (stream_caseClause == NULL) {stream_caseClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClause"); }
    stream_ternaryExpression   = NULL;
    #define CREATE_stream_ternaryExpression  if (stream_ternaryExpression == NULL) {stream_ternaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ternaryExpression"); }
    stream_defaultClause   = NULL;
    #define CREATE_stream_defaultClause  if (stream_defaultClause == NULL) {stream_defaultClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule defaultClause"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:308:2: ( 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* defaultClause -> ^( CASE $e1 ( statementList )? defaultClause ) | 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClause )? -> ^( CASE $e1 ( statementList )? ( caseClause )? ) )
            
            ANTLR3_UINT32 alt114;

            alt114=2;


            {
                int LA114_0 = LA(1);
                if ( (LA114_0 == 161) ) 
                {

                    {
                        int LA114_1 = LA(2);
                        if ( (synpred121_Emerson(ctx)) ) 
                        {
                            alt114=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt114=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 114;
                            EXCEPTION->state        = 1;


                            goto rulecaseClauseEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 114;
                    EXCEPTION->state        = 0;


                    goto rulecaseClauseEx;
                }
            }
            switch (alt114) 
            {
        	case 1:
        	    // .//Emerson.g:308:3: 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* defaultClause
        	    {
        	        string_literal200 = (pANTLR3_COMMON_TOKEN) MATCHT(161, &FOLLOW_161_in_caseClause2289); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_161; stream_161->add(stream_161, string_literal200, NULL); }


        	        // .//Emerson.g:308:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt103=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA103_0 = LA(1);
        	                if ( (LA103_0 == LTERM) ) 
        	                {
        	                    alt103=1;
        	                }

        	            }
        	            switch (alt103) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM201 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2291); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM201, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop103;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop103: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_caseClause2296);
        	        e1=ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpression; stream_ternaryExpression->add(stream_ternaryExpression, e1.tree, NULL); }

        	        // .//Emerson.g:308:38: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt104=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA104_0 = LA(1);
        	                if ( (LA104_0 == LTERM) ) 
        	                {
        	                    alt104=1;
        	                }

        	            }
        	            switch (alt104) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM202 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2298); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM202, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop104;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop104: ; /* Jump out to here if this rule does not match */

        	        char_literal203 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_caseClause2301); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, char_literal203, NULL); }


        	        // .//Emerson.g:308:49: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt105=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA105_0 = LA(1);
        	                if ( (LA105_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA105_2 = LA(2);
        	                        if ( (synpred118_Emerson(ctx)) ) 
        	                        {
        	                            alt105=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt105) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM204 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2303); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM204, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop105;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop105: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:308:56: ( statementList )?
        	        {
        	            int alt106=2;
        	            alt106 = cdfa106.predict(ctx, RECOGNIZER, ISTREAM, &cdfa106);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecaseClauseEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt106) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: statementList
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2306);
        	        	        statementList205=statementList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList205.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:308:71: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt107=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA107_0 = LA(1);
        	                if ( (LA107_0 == LTERM) ) 
        	                {
        	                    alt107=1;
        	                }

        	            }
        	            switch (alt107) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM206 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2309); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM206, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop107;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop107: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseClause2312);
        	        defaultClause207=defaultClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_defaultClause; stream_defaultClause->add(stream_defaultClause, defaultClause207.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : defaultClause, statementList, e1
        	         * token labels      : 
        	         * rule labels       : retval, e1
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 308:92: -> ^( CASE $e1 ( statementList )? defaultClause )
        	        	{
        	        	    // .//Emerson.g:308:95: ^( CASE $e1 ( statementList )? defaultClause )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        // .//Emerson.g:308:107: ( statementList )?
        	        	        {
        	        	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

        	        	        	}
        	        	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_defaultClause == NULL ? NULL : stream_defaultClause->nextTree(stream_defaultClause));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:309:11: 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClause )?
        	    {
        	        string_literal208 = (pANTLR3_COMMON_TOKEN) MATCHT(161, &FOLLOW_161_in_caseClause2339); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_161; stream_161->add(stream_161, string_literal208, NULL); }


        	        // .//Emerson.g:309:18: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt108=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA108_0 = LA(1);
        	                if ( (LA108_0 == LTERM) ) 
        	                {
        	                    alt108=1;
        	                }

        	            }
        	            switch (alt108) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM209 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2341); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM209, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop108;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop108: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_caseClause2346);
        	        e1=ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpression; stream_ternaryExpression->add(stream_ternaryExpression, e1.tree, NULL); }

        	        // .//Emerson.g:309:46: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt109=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA109_0 = LA(1);
        	                if ( (LA109_0 == LTERM) ) 
        	                {
        	                    alt109=1;
        	                }

        	            }
        	            switch (alt109) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM210 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2348); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM210, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop109;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop109: ; /* Jump out to here if this rule does not match */

        	        char_literal211 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_caseClause2351); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, char_literal211, NULL); }


        	        // .//Emerson.g:309:57: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt110=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA110_0 = LA(1);
        	                if ( (LA110_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA110_2 = LA(2);
        	                        if ( (synpred124_Emerson(ctx)) ) 
        	                        {
        	                            alt110=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt110) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM212 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2353); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM212, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop110;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop110: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:309:64: ( statementList )?
        	        {
        	            int alt111=2;
        	            alt111 = cdfa111.predict(ctx, RECOGNIZER, ISTREAM, &cdfa111);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecaseClauseEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt111) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: statementList
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2356);
        	        	        statementList213=statementList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList213.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:309:79: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt112=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA112_0 = LA(1);
        	                if ( (LA112_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA112_2 = LA(2);
        	                        if ( (synpred126_Emerson(ctx)) ) 
        	                        {
        	                            alt112=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt112) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM214 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2359); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM214, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop112;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop112: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:309:86: ( caseClause )?
        	        {
        	            int alt113=2;
        	            {
        	                int LA113_0 = LA(1);
        	                if ( (LA113_0 == 161) ) 
        	                {
        	                    alt113=1;
        	                }
        	            }
        	            switch (alt113) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: caseClause
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseClause2362);
        	        	        caseClause215=caseClause(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, caseClause215.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : statementList, caseClause, e1
        	         * token labels      : 
        	         * rule labels       : retval, e1
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 309:98: -> ^( CASE $e1 ( statementList )? ( caseClause )? )
        	        	{
        	        	    // .//Emerson.g:309:101: ^( CASE $e1 ( statementList )? ( caseClause )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        // .//Emerson.g:309:113: ( statementList )?
        	        	        {
        	        	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

        	        	        	}
        	        	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

        	        	        }
        	        	        // .//Emerson.g:309:128: ( caseClause )?
        	        	        {
        	        	        	if ( (stream_caseClause != NULL && stream_caseClause->hasNext(stream_caseClause))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_caseClause == NULL ? NULL : stream_caseClause->nextTree(stream_caseClause));

        	        	        	}
        	        	        	if ( stream_caseClause != NULL) stream_caseClause->reset(stream_caseClause);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseEx; /* Prevent compiler warnings */
    rulecaseClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_161 != NULL) stream_161->free(stream_161);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_162 != NULL) stream_162->free(stream_162);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
        if (stream_caseClause != NULL) stream_caseClause->free(stream_caseClause);
        if (stream_ternaryExpression != NULL) stream_ternaryExpression->free(stream_ternaryExpression);
        if (stream_defaultClause != NULL) stream_defaultClause->free(stream_defaultClause);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(34, caseClause_StartIndex); }
    return retval;
}
/* $ANTLR end caseClause */

/** 
 * $ANTLR start defaultClause
 * .//Emerson.g:312:1: defaultClause : 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )? -> ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? ) ;
 */
static EmersonParser_defaultClause_return
defaultClause(pEmersonParser ctx)
{   
    EmersonParser_defaultClause_return retval;
    ANTLR3_UINT32 defaultClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal216;
    pANTLR3_COMMON_TOKEN    LTERM217;
    pANTLR3_COMMON_TOKEN    char_literal218;
    pANTLR3_COMMON_TOKEN    LTERM219;
    pANTLR3_COMMON_TOKEN    LTERM221;
    EmersonParser_statementList_return statementList220;
    #undef	RETURN_TYPE_statementList220
    #define	RETURN_TYPE_statementList220 EmersonParser_statementList_return

    EmersonParser_caseClauseSeenDefault_return caseClauseSeenDefault222;
    #undef	RETURN_TYPE_caseClauseSeenDefault222
    #define	RETURN_TYPE_caseClauseSeenDefault222 EmersonParser_caseClauseSeenDefault_return

    pANTLR3_BASE_TREE string_literal216_tree;
    pANTLR3_BASE_TREE LTERM217_tree;
    pANTLR3_BASE_TREE char_literal218_tree;
    pANTLR3_BASE_TREE LTERM219_tree;
    pANTLR3_BASE_TREE LTERM221_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_162;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_163;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClauseSeenDefault;
    /* Initialize rule variables
     */
    defaultClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(35)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal216       = NULL;
    LTERM217       = NULL;
    char_literal218       = NULL;
    LTERM219       = NULL;
    LTERM221       = NULL;
    statementList220.tree = NULL;

    caseClauseSeenDefault222.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal216_tree   = NULL;
    LTERM217_tree   = NULL;
    char_literal218_tree   = NULL;
    LTERM219_tree   = NULL;
    LTERM221_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_162   = NULL;
    #define CREATE_stream_162  if (stream_162 == NULL) {stream_162 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 162"); } 
    stream_163   = NULL;
    #define CREATE_stream_163  if (stream_163 == NULL) {stream_163 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 163"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }
    stream_caseClauseSeenDefault   = NULL;
    #define CREATE_stream_caseClauseSeenDefault  if (stream_caseClauseSeenDefault == NULL) {stream_caseClauseSeenDefault = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClauseSeenDefault"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:313:2: ( 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )? -> ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? ) )
        // .//Emerson.g:313:4: 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )?
        {
            string_literal216 = (pANTLR3_COMMON_TOKEN) MATCHT(163, &FOLLOW_163_in_defaultClause2391); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_163; stream_163->add(stream_163, string_literal216, NULL); }


            // .//Emerson.g:313:14: ( LTERM )*

            for (;;)
            {
                int alt115=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA115_0 = LA(1);
                    if ( (LA115_0 == LTERM) ) 
                    {
                        alt115=1;
                    }

                }
                switch (alt115) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM217 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2393); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM217, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop115;	/* break out of the loop */
            	    break;
                }
            }
            loop115: ; /* Jump out to here if this rule does not match */

            char_literal218 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_defaultClause2396); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, char_literal218, NULL); }


            // .//Emerson.g:313:25: ( LTERM )*

            for (;;)
            {
                int alt116=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA116_0 = LA(1);
                    if ( (LA116_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA116_2 = LA(2);
                            if ( (synpred129_Emerson(ctx)) ) 
                            {
                                alt116=1;
                            }

                        }
                    }

                }
                switch (alt116) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM219 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2398); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM219, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop116;	/* break out of the loop */
            	    break;
                }
            }
            loop116: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:313:32: ( statementList )?
            {
                int alt117=2;
                alt117 = cdfa117.predict(ctx, RECOGNIZER, ISTREAM, &cdfa117);
                if  (HASEXCEPTION())
                {
                    goto ruledefaultClauseEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt117) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_defaultClause2401);
            	        statementList220=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList220.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:313:47: ( LTERM )*

            for (;;)
            {
                int alt118=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA118_0 = LA(1);
                    if ( (LA118_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA118_2 = LA(2);
                            if ( (synpred131_Emerson(ctx)) ) 
                            {
                                alt118=1;
                            }

                        }
                    }

                }
                switch (alt118) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM221 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2404); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM221, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop118;	/* break out of the loop */
            	    break;
                }
            }
            loop118: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:313:54: ( caseClauseSeenDefault )?
            {
                int alt119=2;
                {
                    int LA119_0 = LA(1);
                    if ( (LA119_0 == 161) ) 
                    {
                        alt119=1;
                    }
                }
                switch (alt119) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: caseClauseSeenDefault
            	    {
            	        FOLLOWPUSH(FOLLOW_caseClauseSeenDefault_in_defaultClause2407);
            	        caseClauseSeenDefault222=caseClauseSeenDefault(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClauseSeenDefault; stream_caseClauseSeenDefault->add(stream_caseClauseSeenDefault, caseClauseSeenDefault222.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : caseClauseSeenDefault, statementList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 313:77: -> ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? )
            	{
            	    // .//Emerson.g:313:80: ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DEFAULT, (pANTLR3_UINT8)"DEFAULT"), root_1));

            	        // .//Emerson.g:313:90: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }
            	        // .//Emerson.g:313:105: ( caseClauseSeenDefault )?
            	        {
            	        	if ( (stream_caseClauseSeenDefault != NULL && stream_caseClauseSeenDefault->hasNext(stream_caseClauseSeenDefault))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_caseClauseSeenDefault == NULL ? NULL : stream_caseClauseSeenDefault->nextTree(stream_caseClauseSeenDefault));

            	        	}
            	        	if ( stream_caseClauseSeenDefault != NULL) stream_caseClauseSeenDefault->reset(stream_caseClauseSeenDefault);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledefaultClauseEx; /* Prevent compiler warnings */
    ruledefaultClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_162 != NULL) stream_162->free(stream_162);
        if (stream_163 != NULL) stream_163->free(stream_163);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
        if (stream_caseClauseSeenDefault != NULL) stream_caseClauseSeenDefault->free(stream_caseClauseSeenDefault);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(35, defaultClause_StartIndex); }
    return retval;
}
/* $ANTLR end defaultClause */

/** 
 * $ANTLR start caseClauseSeenDefault
 * .//Emerson.g:317:1: caseClauseSeenDefault : 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )? -> ^( CASE $e1 ( statementList )? ( caseClauseSeenDefault )? ) ;
 */
static EmersonParser_caseClauseSeenDefault_return
caseClauseSeenDefault(pEmersonParser ctx)
{   
    EmersonParser_caseClauseSeenDefault_return retval;
    ANTLR3_UINT32 caseClauseSeenDefault_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal223;
    pANTLR3_COMMON_TOKEN    LTERM224;
    pANTLR3_COMMON_TOKEN    LTERM225;
    pANTLR3_COMMON_TOKEN    char_literal226;
    pANTLR3_COMMON_TOKEN    LTERM227;
    pANTLR3_COMMON_TOKEN    LTERM229;
    EmersonParser_ternaryExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_ternaryExpression_return

    EmersonParser_statementList_return statementList228;
    #undef	RETURN_TYPE_statementList228
    #define	RETURN_TYPE_statementList228 EmersonParser_statementList_return

    EmersonParser_caseClauseSeenDefault_return caseClauseSeenDefault230;
    #undef	RETURN_TYPE_caseClauseSeenDefault230
    #define	RETURN_TYPE_caseClauseSeenDefault230 EmersonParser_caseClauseSeenDefault_return

    pANTLR3_BASE_TREE string_literal223_tree;
    pANTLR3_BASE_TREE LTERM224_tree;
    pANTLR3_BASE_TREE LTERM225_tree;
    pANTLR3_BASE_TREE char_literal226_tree;
    pANTLR3_BASE_TREE LTERM227_tree;
    pANTLR3_BASE_TREE LTERM229_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_161;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_162;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClauseSeenDefault;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ternaryExpression;
    /* Initialize rule variables
     */
    caseClauseSeenDefault_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(36)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal223       = NULL;
    LTERM224       = NULL;
    LTERM225       = NULL;
    char_literal226       = NULL;
    LTERM227       = NULL;
    LTERM229       = NULL;
    e1.tree = NULL;

    statementList228.tree = NULL;

    caseClauseSeenDefault230.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal223_tree   = NULL;
    LTERM224_tree   = NULL;
    LTERM225_tree   = NULL;
    char_literal226_tree   = NULL;
    LTERM227_tree   = NULL;
    LTERM229_tree   = NULL;

    stream_161   = NULL;
    #define CREATE_stream_161  if (stream_161 == NULL) {stream_161 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 161"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_162   = NULL;
    #define CREATE_stream_162  if (stream_162 == NULL) {stream_162 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 162"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }
    stream_caseClauseSeenDefault   = NULL;
    #define CREATE_stream_caseClauseSeenDefault  if (stream_caseClauseSeenDefault == NULL) {stream_caseClauseSeenDefault = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClauseSeenDefault"); }
    stream_ternaryExpression   = NULL;
    #define CREATE_stream_ternaryExpression  if (stream_ternaryExpression == NULL) {stream_ternaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ternaryExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:318:9: ( 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )? -> ^( CASE $e1 ( statementList )? ( caseClauseSeenDefault )? ) )
        // .//Emerson.g:318:11: 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )?
        {
            string_literal223 = (pANTLR3_COMMON_TOKEN) MATCHT(161, &FOLLOW_161_in_caseClauseSeenDefault2447); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_161; stream_161->add(stream_161, string_literal223, NULL); }


            // .//Emerson.g:318:18: ( LTERM )*

            for (;;)
            {
                int alt120=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA120_0 = LA(1);
                    if ( (LA120_0 == LTERM) ) 
                    {
                        alt120=1;
                    }

                }
                switch (alt120) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM224 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClauseSeenDefault2449); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM224, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop120;	/* break out of the loop */
            	    break;
                }
            }
            loop120: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_ternaryExpression_in_caseClauseSeenDefault2454);
            e1=ternaryExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpression; stream_ternaryExpression->add(stream_ternaryExpression, e1.tree, NULL); }

            // .//Emerson.g:318:46: ( LTERM )*

            for (;;)
            {
                int alt121=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA121_0 = LA(1);
                    if ( (LA121_0 == LTERM) ) 
                    {
                        alt121=1;
                    }

                }
                switch (alt121) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM225 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClauseSeenDefault2456); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM225, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop121;	/* break out of the loop */
            	    break;
                }
            }
            loop121: ; /* Jump out to here if this rule does not match */

            char_literal226 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_caseClauseSeenDefault2459); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, char_literal226, NULL); }


            // .//Emerson.g:318:57: ( LTERM )*

            for (;;)
            {
                int alt122=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA122_0 = LA(1);
                    if ( (LA122_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA122_2 = LA(2);
                            if ( (synpred135_Emerson(ctx)) ) 
                            {
                                alt122=1;
                            }

                        }
                    }

                }
                switch (alt122) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM227 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClauseSeenDefault2461); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM227, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop122;	/* break out of the loop */
            	    break;
                }
            }
            loop122: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:318:64: ( statementList )?
            {
                int alt123=2;
                alt123 = cdfa123.predict(ctx, RECOGNIZER, ISTREAM, &cdfa123);
                if  (HASEXCEPTION())
                {
                    goto rulecaseClauseSeenDefaultEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt123) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_caseClauseSeenDefault2464);
            	        statementList228=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList228.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:318:79: ( LTERM )*

            for (;;)
            {
                int alt124=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA124_0 = LA(1);
                    if ( (LA124_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA124_2 = LA(2);
                            if ( (synpred137_Emerson(ctx)) ) 
                            {
                                alt124=1;
                            }

                        }
                    }

                }
                switch (alt124) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM229 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClauseSeenDefault2467); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM229, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop124;	/* break out of the loop */
            	    break;
                }
            }
            loop124: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:318:86: ( caseClauseSeenDefault )?
            {
                int alt125=2;
                {
                    int LA125_0 = LA(1);
                    if ( (LA125_0 == 161) ) 
                    {
                        alt125=1;
                    }
                }
                switch (alt125) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: caseClauseSeenDefault
            	    {
            	        FOLLOWPUSH(FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault2470);
            	        caseClauseSeenDefault230=caseClauseSeenDefault(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClauseSeenDefault; stream_caseClauseSeenDefault->add(stream_caseClauseSeenDefault, caseClauseSeenDefault230.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : e1, statementList, caseClauseSeenDefault
             * token labels      : 
             * rule labels       : retval, e1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 318:109: -> ^( CASE $e1 ( statementList )? ( caseClauseSeenDefault )? )
            	{
            	    // .//Emerson.g:318:112: ^( CASE $e1 ( statementList )? ( caseClauseSeenDefault )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
            	        // .//Emerson.g:318:124: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }
            	        // .//Emerson.g:318:139: ( caseClauseSeenDefault )?
            	        {
            	        	if ( (stream_caseClauseSeenDefault != NULL && stream_caseClauseSeenDefault->hasNext(stream_caseClauseSeenDefault))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_caseClauseSeenDefault == NULL ? NULL : stream_caseClauseSeenDefault->nextTree(stream_caseClauseSeenDefault));

            	        	}
            	        	if ( stream_caseClauseSeenDefault != NULL) stream_caseClauseSeenDefault->reset(stream_caseClauseSeenDefault);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_e1 != NULL) stream_e1->free(stream_e1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseSeenDefaultEx; /* Prevent compiler warnings */
    rulecaseClauseSeenDefaultEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_161 != NULL) stream_161->free(stream_161);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_162 != NULL) stream_162->free(stream_162);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
        if (stream_caseClauseSeenDefault != NULL) stream_caseClauseSeenDefault->free(stream_caseClauseSeenDefault);
        if (stream_ternaryExpression != NULL) stream_ternaryExpression->free(stream_ternaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(36, caseClauseSeenDefault_StartIndex); }
    return retval;
}
/* $ANTLR end caseClauseSeenDefault */

/** 
 * $ANTLR start throwStatement
 * .//Emerson.g:324:1: throwStatement : 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) ;
 */
static EmersonParser_throwStatement_return
throwStatement(pEmersonParser ctx)
{   
    EmersonParser_throwStatement_return retval;
    ANTLR3_UINT32 throwStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal231;
    pANTLR3_COMMON_TOKEN    LTERM233;
    pANTLR3_COMMON_TOKEN    char_literal234;
    EmersonParser_expression_return expression232;
    #undef	RETURN_TYPE_expression232
    #define	RETURN_TYPE_expression232 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal231_tree;
    pANTLR3_BASE_TREE LTERM233_tree;
    pANTLR3_BASE_TREE char_literal234_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_164;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    throwStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(37)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal231       = NULL;
    LTERM233       = NULL;
    char_literal234       = NULL;
    expression232.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal231_tree   = NULL;
    LTERM233_tree   = NULL;
    char_literal234_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_164   = NULL;
    #define CREATE_stream_164  if (stream_164 == NULL) {stream_164 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 164"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:325:2: ( 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) )
        // .//Emerson.g:325:4: 'throw' expression ( LTERM | ';' )
        {
            string_literal231 = (pANTLR3_COMMON_TOKEN) MATCHT(164, &FOLLOW_164_in_throwStatement2532); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_164; stream_164->add(stream_164, string_literal231, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_throwStatement2534);
            expression232=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression232.tree, NULL); }

            // .//Emerson.g:325:23: ( LTERM | ';' )
            {
                int alt126=2;

                {
                    int LA126_0 = LA(1);
                    if ( (LA126_0 == LTERM) ) 
                    {
                        alt126=1;
                    }
                    else if ( (LA126_0 == 147) ) 
                    {
                        alt126=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 126;
                        EXCEPTION->state        = 0;


                        goto rulethrowStatementEx;
                    }
                }
                switch (alt126) 
                {
            	case 1:
            	    // .//Emerson.g:325:24: LTERM
            	    {
            	        LTERM233 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_throwStatement2537); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM233, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:325:32: ';'
            	    {
            	        char_literal234 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_throwStatement2541); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal234, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 325:37: -> ^( THROW expression )
            	{
            	    // .//Emerson.g:325:40: ^( THROW expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, THROW, (pANTLR3_UINT8)"THROW"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulethrowStatementEx; /* Prevent compiler warnings */
    rulethrowStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_164 != NULL) stream_164->free(stream_164);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(37, throwStatement_StartIndex); }
    return retval;
}
/* $ANTLR end throwStatement */

/** 
 * $ANTLR start tryStatement
 * .//Emerson.g:329:1: tryStatement : 'try' ( LTERM )* statementBlock ( LTERM )* catchFinallyBlock -> ^( TRY statementBlock catchFinallyBlock ) ;
 */
static EmersonParser_tryStatement_return
tryStatement(pEmersonParser ctx)
{   
    EmersonParser_tryStatement_return retval;
    ANTLR3_UINT32 tryStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal235;
    pANTLR3_COMMON_TOKEN    LTERM236;
    pANTLR3_COMMON_TOKEN    LTERM238;
    EmersonParser_statementBlock_return statementBlock237;
    #undef	RETURN_TYPE_statementBlock237
    #define	RETURN_TYPE_statementBlock237 EmersonParser_statementBlock_return

    EmersonParser_catchFinallyBlock_return catchFinallyBlock239;
    #undef	RETURN_TYPE_catchFinallyBlock239
    #define	RETURN_TYPE_catchFinallyBlock239 EmersonParser_catchFinallyBlock_return

    pANTLR3_BASE_TREE string_literal235_tree;
    pANTLR3_BASE_TREE LTERM236_tree;
    pANTLR3_BASE_TREE LTERM238_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_165;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_catchFinallyBlock;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    tryStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(38)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal235       = NULL;
    LTERM236       = NULL;
    LTERM238       = NULL;
    statementBlock237.tree = NULL;

    catchFinallyBlock239.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal235_tree   = NULL;
    LTERM236_tree   = NULL;
    LTERM238_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_165   = NULL;
    #define CREATE_stream_165  if (stream_165 == NULL) {stream_165 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 165"); } 
    stream_catchFinallyBlock   = NULL;
    #define CREATE_stream_catchFinallyBlock  if (stream_catchFinallyBlock == NULL) {stream_catchFinallyBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule catchFinallyBlock"); }
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:330:9: ( 'try' ( LTERM )* statementBlock ( LTERM )* catchFinallyBlock -> ^( TRY statementBlock catchFinallyBlock ) )
        // .//Emerson.g:330:11: 'try' ( LTERM )* statementBlock ( LTERM )* catchFinallyBlock
        {
            string_literal235 = (pANTLR3_COMMON_TOKEN) MATCHT(165, &FOLLOW_165_in_tryStatement2569); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_165; stream_165->add(stream_165, string_literal235, NULL); }


            // .//Emerson.g:330:17: ( LTERM )*

            for (;;)
            {
                int alt127=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA127_0 = LA(1);
                    if ( (LA127_0 == LTERM) ) 
                    {
                        alt127=1;
                    }

                }
                switch (alt127) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM236 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2571); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM236, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop127;	/* break out of the loop */
            	    break;
                }
            }
            loop127: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_tryStatement2574);
            statementBlock237=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock237.tree, NULL); }

            // .//Emerson.g:330:39: ( LTERM )*

            for (;;)
            {
                int alt128=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA128_0 = LA(1);
                    if ( (LA128_0 == LTERM) ) 
                    {
                        alt128=1;
                    }

                }
                switch (alt128) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM238 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2576); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM238, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop128;	/* break out of the loop */
            	    break;
                }
            }
            loop128: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_catchFinallyBlock_in_tryStatement2579);
            catchFinallyBlock239=catchFinallyBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_catchFinallyBlock; stream_catchFinallyBlock->add(stream_catchFinallyBlock, catchFinallyBlock239.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock, catchFinallyBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 330:64: -> ^( TRY statementBlock catchFinallyBlock )
            	{
            	    // .//Emerson.g:330:67: ^( TRY statementBlock catchFinallyBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRY, (pANTLR3_UINT8)"TRY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_catchFinallyBlock == NULL ? NULL : stream_catchFinallyBlock->nextTree(stream_catchFinallyBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletryStatementEx; /* Prevent compiler warnings */
    ruletryStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_165 != NULL) stream_165->free(stream_165);
        if (stream_catchFinallyBlock != NULL) stream_catchFinallyBlock->free(stream_catchFinallyBlock);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(38, tryStatement_StartIndex); }
    return retval;
}
/* $ANTLR end tryStatement */

/** 
 * $ANTLR start catchFinallyBlock
 * .//Emerson.g:333:1: catchFinallyBlock : ( catchBlock ( LTERM )* ( finallyBlock )? -> catchBlock ( finallyBlock )? | finallyBlock -> finallyBlock );
 */
static EmersonParser_catchFinallyBlock_return
catchFinallyBlock(pEmersonParser ctx)
{   
    EmersonParser_catchFinallyBlock_return retval;
    ANTLR3_UINT32 catchFinallyBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM241;
    EmersonParser_catchBlock_return catchBlock240;
    #undef	RETURN_TYPE_catchBlock240
    #define	RETURN_TYPE_catchBlock240 EmersonParser_catchBlock_return

    EmersonParser_finallyBlock_return finallyBlock242;
    #undef	RETURN_TYPE_finallyBlock242
    #define	RETURN_TYPE_finallyBlock242 EmersonParser_finallyBlock_return

    EmersonParser_finallyBlock_return finallyBlock243;
    #undef	RETURN_TYPE_finallyBlock243
    #define	RETURN_TYPE_finallyBlock243 EmersonParser_finallyBlock_return

    pANTLR3_BASE_TREE LTERM241_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_catchBlock;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_finallyBlock;
    /* Initialize rule variables
     */
    catchFinallyBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(39)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM241       = NULL;
    catchBlock240.tree = NULL;

    finallyBlock242.tree = NULL;

    finallyBlock243.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM241_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_catchBlock   = NULL;
    #define CREATE_stream_catchBlock  if (stream_catchBlock == NULL) {stream_catchBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule catchBlock"); }
    stream_finallyBlock   = NULL;
    #define CREATE_stream_finallyBlock  if (stream_finallyBlock == NULL) {stream_finallyBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule finallyBlock"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:334:9: ( catchBlock ( LTERM )* ( finallyBlock )? -> catchBlock ( finallyBlock )? | finallyBlock -> finallyBlock )
            
            ANTLR3_UINT32 alt131;

            alt131=2;


            {
                int LA131_0 = LA(1);
                if ( (LA131_0 == 166) ) 
                {
                    alt131=1;
                }
                else if ( (LA131_0 == 167) ) 
                {
                    alt131=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 131;
                    EXCEPTION->state        = 0;


                    goto rulecatchFinallyBlockEx;
                }
            }
            switch (alt131) 
            {
        	case 1:
        	    // .//Emerson.g:334:11: catchBlock ( LTERM )* ( finallyBlock )?
        	    {
        	        FOLLOWPUSH(FOLLOW_catchBlock_in_catchFinallyBlock2614);
        	        catchBlock240=catchBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_catchBlock; stream_catchBlock->add(stream_catchBlock, catchBlock240.tree, NULL); }

        	        // .//Emerson.g:334:22: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt129=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA129_0 = LA(1);
        	                if ( (LA129_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA129_2 = LA(2);
        	                        if ( (synpred142_Emerson(ctx)) ) 
        	                        {
        	                            alt129=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt129) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM241 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchFinallyBlock2616); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecatchFinallyBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM241, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop129;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop129: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:334:29: ( finallyBlock )?
        	        {
        	            int alt130=2;
        	            {
        	                int LA130_0 = LA(1);
        	                if ( (LA130_0 == 167) ) 
        	                {
        	                    alt130=1;
        	                }
        	            }
        	            switch (alt130) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: finallyBlock
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock2619);
        	        	        finallyBlock242=finallyBlock(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecatchFinallyBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyBlock; stream_finallyBlock->add(stream_finallyBlock, finallyBlock242.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : finallyBlock, catchBlock
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 334:44: -> catchBlock ( finallyBlock )?
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_catchBlock == NULL ? NULL : stream_catchBlock->nextTree(stream_catchBlock));
        	        	    // .//Emerson.g:334:58: ( finallyBlock )?
        	        	    {
        	        	    	if ( (stream_finallyBlock != NULL && stream_finallyBlock->hasNext(stream_finallyBlock))  )
        	        	    	{
        	        	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_finallyBlock == NULL ? NULL : stream_finallyBlock->nextTree(stream_finallyBlock));

        	        	    	}
        	        	    	if ( stream_finallyBlock != NULL) stream_finallyBlock->reset(stream_finallyBlock);

        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:335:11: finallyBlock
        	    {
        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock2640);
        	        finallyBlock243=finallyBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyBlock; stream_finallyBlock->add(stream_finallyBlock, finallyBlock243.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : finallyBlock
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 335:44: -> finallyBlock
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_finallyBlock == NULL ? NULL : stream_finallyBlock->nextTree(stream_finallyBlock));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchFinallyBlockEx; /* Prevent compiler warnings */
    rulecatchFinallyBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_catchBlock != NULL) stream_catchBlock->free(stream_catchBlock);
        if (stream_finallyBlock != NULL) stream_finallyBlock->free(stream_finallyBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(39, catchFinallyBlock_StartIndex); }
    return retval;
}
/* $ANTLR end catchFinallyBlock */

/** 
 * $ANTLR start catchBlock
 * .//Emerson.g:338:1: catchBlock : 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) ;
 */
static EmersonParser_catchBlock_return
catchBlock(pEmersonParser ctx)
{   
    EmersonParser_catchBlock_return retval;
    ANTLR3_UINT32 catchBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal244;
    pANTLR3_COMMON_TOKEN    LTERM245;
    pANTLR3_COMMON_TOKEN    char_literal246;
    pANTLR3_COMMON_TOKEN    LTERM247;
    pANTLR3_COMMON_TOKEN    Identifier248;
    pANTLR3_COMMON_TOKEN    LTERM249;
    pANTLR3_COMMON_TOKEN    char_literal250;
    pANTLR3_COMMON_TOKEN    LTERM251;
    EmersonParser_statementBlock_return statementBlock252;
    #undef	RETURN_TYPE_statementBlock252
    #define	RETURN_TYPE_statementBlock252 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal244_tree;
    pANTLR3_BASE_TREE LTERM245_tree;
    pANTLR3_BASE_TREE char_literal246_tree;
    pANTLR3_BASE_TREE LTERM247_tree;
    pANTLR3_BASE_TREE Identifier248_tree;
    pANTLR3_BASE_TREE LTERM249_tree;
    pANTLR3_BASE_TREE char_literal250_tree;
    pANTLR3_BASE_TREE LTERM251_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_166;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    catchBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(40)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal244       = NULL;
    LTERM245       = NULL;
    char_literal246       = NULL;
    LTERM247       = NULL;
    Identifier248       = NULL;
    LTERM249       = NULL;
    char_literal250       = NULL;
    LTERM251       = NULL;
    statementBlock252.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal244_tree   = NULL;
    LTERM245_tree   = NULL;
    char_literal246_tree   = NULL;
    LTERM247_tree   = NULL;
    Identifier248_tree   = NULL;
    LTERM249_tree   = NULL;
    char_literal250_tree   = NULL;
    LTERM251_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_166   = NULL;
    #define CREATE_stream_166  if (stream_166 == NULL) {stream_166 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 166"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:339:9: ( 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) )
        // .//Emerson.g:339:11: 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock
        {
            string_literal244 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_catchBlock2689); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, string_literal244, NULL); }


            // .//Emerson.g:339:19: ( LTERM )*

            for (;;)
            {
                int alt132=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA132_0 = LA(1);
                    if ( (LA132_0 == LTERM) ) 
                    {
                        alt132=1;
                    }

                }
                switch (alt132) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM245 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2691); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM245, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop132;	/* break out of the loop */
            	    break;
                }
            }
            loop132: ; /* Jump out to here if this rule does not match */

            char_literal246 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_catchBlock2694); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal246, NULL); }


            // .//Emerson.g:339:30: ( LTERM )*

            for (;;)
            {
                int alt133=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA133_0 = LA(1);
                    if ( (LA133_0 == LTERM) ) 
                    {
                        alt133=1;
                    }

                }
                switch (alt133) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM247 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2696); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM247, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop133;	/* break out of the loop */
            	    break;
                }
            }
            loop133: ; /* Jump out to here if this rule does not match */

            Identifier248 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_catchBlock2699); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier248, NULL); }


            // .//Emerson.g:339:48: ( LTERM )*

            for (;;)
            {
                int alt134=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA134_0 = LA(1);
                    if ( (LA134_0 == LTERM) ) 
                    {
                        alt134=1;
                    }

                }
                switch (alt134) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM249 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2701); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM249, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop134;	/* break out of the loop */
            	    break;
                }
            }
            loop134: ; /* Jump out to here if this rule does not match */

            char_literal250 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_catchBlock2704); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal250, NULL); }


            // .//Emerson.g:339:59: ( LTERM )*

            for (;;)
            {
                int alt135=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA135_0 = LA(1);
                    if ( (LA135_0 == LTERM) ) 
                    {
                        alt135=1;
                    }

                }
                switch (alt135) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM251 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2706); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM251, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop135;	/* break out of the loop */
            	    break;
                }
            }
            loop135: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_catchBlock2709);
            statementBlock252=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock252.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 339:81: -> ^( CATCH Identifier statementBlock )
            	{
            	    // .//Emerson.g:339:84: ^( CATCH Identifier statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CATCH, (pANTLR3_UINT8)"CATCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchBlockEx; /* Prevent compiler warnings */
    rulecatchBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_166 != NULL) stream_166->free(stream_166);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(40, catchBlock_StartIndex); }
    return retval;
}
/* $ANTLR end catchBlock */

/** 
 * $ANTLR start finallyBlock
 * .//Emerson.g:343:1: finallyBlock : 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) ;
 */
static EmersonParser_finallyBlock_return
finallyBlock(pEmersonParser ctx)
{   
    EmersonParser_finallyBlock_return retval;
    ANTLR3_UINT32 finallyBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal253;
    pANTLR3_COMMON_TOKEN    LTERM254;
    EmersonParser_statementBlock_return statementBlock255;
    #undef	RETURN_TYPE_statementBlock255
    #define	RETURN_TYPE_statementBlock255 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal253_tree;
    pANTLR3_BASE_TREE LTERM254_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_167;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    finallyBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(41)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal253       = NULL;
    LTERM254       = NULL;
    statementBlock255.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal253_tree   = NULL;
    LTERM254_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_167   = NULL;
    #define CREATE_stream_167  if (stream_167 == NULL) {stream_167 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 167"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:344:9: ( 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) )
        // .//Emerson.g:344:11: 'finally' ( LTERM )* statementBlock
        {
            string_literal253 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_finallyBlock2754); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, string_literal253, NULL); }


            // .//Emerson.g:344:21: ( LTERM )*

            for (;;)
            {
                int alt136=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA136_0 = LA(1);
                    if ( (LA136_0 == LTERM) ) 
                    {
                        alt136=1;
                    }

                }
                switch (alt136) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM254 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_finallyBlock2756); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefinallyBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM254, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop136;	/* break out of the loop */
            	    break;
                }
            }
            loop136: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyBlock2760);
            statementBlock255=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock255.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 344:45: -> ^( FINALLY statementBlock )
            	{
            	    // .//Emerson.g:344:48: ^( FINALLY statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FINALLY, (pANTLR3_UINT8)"FINALLY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyBlockEx; /* Prevent compiler warnings */
    rulefinallyBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_167 != NULL) stream_167->free(stream_167);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(41, finallyBlock_StartIndex); }
    return retval;
}
/* $ANTLR end finallyBlock */

/** 
 * $ANTLR start memAndCallExpression
 * .//Emerson.g:349:1: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );
 */
static EmersonParser_memAndCallExpression_return
memAndCallExpression(pEmersonParser ctx)
{   
    EmersonParser_memAndCallExpression_return retval;
    ANTLR3_UINT32 memAndCallExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_callExpression_return callExpression256;
    #undef	RETURN_TYPE_callExpression256
    #define	RETURN_TYPE_callExpression256 EmersonParser_callExpression_return

    EmersonParser_memberExpression_return memberExpression257;
    #undef	RETURN_TYPE_memberExpression257
    #define	RETURN_TYPE_memberExpression257 EmersonParser_memberExpression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_callExpression;
    /* Initialize rule variables
     */
    memAndCallExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(42)) )
    {
    	retval.start = 0;

        return retval; 
    }
    callExpression256.tree = NULL;

    memberExpression257.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_callExpression   = NULL;
    #define CREATE_stream_callExpression  if (stream_callExpression == NULL) {stream_callExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule callExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:350:9: ( callExpression -> callExpression | memberExpression -> memberExpression )
            
            ANTLR3_UINT32 alt137;

            alt137=2;

            alt137 = cdfa137.predict(ctx, RECOGNIZER, ISTREAM, &cdfa137);
            if  (HASEXCEPTION())
            {
                goto rulememAndCallExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt137) 
            {
        	case 1:
        	    // .//Emerson.g:350:11: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_memAndCallExpression2804);
        	        callExpression256=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_callExpression; stream_callExpression->add(stream_callExpression, callExpression256.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : callExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 350:26: -> callExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_callExpression == NULL ? NULL : stream_callExpression->nextTree(stream_callExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:351:11: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memAndCallExpression2820);
        	        memberExpression257=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression257.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : memberExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 351:28: -> memberExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememAndCallExpressionEx; /* Prevent compiler warnings */
    rulememAndCallExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_callExpression != NULL) stream_callExpression->free(stream_callExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(42, memAndCallExpression_StartIndex); }
    return retval;
}
/* $ANTLR end memAndCallExpression */

/** 
 * $ANTLR start expression
 * .//Emerson.g:357:1: expression : assignmentExpression ( ',' ( LTERM )* assignmentExpression )* -> ^( EXPR assignmentExpression ( assignmentExpression )* ) ;
 */
static EmersonParser_expression_return
expression(pEmersonParser ctx)
{   
    EmersonParser_expression_return retval;
    ANTLR3_UINT32 expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal259;
    pANTLR3_COMMON_TOKEN    LTERM260;
    EmersonParser_assignmentExpression_return assignmentExpression258;
    #undef	RETURN_TYPE_assignmentExpression258
    #define	RETURN_TYPE_assignmentExpression258 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression261;
    #undef	RETURN_TYPE_assignmentExpression261
    #define	RETURN_TYPE_assignmentExpression261 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal259_tree;
    pANTLR3_BASE_TREE LTERM260_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(43)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal259       = NULL;
    LTERM260       = NULL;
    assignmentExpression258.tree = NULL;

    assignmentExpression261.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal259_tree   = NULL;
    LTERM260_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:358:9: ( assignmentExpression ( ',' ( LTERM )* assignmentExpression )* -> ^( EXPR assignmentExpression ( assignmentExpression )* ) )
        // .//Emerson.g:358:11: assignmentExpression ( ',' ( LTERM )* assignmentExpression )*
        {
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression2860);
            assignmentExpression258=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression258.tree, NULL); }

            // .//Emerson.g:358:32: ( ',' ( LTERM )* assignmentExpression )*

            for (;;)
            {
                int alt139=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA139_0 = LA(1);
                    if ( (LA139_0 == 144) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA139_2 = LA(2);
                            if ( (synpred152_Emerson(ctx)) ) 
                            {
                                alt139=1;
                            }

                        }
                    }

                }
                switch (alt139) 
                {
            	case 1:
            	    // .//Emerson.g:358:34: ',' ( LTERM )* assignmentExpression
            	    {
            	        char_literal259 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_expression2864); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal259, NULL); }


            	        // .//Emerson.g:358:38: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt138=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA138_0 = LA(1);
            	                if ( (LA138_0 == LTERM) ) 
            	                {
            	                    alt138=1;
            	                }

            	            }
            	            switch (alt138) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM260 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expression2866); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM260, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop138;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop138: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression2869);
            	        assignmentExpression261=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression261.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop139;	/* break out of the loop */
            	    break;
                }
            }
            loop139: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : assignmentExpression, assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 358:68: -> ^( EXPR assignmentExpression ( assignmentExpression )* )
            	{
            	    // .//Emerson.g:358:71: ^( EXPR assignmentExpression ( assignmentExpression )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR, (pANTLR3_UINT8)"EXPR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));
            	        // .//Emerson.g:358:99: ( assignmentExpression )*
            	        {
            	        	while ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        	}
            	        	if (stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(43, expression_StartIndex); }
    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start expressionNoIn
 * .//Emerson.g:361:1: expressionNoIn : assignmentExpressionNoIn ( ',' ( LTERM )* assignmentExpressionNoIn )* -> ^( EXPR_NO_IN assignmentExpressionNoIn ( assignmentExpressionNoIn )* ) ;
 */
static EmersonParser_expressionNoIn_return
expressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_expressionNoIn_return retval;
    ANTLR3_UINT32 expressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal263;
    pANTLR3_COMMON_TOKEN    LTERM264;
    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn262;
    #undef	RETURN_TYPE_assignmentExpressionNoIn262
    #define	RETURN_TYPE_assignmentExpressionNoIn262 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn265;
    #undef	RETURN_TYPE_assignmentExpressionNoIn265
    #define	RETURN_TYPE_assignmentExpressionNoIn265 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE char_literal263_tree;
    pANTLR3_BASE_TREE LTERM264_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    /* Initialize rule variables
     */
    expressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(44)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal263       = NULL;
    LTERM264       = NULL;
    assignmentExpressionNoIn262.tree = NULL;

    assignmentExpressionNoIn265.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal263_tree   = NULL;
    LTERM264_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:362:9: ( assignmentExpressionNoIn ( ',' ( LTERM )* assignmentExpressionNoIn )* -> ^( EXPR_NO_IN assignmentExpressionNoIn ( assignmentExpressionNoIn )* ) )
        // .//Emerson.g:362:11: assignmentExpressionNoIn ( ',' ( LTERM )* assignmentExpressionNoIn )*
        {
            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2907);
            assignmentExpressionNoIn262=assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn262.tree, NULL); }

            // .//Emerson.g:362:36: ( ',' ( LTERM )* assignmentExpressionNoIn )*

            for (;;)
            {
                int alt141=2;
                alt141 = cdfa141.predict(ctx, RECOGNIZER, ISTREAM, &cdfa141);
                if  (HASEXCEPTION())
                {
                    goto ruleexpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt141) 
                {
            	case 1:
            	    // .//Emerson.g:362:38: ',' ( LTERM )* assignmentExpressionNoIn
            	    {
            	        char_literal263 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_expressionNoIn2911); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal263, NULL); }


            	        // .//Emerson.g:362:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt140=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA140_0 = LA(1);
            	                if ( (LA140_0 == LTERM) ) 
            	                {
            	                    alt140=1;
            	                }

            	            }
            	            switch (alt140) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM264 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionNoIn2913); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM264, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop140;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop140: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2916);
            	        assignmentExpressionNoIn265=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn265.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop141;	/* break out of the loop */
            	    break;
                }
            }
            loop141: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : assignmentExpressionNoIn, assignmentExpressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 362:76: -> ^( EXPR_NO_IN assignmentExpressionNoIn ( assignmentExpressionNoIn )* )
            	{
            	    // .//Emerson.g:362:79: ^( EXPR_NO_IN assignmentExpressionNoIn ( assignmentExpressionNoIn )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR_NO_IN, (pANTLR3_UINT8)"EXPR_NO_IN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));
            	        // .//Emerson.g:362:117: ( assignmentExpressionNoIn )*
            	        {
            	        	while ( (stream_assignmentExpressionNoIn != NULL && stream_assignmentExpressionNoIn->hasNext(stream_assignmentExpressionNoIn))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

            	        	}
            	        	if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->reset(stream_assignmentExpressionNoIn);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionNoInEx; /* Prevent compiler warnings */
    ruleexpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(44, expressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end expressionNoIn */

/** 
 * $ANTLR start assignmentExpression
 * .//Emerson.g:366:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static EmersonParser_assignmentExpression_return
assignmentExpression(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpression_return retval;
    ANTLR3_UINT32 assignmentExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM268;
    pANTLR3_COMMON_TOKEN    LTERM270;
    EmersonParser_conditionalExpression_return conditionalExpression266;
    #undef	RETURN_TYPE_conditionalExpression266
    #define	RETURN_TYPE_conditionalExpression266 EmersonParser_conditionalExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression267;
    #undef	RETURN_TYPE_leftHandSideExpression267
    #define	RETURN_TYPE_leftHandSideExpression267 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator269;
    #undef	RETURN_TYPE_assignmentOperator269
    #define	RETURN_TYPE_assignmentOperator269 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpression_return assignmentExpression271;
    #undef	RETURN_TYPE_assignmentExpression271
    #define	RETURN_TYPE_assignmentExpression271 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM268_tree;
    pANTLR3_BASE_TREE LTERM270_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    assignmentExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(45)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM268       = NULL;
    LTERM270       = NULL;
    conditionalExpression266.tree = NULL;

    leftHandSideExpression267.tree = NULL;

    assignmentOperator269.tree = NULL;

    assignmentExpression271.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM268_tree   = NULL;
    LTERM270_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:367:9: ( conditionalExpression | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt144;

            alt144=2;

            alt144 = cdfa144.predict(ctx, RECOGNIZER, ISTREAM, &cdfa144);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt144) 
            {
        	case 1:
        	    // .//Emerson.g:367:11: conditionalExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpression2955);
        	        conditionalExpression266=conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, conditionalExpression266.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:368:11: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression2967);
        	        leftHandSideExpression267=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression267.tree, NULL); }

        	        // .//Emerson.g:368:34: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt142=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA142_0 = LA(1);
        	                if ( (LA142_0 == LTERM) ) 
        	                {
        	                    alt142=1;
        	                }

        	            }
        	            switch (alt142) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM268 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2969); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM268, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop142;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop142: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpression2972);
        	        assignmentOperator269=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator269.tree, NULL); }

        	        // .//Emerson.g:368:60: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt143=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA143_0 = LA(1);
        	                if ( (LA143_0 == LTERM) ) 
        	                {
        	                    alt143=1;
        	                }

        	            }
        	            switch (alt143) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM270 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2974); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM270, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop143;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop143: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpression2977);
        	        assignmentExpression271=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression271.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : assignmentOperator, leftHandSideExpression, assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 368:88: -> ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	{
        	        	    // .//Emerson.g:368:92: ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionEx; /* Prevent compiler warnings */
    ruleassignmentExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(45, assignmentExpression_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpression */

/** 
 * $ANTLR start assignmentExpressionNoIn
 * .//Emerson.g:371:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static EmersonParser_assignmentExpressionNoIn_return
assignmentExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpressionNoIn_return retval;
    ANTLR3_UINT32 assignmentExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM274;
    pANTLR3_COMMON_TOKEN    LTERM276;
    EmersonParser_conditionalExpressionNoIn_return conditionalExpressionNoIn272;
    #undef	RETURN_TYPE_conditionalExpressionNoIn272
    #define	RETURN_TYPE_conditionalExpressionNoIn272 EmersonParser_conditionalExpressionNoIn_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression273;
    #undef	RETURN_TYPE_leftHandSideExpression273
    #define	RETURN_TYPE_leftHandSideExpression273 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator275;
    #undef	RETURN_TYPE_assignmentOperator275
    #define	RETURN_TYPE_assignmentOperator275 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn277;
    #undef	RETURN_TYPE_assignmentExpressionNoIn277
    #define	RETURN_TYPE_assignmentExpressionNoIn277 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM274_tree;
    pANTLR3_BASE_TREE LTERM276_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    assignmentExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(46)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM274       = NULL;
    LTERM276       = NULL;
    conditionalExpressionNoIn272.tree = NULL;

    leftHandSideExpression273.tree = NULL;

    assignmentOperator275.tree = NULL;

    assignmentExpressionNoIn277.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM274_tree   = NULL;
    LTERM276_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:372:9: ( conditionalExpressionNoIn | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) )
            
            ANTLR3_UINT32 alt147;

            alt147=2;

            alt147 = cdfa147.predict(ctx, RECOGNIZER, ISTREAM, &cdfa147);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt147) 
            {
        	case 1:
        	    // .//Emerson.g:372:11: conditionalExpressionNoIn
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn3022);
        	        conditionalExpressionNoIn272=conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, conditionalExpressionNoIn272.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:373:11: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3034);
        	        leftHandSideExpression273=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression273.tree, NULL); }

        	        // .//Emerson.g:373:34: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt145=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA145_0 = LA(1);
        	                if ( (LA145_0 == LTERM) ) 
        	                {
        	                    alt145=1;
        	                }

        	            }
        	            switch (alt145) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM274 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn3036); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM274, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop145;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop145: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3039);
        	        assignmentOperator275=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator275.tree, NULL); }

        	        // .//Emerson.g:373:60: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt146=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA146_0 = LA(1);
        	                if ( (LA146_0 == LTERM) ) 
        	                {
        	                    alt146=1;
        	                }

        	            }
        	            switch (alt146) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM276 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn3041); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM276, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop146;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop146: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3044);
        	        assignmentExpressionNoIn277=assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn277.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpressionNoIn, assignmentOperator, leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 373:92: -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	{
        	        	    // .//Emerson.g:373:96: ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionNoInEx; /* Prevent compiler warnings */
    ruleassignmentExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(46, assignmentExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpressionNoIn */

/** 
 * $ANTLR start leftHandSideExpression
 * .//Emerson.g:378:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static EmersonParser_leftHandSideExpression_return
leftHandSideExpression(pEmersonParser ctx)
{   
    EmersonParser_leftHandSideExpression_return retval;
    ANTLR3_UINT32 leftHandSideExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_callExpression_return callExpression278;
    #undef	RETURN_TYPE_callExpression278
    #define	RETURN_TYPE_callExpression278 EmersonParser_callExpression_return

    EmersonParser_newExpression_return newExpression279;
    #undef	RETURN_TYPE_newExpression279
    #define	RETURN_TYPE_newExpression279 EmersonParser_newExpression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_callExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    leftHandSideExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(47)) )
    {
    	retval.start = 0;

        return retval; 
    }
    callExpression278.tree = NULL;

    newExpression279.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_callExpression   = NULL;
    #define CREATE_stream_callExpression  if (stream_callExpression == NULL) {stream_callExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule callExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:379:2: ( callExpression -> callExpression | newExpression -> newExpression )
            
            ANTLR3_UINT32 alt148;

            alt148=2;

            alt148 = cdfa148.predict(ctx, RECOGNIZER, ISTREAM, &cdfa148);
            if  (HASEXCEPTION())
            {
                goto ruleleftHandSideExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt148) 
            {
        	case 1:
        	    // .//Emerson.g:379:4: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_leftHandSideExpression3092);
        	        callExpression278=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_callExpression; stream_callExpression->add(stream_callExpression, callExpression278.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : callExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 379:19: -> callExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_callExpression == NULL ? NULL : stream_callExpression->nextTree(stream_callExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:380:4: newExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_newExpression_in_leftHandSideExpression3101);
        	        newExpression279=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression279.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 380:18: -> newExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleleftHandSideExpressionEx; /* Prevent compiler warnings */
    ruleleftHandSideExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_callExpression != NULL) stream_callExpression->free(stream_callExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(47, leftHandSideExpression_StartIndex); }
    return retval;
}
/* $ANTLR end leftHandSideExpression */

/** 
 * $ANTLR start newExpression
 * .//Emerson.g:383:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static EmersonParser_newExpression_return
newExpression(pEmersonParser ctx)
{   
    EmersonParser_newExpression_return retval;
    ANTLR3_UINT32 newExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal281;
    pANTLR3_COMMON_TOKEN    LTERM282;
    EmersonParser_memberExpression_return memberExpression280;
    #undef	RETURN_TYPE_memberExpression280
    #define	RETURN_TYPE_memberExpression280 EmersonParser_memberExpression_return

    EmersonParser_newExpression_return newExpression283;
    #undef	RETURN_TYPE_newExpression283
    #define	RETURN_TYPE_newExpression283 EmersonParser_newExpression_return

    pANTLR3_BASE_TREE string_literal281_tree;
    pANTLR3_BASE_TREE LTERM282_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_168;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    newExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(48)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal281       = NULL;
    LTERM282       = NULL;
    memberExpression280.tree = NULL;

    newExpression283.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal281_tree   = NULL;
    LTERM282_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_168   = NULL;
    #define CREATE_stream_168  if (stream_168 == NULL) {stream_168 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 168"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:384:2: ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) )
            
            ANTLR3_UINT32 alt150;

            alt150=2;

            alt150 = cdfa150.predict(ctx, RECOGNIZER, ISTREAM, &cdfa150);
            if  (HASEXCEPTION())
            {
                goto rulenewExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt150) 
            {
        	case 1:
        	    // .//Emerson.g:384:4: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_newExpression3117);
        	        memberExpression280=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression280.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : memberExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 384:21: -> memberExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:385:4: 'new' ( LTERM )* newExpression
        	    {
        	        string_literal281 = (pANTLR3_COMMON_TOKEN) MATCHT(168, &FOLLOW_168_in_newExpression3126); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_168; stream_168->add(stream_168, string_literal281, NULL); }


        	        // .//Emerson.g:385:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt149=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA149_0 = LA(1);
        	                if ( (LA149_0 == LTERM) ) 
        	                {
        	                    alt149=1;
        	                }

        	            }
        	            switch (alt149) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM282 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_newExpression3128); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenewExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM282, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop149;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop149: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_newExpression_in_newExpression3131);
        	        newExpression283=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression283.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 385:31: -> ^( NEW newExpression )
        	        	{
        	        	    // .//Emerson.g:385:34: ^( NEW newExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenewExpressionEx; /* Prevent compiler warnings */
    rulenewExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_168 != NULL) stream_168->free(stream_168);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(48, newExpression_StartIndex); }
    return retval;
}
/* $ANTLR end newExpression */

/** 
 * $ANTLR start indexSuffix1
 * .//Emerson.g:389:1: indexSuffix1 : '[' ( LTERM )* expression ( LTERM )* ']' -> expression ;
 */
static EmersonParser_indexSuffix1_return
indexSuffix1(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix1_return retval;
    ANTLR3_UINT32 indexSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal284;
    pANTLR3_COMMON_TOKEN    LTERM285;
    pANTLR3_COMMON_TOKEN    LTERM287;
    pANTLR3_COMMON_TOKEN    char_literal288;
    EmersonParser_expression_return expression286;
    #undef	RETURN_TYPE_expression286
    #define	RETURN_TYPE_expression286 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal284_tree;
    pANTLR3_BASE_TREE LTERM285_tree;
    pANTLR3_BASE_TREE LTERM287_tree;
    pANTLR3_BASE_TREE char_literal288_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_170;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_169;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(49)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal284       = NULL;
    LTERM285       = NULL;
    LTERM287       = NULL;
    char_literal288       = NULL;
    expression286.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal284_tree   = NULL;
    LTERM285_tree   = NULL;
    LTERM287_tree   = NULL;
    char_literal288_tree   = NULL;

    stream_170   = NULL;
    #define CREATE_stream_170  if (stream_170 == NULL) {stream_170 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 170"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_169   = NULL;
    #define CREATE_stream_169  if (stream_169 == NULL) {stream_169 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 169"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:390:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> expression )
        // .//Emerson.g:390:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal284 = (pANTLR3_COMMON_TOKEN) MATCHT(169, &FOLLOW_169_in_indexSuffix13153); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_169; stream_169->add(stream_169, char_literal284, NULL); }


            // .//Emerson.g:390:8: ( LTERM )*

            for (;;)
            {
                int alt151=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA151_0 = LA(1);
                    if ( (LA151_0 == LTERM) ) 
                    {
                        alt151=1;
                    }

                }
                switch (alt151) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM285 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix13155); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM285, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop151;	/* break out of the loop */
            	    break;
                }
            }
            loop151: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix13158);
            expression286=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression286.tree, NULL); }

            // .//Emerson.g:390:26: ( LTERM )*

            for (;;)
            {
                int alt152=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA152_0 = LA(1);
                    if ( (LA152_0 == LTERM) ) 
                    {
                        alt152=1;
                    }

                }
                switch (alt152) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM287 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix13160); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM287, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop152;	/* break out of the loop */
            	    break;
                }
            }
            loop152: ; /* Jump out to here if this rule does not match */

            char_literal288 = (pANTLR3_COMMON_TOKEN) MATCHT(170, &FOLLOW_170_in_indexSuffix13163); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_170; stream_170->add(stream_170, char_literal288, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 390:37: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffix1Ex; /* Prevent compiler warnings */
    ruleindexSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_170 != NULL) stream_170->free(stream_170);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_169 != NULL) stream_169->free(stream_169);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(49, indexSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix1 */

/** 
 * $ANTLR start propertyReferenceSuffix1
 * .//Emerson.g:394:1: propertyReferenceSuffix1 : '.' ( LTERM )* Identifier -> Identifier ;
 */
static EmersonParser_propertyReferenceSuffix1_return
propertyReferenceSuffix1(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix1_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal289;
    pANTLR3_COMMON_TOKEN    LTERM290;
    pANTLR3_COMMON_TOKEN    Identifier291;

    pANTLR3_BASE_TREE char_literal289_tree;
    pANTLR3_BASE_TREE LTERM290_tree;
    pANTLR3_BASE_TREE Identifier291_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_171;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    propertyReferenceSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(50)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal289       = NULL;
    LTERM290       = NULL;
    Identifier291       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal289_tree   = NULL;
    LTERM290_tree   = NULL;
    Identifier291_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_171   = NULL;
    #define CREATE_stream_171  if (stream_171 == NULL) {stream_171 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 171"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:395:2: ( '.' ( LTERM )* Identifier -> Identifier )
        // .//Emerson.g:395:4: '.' ( LTERM )* Identifier
        {
            char_literal289 = (pANTLR3_COMMON_TOKEN) MATCHT(171, &FOLLOW_171_in_propertyReferenceSuffix13180); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_171; stream_171->add(stream_171, char_literal289, NULL); }


            // .//Emerson.g:395:8: ( LTERM )*

            for (;;)
            {
                int alt153=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA153_0 = LA(1);
                    if ( (LA153_0 == LTERM) ) 
                    {
                        alt153=1;
                    }

                }
                switch (alt153) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM290 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix13182); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM290, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop153;	/* break out of the loop */
            	    break;
                }
            }
            loop153: ; /* Jump out to here if this rule does not match */

            Identifier291 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix13185); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier291, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 395:26: -> Identifier
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffix1Ex; /* Prevent compiler warnings */
    rulepropertyReferenceSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_171 != NULL) stream_171->free(stream_171);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(50, propertyReferenceSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix1 */

/** 
 * $ANTLR start memberExpression
 * .//Emerson.g:399:1: memberExpression : ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* );
 */
static EmersonParser_memberExpression_return
memberExpression(pEmersonParser ctx)
{   
    EmersonParser_memberExpression_return retval;
    ANTLR3_UINT32 memberExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM293;
    pANTLR3_COMMON_TOKEN    LTERM295;
    pANTLR3_COMMON_TOKEN    LTERM298;
    pANTLR3_COMMON_TOKEN    LTERM300;
    pANTLR3_COMMON_TOKEN    string_literal302;
    pANTLR3_COMMON_TOKEN    LTERM303;
    pANTLR3_COMMON_TOKEN    LTERM304;
    pANTLR3_COMMON_TOKEN    LTERM306;
    pANTLR3_COMMON_TOKEN    LTERM308;
    EmersonParser_memberExpression_return expr;
    #undef	RETURN_TYPE_expr
    #define	RETURN_TYPE_expr EmersonParser_memberExpression_return

    EmersonParser_primaryExpression_return primaryExpression292;
    #undef	RETURN_TYPE_primaryExpression292
    #define	RETURN_TYPE_primaryExpression292 EmersonParser_primaryExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1294;
    #undef	RETURN_TYPE_propertyReferenceSuffix1294
    #define	RETURN_TYPE_propertyReferenceSuffix1294 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1296;
    #undef	RETURN_TYPE_indexSuffix1296
    #define	RETURN_TYPE_indexSuffix1296 EmersonParser_indexSuffix1_return

    EmersonParser_functionExpression_return functionExpression297;
    #undef	RETURN_TYPE_functionExpression297
    #define	RETURN_TYPE_functionExpression297 EmersonParser_functionExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1299;
    #undef	RETURN_TYPE_propertyReferenceSuffix1299
    #define	RETURN_TYPE_propertyReferenceSuffix1299 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1301;
    #undef	RETURN_TYPE_indexSuffix1301
    #define	RETURN_TYPE_indexSuffix1301 EmersonParser_indexSuffix1_return

    EmersonParser_arguments_return arguments305;
    #undef	RETURN_TYPE_arguments305
    #define	RETURN_TYPE_arguments305 EmersonParser_arguments_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1307;
    #undef	RETURN_TYPE_propertyReferenceSuffix1307
    #define	RETURN_TYPE_propertyReferenceSuffix1307 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1309;
    #undef	RETURN_TYPE_indexSuffix1309
    #define	RETURN_TYPE_indexSuffix1309 EmersonParser_indexSuffix1_return

    pANTLR3_BASE_TREE LTERM293_tree;
    pANTLR3_BASE_TREE LTERM295_tree;
    pANTLR3_BASE_TREE LTERM298_tree;
    pANTLR3_BASE_TREE LTERM300_tree;
    pANTLR3_BASE_TREE string_literal302_tree;
    pANTLR3_BASE_TREE LTERM303_tree;
    pANTLR3_BASE_TREE LTERM304_tree;
    pANTLR3_BASE_TREE LTERM306_tree;
    pANTLR3_BASE_TREE LTERM308_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_168;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primaryExpression;
    /* Initialize rule variables
     */
    memberExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(51)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM293       = NULL;
    LTERM295       = NULL;
    LTERM298       = NULL;
    LTERM300       = NULL;
    string_literal302       = NULL;
    LTERM303       = NULL;
    LTERM304       = NULL;
    LTERM306       = NULL;
    LTERM308       = NULL;
    expr.tree = NULL;

    primaryExpression292.tree = NULL;

    propertyReferenceSuffix1294.tree = NULL;

    indexSuffix1296.tree = NULL;

    functionExpression297.tree = NULL;

    propertyReferenceSuffix1299.tree = NULL;

    indexSuffix1301.tree = NULL;

    arguments305.tree = NULL;

    propertyReferenceSuffix1307.tree = NULL;

    indexSuffix1309.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM293_tree   = NULL;
    LTERM295_tree   = NULL;
    LTERM298_tree   = NULL;
    LTERM300_tree   = NULL;
    string_literal302_tree   = NULL;
    LTERM303_tree   = NULL;
    LTERM304_tree   = NULL;
    LTERM306_tree   = NULL;
    LTERM308_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_168   = NULL;
    #define CREATE_stream_168  if (stream_168 == NULL) {stream_168 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 168"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_functionExpression   = NULL;
    #define CREATE_stream_functionExpression  if (stream_functionExpression == NULL) {stream_functionExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }
    stream_primaryExpression   = NULL;
    #define CREATE_stream_primaryExpression  if (stream_primaryExpression == NULL) {stream_primaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primaryExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:400:2: ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* )
            
            ANTLR3_UINT32 alt165;

            alt165=3;

            switch ( LA(1) ) 
            {
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 142:
            case 145:
            case 169:
            case 193:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            	{
            		alt165=1;
            	}
                break;
            case 141:
            	{
            		alt165=2;
            	}
                break;
            case 168:
            	{
            		alt165=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 165;
                EXCEPTION->state        = 0;


                goto rulememberExpressionEx;
            }

            switch (alt165) 
            {
        	case 1:
        	    // .//Emerson.g:400:4: ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:400:4: ( primaryExpression -> primaryExpression )
        	        // .//Emerson.g:400:5: primaryExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_primaryExpression_in_memberExpression3202);
        	            primaryExpression292=primaryExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_primaryExpression; stream_primaryExpression->add(stream_primaryExpression, primaryExpression292.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : primaryExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 400:23: -> primaryExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_primaryExpression == NULL ? NULL : stream_primaryExpression->nextTree(stream_primaryExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:400:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt156=3;
        	            alt156 = cdfa156.predict(ctx, RECOGNIZER, ISTREAM, &cdfa156);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt156) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:400:47: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:400:47: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt154=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA154_0 = LA(1);
        	        	                if ( (LA154_0 == LTERM) ) 
        	        	                {
        	        	                    alt154=1;
        	        	                }

        	        	            }
        	        	            switch (alt154) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM293 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3211); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM293, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop154;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop154: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3214);
        	        	        propertyReferenceSuffix1294=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1294.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, propertyReferenceSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 400:79: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:400:82: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:400:136: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:400:136: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt155=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA155_0 = LA(1);
        	        	                if ( (LA155_0 == LTERM) ) 
        	        	                {
        	        	                    alt155=1;
        	        	                }

        	        	            }
        	        	            switch (alt155) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM295 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3231); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM295, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop155;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop155: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3234);
        	        	        indexSuffix1296=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1296.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, indexSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 400:156: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:400:159: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop156;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop156: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:401:4: ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:401:4: ( functionExpression -> functionExpression )
        	        // .//Emerson.g:401:5: functionExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_functionExpression_in_memberExpression3253);
        	            functionExpression297=functionExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_functionExpression; stream_functionExpression->add(stream_functionExpression, functionExpression297.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : functionExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 401:24: -> functionExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionExpression == NULL ? NULL : stream_functionExpression->nextTree(stream_functionExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:401:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt159=3;
        	            alt159 = cdfa159.predict(ctx, RECOGNIZER, ISTREAM, &cdfa159);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt159) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:401:48: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:401:48: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt157=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA157_0 = LA(1);
        	        	                if ( (LA157_0 == LTERM) ) 
        	        	                {
        	        	                    alt157=1;
        	        	                }

        	        	            }
        	        	            switch (alt157) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM298 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3261); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM298, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop157;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop157: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3264);
        	        	        propertyReferenceSuffix1299=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1299.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : propertyReferenceSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 401:80: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:401:83: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:401:136: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:401:136: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt158=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA158_0 = LA(1);
        	        	                if ( (LA158_0 == LTERM) ) 
        	        	                {
        	        	                    alt158=1;
        	        	                }

        	        	            }
        	        	            switch (alt158) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM300 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3280); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM300, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop158;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop158: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3283);
        	        	        indexSuffix1301=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1301.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : indexSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 401:156: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:401:159: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop159;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop159: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:402:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:402:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) )
        	        // .//Emerson.g:402:5: 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments
        	        {
        	            string_literal302 = (pANTLR3_COMMON_TOKEN) MATCHT(168, &FOLLOW_168_in_memberExpression3302); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            } 
        	            if ( BACKTRACKING==0 ) { CREATE_stream_168; stream_168->add(stream_168, string_literal302, NULL); }


        	            // .//Emerson.g:402:11: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt160=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA160_0 = LA(1);
        	                    if ( (LA160_0 == LTERM) ) 
        	                    {
        	                        alt160=1;
        	                    }

        	                }
        	                switch (alt160) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM303 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3304); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM303, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop160;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop160: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression3309);
        	            expr=memberExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, expr.tree, NULL); }

        	            // .//Emerson.g:402:40: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt161=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA161_0 = LA(1);
        	                    if ( (LA161_0 == LTERM) ) 
        	                    {
        	                        alt161=1;
        	                    }

        	                }
        	                switch (alt161) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM304 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3311); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM304, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop161;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop161: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_arguments_in_memberExpression3314);
        	            arguments305=arguments(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments305.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : expr, arguments
        	             * token labels      : 
        	             * rule labels       : retval, expr
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	            	stream_expr=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr", expr.tree != NULL ? expr.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 402:57: -> ^( NEW $expr arguments )
        	            	{
        	            	    // .//Emerson.g:402:60: ^( NEW $expr arguments )
        	            	    {
        	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));
        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	            	    }

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	            	if (stream_expr != NULL) stream_expr->free(stream_expr);


        	            }
        	        }


        	        // .//Emerson.g:402:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt164=3;
        	            alt164 = cdfa164.predict(ctx, RECOGNIZER, ISTREAM, &cdfa164);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt164) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:402:85: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:402:85: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt162=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA162_0 = LA(1);
        	        	                if ( (LA162_0 == LTERM) ) 
        	        	                {
        	        	                    alt162=1;
        	        	                }

        	        	            }
        	        	            switch (alt162) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM306 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3329); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM306, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop162;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop162: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3332);
        	        	        propertyReferenceSuffix1307=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1307.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, propertyReferenceSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 402:117: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:402:120: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:402:172: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:402:172: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt163=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA163_0 = LA(1);
        	        	                if ( (LA163_0 == LTERM) ) 
        	        	                {
        	        	                    alt163=1;
        	        	                }

        	        	            }
        	        	            switch (alt163) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM308 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3347); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM308, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop163;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop163: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3350);
        	        	        indexSuffix1309=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1309.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : indexSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 402:192: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:402:195: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop164;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop164: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionEx; /* Prevent compiler warnings */
    rulememberExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_168 != NULL) stream_168->free(stream_168);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_functionExpression != NULL) stream_functionExpression->free(stream_functionExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
        if (stream_primaryExpression != NULL) stream_primaryExpression->free(stream_primaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(51, memberExpression_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpression */

/** 
 * $ANTLR start memberExpressionSuffix
 * .//Emerson.g:407:1: memberExpressionSuffix : ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_memberExpressionSuffix_return
memberExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_memberExpressionSuffix_return retval;
    ANTLR3_UINT32 memberExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_indexSuffix_return indexSuffix310;
    #undef	RETURN_TYPE_indexSuffix310
    #define	RETURN_TYPE_indexSuffix310 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix311;
    #undef	RETURN_TYPE_propertyReferenceSuffix311
    #define	RETURN_TYPE_propertyReferenceSuffix311 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    memberExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(52)) )
    {
    	retval.start = 0;

        return retval; 
    }
    indexSuffix310.tree = NULL;

    propertyReferenceSuffix311.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:408:2: ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt166;

            alt166=2;


            {
                int LA166_0 = LA(1);
                if ( (LA166_0 == 169) ) 
                {
                    alt166=1;
                }
                else if ( (LA166_0 == 171) ) 
                {
                    alt166=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 166;
                    EXCEPTION->state        = 0;


                    goto rulememberExpressionSuffixEx;
                }
            }
            switch (alt166) 
            {
        	case 1:
        	    // .//Emerson.g:408:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_memberExpressionSuffix3387);
        	        indexSuffix310=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix310.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 408:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:409:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3397);
        	        propertyReferenceSuffix311=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix311.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 409:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionSuffixEx; /* Prevent compiler warnings */
    rulememberExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(52, memberExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpressionSuffix */

/** 
 * $ANTLR start callExpression
 * .//Emerson.g:412:1: callExpression : ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* ;
 */
static EmersonParser_callExpression_return
callExpression(pEmersonParser ctx)
{   
    EmersonParser_callExpression_return retval;
    ANTLR3_UINT32 callExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM313;
    pANTLR3_COMMON_TOKEN    LTERM315;
    pANTLR3_COMMON_TOKEN    LTERM317;
    pANTLR3_COMMON_TOKEN    LTERM319;
    EmersonParser_memberExpression_return memberExpression312;
    #undef	RETURN_TYPE_memberExpression312
    #define	RETURN_TYPE_memberExpression312 EmersonParser_memberExpression_return

    EmersonParser_arguments_return arguments314;
    #undef	RETURN_TYPE_arguments314
    #define	RETURN_TYPE_arguments314 EmersonParser_arguments_return

    EmersonParser_arguments_return arguments316;
    #undef	RETURN_TYPE_arguments316
    #define	RETURN_TYPE_arguments316 EmersonParser_arguments_return

    EmersonParser_indexSuffix1_return indexSuffix1318;
    #undef	RETURN_TYPE_indexSuffix1318
    #define	RETURN_TYPE_indexSuffix1318 EmersonParser_indexSuffix1_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1320;
    #undef	RETURN_TYPE_propertyReferenceSuffix1320
    #define	RETURN_TYPE_propertyReferenceSuffix1320 EmersonParser_propertyReferenceSuffix1_return

    pANTLR3_BASE_TREE LTERM313_tree;
    pANTLR3_BASE_TREE LTERM315_tree;
    pANTLR3_BASE_TREE LTERM317_tree;
    pANTLR3_BASE_TREE LTERM319_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    /* Initialize rule variables
     */
    callExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(53)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM313       = NULL;
    LTERM315       = NULL;
    LTERM317       = NULL;
    LTERM319       = NULL;
    memberExpression312.tree = NULL;

    arguments314.tree = NULL;

    arguments316.tree = NULL;

    indexSuffix1318.tree = NULL;

    propertyReferenceSuffix1320.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM313_tree   = NULL;
    LTERM315_tree   = NULL;
    LTERM317_tree   = NULL;
    LTERM319_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:413:5: ( ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* )
        // .//Emerson.g:413:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
        {
            // .//Emerson.g:413:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) )
            // .//Emerson.g:413:8: memberExpression ( LTERM )* arguments
            {
                FOLLOWPUSH(FOLLOW_memberExpression_in_callExpression3417);
                memberExpression312=memberExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression312.tree, NULL); }

                // .//Emerson.g:413:25: ( LTERM )*

                for (;;)
                {
                    int alt167=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA167_0 = LA(1);
                        if ( (LA167_0 == LTERM) ) 
                        {
                            alt167=1;
                        }

                    }
                    switch (alt167) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM313 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3419); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecallExpressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM313, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop167;	/* break out of the loop */
                	    break;
                    }
                }
                loop167: ; /* Jump out to here if this rule does not match */

                FOLLOWPUSH(FOLLOW_arguments_in_callExpression3422);
                arguments314=arguments(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments314.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : memberExpression, arguments
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 413:42: -> ^( CALL memberExpression arguments )
                	{
                	    // .//Emerson.g:413:45: ^( CALL memberExpression arguments )
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:413:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*

            for (;;)
            {
                int alt171=4;
                alt171 = cdfa171.predict(ctx, RECOGNIZER, ISTREAM, &cdfa171);
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt171) 
                {
            	case 1:
            	    // .//Emerson.g:413:82: ( LTERM )* arguments
            	    {

            	        // .//Emerson.g:413:82: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt168=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA168_0 = LA(1);
            	                if ( (LA168_0 == LTERM) ) 
            	                {
            	                    alt168=1;
            	                }

            	            }
            	            switch (alt168) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM315 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3436); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM315, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop168;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop168: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression3439);
            	        arguments316=arguments(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments316.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : callExpression, arguments
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 413:99: -> ^( CALL $callExpression arguments )
            	        	{
            	        	    // .//Emerson.g:413:102: ^( CALL $callExpression arguments )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:413:138: ( LTERM )* indexSuffix1
            	    {

            	        // .//Emerson.g:413:138: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt169=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA169_0 = LA(1);
            	                if ( (LA169_0 == LTERM) ) 
            	                {
            	                    alt169=1;
            	                }

            	            }
            	            switch (alt169) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM317 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3454); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM317, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop169;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop169: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_callExpression3457);
            	        indexSuffix1318=indexSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1318.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : indexSuffix1, callExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 413:158: -> ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	{
            	        	    // .//Emerson.g:413:161: ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 3:
            	    // .//Emerson.g:413:207: ( LTERM )* propertyReferenceSuffix1
            	    {

            	        // .//Emerson.g:413:207: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt170=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA170_0 = LA(1);
            	                if ( (LA170_0 == LTERM) ) 
            	                {
            	                    alt170=1;
            	                }

            	            }
            	            switch (alt170) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM319 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3472); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM319, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop170;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop170: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_callExpression3475);
            	        propertyReferenceSuffix1320=propertyReferenceSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1320.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : callExpression, propertyReferenceSuffix1
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 413:239: -> ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	{
            	        	    // .//Emerson.g:413:242: ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop171;	/* break out of the loop */
            	    break;
                }
            }
            loop171: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionEx; /* Prevent compiler warnings */
    rulecallExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(53, callExpression_StartIndex); }
    return retval;
}
/* $ANTLR end callExpression */

/** 
 * $ANTLR start callExpressionSuffix
 * .//Emerson.g:416:1: callExpressionSuffix : ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_callExpressionSuffix_return
callExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_callExpressionSuffix_return retval;
    ANTLR3_UINT32 callExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_arguments_return arguments321;
    #undef	RETURN_TYPE_arguments321
    #define	RETURN_TYPE_arguments321 EmersonParser_arguments_return

    EmersonParser_indexSuffix_return indexSuffix322;
    #undef	RETURN_TYPE_indexSuffix322
    #define	RETURN_TYPE_indexSuffix322 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix323;
    #undef	RETURN_TYPE_propertyReferenceSuffix323
    #define	RETURN_TYPE_propertyReferenceSuffix323 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    callExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(54)) )
    {
    	retval.start = 0;

        return retval; 
    }
    arguments321.tree = NULL;

    indexSuffix322.tree = NULL;

    propertyReferenceSuffix323.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:417:2: ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt172;

            alt172=3;

            switch ( LA(1) ) 
            {
            case 142:
            	{
            		alt172=1;
            	}
                break;
            case 169:
            	{
            		alt172=2;
            	}
                break;
            case 171:
            	{
            		alt172=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 172;
                EXCEPTION->state        = 0;


                goto rulecallExpressionSuffixEx;
            }

            switch (alt172) 
            {
        	case 1:
        	    // .//Emerson.g:417:4: arguments
        	    {
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpressionSuffix3502);
        	        arguments321=arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments321.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : arguments
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 417:14: -> arguments
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:418:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_callExpressionSuffix3511);
        	        indexSuffix322=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix322.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 418:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:419:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3520);
        	        propertyReferenceSuffix323=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix323.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 419:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionSuffixEx; /* Prevent compiler warnings */
    rulecallExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(54, callExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end callExpressionSuffix */

/** 
 * $ANTLR start arguments
 * .//Emerson.g:422:1: arguments : ( '(' ( LTERM )* ( assignmentExpression )? ( LTERM )* ')' -> ^( ARGLIST ( assignmentExpression )? ) | '(' ( LTERM )* assignmentExpression ( ',' ( LTERM )* assignmentExpression )* ( LTERM )* ')' -> ^( ARGLIST assignmentExpression ( assignmentExpression )* ) );
 */
static EmersonParser_arguments_return
arguments(pEmersonParser ctx)
{   
    EmersonParser_arguments_return retval;
    ANTLR3_UINT32 arguments_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal324;
    pANTLR3_COMMON_TOKEN    LTERM325;
    pANTLR3_COMMON_TOKEN    LTERM327;
    pANTLR3_COMMON_TOKEN    char_literal328;
    pANTLR3_COMMON_TOKEN    char_literal329;
    pANTLR3_COMMON_TOKEN    LTERM330;
    pANTLR3_COMMON_TOKEN    char_literal332;
    pANTLR3_COMMON_TOKEN    LTERM333;
    pANTLR3_COMMON_TOKEN    LTERM335;
    pANTLR3_COMMON_TOKEN    char_literal336;
    EmersonParser_assignmentExpression_return assignmentExpression326;
    #undef	RETURN_TYPE_assignmentExpression326
    #define	RETURN_TYPE_assignmentExpression326 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression331;
    #undef	RETURN_TYPE_assignmentExpression331
    #define	RETURN_TYPE_assignmentExpression331 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression334;
    #undef	RETURN_TYPE_assignmentExpression334
    #define	RETURN_TYPE_assignmentExpression334 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal324_tree;
    pANTLR3_BASE_TREE LTERM325_tree;
    pANTLR3_BASE_TREE LTERM327_tree;
    pANTLR3_BASE_TREE char_literal328_tree;
    pANTLR3_BASE_TREE char_literal329_tree;
    pANTLR3_BASE_TREE LTERM330_tree;
    pANTLR3_BASE_TREE char_literal332_tree;
    pANTLR3_BASE_TREE LTERM333_tree;
    pANTLR3_BASE_TREE LTERM335_tree;
    pANTLR3_BASE_TREE char_literal336_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    arguments_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(55)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal324       = NULL;
    LTERM325       = NULL;
    LTERM327       = NULL;
    char_literal328       = NULL;
    char_literal329       = NULL;
    LTERM330       = NULL;
    char_literal332       = NULL;
    LTERM333       = NULL;
    LTERM335       = NULL;
    char_literal336       = NULL;
    assignmentExpression326.tree = NULL;

    assignmentExpression331.tree = NULL;

    assignmentExpression334.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal324_tree   = NULL;
    LTERM325_tree   = NULL;
    LTERM327_tree   = NULL;
    char_literal328_tree   = NULL;
    char_literal329_tree   = NULL;
    LTERM330_tree   = NULL;
    char_literal332_tree   = NULL;
    LTERM333_tree   = NULL;
    LTERM335_tree   = NULL;
    char_literal336_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:423:9: ( '(' ( LTERM )* ( assignmentExpression )? ( LTERM )* ')' -> ^( ARGLIST ( assignmentExpression )? ) | '(' ( LTERM )* assignmentExpression ( ',' ( LTERM )* assignmentExpression )* ( LTERM )* ')' -> ^( ARGLIST assignmentExpression ( assignmentExpression )* ) )
            
            ANTLR3_UINT32 alt180;

            alt180=2;


            {
                int LA180_0 = LA(1);
                if ( (LA180_0 == 142) ) 
                {

                    {
                        int LA180_1 = LA(2);
                        if ( (synpred196_Emerson(ctx)) ) 
                        {
                            alt180=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt180=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 180;
                            EXCEPTION->state        = 1;


                            goto ruleargumentsEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 180;
                    EXCEPTION->state        = 0;


                    goto ruleargumentsEx;
                }
            }
            switch (alt180) 
            {
        	case 1:
        	    // .//Emerson.g:423:11: '(' ( LTERM )* ( assignmentExpression )? ( LTERM )* ')'
        	    {
        	        char_literal324 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_arguments3542); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal324, NULL); }


        	        // .//Emerson.g:423:15: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt173=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA173_0 = LA(1);
        	                if ( (LA173_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA173_2 = LA(2);
        	                        if ( (synpred193_Emerson(ctx)) ) 
        	                        {
        	                            alt173=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt173) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM325 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3544); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM325, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop173;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop173: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:423:22: ( assignmentExpression )?
        	        {
        	            int alt174=2;
        	            {
        	                int LA174_0 = LA(1);
        	                if ( (((LA174_0 >= Identifier) && (LA174_0 <= StringLiteral)) || ((LA174_0 >= 141) && (LA174_0 <= 142)) || LA174_0 == 145 || ((LA174_0 >= 168) && (LA174_0 <= 169)) || LA174_0 == 193 || ((LA174_0 >= 198) && (LA174_0 <= 199)) || ((LA174_0 >= 203) && (LA174_0 <= 215))) ) 
        	                {
        	                    alt174=1;
        	                }
        	            }
        	            switch (alt174) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:423:23: assignmentExpression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments3548);
        	        	        assignmentExpression326=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression326.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:423:46: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt175=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA175_0 = LA(1);
        	                if ( (LA175_0 == LTERM) ) 
        	                {
        	                    alt175=1;
        	                }

        	            }
        	            switch (alt175) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM327 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3552); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM327, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop175;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop175: ; /* Jump out to here if this rule does not match */

        	        char_literal328 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_arguments3555); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal328, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 423:57: -> ^( ARGLIST ( assignmentExpression )? )
        	        	{
        	        	    // .//Emerson.g:423:60: ^( ARGLIST ( assignmentExpression )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGLIST, (pANTLR3_UINT8)"ARGLIST"), root_1));

        	        	        // .//Emerson.g:423:70: ( assignmentExpression )?
        	        	        {
        	        	        	if ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if ( stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:424:4: '(' ( LTERM )* assignmentExpression ( ',' ( LTERM )* assignmentExpression )* ( LTERM )* ')'
        	    {
        	        char_literal329 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_arguments3569); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal329, NULL); }


        	        // .//Emerson.g:424:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt176=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA176_0 = LA(1);
        	                if ( (LA176_0 == LTERM) ) 
        	                {
        	                    alt176=1;
        	                }

        	            }
        	            switch (alt176) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM330 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3571); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM330, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop176;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop176: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments3574);
        	        assignmentExpression331=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression331.tree, NULL); }

        	        // .//Emerson.g:424:36: ( ',' ( LTERM )* assignmentExpression )*

        	        for (;;)
        	        {
        	            int alt178=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA178_0 = LA(1);
        	                if ( (LA178_0 == 144) ) 
        	                {
        	                    alt178=1;
        	                }

        	            }
        	            switch (alt178) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:424:37: ',' ( LTERM )* assignmentExpression
        	        	    {
        	        	        char_literal332 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_arguments3577); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal332, NULL); }


        	        	        // .//Emerson.g:424:41: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt177=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA177_0 = LA(1);
        	        	                if ( (LA177_0 == LTERM) ) 
        	        	                {
        	        	                    alt177=1;
        	        	                }

        	        	            }
        	        	            switch (alt177) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM333 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3579); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleargumentsEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM333, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop177;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop177: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments3582);
        	        	        assignmentExpression334=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression334.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop178;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop178: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:424:71: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt179=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA179_0 = LA(1);
        	                if ( (LA179_0 == LTERM) ) 
        	                {
        	                    alt179=1;
        	                }

        	            }
        	            switch (alt179) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM335 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3586); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM335, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop179;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop179: ; /* Jump out to here if this rule does not match */

        	        char_literal336 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_arguments3589); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal336, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression, assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 424:82: -> ^( ARGLIST assignmentExpression ( assignmentExpression )* )
        	        	{
        	        	    // .//Emerson.g:424:85: ^( ARGLIST assignmentExpression ( assignmentExpression )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGLIST, (pANTLR3_UINT8)"ARGLIST"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));
        	        	        // .//Emerson.g:424:116: ( assignmentExpression )*
        	        	        {
        	        	        	while ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if (stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleargumentsEx; /* Prevent compiler warnings */
    ruleargumentsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(55, arguments_StartIndex); }
    return retval;
}
/* $ANTLR end arguments */

/** 
 * $ANTLR start indexSuffix
 * .//Emerson.g:429:1: indexSuffix : '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) ;
 */
static EmersonParser_indexSuffix_return
indexSuffix(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix_return retval;
    ANTLR3_UINT32 indexSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal337;
    pANTLR3_COMMON_TOKEN    LTERM338;
    pANTLR3_COMMON_TOKEN    LTERM340;
    pANTLR3_COMMON_TOKEN    char_literal341;
    EmersonParser_expression_return expression339;
    #undef	RETURN_TYPE_expression339
    #define	RETURN_TYPE_expression339 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal337_tree;
    pANTLR3_BASE_TREE LTERM338_tree;
    pANTLR3_BASE_TREE LTERM340_tree;
    pANTLR3_BASE_TREE char_literal341_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_170;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_169;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(56)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal337       = NULL;
    LTERM338       = NULL;
    LTERM340       = NULL;
    char_literal341       = NULL;
    expression339.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal337_tree   = NULL;
    LTERM338_tree   = NULL;
    LTERM340_tree   = NULL;
    char_literal341_tree   = NULL;

    stream_170   = NULL;
    #define CREATE_stream_170  if (stream_170 == NULL) {stream_170 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 170"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_169   = NULL;
    #define CREATE_stream_169  if (stream_169 == NULL) {stream_169 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 169"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:430:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) )
        // .//Emerson.g:430:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal337 = (pANTLR3_COMMON_TOKEN) MATCHT(169, &FOLLOW_169_in_indexSuffix3615); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_169; stream_169->add(stream_169, char_literal337, NULL); }


            // .//Emerson.g:430:8: ( LTERM )*

            for (;;)
            {
                int alt181=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA181_0 = LA(1);
                    if ( (LA181_0 == LTERM) ) 
                    {
                        alt181=1;
                    }

                }
                switch (alt181) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM338 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3617); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM338, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop181;	/* break out of the loop */
            	    break;
                }
            }
            loop181: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix3620);
            expression339=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression339.tree, NULL); }

            // .//Emerson.g:430:26: ( LTERM )*

            for (;;)
            {
                int alt182=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA182_0 = LA(1);
                    if ( (LA182_0 == LTERM) ) 
                    {
                        alt182=1;
                    }

                }
                switch (alt182) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM340 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3622); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM340, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop182;	/* break out of the loop */
            	    break;
                }
            }
            loop182: ; /* Jump out to here if this rule does not match */

            char_literal341 = (pANTLR3_COMMON_TOKEN) MATCHT(170, &FOLLOW_170_in_indexSuffix3625); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_170; stream_170->add(stream_170, char_literal341, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 430:37: -> ^( ARRAY_INDEX expression )
            	{
            	    // .//Emerson.g:430:40: ^( ARRAY_INDEX expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffixEx; /* Prevent compiler warnings */
    ruleindexSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_170 != NULL) stream_170->free(stream_170);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_169 != NULL) stream_169->free(stream_169);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(56, indexSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix */

/** 
 * $ANTLR start propertyReferenceSuffix
 * .//Emerson.g:433:1: propertyReferenceSuffix : '.' ( LTERM )* Identifier -> ^( DOT Identifier ) ;
 */
static EmersonParser_propertyReferenceSuffix_return
propertyReferenceSuffix(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal342;
    pANTLR3_COMMON_TOKEN    LTERM343;
    pANTLR3_COMMON_TOKEN    Identifier344;

    pANTLR3_BASE_TREE char_literal342_tree;
    pANTLR3_BASE_TREE LTERM343_tree;
    pANTLR3_BASE_TREE Identifier344_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_171;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    propertyReferenceSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(57)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal342       = NULL;
    LTERM343       = NULL;
    Identifier344       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal342_tree   = NULL;
    LTERM343_tree   = NULL;
    Identifier344_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_171   = NULL;
    #define CREATE_stream_171  if (stream_171 == NULL) {stream_171 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 171"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:434:2: ( '.' ( LTERM )* Identifier -> ^( DOT Identifier ) )
        // .//Emerson.g:434:4: '.' ( LTERM )* Identifier
        {
            char_literal342 = (pANTLR3_COMMON_TOKEN) MATCHT(171, &FOLLOW_171_in_propertyReferenceSuffix3646); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_171; stream_171->add(stream_171, char_literal342, NULL); }


            // .//Emerson.g:434:8: ( LTERM )*

            for (;;)
            {
                int alt183=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA183_0 = LA(1);
                    if ( (LA183_0 == LTERM) ) 
                    {
                        alt183=1;
                    }

                }
                switch (alt183) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM343 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix3648); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM343, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop183;	/* break out of the loop */
            	    break;
                }
            }
            loop183: ; /* Jump out to here if this rule does not match */

            Identifier344 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix3651); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier344, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 434:26: -> ^( DOT Identifier )
            	{
            	    // .//Emerson.g:434:29: ^( DOT Identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffixEx; /* Prevent compiler warnings */
    rulepropertyReferenceSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_171 != NULL) stream_171->free(stream_171);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(57, propertyReferenceSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix */

/** 
 * $ANTLR start assignmentOperator
 * .//Emerson.g:438:1: assignmentOperator : ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) );
 */
static EmersonParser_assignmentOperator_return
assignmentOperator(pEmersonParser ctx)
{   
    EmersonParser_assignmentOperator_return retval;
    ANTLR3_UINT32 assignmentOperator_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal345;
    pANTLR3_COMMON_TOKEN    string_literal346;
    pANTLR3_COMMON_TOKEN    string_literal347;
    pANTLR3_COMMON_TOKEN    string_literal348;
    pANTLR3_COMMON_TOKEN    string_literal349;
    pANTLR3_COMMON_TOKEN    string_literal350;
    pANTLR3_COMMON_TOKEN    string_literal351;
    pANTLR3_COMMON_TOKEN    string_literal352;
    pANTLR3_COMMON_TOKEN    string_literal353;

    pANTLR3_BASE_TREE char_literal345_tree;
    pANTLR3_BASE_TREE string_literal346_tree;
    pANTLR3_BASE_TREE string_literal347_tree;
    pANTLR3_BASE_TREE string_literal348_tree;
    pANTLR3_BASE_TREE string_literal349_tree;
    pANTLR3_BASE_TREE string_literal350_tree;
    pANTLR3_BASE_TREE string_literal351_tree;
    pANTLR3_BASE_TREE string_literal352_tree;
    pANTLR3_BASE_TREE string_literal353_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_174;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_175;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_172;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_149;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_173;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_179;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_178;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_177;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_176;

    /* Initialize rule variables
     */
    assignmentOperator_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(58)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal345       = NULL;
    string_literal346       = NULL;
    string_literal347       = NULL;
    string_literal348       = NULL;
    string_literal349       = NULL;
    string_literal350       = NULL;
    string_literal351       = NULL;
    string_literal352       = NULL;
    string_literal353       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal345_tree   = NULL;
    string_literal346_tree   = NULL;
    string_literal347_tree   = NULL;
    string_literal348_tree   = NULL;
    string_literal349_tree   = NULL;
    string_literal350_tree   = NULL;
    string_literal351_tree   = NULL;
    string_literal352_tree   = NULL;
    string_literal353_tree   = NULL;

    stream_174   = NULL;
    #define CREATE_stream_174  if (stream_174 == NULL) {stream_174 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 174"); } 
    stream_175   = NULL;
    #define CREATE_stream_175  if (stream_175 == NULL) {stream_175 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 175"); } 
    stream_172   = NULL;
    #define CREATE_stream_172  if (stream_172 == NULL) {stream_172 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 172"); } 
    stream_149   = NULL;
    #define CREATE_stream_149  if (stream_149 == NULL) {stream_149 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 149"); } 
    stream_173   = NULL;
    #define CREATE_stream_173  if (stream_173 == NULL) {stream_173 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 173"); } 
    stream_179   = NULL;
    #define CREATE_stream_179  if (stream_179 == NULL) {stream_179 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 179"); } 
    stream_178   = NULL;
    #define CREATE_stream_178  if (stream_178 == NULL) {stream_178 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 178"); } 
    stream_177   = NULL;
    #define CREATE_stream_177  if (stream_177 == NULL) {stream_177 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 177"); } 
    stream_176   = NULL;
    #define CREATE_stream_176  if (stream_176 == NULL) {stream_176 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 176"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:439:2: ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) )
            
            ANTLR3_UINT32 alt184;

            alt184=9;

            switch ( LA(1) ) 
            {
            case 149:
            	{
            		alt184=1;
            	}
                break;
            case 172:
            	{
            		alt184=2;
            	}
                break;
            case 173:
            	{
            		alt184=3;
            	}
                break;
            case 174:
            	{
            		alt184=4;
            	}
                break;
            case 175:
            	{
            		alt184=5;
            	}
                break;
            case 176:
            	{
            		alt184=6;
            	}
                break;
            case 177:
            	{
            		alt184=7;
            	}
                break;
            case 178:
            	{
            		alt184=8;
            	}
                break;
            case 179:
            	{
            		alt184=9;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 184;
                EXCEPTION->state        = 0;


                goto ruleassignmentOperatorEx;
            }

            switch (alt184) 
            {
        	case 1:
        	    // .//Emerson.g:439:4: '='
        	    {
        	        char_literal345 = (pANTLR3_COMMON_TOKEN) MATCHT(149, &FOLLOW_149_in_assignmentOperator3679); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_149; stream_149->add(stream_149, char_literal345, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 439:8: -> ^( ASSIGN )
        	        	{
        	        	    // .//Emerson.g:439:11: ^( ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN, (pANTLR3_UINT8)"ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:439:22: '*='
        	    {
        	        string_literal346 = (pANTLR3_COMMON_TOKEN) MATCHT(172, &FOLLOW_172_in_assignmentOperator3688); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_172; stream_172->add(stream_172, string_literal346, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 439:27: -> ^( MULT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:439:30: ^( MULT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT_ASSIGN, (pANTLR3_UINT8)"MULT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:439:46: '/='
        	    {
        	        string_literal347 = (pANTLR3_COMMON_TOKEN) MATCHT(173, &FOLLOW_173_in_assignmentOperator3697); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_173; stream_173->add(stream_173, string_literal347, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 439:51: -> ^( DIV_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:439:54: ^( DIV_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV_ASSIGN, (pANTLR3_UINT8)"DIV_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:439:70: '%='
        	    {
        	        string_literal348 = (pANTLR3_COMMON_TOKEN) MATCHT(174, &FOLLOW_174_in_assignmentOperator3707); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_174; stream_174->add(stream_174, string_literal348, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 439:75: -> ^( MOD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:439:78: ^( MOD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD_ASSIGN, (pANTLR3_UINT8)"MOD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:439:93: '+='
        	    {
        	        string_literal349 = (pANTLR3_COMMON_TOKEN) MATCHT(175, &FOLLOW_175_in_assignmentOperator3716); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_175; stream_175->add(stream_175, string_literal349, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 439:98: -> ^( ADD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:439:101: ^( ADD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD_ASSIGN, (pANTLR3_UINT8)"ADD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:439:116: '-='
        	    {
        	        string_literal350 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_assignmentOperator3725); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, string_literal350, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 439:121: -> ^( SUB_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:439:124: ^( SUB_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB_ASSIGN, (pANTLR3_UINT8)"SUB_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:439:140: '&='
        	    {
        	        string_literal351 = (pANTLR3_COMMON_TOKEN) MATCHT(177, &FOLLOW_177_in_assignmentOperator3735); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_177; stream_177->add(stream_177, string_literal351, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 439:144: -> ^( AND_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:439:147: ^( AND_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND_ASSIGN, (pANTLR3_UINT8)"AND_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:439:162: '^='
        	    {
        	        string_literal352 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_assignmentOperator3743); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, string_literal352, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 439:166: -> ^( EXP_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:439:169: ^( EXP_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP_ASSIGN, (pANTLR3_UINT8)"EXP_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:439:185: '|='
        	    {
        	        string_literal353 = (pANTLR3_COMMON_TOKEN) MATCHT(179, &FOLLOW_179_in_assignmentOperator3752); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_179; stream_179->add(stream_179, string_literal353, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 439:190: -> ^( OR_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:439:193: ^( OR_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR_ASSIGN, (pANTLR3_UINT8)"OR_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentOperatorEx; /* Prevent compiler warnings */
    ruleassignmentOperatorEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_174 != NULL) stream_174->free(stream_174);
        if (stream_175 != NULL) stream_175->free(stream_175);
        if (stream_172 != NULL) stream_172->free(stream_172);
        if (stream_149 != NULL) stream_149->free(stream_149);
        if (stream_173 != NULL) stream_173->free(stream_173);
        if (stream_179 != NULL) stream_179->free(stream_179);
        if (stream_178 != NULL) stream_178->free(stream_178);
        if (stream_177 != NULL) stream_177->free(stream_177);
        if (stream_176 != NULL) stream_176->free(stream_176);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(58, assignmentOperator_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentOperator */

/** 
 * $ANTLR start conditionalExpression
 * .//Emerson.g:443:1: conditionalExpression : msgRecvConstruct -> msgRecvConstruct ;
 */
static EmersonParser_conditionalExpression_return
conditionalExpression(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpression_return retval;
    ANTLR3_UINT32 conditionalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_msgRecvConstruct_return msgRecvConstruct354;
    #undef	RETURN_TYPE_msgRecvConstruct354
    #define	RETURN_TYPE_msgRecvConstruct354 EmersonParser_msgRecvConstruct_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_msgRecvConstruct;
    /* Initialize rule variables
     */
    conditionalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(59)) )
    {
    	retval.start = 0;

        return retval; 
    }
    msgRecvConstruct354.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_msgRecvConstruct   = NULL;
    #define CREATE_stream_msgRecvConstruct  if (stream_msgRecvConstruct == NULL) {stream_msgRecvConstruct = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule msgRecvConstruct"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:444:9: ( msgRecvConstruct -> msgRecvConstruct )
        // .//Emerson.g:444:11: msgRecvConstruct
        {
            FOLLOWPUSH(FOLLOW_msgRecvConstruct_in_conditionalExpression3785);
            msgRecvConstruct354=msgRecvConstruct(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconditionalExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_msgRecvConstruct; stream_msgRecvConstruct->add(stream_msgRecvConstruct, msgRecvConstruct354.tree, NULL); }

             
            /* AST REWRITE
             * elements          : msgRecvConstruct
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 444:28: -> msgRecvConstruct
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_msgRecvConstruct == NULL ? NULL : stream_msgRecvConstruct->nextTree(stream_msgRecvConstruct));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionEx; /* Prevent compiler warnings */
    ruleconditionalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_msgRecvConstruct != NULL) stream_msgRecvConstruct->free(stream_msgRecvConstruct);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(59, conditionalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpression */

/** 
 * $ANTLR start msgRecvConstruct
 * .//Emerson.g:447:1: msgRecvConstruct : ( msgConstruct -> msgConstruct ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct -> ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3) )? ( ( LTERM )* '<<' ( LTERM )* e4= msgConstruct -> ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4) )? ;
 */
static EmersonParser_msgRecvConstruct_return
msgRecvConstruct(pEmersonParser ctx)
{   
    EmersonParser_msgRecvConstruct_return retval;
    ANTLR3_UINT32 msgRecvConstruct_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM356;
    pANTLR3_COMMON_TOKEN    string_literal357;
    pANTLR3_COMMON_TOKEN    LTERM358;
    pANTLR3_COMMON_TOKEN    string_literal359;
    pANTLR3_COMMON_TOKEN    LTERM360;
    pANTLR3_COMMON_TOKEN    string_literal361;
    pANTLR3_COMMON_TOKEN    LTERM362;
    EmersonParser_msgConstruct_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_msgConstruct_return

    EmersonParser_msgConstruct_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_msgConstruct_return

    EmersonParser_msgConstruct_return e4;
    #undef	RETURN_TYPE_e4
    #define	RETURN_TYPE_e4 EmersonParser_msgConstruct_return

    EmersonParser_msgConstruct_return msgConstruct355;
    #undef	RETURN_TYPE_msgConstruct355
    #define	RETURN_TYPE_msgConstruct355 EmersonParser_msgConstruct_return

    pANTLR3_BASE_TREE LTERM356_tree;
    pANTLR3_BASE_TREE string_literal357_tree;
    pANTLR3_BASE_TREE LTERM358_tree;
    pANTLR3_BASE_TREE string_literal359_tree;
    pANTLR3_BASE_TREE LTERM360_tree;
    pANTLR3_BASE_TREE string_literal361_tree;
    pANTLR3_BASE_TREE LTERM362_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_180;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_msgConstruct;
    /* Initialize rule variables
     */
    msgRecvConstruct_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(60)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM356       = NULL;
    string_literal357       = NULL;
    LTERM358       = NULL;
    string_literal359       = NULL;
    LTERM360       = NULL;
    string_literal361       = NULL;
    LTERM362       = NULL;
    e2.tree = NULL;

    e3.tree = NULL;

    e4.tree = NULL;

    msgConstruct355.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM356_tree   = NULL;
    string_literal357_tree   = NULL;
    LTERM358_tree   = NULL;
    string_literal359_tree   = NULL;
    LTERM360_tree   = NULL;
    string_literal361_tree   = NULL;
    LTERM362_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_180   = NULL;
    #define CREATE_stream_180  if (stream_180 == NULL) {stream_180 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 180"); } 
    stream_msgConstruct   = NULL;
    #define CREATE_stream_msgConstruct  if (stream_msgConstruct == NULL) {stream_msgConstruct = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule msgConstruct"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:448:9: ( ( msgConstruct -> msgConstruct ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct -> ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3) )? ( ( LTERM )* '<<' ( LTERM )* e4= msgConstruct -> ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4) )? )
        // .//Emerson.g:448:11: ( msgConstruct -> msgConstruct ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct -> ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3) )? ( ( LTERM )* '<<' ( LTERM )* e4= msgConstruct -> ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4) )?
        {
            // .//Emerson.g:448:11: ( msgConstruct -> msgConstruct )
            // .//Emerson.g:448:12: msgConstruct
            {
                FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct3823);
                msgConstruct355=msgConstruct(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgRecvConstructEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_msgConstruct; stream_msgConstruct->add(stream_msgConstruct, msgConstruct355.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : msgConstruct
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 448:25: -> msgConstruct
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_msgConstruct == NULL ? NULL : stream_msgConstruct->nextTree(stream_msgConstruct));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:449:11: ( ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct -> ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3) )?
            {
                int alt187=2;
                {
                    int LA187_0 = LA(1);
                    if ( (LA187_0 == LTERM) ) 
                    {
                        {
                            int LA187_1 = LA(2);
                            if ( (synpred214_Emerson(ctx)) ) 
                            {
                                alt187=1;
                            }
                        }
                    }
                    else if ( (LA187_0 == 180) ) 
                    {
                        {
                            int LA187_2 = LA(2);
                            if ( (synpred214_Emerson(ctx)) ) 
                            {
                                alt187=1;
                            }
                        }
                    }
                }
                switch (alt187) 
                {
            	case 1:
            	    // .//Emerson.g:449:13: ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct
            	    {

            	        // .//Emerson.g:449:13: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt185=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA185_0 = LA(1);
            	                if ( (LA185_0 == LTERM) ) 
            	                {
            	                    alt185=1;
            	                }

            	            }
            	            switch (alt185) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM356 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstruct3842); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM356, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop185;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop185: ; /* Jump out to here if this rule does not match */

            	        string_literal357 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_msgRecvConstruct3845); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, string_literal357, NULL); }


            	        // .//Emerson.g:449:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt186=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA186_0 = LA(1);
            	                if ( (LA186_0 == LTERM) ) 
            	                {
            	                    alt186=1;
            	                }

            	            }
            	            switch (alt186) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM358 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstruct3847); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM358, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop186;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop186: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct3852);
            	        e2=msgConstruct(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstruct; stream_msgConstruct->add(stream_msgConstruct, e2.tree, NULL); }
            	        string_literal359 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_msgRecvConstruct3854); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, string_literal359, NULL); }

            	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct3858);
            	        e3=msgConstruct(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstruct; stream_msgConstruct->add(stream_msgConstruct, e3.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e2, e3, msgRecvConstruct
            	         * token labels      : 
            	         * rule labels       : e3, retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 449:69: -> ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3)
            	        	{
            	        	    // .//Emerson.g:449:72: ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV_AND_SENDER, (pANTLR3_UINT8)"MESSAGE_RECV_AND_SENDER"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

                }
            }

            // .//Emerson.g:450:11: ( ( LTERM )* '<<' ( LTERM )* e4= msgConstruct -> ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4) )?
            {
                int alt190=2;
                {
                    int LA190_0 = LA(1);
                    if ( (LA190_0 == LTERM) ) 
                    {
                        {
                            int LA190_1 = LA(2);
                            if ( (synpred217_Emerson(ctx)) ) 
                            {
                                alt190=1;
                            }
                        }
                    }
                    else if ( (LA190_0 == 180) ) 
                    {
                        {
                            int LA190_2 = LA(2);
                            if ( (synpred217_Emerson(ctx)) ) 
                            {
                                alt190=1;
                            }
                        }
                    }
                }
                switch (alt190) 
                {
            	case 1:
            	    // .//Emerson.g:450:13: ( LTERM )* '<<' ( LTERM )* e4= msgConstruct
            	    {

            	        // .//Emerson.g:450:13: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt188=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA188_0 = LA(1);
            	                if ( (LA188_0 == LTERM) ) 
            	                {
            	                    alt188=1;
            	                }

            	            }
            	            switch (alt188) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM360 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstruct3889); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM360, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop188;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop188: ; /* Jump out to here if this rule does not match */

            	        string_literal361 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_msgRecvConstruct3892); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, string_literal361, NULL); }


            	        // .//Emerson.g:450:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt189=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA189_0 = LA(1);
            	                if ( (LA189_0 == LTERM) ) 
            	                {
            	                    alt189=1;
            	                }

            	            }
            	            switch (alt189) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM362 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstruct3894); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM362, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop189;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop189: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct3899);
            	        e4=msgConstruct(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstruct; stream_msgConstruct->add(stream_msgConstruct, e4.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e4, msgRecvConstruct
            	         * token labels      : 
            	         * rule labels       : e4, retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e4;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_e4=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e4", e4.tree != NULL ? e4.tree : NULL);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 450:48: -> ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4)
            	        	{
            	        	    // .//Emerson.g:450:51: ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV_NO_SENDER, (pANTLR3_UINT8)"MESSAGE_RECV_NO_SENDER"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e4 == NULL ? NULL : stream_e4->nextTree(stream_e4));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_e4 != NULL) stream_e4->free(stream_e4);
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvConstructEx; /* Prevent compiler warnings */
    rulemsgRecvConstructEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_180 != NULL) stream_180->free(stream_180);
        if (stream_msgConstruct != NULL) stream_msgConstruct->free(stream_msgConstruct);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(60, msgRecvConstruct_StartIndex); }
    return retval;
}
/* $ANTLR end msgRecvConstruct */

/** 
 * $ANTLR start msgConstruct
 * .//Emerson.g:454:1: msgConstruct : ( msgSenderConstruct -> msgSenderConstruct ) ( ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct -> ^( SEND_CONSTRUCT $msgConstruct $e2) )* ;
 */
static EmersonParser_msgConstruct_return
msgConstruct(pEmersonParser ctx)
{   
    EmersonParser_msgConstruct_return retval;
    ANTLR3_UINT32 msgConstruct_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM364;
    pANTLR3_COMMON_TOKEN    string_literal365;
    pANTLR3_COMMON_TOKEN    LTERM366;
    EmersonParser_msgSenderConstruct_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_msgSenderConstruct_return

    EmersonParser_msgSenderConstruct_return msgSenderConstruct363;
    #undef	RETURN_TYPE_msgSenderConstruct363
    #define	RETURN_TYPE_msgSenderConstruct363 EmersonParser_msgSenderConstruct_return

    pANTLR3_BASE_TREE LTERM364_tree;
    pANTLR3_BASE_TREE string_literal365_tree;
    pANTLR3_BASE_TREE LTERM366_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_181;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_msgSenderConstruct;
    /* Initialize rule variables
     */
    msgConstruct_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(61)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM364       = NULL;
    string_literal365       = NULL;
    LTERM366       = NULL;
    e2.tree = NULL;

    msgSenderConstruct363.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM364_tree   = NULL;
    string_literal365_tree   = NULL;
    LTERM366_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_181   = NULL;
    #define CREATE_stream_181  if (stream_181 == NULL) {stream_181 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 181"); } 
    stream_msgSenderConstruct   = NULL;
    #define CREATE_stream_msgSenderConstruct  if (stream_msgSenderConstruct == NULL) {stream_msgSenderConstruct = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule msgSenderConstruct"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:455:9: ( ( msgSenderConstruct -> msgSenderConstruct ) ( ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct -> ^( SEND_CONSTRUCT $msgConstruct $e2) )* )
        // .//Emerson.g:455:11: ( msgSenderConstruct -> msgSenderConstruct ) ( ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct -> ^( SEND_CONSTRUCT $msgConstruct $e2) )*
        {
            // .//Emerson.g:455:11: ( msgSenderConstruct -> msgSenderConstruct )
            // .//Emerson.g:455:12: msgSenderConstruct
            {
                FOLLOWPUSH(FOLLOW_msgSenderConstruct_in_msgConstruct3941);
                msgSenderConstruct363=msgSenderConstruct(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgConstructEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_msgSenderConstruct; stream_msgSenderConstruct->add(stream_msgSenderConstruct, msgSenderConstruct363.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : msgSenderConstruct
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 455:31: -> msgSenderConstruct
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_msgSenderConstruct == NULL ? NULL : stream_msgSenderConstruct->nextTree(stream_msgSenderConstruct));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:456:11: ( ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct -> ^( SEND_CONSTRUCT $msgConstruct $e2) )*

            for (;;)
            {
                int alt193=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA193_0 = LA(1);
                    if ( (LA193_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA193_1 = LA(2);
                            if ( (synpred220_Emerson(ctx)) ) 
                            {
                                alt193=1;
                            }

                        }
                    }
                    else if ( (LA193_0 == 181) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA193_3 = LA(2);
                            if ( (synpred220_Emerson(ctx)) ) 
                            {
                                alt193=1;
                            }

                        }
                    }

                }
                switch (alt193) 
                {
            	case 1:
            	    // .//Emerson.g:456:12: ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct
            	    {

            	        // .//Emerson.g:456:12: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt191=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA191_0 = LA(1);
            	                if ( (LA191_0 == LTERM) ) 
            	                {
            	                    alt191=1;
            	                }

            	            }
            	            switch (alt191) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM364 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgConstruct3959); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM364, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop191;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop191: ; /* Jump out to here if this rule does not match */

            	        string_literal365 = (pANTLR3_COMMON_TOKEN) MATCHT(181, &FOLLOW_181_in_msgConstruct3962); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_181; stream_181->add(stream_181, string_literal365, NULL); }


            	        // .//Emerson.g:456:24: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt192=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA192_0 = LA(1);
            	                if ( (LA192_0 == LTERM) ) 
            	                {
            	                    alt192=1;
            	                }

            	            }
            	            switch (alt192) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM366 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgConstruct3964); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM366, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop192;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop192: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_msgSenderConstruct_in_msgConstruct3969);
            	        e2=msgSenderConstruct(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgSenderConstruct; stream_msgSenderConstruct->add(stream_msgSenderConstruct, e2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e2, msgConstruct
            	         * token labels      : 
            	         * rule labels       : retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 456:53: -> ^( SEND_CONSTRUCT $msgConstruct $e2)
            	        	{
            	        	    // .//Emerson.g:456:56: ^( SEND_CONSTRUCT $msgConstruct $e2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SEND_CONSTRUCT, (pANTLR3_UINT8)"SEND_CONSTRUCT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop193;	/* break out of the loop */
            	    break;
                }
            }
            loop193: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgConstructEx; /* Prevent compiler warnings */
    rulemsgConstructEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_181 != NULL) stream_181->free(stream_181);
        if (stream_msgSenderConstruct != NULL) stream_msgSenderConstruct->free(stream_msgSenderConstruct);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(61, msgConstruct_StartIndex); }
    return retval;
}
/* $ANTLR end msgConstruct */

/** 
 * $ANTLR start msgSenderConstruct
 * .//Emerson.g:459:1: msgSenderConstruct : ( ternaryExpression -> ternaryExpression ) ( ( LTERM )* '#' ( LTERM )* e2= ternaryExpression -> ^( SENDER_CONSTRUCT $msgSenderConstruct $e2) )* ;
 */
static EmersonParser_msgSenderConstruct_return
msgSenderConstruct(pEmersonParser ctx)
{   
    EmersonParser_msgSenderConstruct_return retval;
    ANTLR3_UINT32 msgSenderConstruct_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM368;
    pANTLR3_COMMON_TOKEN    char_literal369;
    pANTLR3_COMMON_TOKEN    LTERM370;
    EmersonParser_ternaryExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_ternaryExpression_return

    EmersonParser_ternaryExpression_return ternaryExpression367;
    #undef	RETURN_TYPE_ternaryExpression367
    #define	RETURN_TYPE_ternaryExpression367 EmersonParser_ternaryExpression_return

    pANTLR3_BASE_TREE LTERM368_tree;
    pANTLR3_BASE_TREE char_literal369_tree;
    pANTLR3_BASE_TREE LTERM370_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ternaryExpression;
    /* Initialize rule variables
     */
    msgSenderConstruct_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(62)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM368       = NULL;
    char_literal369       = NULL;
    LTERM370       = NULL;
    e2.tree = NULL;

    ternaryExpression367.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM368_tree   = NULL;
    char_literal369_tree   = NULL;
    LTERM370_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_ternaryExpression   = NULL;
    #define CREATE_stream_ternaryExpression  if (stream_ternaryExpression == NULL) {stream_ternaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ternaryExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:460:9: ( ( ternaryExpression -> ternaryExpression ) ( ( LTERM )* '#' ( LTERM )* e2= ternaryExpression -> ^( SENDER_CONSTRUCT $msgSenderConstruct $e2) )* )
        // .//Emerson.g:460:11: ( ternaryExpression -> ternaryExpression ) ( ( LTERM )* '#' ( LTERM )* e2= ternaryExpression -> ^( SENDER_CONSTRUCT $msgSenderConstruct $e2) )*
        {
            // .//Emerson.g:460:11: ( ternaryExpression -> ternaryExpression )
            // .//Emerson.g:460:12: ternaryExpression
            {
                FOLLOWPUSH(FOLLOW_ternaryExpression_in_msgSenderConstruct4009);
                ternaryExpression367=ternaryExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSenderConstructEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpression; stream_ternaryExpression->add(stream_ternaryExpression, ternaryExpression367.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : ternaryExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 460:30: -> ternaryExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ternaryExpression == NULL ? NULL : stream_ternaryExpression->nextTree(stream_ternaryExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:461:11: ( ( LTERM )* '#' ( LTERM )* e2= ternaryExpression -> ^( SENDER_CONSTRUCT $msgSenderConstruct $e2) )*

            for (;;)
            {
                int alt196=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA196_0 = LA(1);
                    if ( (LA196_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA196_1 = LA(2);
                            if ( (synpred223_Emerson(ctx)) ) 
                            {
                                alt196=1;
                            }

                        }
                    }
                    else if ( (LA196_0 == 182) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA196_3 = LA(2);
                            if ( (synpred223_Emerson(ctx)) ) 
                            {
                                alt196=1;
                            }

                        }
                    }

                }
                switch (alt196) 
                {
            	case 1:
            	    // .//Emerson.g:461:12: ( LTERM )* '#' ( LTERM )* e2= ternaryExpression
            	    {

            	        // .//Emerson.g:461:12: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt194=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA194_0 = LA(1);
            	                if ( (LA194_0 == LTERM) ) 
            	                {
            	                    alt194=1;
            	                }

            	            }
            	            switch (alt194) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM368 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSenderConstruct4027); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgSenderConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM368, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop194;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop194: ; /* Jump out to here if this rule does not match */

            	        char_literal369 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_msgSenderConstruct4030); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSenderConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, char_literal369, NULL); }


            	        // .//Emerson.g:461:23: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt195=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA195_0 = LA(1);
            	                if ( (LA195_0 == LTERM) ) 
            	                {
            	                    alt195=1;
            	                }

            	            }
            	            switch (alt195) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM370 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSenderConstruct4032); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgSenderConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM370, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop195;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop195: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_msgSenderConstruct4037);
            	        e2=ternaryExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSenderConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpression; stream_ternaryExpression->add(stream_ternaryExpression, e2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e2, msgSenderConstruct
            	         * token labels      : 
            	         * rule labels       : retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 461:51: -> ^( SENDER_CONSTRUCT $msgSenderConstruct $e2)
            	        	{
            	        	    // .//Emerson.g:461:54: ^( SENDER_CONSTRUCT $msgSenderConstruct $e2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SENDER_CONSTRUCT, (pANTLR3_UINT8)"SENDER_CONSTRUCT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop196;	/* break out of the loop */
            	    break;
                }
            }
            loop196: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSenderConstructEx; /* Prevent compiler warnings */
    rulemsgSenderConstructEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_ternaryExpression != NULL) stream_ternaryExpression->free(stream_ternaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(62, msgSenderConstruct_StartIndex); }
    return retval;
}
/* $ANTLR end msgSenderConstruct */

/** 
 * $ANTLR start ternaryExpression
 * .//Emerson.g:465:1: ternaryExpression : ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $ternaryExpression $expr1 $expr2) )* ;
 */
static EmersonParser_ternaryExpression_return
ternaryExpression(pEmersonParser ctx)
{   
    EmersonParser_ternaryExpression_return retval;
    ANTLR3_UINT32 ternaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM372;
    pANTLR3_COMMON_TOKEN    char_literal373;
    pANTLR3_COMMON_TOKEN    LTERM374;
    pANTLR3_COMMON_TOKEN    LTERM375;
    pANTLR3_COMMON_TOKEN    char_literal376;
    pANTLR3_COMMON_TOKEN    LTERM377;
    EmersonParser_assignmentExpression_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpression_return

    EmersonParser_logicalORExpression_return logicalORExpression371;
    #undef	RETURN_TYPE_logicalORExpression371
    #define	RETURN_TYPE_logicalORExpression371 EmersonParser_logicalORExpression_return

    pANTLR3_BASE_TREE LTERM372_tree;
    pANTLR3_BASE_TREE char_literal373_tree;
    pANTLR3_BASE_TREE LTERM374_tree;
    pANTLR3_BASE_TREE LTERM375_tree;
    pANTLR3_BASE_TREE char_literal376_tree;
    pANTLR3_BASE_TREE LTERM377_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_162;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpression;
    /* Initialize rule variables
     */
    ternaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(63)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM372       = NULL;
    char_literal373       = NULL;
    LTERM374       = NULL;
    LTERM375       = NULL;
    char_literal376       = NULL;
    LTERM377       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpression371.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM372_tree   = NULL;
    char_literal373_tree   = NULL;
    LTERM374_tree   = NULL;
    LTERM375_tree   = NULL;
    char_literal376_tree   = NULL;
    LTERM377_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_162   = NULL;
    #define CREATE_stream_162  if (stream_162 == NULL) {stream_162 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 162"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }
    stream_logicalORExpression   = NULL;
    #define CREATE_stream_logicalORExpression  if (stream_logicalORExpression == NULL) {stream_logicalORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:466:9: ( ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $ternaryExpression $expr1 $expr2) )* )
        // .//Emerson.g:466:11: ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $ternaryExpression $expr1 $expr2) )*
        {
            // .//Emerson.g:466:11: ( logicalORExpression -> logicalORExpression )
            // .//Emerson.g:466:12: logicalORExpression
            {
                FOLLOWPUSH(FOLLOW_logicalORExpression_in_ternaryExpression4078);
                logicalORExpression371=logicalORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleternaryExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpression; stream_logicalORExpression->add(stream_logicalORExpression, logicalORExpression371.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 466:32: -> logicalORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpression == NULL ? NULL : stream_logicalORExpression->nextTree(stream_logicalORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:466:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $ternaryExpression $expr1 $expr2) )*

            for (;;)
            {
                int alt201=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA201_0 = LA(1);
                    if ( (LA201_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA201_1 = LA(2);
                            if ( (synpred228_Emerson(ctx)) ) 
                            {
                                alt201=1;
                            }

                        }
                    }
                    else if ( (LA201_0 == 183) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA201_3 = LA(2);
                            if ( (synpred228_Emerson(ctx)) ) 
                            {
                                alt201=1;
                            }

                        }
                    }

                }
                switch (alt201) 
                {
            	case 1:
            	    // .//Emerson.g:466:57: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression
            	    {

            	        // .//Emerson.g:466:57: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt197=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA197_0 = LA(1);
            	                if ( (LA197_0 == LTERM) ) 
            	                {
            	                    alt197=1;
            	                }

            	            }
            	            switch (alt197) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM372 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpression4086); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM372, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop197;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop197: ; /* Jump out to here if this rule does not match */

            	        char_literal373 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_ternaryExpression4089); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, char_literal373, NULL); }


            	        // .//Emerson.g:466:68: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt198=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA198_0 = LA(1);
            	                if ( (LA198_0 == LTERM) ) 
            	                {
            	                    alt198=1;
            	                }

            	            }
            	            switch (alt198) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM374 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpression4091); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM374, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop198;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop198: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_ternaryExpression4096);
            	        expr1=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr1.tree, NULL); }

            	        // .//Emerson.g:466:102: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt199=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA199_0 = LA(1);
            	                if ( (LA199_0 == LTERM) ) 
            	                {
            	                    alt199=1;
            	                }

            	            }
            	            switch (alt199) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM375 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpression4098); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM375, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop199;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop199: ; /* Jump out to here if this rule does not match */

            	        char_literal376 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_ternaryExpression4101); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, char_literal376, NULL); }


            	        // .//Emerson.g:466:113: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt200=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA200_0 = LA(1);
            	                if ( (LA200_0 == LTERM) ) 
            	                {
            	                    alt200=1;
            	                }

            	            }
            	            switch (alt200) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM377 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpression4103); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM377, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop200;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop200: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_ternaryExpression4108);
            	        expr2=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : expr1, ternaryExpression, expr2
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 466:147: -> ^( TERNARYOP $ternaryExpression $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:466:150: ^( TERNARYOP $ternaryExpression $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP, (pANTLR3_UINT8)"TERNARYOP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop201;	/* break out of the loop */
            	    break;
                }
            }
            loop201: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleternaryExpressionEx; /* Prevent compiler warnings */
    ruleternaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_162 != NULL) stream_162->free(stream_162);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
        if (stream_logicalORExpression != NULL) stream_logicalORExpression->free(stream_logicalORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(63, ternaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end ternaryExpression */

/** 
 * $ANTLR start conditionalExpressionNoIn
 * .//Emerson.g:470:1: conditionalExpressionNoIn : msgRecvConstructNoIn ;
 */
static EmersonParser_conditionalExpressionNoIn_return
conditionalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpressionNoIn_return retval;
    ANTLR3_UINT32 conditionalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_msgRecvConstructNoIn_return msgRecvConstructNoIn378;
    #undef	RETURN_TYPE_msgRecvConstructNoIn378
    #define	RETURN_TYPE_msgRecvConstructNoIn378 EmersonParser_msgRecvConstructNoIn_return


    /* Initialize rule variables
     */
    conditionalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(64)) )
    {
    	retval.start = 0;

        return retval; 
    }
    msgRecvConstructNoIn378.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // .//Emerson.g:471:9: ( msgRecvConstructNoIn )
        // .//Emerson.g:471:11: msgRecvConstructNoIn
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn4151);
            msgRecvConstructNoIn378=msgRecvConstructNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconditionalExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, msgRecvConstructNoIn378.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionNoInEx; /* Prevent compiler warnings */
    ruleconditionalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(64, conditionalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpressionNoIn */

/** 
 * $ANTLR start msgRecvConstructNoIn
 * .//Emerson.g:475:1: msgRecvConstructNoIn : ( msgConstructNoIn -> msgConstructNoIn ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn -> ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3) )? (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )? ;
 */
static EmersonParser_msgRecvConstructNoIn_return
msgRecvConstructNoIn(pEmersonParser ctx)
{   
    EmersonParser_msgRecvConstructNoIn_return retval;
    ANTLR3_UINT32 msgRecvConstructNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM380;
    pANTLR3_COMMON_TOKEN    string_literal381;
    pANTLR3_COMMON_TOKEN    LTERM382;
    pANTLR3_COMMON_TOKEN    string_literal383;
    pANTLR3_COMMON_TOKEN    LTERM384;
    pANTLR3_COMMON_TOKEN    string_literal385;
    pANTLR3_COMMON_TOKEN    LTERM386;
    EmersonParser_msgConstructNoIn_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_msgConstructNoIn_return

    EmersonParser_msgConstructNoIn_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_msgConstructNoIn_return

    EmersonParser_msgConstructNoIn_return e4;
    #undef	RETURN_TYPE_e4
    #define	RETURN_TYPE_e4 EmersonParser_msgConstructNoIn_return

    EmersonParser_msgConstructNoIn_return e5;
    #undef	RETURN_TYPE_e5
    #define	RETURN_TYPE_e5 EmersonParser_msgConstructNoIn_return

    EmersonParser_msgConstructNoIn_return msgConstructNoIn379;
    #undef	RETURN_TYPE_msgConstructNoIn379
    #define	RETURN_TYPE_msgConstructNoIn379 EmersonParser_msgConstructNoIn_return

    pANTLR3_BASE_TREE LTERM380_tree;
    pANTLR3_BASE_TREE string_literal381_tree;
    pANTLR3_BASE_TREE LTERM382_tree;
    pANTLR3_BASE_TREE string_literal383_tree;
    pANTLR3_BASE_TREE LTERM384_tree;
    pANTLR3_BASE_TREE string_literal385_tree;
    pANTLR3_BASE_TREE LTERM386_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_180;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_msgConstructNoIn;
    /* Initialize rule variables
     */
    msgRecvConstructNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(65)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM380       = NULL;
    string_literal381       = NULL;
    LTERM382       = NULL;
    string_literal383       = NULL;
    LTERM384       = NULL;
    string_literal385       = NULL;
    LTERM386       = NULL;
    e2.tree = NULL;

    e3.tree = NULL;

    e4.tree = NULL;

    e5.tree = NULL;

    msgConstructNoIn379.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM380_tree   = NULL;
    string_literal381_tree   = NULL;
    LTERM382_tree   = NULL;
    string_literal383_tree   = NULL;
    LTERM384_tree   = NULL;
    string_literal385_tree   = NULL;
    LTERM386_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_180   = NULL;
    #define CREATE_stream_180  if (stream_180 == NULL) {stream_180 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 180"); } 
    stream_msgConstructNoIn   = NULL;
    #define CREATE_stream_msgConstructNoIn  if (stream_msgConstructNoIn == NULL) {stream_msgConstructNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule msgConstructNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:476:9: ( ( msgConstructNoIn -> msgConstructNoIn ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn -> ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3) )? (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )? )
        // .//Emerson.g:476:11: ( msgConstructNoIn -> msgConstructNoIn ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn -> ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3) )? (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )?
        {
            // .//Emerson.g:476:11: ( msgConstructNoIn -> msgConstructNoIn )
            // .//Emerson.g:476:12: msgConstructNoIn
            {
                FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4178);
                msgConstructNoIn379=msgConstructNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgRecvConstructNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_msgConstructNoIn; stream_msgConstructNoIn->add(stream_msgConstructNoIn, msgConstructNoIn379.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : msgConstructNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 476:29: -> msgConstructNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_msgConstructNoIn == NULL ? NULL : stream_msgConstructNoIn->nextTree(stream_msgConstructNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:477:11: ( ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn -> ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3) )?
            {
                int alt204=2;
                {
                    int LA204_0 = LA(1);
                    if ( (LA204_0 == LTERM) ) 
                    {
                        {
                            int LA204_1 = LA(2);
                            if ( (synpred231_Emerson(ctx)) ) 
                            {
                                alt204=1;
                            }
                        }
                    }
                    else if ( (LA204_0 == 180) ) 
                    {
                        {
                            int LA204_2 = LA(2);
                            if ( (synpred231_Emerson(ctx)) ) 
                            {
                                alt204=1;
                            }
                        }
                    }
                }
                switch (alt204) 
                {
            	case 1:
            	    // .//Emerson.g:477:13: ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn
            	    {

            	        // .//Emerson.g:477:13: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt202=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA202_0 = LA(1);
            	                if ( (LA202_0 == LTERM) ) 
            	                {
            	                    alt202=1;
            	                }

            	            }
            	            switch (alt202) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM380 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstructNoIn4197); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM380, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop202;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop202: ; /* Jump out to here if this rule does not match */

            	        string_literal381 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_msgRecvConstructNoIn4200); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, string_literal381, NULL); }


            	        // .//Emerson.g:477:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt203=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA203_0 = LA(1);
            	                if ( (LA203_0 == LTERM) ) 
            	                {
            	                    alt203=1;
            	                }

            	            }
            	            switch (alt203) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM382 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstructNoIn4202); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM382, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop203;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop203: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4207);
            	        e2=msgConstructNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstructNoIn; stream_msgConstructNoIn->add(stream_msgConstructNoIn, e2.tree, NULL); }
            	        string_literal383 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_msgRecvConstructNoIn4209); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, string_literal383, NULL); }

            	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4213);
            	        e3=msgConstructNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstructNoIn; stream_msgConstructNoIn->add(stream_msgConstructNoIn, e3.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : msgRecvConstructNoIn, e2, e3
            	         * token labels      : 
            	         * rule labels       : e3, retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 477:77: -> ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3)
            	        	{
            	        	    // .//Emerson.g:477:80: ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV_AND_SENDER_NO_IN, (pANTLR3_UINT8)"MESSAGE_RECV_AND_SENDER_NO_IN"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

                }
            }

            // .//Emerson.g:478:11: (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )?
            {
                int alt207=2;
                alt207 = cdfa207.predict(ctx, RECOGNIZER, ISTREAM, &cdfa207);
                if  (HASEXCEPTION())
                {
                    goto rulemsgRecvConstructNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt207) 
                {
            	case 1:
            	    // .//Emerson.g:478:13: e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn
            	    {
            	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4246);
            	        e4=msgConstructNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstructNoIn; stream_msgConstructNoIn->add(stream_msgConstructNoIn, e4.tree, NULL); }

            	        // .//Emerson.g:478:33: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt205=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA205_0 = LA(1);
            	                if ( (LA205_0 == LTERM) ) 
            	                {
            	                    alt205=1;
            	                }

            	            }
            	            switch (alt205) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM384 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstructNoIn4248); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM384, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop205;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop205: ; /* Jump out to here if this rule does not match */

            	        string_literal385 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_msgRecvConstructNoIn4251); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, string_literal385, NULL); }


            	        // .//Emerson.g:478:45: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt206=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA206_0 = LA(1);
            	                if ( (LA206_0 == LTERM) ) 
            	                {
            	                    alt206=1;
            	                }

            	            }
            	            switch (alt206) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM386 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstructNoIn4253); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM386, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop206;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop206: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4258);
            	        e5=msgConstructNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstructNoIn; stream_msgConstructNoIn->add(stream_msgConstructNoIn, e5.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e5, e4, msgRecvConstructNoIn
            	         * token labels      : 
            	         * rule labels       : e4, retval, e5
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e4;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e5;

            	        	stream_e4=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e4", e4.tree != NULL ? e4.tree : NULL);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e5=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e5", e5.tree != NULL ? e5.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 478:72: -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5)
            	        	{
            	        	    // .//Emerson.g:478:75: ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV_NO_SENDER_NO_IN, (pANTLR3_UINT8)"MESSAGE_RECV_NO_SENDER_NO_IN"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e4 == NULL ? NULL : stream_e4->nextTree(stream_e4));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e5 == NULL ? NULL : stream_e5->nextTree(stream_e5));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_e4 != NULL) stream_e4->free(stream_e4);
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e5 != NULL) stream_e5->free(stream_e5);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvConstructNoInEx; /* Prevent compiler warnings */
    rulemsgRecvConstructNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_180 != NULL) stream_180->free(stream_180);
        if (stream_msgConstructNoIn != NULL) stream_msgConstructNoIn->free(stream_msgConstructNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(65, msgRecvConstructNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end msgRecvConstructNoIn */

/** 
 * $ANTLR start msgConstructNoIn
 * .//Emerson.g:482:1: msgConstructNoIn : ( msgSenderConstructNoIn -> msgSenderConstructNoIn ) ( ( LTERM )* '>>' e2= msgSenderConstructNoIn -> ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2) )* ;
 */
static EmersonParser_msgConstructNoIn_return
msgConstructNoIn(pEmersonParser ctx)
{   
    EmersonParser_msgConstructNoIn_return retval;
    ANTLR3_UINT32 msgConstructNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM388;
    pANTLR3_COMMON_TOKEN    string_literal389;
    EmersonParser_msgSenderConstructNoIn_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_msgSenderConstructNoIn_return

    EmersonParser_msgSenderConstructNoIn_return msgSenderConstructNoIn387;
    #undef	RETURN_TYPE_msgSenderConstructNoIn387
    #define	RETURN_TYPE_msgSenderConstructNoIn387 EmersonParser_msgSenderConstructNoIn_return

    pANTLR3_BASE_TREE LTERM388_tree;
    pANTLR3_BASE_TREE string_literal389_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_181;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_msgSenderConstructNoIn;
    /* Initialize rule variables
     */
    msgConstructNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(66)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM388       = NULL;
    string_literal389       = NULL;
    e2.tree = NULL;

    msgSenderConstructNoIn387.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM388_tree   = NULL;
    string_literal389_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_181   = NULL;
    #define CREATE_stream_181  if (stream_181 == NULL) {stream_181 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 181"); } 
    stream_msgSenderConstructNoIn   = NULL;
    #define CREATE_stream_msgSenderConstructNoIn  if (stream_msgSenderConstructNoIn == NULL) {stream_msgSenderConstructNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule msgSenderConstructNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:483:9: ( ( msgSenderConstructNoIn -> msgSenderConstructNoIn ) ( ( LTERM )* '>>' e2= msgSenderConstructNoIn -> ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2) )* )
        // .//Emerson.g:483:11: ( msgSenderConstructNoIn -> msgSenderConstructNoIn ) ( ( LTERM )* '>>' e2= msgSenderConstructNoIn -> ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2) )*
        {
            // .//Emerson.g:483:11: ( msgSenderConstructNoIn -> msgSenderConstructNoIn )
            // .//Emerson.g:483:12: msgSenderConstructNoIn
            {
                FOLLOWPUSH(FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4311);
                msgSenderConstructNoIn387=msgSenderConstructNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgConstructNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_msgSenderConstructNoIn; stream_msgSenderConstructNoIn->add(stream_msgSenderConstructNoIn, msgSenderConstructNoIn387.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : msgSenderConstructNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 483:35: -> msgSenderConstructNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_msgSenderConstructNoIn == NULL ? NULL : stream_msgSenderConstructNoIn->nextTree(stream_msgSenderConstructNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:484:11: ( ( LTERM )* '>>' e2= msgSenderConstructNoIn -> ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2) )*

            for (;;)
            {
                int alt209=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA209_0 = LA(1);
                    if ( (LA209_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA209_1 = LA(2);
                            if ( (synpred236_Emerson(ctx)) ) 
                            {
                                alt209=1;
                            }

                        }
                    }
                    else if ( (LA209_0 == 181) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA209_3 = LA(2);
                            if ( (synpred236_Emerson(ctx)) ) 
                            {
                                alt209=1;
                            }

                        }
                    }

                }
                switch (alt209) 
                {
            	case 1:
            	    // .//Emerson.g:484:12: ( LTERM )* '>>' e2= msgSenderConstructNoIn
            	    {

            	        // .//Emerson.g:484:12: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt208=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA208_0 = LA(1);
            	                if ( (LA208_0 == LTERM) ) 
            	                {
            	                    alt208=1;
            	                }

            	            }
            	            switch (alt208) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM388 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgConstructNoIn4329); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM388, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop208;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop208: ; /* Jump out to here if this rule does not match */

            	        string_literal389 = (pANTLR3_COMMON_TOKEN) MATCHT(181, &FOLLOW_181_in_msgConstructNoIn4332); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_181; stream_181->add(stream_181, string_literal389, NULL); }

            	        FOLLOWPUSH(FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4336);
            	        e2=msgSenderConstructNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgSenderConstructNoIn; stream_msgSenderConstructNoIn->add(stream_msgSenderConstructNoIn, e2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : msgConstructNoIn, e2
            	         * token labels      : 
            	         * rule labels       : retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 484:50: -> ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2)
            	        	{
            	        	    // .//Emerson.g:484:52: ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SEND_CONSTRUCT_NO_IN, (pANTLR3_UINT8)"SEND_CONSTRUCT_NO_IN"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop209;	/* break out of the loop */
            	    break;
                }
            }
            loop209: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgConstructNoInEx; /* Prevent compiler warnings */
    rulemsgConstructNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_181 != NULL) stream_181->free(stream_181);
        if (stream_msgSenderConstructNoIn != NULL) stream_msgSenderConstructNoIn->free(stream_msgSenderConstructNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(66, msgConstructNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end msgConstructNoIn */

/** 
 * $ANTLR start msgSenderConstructNoIn
 * .//Emerson.g:487:1: msgSenderConstructNoIn : ( ternaryExpressionNoIn -> ternaryExpressionNoIn ) ( ( LTERM )* '#' e2= ternaryExpressionNoIn -> ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2) )* ;
 */
static EmersonParser_msgSenderConstructNoIn_return
msgSenderConstructNoIn(pEmersonParser ctx)
{   
    EmersonParser_msgSenderConstructNoIn_return retval;
    ANTLR3_UINT32 msgSenderConstructNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM391;
    pANTLR3_COMMON_TOKEN    char_literal392;
    EmersonParser_ternaryExpressionNoIn_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_ternaryExpressionNoIn_return

    EmersonParser_ternaryExpressionNoIn_return ternaryExpressionNoIn390;
    #undef	RETURN_TYPE_ternaryExpressionNoIn390
    #define	RETURN_TYPE_ternaryExpressionNoIn390 EmersonParser_ternaryExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM391_tree;
    pANTLR3_BASE_TREE char_literal392_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ternaryExpressionNoIn;
    /* Initialize rule variables
     */
    msgSenderConstructNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(67)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM391       = NULL;
    char_literal392       = NULL;
    e2.tree = NULL;

    ternaryExpressionNoIn390.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM391_tree   = NULL;
    char_literal392_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_ternaryExpressionNoIn   = NULL;
    #define CREATE_stream_ternaryExpressionNoIn  if (stream_ternaryExpressionNoIn == NULL) {stream_ternaryExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ternaryExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:488:9: ( ( ternaryExpressionNoIn -> ternaryExpressionNoIn ) ( ( LTERM )* '#' e2= ternaryExpressionNoIn -> ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2) )* )
        // .//Emerson.g:488:11: ( ternaryExpressionNoIn -> ternaryExpressionNoIn ) ( ( LTERM )* '#' e2= ternaryExpressionNoIn -> ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2) )*
        {
            // .//Emerson.g:488:11: ( ternaryExpressionNoIn -> ternaryExpressionNoIn )
            // .//Emerson.g:488:12: ternaryExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4384);
                ternaryExpressionNoIn390=ternaryExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSenderConstructNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpressionNoIn; stream_ternaryExpressionNoIn->add(stream_ternaryExpressionNoIn, ternaryExpressionNoIn390.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : ternaryExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 488:34: -> ternaryExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ternaryExpressionNoIn == NULL ? NULL : stream_ternaryExpressionNoIn->nextTree(stream_ternaryExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:489:11: ( ( LTERM )* '#' e2= ternaryExpressionNoIn -> ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2) )*

            for (;;)
            {
                int alt211=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA211_0 = LA(1);
                    if ( (LA211_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA211_1 = LA(2);
                            if ( (synpred238_Emerson(ctx)) ) 
                            {
                                alt211=1;
                            }

                        }
                    }
                    else if ( (LA211_0 == 182) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA211_3 = LA(2);
                            if ( (synpred238_Emerson(ctx)) ) 
                            {
                                alt211=1;
                            }

                        }
                    }

                }
                switch (alt211) 
                {
            	case 1:
            	    // .//Emerson.g:489:12: ( LTERM )* '#' e2= ternaryExpressionNoIn
            	    {

            	        // .//Emerson.g:489:12: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt210=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA210_0 = LA(1);
            	                if ( (LA210_0 == LTERM) ) 
            	                {
            	                    alt210=1;
            	                }

            	            }
            	            switch (alt210) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM391 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSenderConstructNoIn4402); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgSenderConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM391, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop210;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop210: ; /* Jump out to here if this rule does not match */

            	        char_literal392 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_msgSenderConstructNoIn4405); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSenderConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, char_literal392, NULL); }

            	        FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4409);
            	        e2=ternaryExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSenderConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpressionNoIn; stream_ternaryExpressionNoIn->add(stream_ternaryExpressionNoIn, e2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e2, msgSenderConstructNoIn
            	         * token labels      : 
            	         * rule labels       : retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 489:48: -> ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2)
            	        	{
            	        	    // .//Emerson.g:489:50: ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SENDER_CONSTRUCT_NO_IN, (pANTLR3_UINT8)"SENDER_CONSTRUCT_NO_IN"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop211;	/* break out of the loop */
            	    break;
                }
            }
            loop211: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSenderConstructNoInEx; /* Prevent compiler warnings */
    rulemsgSenderConstructNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_ternaryExpressionNoIn != NULL) stream_ternaryExpressionNoIn->free(stream_ternaryExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(67, msgSenderConstructNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end msgSenderConstructNoIn */

/** 
 * $ANTLR start ternaryExpressionNoIn
 * .//Emerson.g:494:1: ternaryExpressionNoIn : ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2) )* ;
 */
static EmersonParser_ternaryExpressionNoIn_return
ternaryExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_ternaryExpressionNoIn_return retval;
    ANTLR3_UINT32 ternaryExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM394;
    pANTLR3_COMMON_TOKEN    char_literal395;
    pANTLR3_COMMON_TOKEN    LTERM396;
    pANTLR3_COMMON_TOKEN    LTERM397;
    pANTLR3_COMMON_TOKEN    char_literal398;
    pANTLR3_COMMON_TOKEN    LTERM399;
    EmersonParser_assignmentExpressionNoIn_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_assignmentExpressionNoIn_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_logicalORExpressionNoIn_return logicalORExpressionNoIn393;
    #undef	RETURN_TYPE_logicalORExpressionNoIn393
    #define	RETURN_TYPE_logicalORExpressionNoIn393 EmersonParser_logicalORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM394_tree;
    pANTLR3_BASE_TREE char_literal395_tree;
    pANTLR3_BASE_TREE LTERM396_tree;
    pANTLR3_BASE_TREE LTERM397_tree;
    pANTLR3_BASE_TREE char_literal398_tree;
    pANTLR3_BASE_TREE LTERM399_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_162;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpressionNoIn;
    /* Initialize rule variables
     */
    ternaryExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(68)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM394       = NULL;
    char_literal395       = NULL;
    LTERM396       = NULL;
    LTERM397       = NULL;
    char_literal398       = NULL;
    LTERM399       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpressionNoIn393.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM394_tree   = NULL;
    char_literal395_tree   = NULL;
    LTERM396_tree   = NULL;
    LTERM397_tree   = NULL;
    char_literal398_tree   = NULL;
    LTERM399_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_162   = NULL;
    #define CREATE_stream_162  if (stream_162 == NULL) {stream_162 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 162"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_logicalORExpressionNoIn   = NULL;
    #define CREATE_stream_logicalORExpressionNoIn  if (stream_logicalORExpressionNoIn == NULL) {stream_logicalORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:495:9: ( ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2) )* )
        // .//Emerson.g:495:11: ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2) )*
        {
            // .//Emerson.g:495:11: ( logicalORExpressionNoIn -> logicalORExpressionNoIn )
            // .//Emerson.g:495:12: logicalORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn4475);
                logicalORExpressionNoIn393=logicalORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleternaryExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpressionNoIn; stream_logicalORExpressionNoIn->add(stream_logicalORExpressionNoIn, logicalORExpressionNoIn393.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 495:36: -> logicalORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpressionNoIn == NULL ? NULL : stream_logicalORExpressionNoIn->nextTree(stream_logicalORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:495:64: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2) )*

            for (;;)
            {
                int alt216=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA216_0 = LA(1);
                    if ( (LA216_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA216_1 = LA(2);
                            if ( (synpred243_Emerson(ctx)) ) 
                            {
                                alt216=1;
                            }

                        }
                    }
                    else if ( (LA216_0 == 183) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA216_3 = LA(2);
                            if ( (synpred243_Emerson(ctx)) ) 
                            {
                                alt216=1;
                            }

                        }
                    }

                }
                switch (alt216) 
                {
            	case 1:
            	    // .//Emerson.g:495:65: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn
            	    {

            	        // .//Emerson.g:495:65: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt212=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA212_0 = LA(1);
            	                if ( (LA212_0 == LTERM) ) 
            	                {
            	                    alt212=1;
            	                }

            	            }
            	            switch (alt212) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM394 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpressionNoIn4483); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM394, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop212;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop212: ; /* Jump out to here if this rule does not match */

            	        char_literal395 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_ternaryExpressionNoIn4486); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, char_literal395, NULL); }


            	        // .//Emerson.g:495:76: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt213=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA213_0 = LA(1);
            	                if ( (LA213_0 == LTERM) ) 
            	                {
            	                    alt213=1;
            	                }

            	            }
            	            switch (alt213) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM396 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpressionNoIn4488); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM396, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop213;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop213: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4493);
            	        expr1=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr1.tree, NULL); }

            	        // .//Emerson.g:495:114: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt214=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA214_0 = LA(1);
            	                if ( (LA214_0 == LTERM) ) 
            	                {
            	                    alt214=1;
            	                }

            	            }
            	            switch (alt214) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM397 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpressionNoIn4495); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM397, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop214;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop214: ; /* Jump out to here if this rule does not match */

            	        char_literal398 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_ternaryExpressionNoIn4498); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, char_literal398, NULL); }


            	        // .//Emerson.g:495:125: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt215=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA215_0 = LA(1);
            	                if ( (LA215_0 == LTERM) ) 
            	                {
            	                    alt215=1;
            	                }

            	            }
            	            switch (alt215) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM399 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpressionNoIn4500); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM399, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop215;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop215: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4505);
            	        expr2=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : ternaryExpressionNoIn, expr2, expr1
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 495:163: -> ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:495:166: ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP_NO_IN, (pANTLR3_UINT8)"TERNARYOP_NO_IN"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop216;	/* break out of the loop */
            	    break;
                }
            }
            loop216: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleternaryExpressionNoInEx; /* Prevent compiler warnings */
    ruleternaryExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_162 != NULL) stream_162->free(stream_162);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_logicalORExpressionNoIn != NULL) stream_logicalORExpressionNoIn->free(stream_logicalORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(68, ternaryExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end ternaryExpressionNoIn */

/** 
 * $ANTLR start logicalORExpression
 * .//Emerson.g:499:1: logicalORExpression : ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* ;
 */
static EmersonParser_logicalORExpression_return
logicalORExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpression_return retval;
    ANTLR3_UINT32 logicalORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM401;
    pANTLR3_COMMON_TOKEN    string_literal402;
    pANTLR3_COMMON_TOKEN    LTERM403;
    EmersonParser_logicalANDExpression_return logicalANDExpression400;
    #undef	RETURN_TYPE_logicalANDExpression400
    #define	RETURN_TYPE_logicalANDExpression400 EmersonParser_logicalANDExpression_return

    EmersonParser_logicalANDExpression_return logicalANDExpression404;
    #undef	RETURN_TYPE_logicalANDExpression404
    #define	RETURN_TYPE_logicalANDExpression404 EmersonParser_logicalANDExpression_return

    pANTLR3_BASE_TREE LTERM401_tree;
    pANTLR3_BASE_TREE string_literal402_tree;
    pANTLR3_BASE_TREE LTERM403_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpression;
    /* Initialize rule variables
     */
    logicalORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(69)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM401       = NULL;
    string_literal402       = NULL;
    LTERM403       = NULL;
    logicalANDExpression400.tree = NULL;

    logicalANDExpression404.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM401_tree   = NULL;
    string_literal402_tree   = NULL;
    LTERM403_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_logicalANDExpression   = NULL;
    #define CREATE_stream_logicalANDExpression  if (stream_logicalANDExpression == NULL) {stream_logicalANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:500:2: ( ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* )
        // .//Emerson.g:500:4: ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
        {
            // .//Emerson.g:500:4: ( logicalANDExpression -> logicalANDExpression )
            // .//Emerson.g:500:5: logicalANDExpression
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression4558);
                logicalANDExpression400=logicalANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression400.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 500:26: -> logicalANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:500:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*

            for (;;)
            {
                int alt219=2;
                alt219 = cdfa219.predict(ctx, RECOGNIZER, ISTREAM, &cdfa219);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt219) 
                {
            	case 1:
            	    // .//Emerson.g:500:51: ( LTERM )* '||' ( LTERM )* logicalANDExpression
            	    {

            	        // .//Emerson.g:500:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt217=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA217_0 = LA(1);
            	                if ( (LA217_0 == LTERM) ) 
            	                {
            	                    alt217=1;
            	                }

            	            }
            	            switch (alt217) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM401 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression4565); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM401, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop217;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop217: ; /* Jump out to here if this rule does not match */

            	        string_literal402 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_logicalORExpression4568); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, string_literal402, NULL); }


            	        // .//Emerson.g:500:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt218=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA218_0 = LA(1);
            	                if ( (LA218_0 == LTERM) ) 
            	                {
            	                    alt218=1;
            	                }

            	            }
            	            switch (alt218) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM403 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression4570); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM403, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop218;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop218: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression4573);
            	        logicalANDExpression404=logicalANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression404.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpression, logicalORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 500:91: -> ^( OR $logicalORExpression logicalANDExpression )
            	        	{
            	        	    // .//Emerson.g:500:94: ^( OR $logicalORExpression logicalANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop219;	/* break out of the loop */
            	    break;
                }
            }
            loop219: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionEx; /* Prevent compiler warnings */
    rulelogicalORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_logicalANDExpression != NULL) stream_logicalANDExpression->free(stream_logicalANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(69, logicalORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpression */

/** 
 * $ANTLR start logicalANDExpression
 * .//Emerson.g:503:1: logicalANDExpression : ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* ;
 */
static EmersonParser_logicalANDExpression_return
logicalANDExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpression_return retval;
    ANTLR3_UINT32 logicalANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM406;
    pANTLR3_COMMON_TOKEN    string_literal407;
    pANTLR3_COMMON_TOKEN    LTERM408;
    EmersonParser_bitwiseORExpression_return bitwiseORExpression405;
    #undef	RETURN_TYPE_bitwiseORExpression405
    #define	RETURN_TYPE_bitwiseORExpression405 EmersonParser_bitwiseORExpression_return

    EmersonParser_bitwiseORExpression_return bitwiseORExpression409;
    #undef	RETURN_TYPE_bitwiseORExpression409
    #define	RETURN_TYPE_bitwiseORExpression409 EmersonParser_bitwiseORExpression_return

    pANTLR3_BASE_TREE LTERM406_tree;
    pANTLR3_BASE_TREE string_literal407_tree;
    pANTLR3_BASE_TREE LTERM408_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_185;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpression;
    /* Initialize rule variables
     */
    logicalANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(70)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM406       = NULL;
    string_literal407       = NULL;
    LTERM408       = NULL;
    bitwiseORExpression405.tree = NULL;

    bitwiseORExpression409.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM406_tree   = NULL;
    string_literal407_tree   = NULL;
    LTERM408_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_185   = NULL;
    #define CREATE_stream_185  if (stream_185 == NULL) {stream_185 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 185"); } 
    stream_bitwiseORExpression   = NULL;
    #define CREATE_stream_bitwiseORExpression  if (stream_bitwiseORExpression == NULL) {stream_bitwiseORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:504:2: ( ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* )
        // .//Emerson.g:504:4: ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
        {
            // .//Emerson.g:504:4: ( bitwiseORExpression -> bitwiseORExpression )
            // .//Emerson.g:504:5: bitwiseORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression4600);
                bitwiseORExpression405=bitwiseORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression405.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 504:25: -> bitwiseORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:504:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*

            for (;;)
            {
                int alt222=2;
                alt222 = cdfa222.predict(ctx, RECOGNIZER, ISTREAM, &cdfa222);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt222) 
                {
            	case 1:
            	    // .//Emerson.g:504:49: ( LTERM )* '&&' ( LTERM )* bitwiseORExpression
            	    {

            	        // .//Emerson.g:504:49: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt220=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA220_0 = LA(1);
            	                if ( (LA220_0 == LTERM) ) 
            	                {
            	                    alt220=1;
            	                }

            	            }
            	            switch (alt220) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM406 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression4607); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM406, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop220;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop220: ; /* Jump out to here if this rule does not match */

            	        string_literal407 = (pANTLR3_COMMON_TOKEN) MATCHT(185, &FOLLOW_185_in_logicalANDExpression4610); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_185; stream_185->add(stream_185, string_literal407, NULL); }


            	        // .//Emerson.g:504:61: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt221=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA221_0 = LA(1);
            	                if ( (LA221_0 == LTERM) ) 
            	                {
            	                    alt221=1;
            	                }

            	            }
            	            switch (alt221) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM408 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression4612); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM408, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop221;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop221: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression4615);
            	        bitwiseORExpression409=bitwiseORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression409.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpression, bitwiseORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 504:89: -> ^( AND $logicalANDExpression bitwiseORExpression )
            	        	{
            	        	    // .//Emerson.g:504:92: ^( AND $logicalANDExpression bitwiseORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop222;	/* break out of the loop */
            	    break;
                }
            }
            loop222: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_185 != NULL) stream_185->free(stream_185);
        if (stream_bitwiseORExpression != NULL) stream_bitwiseORExpression->free(stream_bitwiseORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(70, logicalANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpression */

/** 
 * $ANTLR start logicalORExpressionNoIn
 * .//Emerson.g:507:1: logicalORExpressionNoIn : ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* ;
 */
static EmersonParser_logicalORExpressionNoIn_return
logicalORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM411;
    pANTLR3_COMMON_TOKEN    string_literal412;
    pANTLR3_COMMON_TOKEN    LTERM413;
    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn410;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn410
    #define	RETURN_TYPE_logicalANDExpressionNoIn410 EmersonParser_logicalANDExpressionNoIn_return

    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn414;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn414
    #define	RETURN_TYPE_logicalANDExpressionNoIn414 EmersonParser_logicalANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM411_tree;
    pANTLR3_BASE_TREE string_literal412_tree;
    pANTLR3_BASE_TREE LTERM413_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpressionNoIn;
    /* Initialize rule variables
     */
    logicalORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(71)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM411       = NULL;
    string_literal412       = NULL;
    LTERM413       = NULL;
    logicalANDExpressionNoIn410.tree = NULL;

    logicalANDExpressionNoIn414.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM411_tree   = NULL;
    string_literal412_tree   = NULL;
    LTERM413_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_logicalANDExpressionNoIn   = NULL;
    #define CREATE_stream_logicalANDExpressionNoIn  if (stream_logicalANDExpressionNoIn == NULL) {stream_logicalANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:508:2: ( ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* )
        // .//Emerson.g:508:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
        {
            // .//Emerson.g:508:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn )
            // .//Emerson.g:508:5: logicalANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4643);
                logicalANDExpressionNoIn410=logicalANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn410.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 508:30: -> logicalANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:508:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*

            for (;;)
            {
                int alt225=2;
                alt225 = cdfa225.predict(ctx, RECOGNIZER, ISTREAM, &cdfa225);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt225) 
                {
            	case 1:
            	    // .//Emerson.g:508:59: ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn
            	    {

            	        // .//Emerson.g:508:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt223=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA223_0 = LA(1);
            	                if ( (LA223_0 == LTERM) ) 
            	                {
            	                    alt223=1;
            	                }

            	            }
            	            switch (alt223) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM411 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn4650); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM411, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop223;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop223: ; /* Jump out to here if this rule does not match */

            	        string_literal412 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_logicalORExpressionNoIn4653); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, string_literal412, NULL); }


            	        // .//Emerson.g:508:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt224=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA224_0 = LA(1);
            	                if ( (LA224_0 == LTERM) ) 
            	                {
            	                    alt224=1;
            	                }

            	            }
            	            switch (alt224) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM413 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn4655); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM413, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop224;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop224: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4658);
            	        logicalANDExpressionNoIn414=logicalANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn414.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpressionNoIn, logicalORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 508:103: -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:508:106: ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop225;	/* break out of the loop */
            	    break;
                }
            }
            loop225: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_logicalANDExpressionNoIn != NULL) stream_logicalANDExpressionNoIn->free(stream_logicalANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(71, logicalORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpressionNoIn
 * .//Emerson.g:512:1: logicalANDExpressionNoIn : ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* ;
 */
static EmersonParser_logicalANDExpressionNoIn_return
logicalANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM416;
    pANTLR3_COMMON_TOKEN    string_literal417;
    pANTLR3_COMMON_TOKEN    LTERM418;
    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn415;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn415
    #define	RETURN_TYPE_bitwiseORExpressionNoIn415 EmersonParser_bitwiseORExpressionNoIn_return

    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn419;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn419
    #define	RETURN_TYPE_bitwiseORExpressionNoIn419 EmersonParser_bitwiseORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM416_tree;
    pANTLR3_BASE_TREE string_literal417_tree;
    pANTLR3_BASE_TREE LTERM418_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_185;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpressionNoIn;
    /* Initialize rule variables
     */
    logicalANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(72)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM416       = NULL;
    string_literal417       = NULL;
    LTERM418       = NULL;
    bitwiseORExpressionNoIn415.tree = NULL;

    bitwiseORExpressionNoIn419.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM416_tree   = NULL;
    string_literal417_tree   = NULL;
    LTERM418_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_185   = NULL;
    #define CREATE_stream_185  if (stream_185 == NULL) {stream_185 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 185"); } 
    stream_bitwiseORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseORExpressionNoIn  if (stream_bitwiseORExpressionNoIn == NULL) {stream_bitwiseORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:513:2: ( ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* )
        // .//Emerson.g:513:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
        {
            // .//Emerson.g:513:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn )
            // .//Emerson.g:513:5: bitwiseORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4687);
                bitwiseORExpressionNoIn415=bitwiseORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn415.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 513:29: -> bitwiseORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:513:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*

            for (;;)
            {
                int alt228=2;
                alt228 = cdfa228.predict(ctx, RECOGNIZER, ISTREAM, &cdfa228);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt228) 
                {
            	case 1:
            	    // .//Emerson.g:513:58: ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn
            	    {

            	        // .//Emerson.g:513:58: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt226=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA226_0 = LA(1);
            	                if ( (LA226_0 == LTERM) ) 
            	                {
            	                    alt226=1;
            	                }

            	            }
            	            switch (alt226) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM416 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn4695); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM416, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop226;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop226: ; /* Jump out to here if this rule does not match */

            	        string_literal417 = (pANTLR3_COMMON_TOKEN) MATCHT(185, &FOLLOW_185_in_logicalANDExpressionNoIn4698); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_185; stream_185->add(stream_185, string_literal417, NULL); }


            	        // .//Emerson.g:513:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt227=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA227_0 = LA(1);
            	                if ( (LA227_0 == LTERM) ) 
            	                {
            	                    alt227=1;
            	                }

            	            }
            	            switch (alt227) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM418 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn4700); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM418, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop227;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop227: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4703);
            	        bitwiseORExpressionNoIn419=bitwiseORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn419.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpressionNoIn, bitwiseORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 513:101: -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:513:104: ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop228;	/* break out of the loop */
            	    break;
                }
            }
            loop228: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_185 != NULL) stream_185->free(stream_185);
        if (stream_bitwiseORExpressionNoIn != NULL) stream_bitwiseORExpressionNoIn->free(stream_bitwiseORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(72, logicalANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpressionNoIn */

/** 
 * $ANTLR start bitwiseORExpression
 * .//Emerson.g:516:1: bitwiseORExpression : ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* ;
 */
static EmersonParser_bitwiseORExpression_return
bitwiseORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpression_return retval;
    ANTLR3_UINT32 bitwiseORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM421;
    pANTLR3_COMMON_TOKEN    char_literal422;
    pANTLR3_COMMON_TOKEN    LTERM423;
    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression420;
    #undef	RETURN_TYPE_bitwiseXORExpression420
    #define	RETURN_TYPE_bitwiseXORExpression420 EmersonParser_bitwiseXORExpression_return

    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression424;
    #undef	RETURN_TYPE_bitwiseXORExpression424
    #define	RETURN_TYPE_bitwiseXORExpression424 EmersonParser_bitwiseXORExpression_return

    pANTLR3_BASE_TREE LTERM421_tree;
    pANTLR3_BASE_TREE char_literal422_tree;
    pANTLR3_BASE_TREE LTERM423_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_186;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpression;
    /* Initialize rule variables
     */
    bitwiseORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(73)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM421       = NULL;
    char_literal422       = NULL;
    LTERM423       = NULL;
    bitwiseXORExpression420.tree = NULL;

    bitwiseXORExpression424.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM421_tree   = NULL;
    char_literal422_tree   = NULL;
    LTERM423_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_186   = NULL;
    #define CREATE_stream_186  if (stream_186 == NULL) {stream_186 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 186"); } 
    stream_bitwiseXORExpression   = NULL;
    #define CREATE_stream_bitwiseXORExpression  if (stream_bitwiseXORExpression == NULL) {stream_bitwiseXORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:517:2: ( ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* )
        // .//Emerson.g:517:4: ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
        {
            // .//Emerson.g:517:4: ( bitwiseXORExpression -> bitwiseXORExpression )
            // .//Emerson.g:517:5: bitwiseXORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4730);
                bitwiseXORExpression420=bitwiseXORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression420.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 517:26: -> bitwiseXORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:517:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*

            for (;;)
            {
                int alt231=2;
                alt231 = cdfa231.predict(ctx, RECOGNIZER, ISTREAM, &cdfa231);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt231) 
                {
            	case 1:
            	    // .//Emerson.g:517:52: ( LTERM )* '|' ( LTERM )* bitwiseXORExpression
            	    {

            	        // .//Emerson.g:517:52: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt229=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA229_0 = LA(1);
            	                if ( (LA229_0 == LTERM) ) 
            	                {
            	                    alt229=1;
            	                }

            	            }
            	            switch (alt229) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM421 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression4738); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM421, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop229;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop229: ; /* Jump out to here if this rule does not match */

            	        char_literal422 = (pANTLR3_COMMON_TOKEN) MATCHT(186, &FOLLOW_186_in_bitwiseORExpression4741); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_186; stream_186->add(stream_186, char_literal422, NULL); }


            	        // .//Emerson.g:517:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt230=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA230_0 = LA(1);
            	                if ( (LA230_0 == LTERM) ) 
            	                {
            	                    alt230=1;
            	                }

            	            }
            	            switch (alt230) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM423 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression4743); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM423, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop230;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop230: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4746);
            	        bitwiseXORExpression424=bitwiseXORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression424.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpression, bitwiseXORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 517:91: -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	{
            	        	    // .//Emerson.g:517:94: ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop231;	/* break out of the loop */
            	    break;
                }
            }
            loop231: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_186 != NULL) stream_186->free(stream_186);
        if (stream_bitwiseXORExpression != NULL) stream_bitwiseXORExpression->free(stream_bitwiseXORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(73, bitwiseORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpression */

/** 
 * $ANTLR start bitwiseORExpressionNoIn
 * .//Emerson.g:520:1: bitwiseORExpressionNoIn : ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseORExpressionNoIn_return
bitwiseORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM426;
    pANTLR3_COMMON_TOKEN    char_literal427;
    pANTLR3_COMMON_TOKEN    LTERM428;
    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn425;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn425
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn425 EmersonParser_bitwiseXORExpressionNoIn_return

    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn429;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn429
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn429 EmersonParser_bitwiseXORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM426_tree;
    pANTLR3_BASE_TREE char_literal427_tree;
    pANTLR3_BASE_TREE LTERM428_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_186;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(74)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM426       = NULL;
    char_literal427       = NULL;
    LTERM428       = NULL;
    bitwiseXORExpressionNoIn425.tree = NULL;

    bitwiseXORExpressionNoIn429.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM426_tree   = NULL;
    char_literal427_tree   = NULL;
    LTERM428_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_186   = NULL;
    #define CREATE_stream_186  if (stream_186 == NULL) {stream_186 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 186"); } 
    stream_bitwiseXORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseXORExpressionNoIn  if (stream_bitwiseXORExpressionNoIn == NULL) {stream_bitwiseXORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:521:2: ( ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* )
        // .//Emerson.g:521:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
        {
            // .//Emerson.g:521:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn )
            // .//Emerson.g:521:5: bitwiseXORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4773);
                bitwiseXORExpressionNoIn425=bitwiseXORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn425.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 521:30: -> bitwiseXORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:521:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*

            for (;;)
            {
                int alt234=2;
                alt234 = cdfa234.predict(ctx, RECOGNIZER, ISTREAM, &cdfa234);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt234) 
                {
            	case 1:
            	    // .//Emerson.g:521:60: ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn
            	    {

            	        // .//Emerson.g:521:60: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt232=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA232_0 = LA(1);
            	                if ( (LA232_0 == LTERM) ) 
            	                {
            	                    alt232=1;
            	                }

            	            }
            	            switch (alt232) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM426 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn4781); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM426, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop232;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop232: ; /* Jump out to here if this rule does not match */

            	        char_literal427 = (pANTLR3_COMMON_TOKEN) MATCHT(186, &FOLLOW_186_in_bitwiseORExpressionNoIn4784); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_186; stream_186->add(stream_186, char_literal427, NULL); }


            	        // .//Emerson.g:521:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt233=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA233_0 = LA(1);
            	                if ( (LA233_0 == LTERM) ) 
            	                {
            	                    alt233=1;
            	                }

            	            }
            	            switch (alt233) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM428 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn4786); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM428, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop233;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop233: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4789);
            	        bitwiseXORExpressionNoIn429=bitwiseXORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn429.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseXORExpressionNoIn, bitwiseORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 521:103: -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:521:106: ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop234;	/* break out of the loop */
            	    break;
                }
            }
            loop234: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_186 != NULL) stream_186->free(stream_186);
        if (stream_bitwiseXORExpressionNoIn != NULL) stream_bitwiseXORExpressionNoIn->free(stream_bitwiseXORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(74, bitwiseORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpressionNoIn */

/** 
 * $ANTLR start bitwiseXORExpression
 * .//Emerson.g:524:1: bitwiseXORExpression : ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* ;
 */
static EmersonParser_bitwiseXORExpression_return
bitwiseXORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpression_return retval;
    ANTLR3_UINT32 bitwiseXORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM431;
    pANTLR3_COMMON_TOKEN    char_literal432;
    pANTLR3_COMMON_TOKEN    LTERM433;
    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression430;
    #undef	RETURN_TYPE_bitwiseANDExpression430
    #define	RETURN_TYPE_bitwiseANDExpression430 EmersonParser_bitwiseANDExpression_return

    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression434;
    #undef	RETURN_TYPE_bitwiseANDExpression434
    #define	RETURN_TYPE_bitwiseANDExpression434 EmersonParser_bitwiseANDExpression_return

    pANTLR3_BASE_TREE LTERM431_tree;
    pANTLR3_BASE_TREE char_literal432_tree;
    pANTLR3_BASE_TREE LTERM433_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_187;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpression;
    /* Initialize rule variables
     */
    bitwiseXORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(75)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM431       = NULL;
    char_literal432       = NULL;
    LTERM433       = NULL;
    bitwiseANDExpression430.tree = NULL;

    bitwiseANDExpression434.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM431_tree   = NULL;
    char_literal432_tree   = NULL;
    LTERM433_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_187   = NULL;
    #define CREATE_stream_187  if (stream_187 == NULL) {stream_187 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 187"); } 
    stream_bitwiseANDExpression   = NULL;
    #define CREATE_stream_bitwiseANDExpression  if (stream_bitwiseANDExpression == NULL) {stream_bitwiseANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:525:1: ( ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* )
        // .//Emerson.g:525:3: ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
        {
            // .//Emerson.g:525:3: ( bitwiseANDExpression -> bitwiseANDExpression )
            // .//Emerson.g:525:4: bitwiseANDExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4815);
                bitwiseANDExpression430=bitwiseANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression430.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 525:25: -> bitwiseANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:525:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*

            for (;;)
            {
                int alt237=2;
                alt237 = cdfa237.predict(ctx, RECOGNIZER, ISTREAM, &cdfa237);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt237) 
                {
            	case 1:
            	    // .//Emerson.g:525:51: ( LTERM )* '^' ( LTERM )* bitwiseANDExpression
            	    {

            	        // .//Emerson.g:525:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt235=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA235_0 = LA(1);
            	                if ( (LA235_0 == LTERM) ) 
            	                {
            	                    alt235=1;
            	                }

            	            }
            	            switch (alt235) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM431 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression4823); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM431, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop235;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop235: ; /* Jump out to here if this rule does not match */

            	        char_literal432 = (pANTLR3_COMMON_TOKEN) MATCHT(187, &FOLLOW_187_in_bitwiseXORExpression4826); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_187; stream_187->add(stream_187, char_literal432, NULL); }


            	        // .//Emerson.g:525:62: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt236=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA236_0 = LA(1);
            	                if ( (LA236_0 == LTERM) ) 
            	                {
            	                    alt236=1;
            	                }

            	            }
            	            switch (alt236) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM433 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression4828); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM433, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop236;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop236: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4831);
            	        bitwiseANDExpression434=bitwiseANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression434.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpression, bitwiseXORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 525:90: -> ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	{
            	        	    // .//Emerson.g:525:93: ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop237;	/* break out of the loop */
            	    break;
                }
            }
            loop237: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_187 != NULL) stream_187->free(stream_187);
        if (stream_bitwiseANDExpression != NULL) stream_bitwiseANDExpression->free(stream_bitwiseANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(75, bitwiseXORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpression */

/** 
 * $ANTLR start bitwiseXORExpressionNoIn
 * .//Emerson.g:528:1: bitwiseXORExpressionNoIn : ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseXORExpressionNoIn_return
bitwiseXORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseXORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM436;
    pANTLR3_COMMON_TOKEN    char_literal437;
    pANTLR3_COMMON_TOKEN    LTERM438;
    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn435;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn435
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn435 EmersonParser_bitwiseANDExpressionNoIn_return

    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn439;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn439
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn439 EmersonParser_bitwiseANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM436_tree;
    pANTLR3_BASE_TREE char_literal437_tree;
    pANTLR3_BASE_TREE LTERM438_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_187;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseXORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(76)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM436       = NULL;
    char_literal437       = NULL;
    LTERM438       = NULL;
    bitwiseANDExpressionNoIn435.tree = NULL;

    bitwiseANDExpressionNoIn439.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM436_tree   = NULL;
    char_literal437_tree   = NULL;
    LTERM438_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_187   = NULL;
    #define CREATE_stream_187  if (stream_187 == NULL) {stream_187 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 187"); } 
    stream_bitwiseANDExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseANDExpressionNoIn  if (stream_bitwiseANDExpressionNoIn == NULL) {stream_bitwiseANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:529:2: ( ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* )
        // .//Emerson.g:529:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
        {
            // .//Emerson.g:529:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn )
            // .//Emerson.g:529:5: bitwiseANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4858);
                bitwiseANDExpressionNoIn435=bitwiseANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn435.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 529:30: -> bitwiseANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:529:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*

            for (;;)
            {
                int alt240=2;
                alt240 = cdfa240.predict(ctx, RECOGNIZER, ISTREAM, &cdfa240);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt240) 
                {
            	case 1:
            	    // .//Emerson.g:529:59: ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn
            	    {

            	        // .//Emerson.g:529:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt238=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA238_0 = LA(1);
            	                if ( (LA238_0 == LTERM) ) 
            	                {
            	                    alt238=1;
            	                }

            	            }
            	            switch (alt238) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM436 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4865); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM436, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop238;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop238: ; /* Jump out to here if this rule does not match */

            	        char_literal437 = (pANTLR3_COMMON_TOKEN) MATCHT(187, &FOLLOW_187_in_bitwiseXORExpressionNoIn4868); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_187; stream_187->add(stream_187, char_literal437, NULL); }


            	        // .//Emerson.g:529:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt239=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA239_0 = LA(1);
            	                if ( (LA239_0 == LTERM) ) 
            	                {
            	                    alt239=1;
            	                }

            	            }
            	            switch (alt239) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM438 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4870); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM438, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop239;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop239: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4873);
            	        bitwiseANDExpressionNoIn439=bitwiseANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn439.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpressionNoIn, bitwiseXORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 529:102: -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:529:105: ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop240;	/* break out of the loop */
            	    break;
                }
            }
            loop240: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_187 != NULL) stream_187->free(stream_187);
        if (stream_bitwiseANDExpressionNoIn != NULL) stream_bitwiseANDExpressionNoIn->free(stream_bitwiseANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(76, bitwiseXORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpressionNoIn */

/** 
 * $ANTLR start bitwiseANDExpression
 * .//Emerson.g:532:1: bitwiseANDExpression : ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* ;
 */
static EmersonParser_bitwiseANDExpression_return
bitwiseANDExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpression_return retval;
    ANTLR3_UINT32 bitwiseANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM441;
    pANTLR3_COMMON_TOKEN    char_literal442;
    pANTLR3_COMMON_TOKEN    LTERM443;
    EmersonParser_equalityExpression_return equalityExpression440;
    #undef	RETURN_TYPE_equalityExpression440
    #define	RETURN_TYPE_equalityExpression440 EmersonParser_equalityExpression_return

    EmersonParser_equalityExpression_return equalityExpression444;
    #undef	RETURN_TYPE_equalityExpression444
    #define	RETURN_TYPE_equalityExpression444 EmersonParser_equalityExpression_return

    pANTLR3_BASE_TREE LTERM441_tree;
    pANTLR3_BASE_TREE char_literal442_tree;
    pANTLR3_BASE_TREE LTERM443_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_188;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpression;
    /* Initialize rule variables
     */
    bitwiseANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(77)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM441       = NULL;
    char_literal442       = NULL;
    LTERM443       = NULL;
    equalityExpression440.tree = NULL;

    equalityExpression444.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM441_tree   = NULL;
    char_literal442_tree   = NULL;
    LTERM443_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_188   = NULL;
    #define CREATE_stream_188  if (stream_188 == NULL) {stream_188 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 188"); } 
    stream_equalityExpression   = NULL;
    #define CREATE_stream_equalityExpression  if (stream_equalityExpression == NULL) {stream_equalityExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:533:2: ( ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* )
        // .//Emerson.g:533:4: ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
        {
            // .//Emerson.g:533:4: ( equalityExpression -> equalityExpression )
            // .//Emerson.g:533:5: equalityExpression
            {
                FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression4901);
                equalityExpression440=equalityExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression440.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 533:24: -> equalityExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:533:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*

            for (;;)
            {
                int alt243=2;
                alt243 = cdfa243.predict(ctx, RECOGNIZER, ISTREAM, &cdfa243);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt243) 
                {
            	case 1:
            	    // .//Emerson.g:533:48: ( LTERM )* '&' ( LTERM )* equalityExpression
            	    {

            	        // .//Emerson.g:533:48: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt241=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA241_0 = LA(1);
            	                if ( (LA241_0 == LTERM) ) 
            	                {
            	                    alt241=1;
            	                }

            	            }
            	            switch (alt241) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM441 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression4909); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM441, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop241;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop241: ; /* Jump out to here if this rule does not match */

            	        char_literal442 = (pANTLR3_COMMON_TOKEN) MATCHT(188, &FOLLOW_188_in_bitwiseANDExpression4912); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_188; stream_188->add(stream_188, char_literal442, NULL); }


            	        // .//Emerson.g:533:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt242=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA242_0 = LA(1);
            	                if ( (LA242_0 == LTERM) ) 
            	                {
            	                    alt242=1;
            	                }

            	            }
            	            switch (alt242) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM443 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression4914); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM443, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop242;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop242: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression4917);
            	        equalityExpression444=equalityExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression444.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityExpression, bitwiseANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 533:85: -> ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	{
            	        	    // .//Emerson.g:533:88: ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop243;	/* break out of the loop */
            	    break;
                }
            }
            loop243: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_188 != NULL) stream_188->free(stream_188);
        if (stream_equalityExpression != NULL) stream_equalityExpression->free(stream_equalityExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(77, bitwiseANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpression */

/** 
 * $ANTLR start bitwiseANDExpressionNoIn
 * .//Emerson.g:536:1: bitwiseANDExpressionNoIn : ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseANDExpressionNoIn_return
bitwiseANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM446;
    pANTLR3_COMMON_TOKEN    char_literal447;
    pANTLR3_COMMON_TOKEN    LTERM448;
    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn445;
    #undef	RETURN_TYPE_equalityExpressionNoIn445
    #define	RETURN_TYPE_equalityExpressionNoIn445 EmersonParser_equalityExpressionNoIn_return

    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn449;
    #undef	RETURN_TYPE_equalityExpressionNoIn449
    #define	RETURN_TYPE_equalityExpressionNoIn449 EmersonParser_equalityExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM446_tree;
    pANTLR3_BASE_TREE char_literal447_tree;
    pANTLR3_BASE_TREE LTERM448_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_188;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(78)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM446       = NULL;
    char_literal447       = NULL;
    LTERM448       = NULL;
    equalityExpressionNoIn445.tree = NULL;

    equalityExpressionNoIn449.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM446_tree   = NULL;
    char_literal447_tree   = NULL;
    LTERM448_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_188   = NULL;
    #define CREATE_stream_188  if (stream_188 == NULL) {stream_188 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 188"); } 
    stream_equalityExpressionNoIn   = NULL;
    #define CREATE_stream_equalityExpressionNoIn  if (stream_equalityExpressionNoIn == NULL) {stream_equalityExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:537:2: ( ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* )
        // .//Emerson.g:537:4: ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
        {
            // .//Emerson.g:537:4: ( equalityExpressionNoIn -> equalityExpressionNoIn )
            // .//Emerson.g:537:5: equalityExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4945);
                equalityExpressionNoIn445=equalityExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn445.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 537:28: -> equalityExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:537:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*

            for (;;)
            {
                int alt246=2;
                alt246 = cdfa246.predict(ctx, RECOGNIZER, ISTREAM, &cdfa246);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt246) 
                {
            	case 1:
            	    // .//Emerson.g:537:56: ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn
            	    {

            	        // .//Emerson.g:537:56: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt244=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA244_0 = LA(1);
            	                if ( (LA244_0 == LTERM) ) 
            	                {
            	                    alt244=1;
            	                }

            	            }
            	            switch (alt244) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM446 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4953); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM446, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop244;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop244: ; /* Jump out to here if this rule does not match */

            	        char_literal447 = (pANTLR3_COMMON_TOKEN) MATCHT(188, &FOLLOW_188_in_bitwiseANDExpressionNoIn4956); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_188; stream_188->add(stream_188, char_literal447, NULL); }


            	        // .//Emerson.g:537:67: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt245=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA245_0 = LA(1);
            	                if ( (LA245_0 == LTERM) ) 
            	                {
            	                    alt245=1;
            	                }

            	            }
            	            switch (alt245) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM448 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4958); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM448, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop245;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop245: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4961);
            	        equalityExpressionNoIn449=equalityExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn449.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpressionNoIn, equalityExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 537:97: -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:537:100: ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop246;	/* break out of the loop */
            	    break;
                }
            }
            loop246: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_188 != NULL) stream_188->free(stream_188);
        if (stream_equalityExpressionNoIn != NULL) stream_equalityExpressionNoIn->free(stream_equalityExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(78, bitwiseANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpressionNoIn */

/** 
 * $ANTLR start equalityExpression
 * .//Emerson.g:540:1: equalityExpression : ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* ;
 */
static EmersonParser_equalityExpression_return
equalityExpression(pEmersonParser ctx)
{   
    EmersonParser_equalityExpression_return retval;
    ANTLR3_UINT32 equalityExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM451;
    pANTLR3_COMMON_TOKEN    LTERM453;
    EmersonParser_relationalExpression_return relationalExpression450;
    #undef	RETURN_TYPE_relationalExpression450
    #define	RETURN_TYPE_relationalExpression450 EmersonParser_relationalExpression_return

    EmersonParser_equalityOps_return equalityOps452;
    #undef	RETURN_TYPE_equalityOps452
    #define	RETURN_TYPE_equalityOps452 EmersonParser_equalityOps_return

    EmersonParser_relationalExpression_return relationalExpression454;
    #undef	RETURN_TYPE_relationalExpression454
    #define	RETURN_TYPE_relationalExpression454 EmersonParser_relationalExpression_return

    pANTLR3_BASE_TREE LTERM451_tree;
    pANTLR3_BASE_TREE LTERM453_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    /* Initialize rule variables
     */
    equalityExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(79)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM451       = NULL;
    LTERM453       = NULL;
    relationalExpression450.tree = NULL;

    equalityOps452.tree = NULL;

    relationalExpression454.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM451_tree   = NULL;
    LTERM453_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalExpression   = NULL;
    #define CREATE_stream_relationalExpression  if (stream_relationalExpression == NULL) {stream_relationalExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpression"); }
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:541:2: ( ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* )
        // .//Emerson.g:541:4: ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
        {
            // .//Emerson.g:541:4: ( relationalExpression -> relationalExpression )
            // .//Emerson.g:541:5: relationalExpression
            {
                FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression4988);
                relationalExpression450=relationalExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression450.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 541:26: -> relationalExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:541:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*

            for (;;)
            {
                int alt249=2;
                alt249 = cdfa249.predict(ctx, RECOGNIZER, ISTREAM, &cdfa249);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt249) 
                {
            	case 1:
            	    // .//Emerson.g:541:51: ( LTERM )* equalityOps ( LTERM )* relationalExpression
            	    {

            	        // .//Emerson.g:541:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt247=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA247_0 = LA(1);
            	                if ( (LA247_0 == LTERM) ) 
            	                {
            	                    alt247=1;
            	                }

            	            }
            	            switch (alt247) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM451 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression4995); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM451, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop247;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop247: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpression4998);
            	        equalityOps452=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps452.tree, NULL); }

            	        // .//Emerson.g:541:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt248=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA248_0 = LA(1);
            	                if ( (LA248_0 == LTERM) ) 
            	                {
            	                    alt248=1;
            	                }

            	            }
            	            switch (alt248) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM453 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression5000); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM453, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop248;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop248: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression5003);
            	        relationalExpression454=relationalExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression454.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpression, equalityExpression, equalityOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 541:98: -> ^( equalityOps $equalityExpression relationalExpression )
            	        	{
            	        	    // .//Emerson.g:541:101: ^( equalityOps $equalityExpression relationalExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop249;	/* break out of the loop */
            	    break;
                }
            }
            loop249: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionEx; /* Prevent compiler warnings */
    ruleequalityExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalExpression != NULL) stream_relationalExpression->free(stream_relationalExpression);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(79, equalityExpression_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpression */

/** 
 * $ANTLR start equalityOps
 * .//Emerson.g:545:1: equalityOps : ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) );
 */
static EmersonParser_equalityOps_return
equalityOps(pEmersonParser ctx)
{   
    EmersonParser_equalityOps_return retval;
    ANTLR3_UINT32 equalityOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal455;
    pANTLR3_COMMON_TOKEN    string_literal456;
    pANTLR3_COMMON_TOKEN    string_literal457;
    pANTLR3_COMMON_TOKEN    string_literal458;

    pANTLR3_BASE_TREE string_literal455_tree;
    pANTLR3_BASE_TREE string_literal456_tree;
    pANTLR3_BASE_TREE string_literal457_tree;
    pANTLR3_BASE_TREE string_literal458_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_189;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_192;

    /* Initialize rule variables
     */
    equalityOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(80)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal455       = NULL;
    string_literal456       = NULL;
    string_literal457       = NULL;
    string_literal458       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal455_tree   = NULL;
    string_literal456_tree   = NULL;
    string_literal457_tree   = NULL;
    string_literal458_tree   = NULL;

    stream_189   = NULL;
    #define CREATE_stream_189  if (stream_189 == NULL) {stream_189 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 189"); } 
    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 
    stream_192   = NULL;
    #define CREATE_stream_192  if (stream_192 == NULL) {stream_192 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 192"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:546:1: ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) )
            
            ANTLR3_UINT32 alt250;

            alt250=4;

            switch ( LA(1) ) 
            {
            case 189:
            	{
            		alt250=1;
            	}
                break;
            case 190:
            	{
            		alt250=2;
            	}
                break;
            case 191:
            	{
            		alt250=3;
            	}
                break;
            case 192:
            	{
            		alt250=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 250;
                EXCEPTION->state        = 0;


                goto ruleequalityOpsEx;
            }

            switch (alt250) 
            {
        	case 1:
        	    // .//Emerson.g:546:4: '=='
        	    {
        	        string_literal455 = (pANTLR3_COMMON_TOKEN) MATCHT(189, &FOLLOW_189_in_equalityOps5029); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_189; stream_189->add(stream_189, string_literal455, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 546:9: -> ^( EQUALS )
        	        	{
        	        	    // .//Emerson.g:546:12: ^( EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EQUALS, (pANTLR3_UINT8)"EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:547:3: '!='
        	    {
        	        string_literal456 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_equalityOps5039); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, string_literal456, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 547:8: -> ^( NOT_EQUALS )
        	        	{
        	        	    // .//Emerson.g:547:11: ^( NOT_EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_EQUALS, (pANTLR3_UINT8)"NOT_EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:548:3: '==='
        	    {
        	        string_literal457 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_equalityOps5049); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, string_literal457, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 548:9: -> ^( IDENT )
        	        	{
        	        	    // .//Emerson.g:548:12: ^( IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IDENT, (pANTLR3_UINT8)"IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:549:3: '!=='
        	    {
        	        string_literal458 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_equalityOps5059); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, string_literal458, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 549:9: -> ^( NOT_IDENT )
        	        	{
        	        	    // .//Emerson.g:549:12: ^( NOT_IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_IDENT, (pANTLR3_UINT8)"NOT_IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityOpsEx; /* Prevent compiler warnings */
    ruleequalityOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_189 != NULL) stream_189->free(stream_189);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_190 != NULL) stream_190->free(stream_190);
        if (stream_192 != NULL) stream_192->free(stream_192);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(80, equalityOps_StartIndex); }
    return retval;
}
/* $ANTLR end equalityOps */

/** 
 * $ANTLR start equalityExpressionNoIn
 * .//Emerson.g:552:1: equalityExpressionNoIn : ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* ;
 */
static EmersonParser_equalityExpressionNoIn_return
equalityExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_equalityExpressionNoIn_return retval;
    ANTLR3_UINT32 equalityExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM460;
    pANTLR3_COMMON_TOKEN    LTERM462;
    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn459;
    #undef	RETURN_TYPE_relationalExpressionNoIn459
    #define	RETURN_TYPE_relationalExpressionNoIn459 EmersonParser_relationalExpressionNoIn_return

    EmersonParser_equalityOps_return equalityOps461;
    #undef	RETURN_TYPE_equalityOps461
    #define	RETURN_TYPE_equalityOps461 EmersonParser_equalityOps_return

    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn463;
    #undef	RETURN_TYPE_relationalExpressionNoIn463
    #define	RETURN_TYPE_relationalExpressionNoIn463 EmersonParser_relationalExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM460_tree;
    pANTLR3_BASE_TREE LTERM462_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpressionNoIn;
    /* Initialize rule variables
     */
    equalityExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(81)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM460       = NULL;
    LTERM462       = NULL;
    relationalExpressionNoIn459.tree = NULL;

    equalityOps461.tree = NULL;

    relationalExpressionNoIn463.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM460_tree   = NULL;
    LTERM462_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }
    stream_relationalExpressionNoIn   = NULL;
    #define CREATE_stream_relationalExpressionNoIn  if (stream_relationalExpressionNoIn == NULL) {stream_relationalExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:553:9: ( ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* )
        // .//Emerson.g:553:11: ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
        {
            // .//Emerson.g:553:11: ( relationalExpressionNoIn -> relationalExpressionNoIn )
            // .//Emerson.g:553:12: relationalExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5083);
                relationalExpressionNoIn459=relationalExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn459.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 553:37: -> relationalExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:553:65: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*

            for (;;)
            {
                int alt253=2;
                alt253 = cdfa253.predict(ctx, RECOGNIZER, ISTREAM, &cdfa253);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt253) 
                {
            	case 1:
            	    // .//Emerson.g:553:66: ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn
            	    {

            	        // .//Emerson.g:553:66: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt251=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA251_0 = LA(1);
            	                if ( (LA251_0 == LTERM) ) 
            	                {
            	                    alt251=1;
            	                }

            	            }
            	            switch (alt251) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM460 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn5090); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM460, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop251;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop251: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpressionNoIn5093);
            	        equalityOps461=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps461.tree, NULL); }

            	        // .//Emerson.g:553:85: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt252=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA252_0 = LA(1);
            	                if ( (LA252_0 == LTERM) ) 
            	                {
            	                    alt252=1;
            	                }

            	            }
            	            switch (alt252) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM462 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn5095); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM462, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop252;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop252: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5098);
            	        relationalExpressionNoIn463=relationalExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn463.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpressionNoIn, equalityExpressionNoIn, equalityOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 553:117: -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:553:120: ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop253;	/* break out of the loop */
            	    break;
                }
            }
            loop253: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionNoInEx; /* Prevent compiler warnings */
    ruleequalityExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
        if (stream_relationalExpressionNoIn != NULL) stream_relationalExpressionNoIn->free(stream_relationalExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(81, equalityExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpressionNoIn */

/** 
 * $ANTLR start relationalOps
 * .//Emerson.g:557:1: relationalOps : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) );
 */
static EmersonParser_relationalOps_return
relationalOps(pEmersonParser ctx)
{   
    EmersonParser_relationalOps_return retval;
    ANTLR3_UINT32 relationalOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal464;
    pANTLR3_COMMON_TOKEN    char_literal465;
    pANTLR3_COMMON_TOKEN    string_literal466;
    pANTLR3_COMMON_TOKEN    string_literal467;
    pANTLR3_COMMON_TOKEN    string_literal468;
    pANTLR3_COMMON_TOKEN    string_literal469;

    pANTLR3_BASE_TREE char_literal464_tree;
    pANTLR3_BASE_TREE char_literal465_tree;
    pANTLR3_BASE_TREE string_literal466_tree;
    pANTLR3_BASE_TREE string_literal467_tree;
    pANTLR3_BASE_TREE string_literal468_tree;
    pANTLR3_BASE_TREE string_literal469_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_195;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_197;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_196;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;

    /* Initialize rule variables
     */
    relationalOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(82)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal464       = NULL;
    char_literal465       = NULL;
    string_literal466       = NULL;
    string_literal467       = NULL;
    string_literal468       = NULL;
    string_literal469       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal464_tree   = NULL;
    char_literal465_tree   = NULL;
    string_literal466_tree   = NULL;
    string_literal467_tree   = NULL;
    string_literal468_tree   = NULL;
    string_literal469_tree   = NULL;

    stream_195   = NULL;
    #define CREATE_stream_195  if (stream_195 == NULL) {stream_195 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 195"); } 
    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 
    stream_197   = NULL;
    #define CREATE_stream_197  if (stream_197 == NULL) {stream_197 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 197"); } 
    stream_196   = NULL;
    #define CREATE_stream_196  if (stream_196 == NULL) {stream_196 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 196"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:558:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) )
            
            ANTLR3_UINT32 alt254;

            alt254=6;

            switch ( LA(1) ) 
            {
            case 193:
            	{
            		alt254=1;
            	}
                break;
            case 194:
            	{
            		alt254=2;
            	}
                break;
            case 195:
            	{
            		alt254=3;
            	}
                break;
            case 196:
            	{
            		alt254=4;
            	}
                break;
            case 197:
            	{
            		alt254=5;
            	}
                break;
            case 155:
            	{
            		alt254=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 254;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsEx;
            }

            switch (alt254) 
            {
        	case 1:
        	    // .//Emerson.g:558:3: '<'
        	    {
        	        char_literal464 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_relationalOps5130); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, char_literal464, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 558:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:558:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:559:3: '>'
        	    {
        	        char_literal465 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_relationalOps5141); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, char_literal465, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 559:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:559:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:560:3: '<='
        	    {
        	        string_literal466 = (pANTLR3_COMMON_TOKEN) MATCHT(195, &FOLLOW_195_in_relationalOps5152); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_195; stream_195->add(stream_195, string_literal466, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 560:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:560:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:561:3: '>='
        	    {
        	        string_literal467 = (pANTLR3_COMMON_TOKEN) MATCHT(196, &FOLLOW_196_in_relationalOps5162); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_196; stream_196->add(stream_196, string_literal467, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 561:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:561:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:562:3: 'instanceof'
        	    {
        	        string_literal468 = (pANTLR3_COMMON_TOKEN) MATCHT(197, &FOLLOW_197_in_relationalOps5172); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_197; stream_197->add(stream_197, string_literal468, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 562:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:562:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:563:3: 'in'
        	    {
        	        string_literal469 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_relationalOps5182); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, string_literal469, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 563:16: -> ^( IN )
        	        	{
        	        	    // .//Emerson.g:563:19: ^( IN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IN, (pANTLR3_UINT8)"IN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsEx; /* Prevent compiler warnings */
    rulerelationalOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_195 != NULL) stream_195->free(stream_195);
        if (stream_194 != NULL) stream_194->free(stream_194);
        if (stream_197 != NULL) stream_197->free(stream_197);
        if (stream_196 != NULL) stream_196->free(stream_196);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_193 != NULL) stream_193->free(stream_193);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(82, relationalOps_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOps */

/** 
 * $ANTLR start relationalExpression
 * .//Emerson.g:567:1: relationalExpression : ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )* ;
 */
static EmersonParser_relationalExpression_return
relationalExpression(pEmersonParser ctx)
{   
    EmersonParser_relationalExpression_return retval;
    ANTLR3_UINT32 relationalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM471;
    pANTLR3_COMMON_TOKEN    LTERM473;
    EmersonParser_additiveExpression_return additiveExpression470;
    #undef	RETURN_TYPE_additiveExpression470
    #define	RETURN_TYPE_additiveExpression470 EmersonParser_additiveExpression_return

    EmersonParser_relationalOps_return relationalOps472;
    #undef	RETURN_TYPE_relationalOps472
    #define	RETURN_TYPE_relationalOps472 EmersonParser_relationalOps_return

    EmersonParser_additiveExpression_return additiveExpression474;
    #undef	RETURN_TYPE_additiveExpression474
    #define	RETURN_TYPE_additiveExpression474 EmersonParser_additiveExpression_return

    pANTLR3_BASE_TREE LTERM471_tree;
    pANTLR3_BASE_TREE LTERM473_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_additiveExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOps;
    /* Initialize rule variables
     */
    relationalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(83)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM471       = NULL;
    LTERM473       = NULL;
    additiveExpression470.tree = NULL;

    relationalOps472.tree = NULL;

    additiveExpression474.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM471_tree   = NULL;
    LTERM473_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_additiveExpression   = NULL;
    #define CREATE_stream_additiveExpression  if (stream_additiveExpression == NULL) {stream_additiveExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule additiveExpression"); }
    stream_relationalOps   = NULL;
    #define CREATE_stream_relationalOps  if (stream_relationalOps == NULL) {stream_relationalOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:568:9: ( ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )* )
        // .//Emerson.g:568:11: ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )*
        {
            // .//Emerson.g:568:11: ( additiveExpression -> additiveExpression )
            // .//Emerson.g:568:12: additiveExpression
            {
                FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpression5215);
                additiveExpression470=additiveExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression470.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : additiveExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 568:31: -> additiveExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:568:54: ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )*

            for (;;)
            {
                int alt257=2;
                alt257 = cdfa257.predict(ctx, RECOGNIZER, ISTREAM, &cdfa257);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt257) 
                {
            	case 1:
            	    // .//Emerson.g:568:55: ( LTERM )* relationalOps ( LTERM )* additiveExpression
            	    {

            	        // .//Emerson.g:568:55: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt255=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA255_0 = LA(1);
            	                if ( (LA255_0 == LTERM) ) 
            	                {
            	                    alt255=1;
            	                }

            	            }
            	            switch (alt255) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM471 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression5223); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM471, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop255;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop255: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOps_in_relationalExpression5226);
            	        relationalOps472=relationalOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOps; stream_relationalOps->add(stream_relationalOps, relationalOps472.tree, NULL); }

            	        // .//Emerson.g:568:76: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt256=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA256_0 = LA(1);
            	                if ( (LA256_0 == LTERM) ) 
            	                {
            	                    alt256=1;
            	                }

            	            }
            	            switch (alt256) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM473 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression5228); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM473, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop256;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop256: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpression5231);
            	        additiveExpression474=additiveExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression474.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpression, additiveExpression, relationalOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 568:102: -> ^( relationalOps $relationalExpression additiveExpression )
            	        	{
            	        	    // .//Emerson.g:568:105: ^( relationalOps $relationalExpression additiveExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOps == NULL ? NULL : stream_relationalOps->nextNode(stream_relationalOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop257;	/* break out of the loop */
            	    break;
                }
            }
            loop257: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionEx; /* Prevent compiler warnings */
    rulerelationalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_additiveExpression != NULL) stream_additiveExpression->free(stream_additiveExpression);
        if (stream_relationalOps != NULL) stream_relationalOps->free(stream_relationalOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(83, relationalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpression */

/** 
 * $ANTLR start relationalOpsNoIn
 * .//Emerson.g:571:1: relationalOpsNoIn : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) );
 */
static EmersonParser_relationalOpsNoIn_return
relationalOpsNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalOpsNoIn_return retval;
    ANTLR3_UINT32 relationalOpsNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal475;
    pANTLR3_COMMON_TOKEN    char_literal476;
    pANTLR3_COMMON_TOKEN    string_literal477;
    pANTLR3_COMMON_TOKEN    string_literal478;
    pANTLR3_COMMON_TOKEN    string_literal479;

    pANTLR3_BASE_TREE char_literal475_tree;
    pANTLR3_BASE_TREE char_literal476_tree;
    pANTLR3_BASE_TREE string_literal477_tree;
    pANTLR3_BASE_TREE string_literal478_tree;
    pANTLR3_BASE_TREE string_literal479_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_195;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_197;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_196;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;

    /* Initialize rule variables
     */
    relationalOpsNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(84)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal475       = NULL;
    char_literal476       = NULL;
    string_literal477       = NULL;
    string_literal478       = NULL;
    string_literal479       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal475_tree   = NULL;
    char_literal476_tree   = NULL;
    string_literal477_tree   = NULL;
    string_literal478_tree   = NULL;
    string_literal479_tree   = NULL;

    stream_195   = NULL;
    #define CREATE_stream_195  if (stream_195 == NULL) {stream_195 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 195"); } 
    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 
    stream_197   = NULL;
    #define CREATE_stream_197  if (stream_197 == NULL) {stream_197 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 197"); } 
    stream_196   = NULL;
    #define CREATE_stream_196  if (stream_196 == NULL) {stream_196 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 196"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:572:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) )
            
            ANTLR3_UINT32 alt258;

            alt258=5;

            switch ( LA(1) ) 
            {
            case 193:
            	{
            		alt258=1;
            	}
                break;
            case 194:
            	{
            		alt258=2;
            	}
                break;
            case 195:
            	{
            		alt258=3;
            	}
                break;
            case 196:
            	{
            		alt258=4;
            	}
                break;
            case 197:
            	{
            		alt258=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 258;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsNoInEx;
            }

            switch (alt258) 
            {
        	case 1:
        	    // .//Emerson.g:572:3: '<'
        	    {
        	        char_literal475 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_relationalOpsNoIn5262); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, char_literal475, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 572:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:572:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:573:3: '>'
        	    {
        	        char_literal476 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_relationalOpsNoIn5273); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, char_literal476, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 573:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:573:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:574:3: '<='
        	    {
        	        string_literal477 = (pANTLR3_COMMON_TOKEN) MATCHT(195, &FOLLOW_195_in_relationalOpsNoIn5284); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_195; stream_195->add(stream_195, string_literal477, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 574:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:574:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:575:3: '>='
        	    {
        	        string_literal478 = (pANTLR3_COMMON_TOKEN) MATCHT(196, &FOLLOW_196_in_relationalOpsNoIn5294); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_196; stream_196->add(stream_196, string_literal478, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 575:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:575:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:576:3: 'instanceof'
        	    {
        	        string_literal479 = (pANTLR3_COMMON_TOKEN) MATCHT(197, &FOLLOW_197_in_relationalOpsNoIn5304); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_197; stream_197->add(stream_197, string_literal479, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 576:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:576:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsNoInEx; /* Prevent compiler warnings */
    rulerelationalOpsNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_195 != NULL) stream_195->free(stream_195);
        if (stream_194 != NULL) stream_194->free(stream_194);
        if (stream_197 != NULL) stream_197->free(stream_197);
        if (stream_196 != NULL) stream_196->free(stream_196);
        if (stream_193 != NULL) stream_193->free(stream_193);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(84, relationalOpsNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOpsNoIn */

/** 
 * $ANTLR start addOps
 * .//Emerson.g:579:1: addOps : ( '+' -> ^( ADD_OP ) | '-' -> ^( SUB ) );
 */
static EmersonParser_addOps_return
addOps(pEmersonParser ctx)
{   
    EmersonParser_addOps_return retval;
    ANTLR3_UINT32 addOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal480;
    pANTLR3_COMMON_TOKEN    char_literal481;

    pANTLR3_BASE_TREE char_literal480_tree;
    pANTLR3_BASE_TREE char_literal481_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_198;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_199;

    /* Initialize rule variables
     */
    addOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(85)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal480       = NULL;
    char_literal481       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal480_tree   = NULL;
    char_literal481_tree   = NULL;

    stream_198   = NULL;
    #define CREATE_stream_198  if (stream_198 == NULL) {stream_198 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 198"); } 
    stream_199   = NULL;
    #define CREATE_stream_199  if (stream_199 == NULL) {stream_199 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 199"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:580:1: ( '+' -> ^( ADD_OP ) | '-' -> ^( SUB ) )
            
            ANTLR3_UINT32 alt259;

            alt259=2;


            {
                int LA259_0 = LA(1);
                if ( (LA259_0 == 198) ) 
                {
                    alt259=1;
                }
                else if ( (LA259_0 == 199) ) 
                {
                    alt259=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 259;
                    EXCEPTION->state        = 0;


                    goto ruleaddOpsEx;
                }
            }
            switch (alt259) 
            {
        	case 1:
        	    // .//Emerson.g:580:3: '+'
        	    {
        	        char_literal480 = (pANTLR3_COMMON_TOKEN) MATCHT(198, &FOLLOW_198_in_addOps5319); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_198; stream_198->add(stream_198, char_literal480, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 580:7: -> ^( ADD_OP )
        	        	{
        	        	    // .//Emerson.g:580:10: ^( ADD_OP )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD_OP, (pANTLR3_UINT8)"ADD_OP"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:581:3: '-'
        	    {
        	        char_literal481 = (pANTLR3_COMMON_TOKEN) MATCHT(199, &FOLLOW_199_in_addOps5329); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_199; stream_199->add(stream_199, char_literal481, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 581:7: -> ^( SUB )
        	        	{
        	        	    // .//Emerson.g:581:10: ^( SUB )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleaddOpsEx; /* Prevent compiler warnings */
    ruleaddOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_198 != NULL) stream_198->free(stream_198);
        if (stream_199 != NULL) stream_199->free(stream_199);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(85, addOps_StartIndex); }
    return retval;
}
/* $ANTLR end addOps */

/** 
 * $ANTLR start relationalExpressionNoIn
 * .//Emerson.g:585:1: relationalExpressionNoIn : ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )* ;
 */
static EmersonParser_relationalExpressionNoIn_return
relationalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalExpressionNoIn_return retval;
    ANTLR3_UINT32 relationalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM483;
    pANTLR3_COMMON_TOKEN    LTERM485;
    EmersonParser_additiveExpression_return additiveExpression482;
    #undef	RETURN_TYPE_additiveExpression482
    #define	RETURN_TYPE_additiveExpression482 EmersonParser_additiveExpression_return

    EmersonParser_relationalOpsNoIn_return relationalOpsNoIn484;
    #undef	RETURN_TYPE_relationalOpsNoIn484
    #define	RETURN_TYPE_relationalOpsNoIn484 EmersonParser_relationalOpsNoIn_return

    EmersonParser_additiveExpression_return additiveExpression486;
    #undef	RETURN_TYPE_additiveExpression486
    #define	RETURN_TYPE_additiveExpression486 EmersonParser_additiveExpression_return

    pANTLR3_BASE_TREE LTERM483_tree;
    pANTLR3_BASE_TREE LTERM485_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOpsNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_additiveExpression;
    /* Initialize rule variables
     */
    relationalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(86)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM483       = NULL;
    LTERM485       = NULL;
    additiveExpression482.tree = NULL;

    relationalOpsNoIn484.tree = NULL;

    additiveExpression486.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM483_tree   = NULL;
    LTERM485_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalOpsNoIn   = NULL;
    #define CREATE_stream_relationalOpsNoIn  if (stream_relationalOpsNoIn == NULL) {stream_relationalOpsNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOpsNoIn"); }
    stream_additiveExpression   = NULL;
    #define CREATE_stream_additiveExpression  if (stream_additiveExpression == NULL) {stream_additiveExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule additiveExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:586:9: ( ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )* )
        // .//Emerson.g:586:11: ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )*
        {
            // .//Emerson.g:586:11: ( additiveExpression -> additiveExpression )
            // .//Emerson.g:586:12: additiveExpression
            {
                FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpressionNoIn5354);
                additiveExpression482=additiveExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression482.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : additiveExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 586:31: -> additiveExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:586:54: ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )*

            for (;;)
            {
                int alt262=2;
                alt262 = cdfa262.predict(ctx, RECOGNIZER, ISTREAM, &cdfa262);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt262) 
                {
            	case 1:
            	    // .//Emerson.g:586:55: ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression
            	    {

            	        // .//Emerson.g:586:55: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt260=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA260_0 = LA(1);
            	                if ( (LA260_0 == LTERM) ) 
            	                {
            	                    alt260=1;
            	                }

            	            }
            	            switch (alt260) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM483 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn5362); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM483, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop260;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop260: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5365);
            	        relationalOpsNoIn484=relationalOpsNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOpsNoIn; stream_relationalOpsNoIn->add(stream_relationalOpsNoIn, relationalOpsNoIn484.tree, NULL); }

            	        // .//Emerson.g:586:80: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt261=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA261_0 = LA(1);
            	                if ( (LA261_0 == LTERM) ) 
            	                {
            	                    alt261=1;
            	                }

            	            }
            	            switch (alt261) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM485 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn5367); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM485, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop261;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop261: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpressionNoIn5370);
            	        additiveExpression486=additiveExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression486.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : additiveExpression, relationalExpressionNoIn, relationalOpsNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 586:106: -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression )
            	        	{
            	        	    // .//Emerson.g:586:109: ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOpsNoIn == NULL ? NULL : stream_relationalOpsNoIn->nextNode(stream_relationalOpsNoIn), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop262;	/* break out of the loop */
            	    break;
                }
            }
            loop262: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionNoInEx; /* Prevent compiler warnings */
    rulerelationalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalOpsNoIn != NULL) stream_relationalOpsNoIn->free(stream_relationalOpsNoIn);
        if (stream_additiveExpression != NULL) stream_additiveExpression->free(stream_additiveExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(86, relationalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpressionNoIn */

/** 
 * $ANTLR start additiveExpression
 * .//Emerson.g:590:1: additiveExpression : ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* ;
 */
static EmersonParser_additiveExpression_return
additiveExpression(pEmersonParser ctx)
{   
    EmersonParser_additiveExpression_return retval;
    ANTLR3_UINT32 additiveExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM488;
    pANTLR3_COMMON_TOKEN    LTERM490;
    EmersonParser_multiplicativeExpression_return multiplicativeExpression487;
    #undef	RETURN_TYPE_multiplicativeExpression487
    #define	RETURN_TYPE_multiplicativeExpression487 EmersonParser_multiplicativeExpression_return

    EmersonParser_addOps_return addOps489;
    #undef	RETURN_TYPE_addOps489
    #define	RETURN_TYPE_addOps489 EmersonParser_addOps_return

    EmersonParser_multiplicativeExpression_return multiplicativeExpression491;
    #undef	RETURN_TYPE_multiplicativeExpression491
    #define	RETURN_TYPE_multiplicativeExpression491 EmersonParser_multiplicativeExpression_return

    pANTLR3_BASE_TREE LTERM488_tree;
    pANTLR3_BASE_TREE LTERM490_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_addOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multiplicativeExpression;
    /* Initialize rule variables
     */
    additiveExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(87)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM488       = NULL;
    LTERM490       = NULL;
    multiplicativeExpression487.tree = NULL;

    addOps489.tree = NULL;

    multiplicativeExpression491.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM488_tree   = NULL;
    LTERM490_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_addOps   = NULL;
    #define CREATE_stream_addOps  if (stream_addOps == NULL) {stream_addOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule addOps"); }
    stream_multiplicativeExpression   = NULL;
    #define CREATE_stream_multiplicativeExpression  if (stream_multiplicativeExpression == NULL) {stream_multiplicativeExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multiplicativeExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:591:2: ( ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* )
        // .//Emerson.g:591:4: ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
        {
            // .//Emerson.g:591:4: ( multiplicativeExpression -> multiplicativeExpression )
            // .//Emerson.g:591:5: multiplicativeExpression
            {
                FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression5397);
                multiplicativeExpression487=multiplicativeExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression487.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : multiplicativeExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 591:30: -> multiplicativeExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:591:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*

            for (;;)
            {
                int alt265=2;
                alt265 = cdfa265.predict(ctx, RECOGNIZER, ISTREAM, &cdfa265);
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt265) 
                {
            	case 1:
            	    // .//Emerson.g:591:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
            	    {

            	        // .//Emerson.g:591:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt263=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA263_0 = LA(1);
            	                if ( (LA263_0 == LTERM) ) 
            	                {
            	                    alt263=1;
            	                }

            	            }
            	            switch (alt263) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM488 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression5404); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM488, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop263;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop263: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_addOps_in_additiveExpression5407);
            	        addOps489=addOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_addOps; stream_addOps->add(stream_addOps, addOps489.tree, NULL); }

            	        // .//Emerson.g:591:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt264=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA264_0 = LA(1);
            	                if ( (LA264_0 == LTERM) ) 
            	                {
            	                    alt264=1;
            	                }

            	            }
            	            switch (alt264) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM490 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression5409); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM490, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop264;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop264: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression5412);
            	        multiplicativeExpression491=multiplicativeExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression491.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : multiplicativeExpression, additiveExpression, addOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 591:105: -> ^( addOps $additiveExpression multiplicativeExpression )
            	        	{
            	        	    // .//Emerson.g:591:108: ^( addOps $additiveExpression multiplicativeExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_addOps == NULL ? NULL : stream_addOps->nextNode(stream_addOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop265;	/* break out of the loop */
            	    break;
                }
            }
            loop265: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditiveExpressionEx; /* Prevent compiler warnings */
    ruleadditiveExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_addOps != NULL) stream_addOps->free(stream_addOps);
        if (stream_multiplicativeExpression != NULL) stream_multiplicativeExpression->free(stream_multiplicativeExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(87, additiveExpression_StartIndex); }
    return retval;
}
/* $ANTLR end additiveExpression */

/** 
 * $ANTLR start multOps
 * .//Emerson.g:594:1: multOps : ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) );
 */
static EmersonParser_multOps_return
multOps(pEmersonParser ctx)
{   
    EmersonParser_multOps_return retval;
    ANTLR3_UINT32 multOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal492;
    pANTLR3_COMMON_TOKEN    char_literal493;
    pANTLR3_COMMON_TOKEN    char_literal494;

    pANTLR3_BASE_TREE char_literal492_tree;
    pANTLR3_BASE_TREE char_literal493_tree;
    pANTLR3_BASE_TREE char_literal494_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_202;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_200;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_201;

    /* Initialize rule variables
     */
    multOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(88)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal492       = NULL;
    char_literal493       = NULL;
    char_literal494       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal492_tree   = NULL;
    char_literal493_tree   = NULL;
    char_literal494_tree   = NULL;

    stream_202   = NULL;
    #define CREATE_stream_202  if (stream_202 == NULL) {stream_202 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 202"); } 
    stream_200   = NULL;
    #define CREATE_stream_200  if (stream_200 == NULL) {stream_200 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 200"); } 
    stream_201   = NULL;
    #define CREATE_stream_201  if (stream_201 == NULL) {stream_201 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 201"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:595:1: ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) )
            
            ANTLR3_UINT32 alt266;

            alt266=3;

            switch ( LA(1) ) 
            {
            case 200:
            	{
            		alt266=1;
            	}
                break;
            case 201:
            	{
            		alt266=2;
            	}
                break;
            case 202:
            	{
            		alt266=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 266;
                EXCEPTION->state        = 0;


                goto rulemultOpsEx;
            }

            switch (alt266) 
            {
        	case 1:
        	    // .//Emerson.g:595:3: '*'
        	    {
        	        char_literal492 = (pANTLR3_COMMON_TOKEN) MATCHT(200, &FOLLOW_200_in_multOps5437); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_200; stream_200->add(stream_200, char_literal492, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 595:7: -> ^( MULT )
        	        	{
        	        	    // .//Emerson.g:595:10: ^( MULT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT, (pANTLR3_UINT8)"MULT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:596:3: '/'
        	    {
        	        char_literal493 = (pANTLR3_COMMON_TOKEN) MATCHT(201, &FOLLOW_201_in_multOps5447); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_201; stream_201->add(stream_201, char_literal493, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 596:7: -> ^( DIV )
        	        	{
        	        	    // .//Emerson.g:596:10: ^( DIV )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:597:3: '%'
        	    {
        	        char_literal494 = (pANTLR3_COMMON_TOKEN) MATCHT(202, &FOLLOW_202_in_multOps5457); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_202; stream_202->add(stream_202, char_literal494, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 597:7: -> ^( MOD )
        	        	{
        	        	    // .//Emerson.g:597:10: ^( MOD )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemultOpsEx; /* Prevent compiler warnings */
    rulemultOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_202 != NULL) stream_202->free(stream_202);
        if (stream_200 != NULL) stream_200->free(stream_200);
        if (stream_201 != NULL) stream_201->free(stream_201);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(88, multOps_StartIndex); }
    return retval;
}
/* $ANTLR end multOps */

/** 
 * $ANTLR start multiplicativeExpression
 * .//Emerson.g:600:1: multiplicativeExpression : ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* ;
 */
static EmersonParser_multiplicativeExpression_return
multiplicativeExpression(pEmersonParser ctx)
{   
    EmersonParser_multiplicativeExpression_return retval;
    ANTLR3_UINT32 multiplicativeExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM496;
    pANTLR3_COMMON_TOKEN    LTERM498;
    EmersonParser_unaryExpression_return unaryExpression495;
    #undef	RETURN_TYPE_unaryExpression495
    #define	RETURN_TYPE_unaryExpression495 EmersonParser_unaryExpression_return

    EmersonParser_multOps_return multOps497;
    #undef	RETURN_TYPE_multOps497
    #define	RETURN_TYPE_multOps497 EmersonParser_multOps_return

    EmersonParser_unaryExpression_return unaryExpression499;
    #undef	RETURN_TYPE_unaryExpression499
    #define	RETURN_TYPE_unaryExpression499 EmersonParser_unaryExpression_return

    pANTLR3_BASE_TREE LTERM496_tree;
    pANTLR3_BASE_TREE LTERM498_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    /* Initialize rule variables
     */
    multiplicativeExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(89)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM496       = NULL;
    LTERM498       = NULL;
    unaryExpression495.tree = NULL;

    multOps497.tree = NULL;

    unaryExpression499.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM496_tree   = NULL;
    LTERM498_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_multOps   = NULL;
    #define CREATE_stream_multOps  if (stream_multOps == NULL) {stream_multOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multOps"); }
    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:601:4: ( ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* )
        // .//Emerson.g:601:6: ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
        {
            // .//Emerson.g:601:6: ( unaryExpression -> unaryExpression )
            // .//Emerson.g:601:7: unaryExpression
            {
                FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression5476);
                unaryExpression495=unaryExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression495.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : unaryExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 601:24: -> unaryExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:601:44: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*

            for (;;)
            {
                int alt269=2;
                alt269 = cdfa269.predict(ctx, RECOGNIZER, ISTREAM, &cdfa269);
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt269) 
                {
            	case 1:
            	    // .//Emerson.g:601:45: ( LTERM )* multOps ( LTERM )* unaryExpression
            	    {

            	        // .//Emerson.g:601:45: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt267=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA267_0 = LA(1);
            	                if ( (LA267_0 == LTERM) ) 
            	                {
            	                    alt267=1;
            	                }

            	            }
            	            switch (alt267) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM496 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression5485); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM496, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop267;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop267: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multOps_in_multiplicativeExpression5488);
            	        multOps497=multOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multOps; stream_multOps->add(stream_multOps, multOps497.tree, NULL); }

            	        // .//Emerson.g:601:60: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt268=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA268_0 = LA(1);
            	                if ( (LA268_0 == LTERM) ) 
            	                {
            	                    alt268=1;
            	                }

            	            }
            	            switch (alt268) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM498 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression5490); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM498, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop268;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop268: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression5493);
            	        unaryExpression499=unaryExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression499.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : unaryExpression, multiplicativeExpression, multOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 601:83: -> ^( multOps $multiplicativeExpression unaryExpression )
            	        	{
            	        	    // .//Emerson.g:601:86: ^( multOps $multiplicativeExpression unaryExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_multOps == NULL ? NULL : stream_multOps->nextNode(stream_multOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop269;	/* break out of the loop */
            	    break;
                }
            }
            loop269: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicativeExpressionEx; /* Prevent compiler warnings */
    rulemultiplicativeExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_multOps != NULL) stream_multOps->free(stream_multOps);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(89, multiplicativeExpression_StartIndex); }
    return retval;
}
/* $ANTLR end multiplicativeExpression */

/** 
 * $ANTLR start postfixExpression
 * .//Emerson.g:605:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );
 */
static EmersonParser_postfixExpression_return
postfixExpression(pEmersonParser ctx)
{   
    EmersonParser_postfixExpression_return retval;
    ANTLR3_UINT32 postfixExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal501;
    pANTLR3_COMMON_TOKEN    string_literal503;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression500;
    #undef	RETURN_TYPE_leftHandSideExpression500
    #define	RETURN_TYPE_leftHandSideExpression500 EmersonParser_leftHandSideExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression502;
    #undef	RETURN_TYPE_leftHandSideExpression502
    #define	RETURN_TYPE_leftHandSideExpression502 EmersonParser_leftHandSideExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression504;
    #undef	RETURN_TYPE_leftHandSideExpression504
    #define	RETURN_TYPE_leftHandSideExpression504 EmersonParser_leftHandSideExpression_return

    pANTLR3_BASE_TREE string_literal501_tree;
    pANTLR3_BASE_TREE string_literal503_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_203;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_204;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    postfixExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(90)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal501       = NULL;
    string_literal503       = NULL;
    leftHandSideExpression500.tree = NULL;

    leftHandSideExpression502.tree = NULL;

    leftHandSideExpression504.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal501_tree   = NULL;
    string_literal503_tree   = NULL;

    stream_203   = NULL;
    #define CREATE_stream_203  if (stream_203 == NULL) {stream_203 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 203"); } 
    stream_204   = NULL;
    #define CREATE_stream_204  if (stream_204 == NULL) {stream_204 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 204"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:606:2: ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression )
            
            ANTLR3_UINT32 alt270;

            alt270=3;

            alt270 = cdfa270.predict(ctx, RECOGNIZER, ISTREAM, &cdfa270);
            if  (HASEXCEPTION())
            {
                goto rulepostfixExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt270) 
            {
        	case 1:
        	    // .//Emerson.g:606:4: leftHandSideExpression '--'
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression5520);
        	        leftHandSideExpression500=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression500.tree, NULL); }
        	        string_literal501 = (pANTLR3_COMMON_TOKEN) MATCHT(203, &FOLLOW_203_in_postfixExpression5522); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_203; stream_203->add(stream_203, string_literal501, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 606:32: -> ^( MINUSMINUS leftHandSideExpression )
        	        	{
        	        	    // .//Emerson.g:606:35: ^( MINUSMINUS leftHandSideExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUSMINUS, (pANTLR3_UINT8)"MINUSMINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:607:4: leftHandSideExpression '++'
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression5536);
        	        leftHandSideExpression502=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression502.tree, NULL); }
        	        string_literal503 = (pANTLR3_COMMON_TOKEN) MATCHT(204, &FOLLOW_204_in_postfixExpression5538); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_204; stream_204->add(stream_204, string_literal503, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 607:32: -> ^( PLUSPLUS leftHandSideExpression )
        	        	{
        	        	    // .//Emerson.g:607:35: ^( PLUSPLUS leftHandSideExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUSPLUS, (pANTLR3_UINT8)"PLUSPLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:608:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression5551);
        	        leftHandSideExpression504=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression504.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 608:28: -> leftHandSideExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepostfixExpressionEx; /* Prevent compiler warnings */
    rulepostfixExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_203 != NULL) stream_203->free(stream_203);
        if (stream_204 != NULL) stream_204->free(stream_204);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(90, postfixExpression_StartIndex); }
    return retval;
}
/* $ANTLR end postfixExpression */

/** 
 * $ANTLR start unaryOps
 * .//Emerson.g:612:1: unaryOps : ( 'delete' -> ^( DELETE_OP ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | 'eval' -> ^( EVAL ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) );
 */
static EmersonParser_unaryOps_return
unaryOps(pEmersonParser ctx)
{   
    EmersonParser_unaryOps_return retval;
    ANTLR3_UINT32 unaryOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal505;
    pANTLR3_COMMON_TOKEN    string_literal506;
    pANTLR3_COMMON_TOKEN    string_literal507;
    pANTLR3_COMMON_TOKEN    string_literal508;
    pANTLR3_COMMON_TOKEN    string_literal509;
    pANTLR3_COMMON_TOKEN    string_literal510;
    pANTLR3_COMMON_TOKEN    char_literal511;
    pANTLR3_COMMON_TOKEN    char_literal512;
    pANTLR3_COMMON_TOKEN    char_literal513;
    pANTLR3_COMMON_TOKEN    char_literal514;

    pANTLR3_BASE_TREE string_literal505_tree;
    pANTLR3_BASE_TREE string_literal506_tree;
    pANTLR3_BASE_TREE string_literal507_tree;
    pANTLR3_BASE_TREE string_literal508_tree;
    pANTLR3_BASE_TREE string_literal509_tree;
    pANTLR3_BASE_TREE string_literal510_tree;
    pANTLR3_BASE_TREE char_literal511_tree;
    pANTLR3_BASE_TREE char_literal512_tree;
    pANTLR3_BASE_TREE char_literal513_tree;
    pANTLR3_BASE_TREE char_literal514_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_203;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_204;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_210;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_205;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_198;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_199;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_206;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_207;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_208;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_209;

    /* Initialize rule variables
     */
    unaryOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(91)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal505       = NULL;
    string_literal506       = NULL;
    string_literal507       = NULL;
    string_literal508       = NULL;
    string_literal509       = NULL;
    string_literal510       = NULL;
    char_literal511       = NULL;
    char_literal512       = NULL;
    char_literal513       = NULL;
    char_literal514       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal505_tree   = NULL;
    string_literal506_tree   = NULL;
    string_literal507_tree   = NULL;
    string_literal508_tree   = NULL;
    string_literal509_tree   = NULL;
    string_literal510_tree   = NULL;
    char_literal511_tree   = NULL;
    char_literal512_tree   = NULL;
    char_literal513_tree   = NULL;
    char_literal514_tree   = NULL;

    stream_203   = NULL;
    #define CREATE_stream_203  if (stream_203 == NULL) {stream_203 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 203"); } 
    stream_204   = NULL;
    #define CREATE_stream_204  if (stream_204 == NULL) {stream_204 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 204"); } 
    stream_210   = NULL;
    #define CREATE_stream_210  if (stream_210 == NULL) {stream_210 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 210"); } 
    stream_205   = NULL;
    #define CREATE_stream_205  if (stream_205 == NULL) {stream_205 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 205"); } 
    stream_198   = NULL;
    #define CREATE_stream_198  if (stream_198 == NULL) {stream_198 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 198"); } 
    stream_199   = NULL;
    #define CREATE_stream_199  if (stream_199 == NULL) {stream_199 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 199"); } 
    stream_206   = NULL;
    #define CREATE_stream_206  if (stream_206 == NULL) {stream_206 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 206"); } 
    stream_207   = NULL;
    #define CREATE_stream_207  if (stream_207 == NULL) {stream_207 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 207"); } 
    stream_208   = NULL;
    #define CREATE_stream_208  if (stream_208 == NULL) {stream_208 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 208"); } 
    stream_209   = NULL;
    #define CREATE_stream_209  if (stream_209 == NULL) {stream_209 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 209"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:613:1: ( 'delete' -> ^( DELETE_OP ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | 'eval' -> ^( EVAL ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) )
            
            ANTLR3_UINT32 alt271;

            alt271=10;

            switch ( LA(1) ) 
            {
            case 205:
            	{
            		alt271=1;
            	}
                break;
            case 206:
            	{
            		alt271=2;
            	}
                break;
            case 207:
            	{
            		alt271=3;
            	}
                break;
            case 208:
            	{
            		alt271=4;
            	}
                break;
            case 204:
            	{
            		alt271=5;
            	}
                break;
            case 203:
            	{
            		alt271=6;
            	}
                break;
            case 198:
            	{
            		alt271=7;
            	}
                break;
            case 199:
            	{
            		alt271=8;
            	}
                break;
            case 209:
            	{
            		alt271=9;
            	}
                break;
            case 210:
            	{
            		alt271=10;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 271;
                EXCEPTION->state        = 0;


                goto ruleunaryOpsEx;
            }

            switch (alt271) 
            {
        	case 1:
        	    // .//Emerson.g:613:2: 'delete'
        	    {
        	        string_literal505 = (pANTLR3_COMMON_TOKEN) MATCHT(205, &FOLLOW_205_in_unaryOps5565); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_205; stream_205->add(stream_205, string_literal505, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 613:11: -> ^( DELETE_OP )
        	        	{
        	        	    // .//Emerson.g:613:14: ^( DELETE_OP )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DELETE_OP, (pANTLR3_UINT8)"DELETE_OP"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:614:3: 'void'
        	    {
        	        string_literal506 = (pANTLR3_COMMON_TOKEN) MATCHT(206, &FOLLOW_206_in_unaryOps5575); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_206; stream_206->add(stream_206, string_literal506, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 614:10: -> ^( VOID )
        	        	{
        	        	    // .//Emerson.g:614:13: ^( VOID )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VOID, (pANTLR3_UINT8)"VOID"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:615:3: 'typeof'
        	    {
        	        string_literal507 = (pANTLR3_COMMON_TOKEN) MATCHT(207, &FOLLOW_207_in_unaryOps5585); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_207; stream_207->add(stream_207, string_literal507, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 615:12: -> ^( TYPEOF )
        	        	{
        	        	    // .//Emerson.g:615:15: ^( TYPEOF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TYPEOF, (pANTLR3_UINT8)"TYPEOF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:616:3: 'eval'
        	    {
        	        string_literal508 = (pANTLR3_COMMON_TOKEN) MATCHT(208, &FOLLOW_208_in_unaryOps5595); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_208; stream_208->add(stream_208, string_literal508, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 616:10: -> ^( EVAL )
        	        	{
        	        	    // .//Emerson.g:616:13: ^( EVAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EVAL, (pANTLR3_UINT8)"EVAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:617:3: '++'
        	    {
        	        string_literal509 = (pANTLR3_COMMON_TOKEN) MATCHT(204, &FOLLOW_204_in_unaryOps5605); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_204; stream_204->add(stream_204, string_literal509, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 617:9: -> ^( PLUSPLUS )
        	        	{
        	        	    // .//Emerson.g:617:12: ^( PLUSPLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUSPLUS, (pANTLR3_UINT8)"PLUSPLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:618:3: '--'
        	    {
        	        string_literal510 = (pANTLR3_COMMON_TOKEN) MATCHT(203, &FOLLOW_203_in_unaryOps5616); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_203; stream_203->add(stream_203, string_literal510, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 618:9: -> ^( MINUSMINUS )
        	        	{
        	        	    // .//Emerson.g:618:12: ^( MINUSMINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUSMINUS, (pANTLR3_UINT8)"MINUSMINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:619:3: '+'
        	    {
        	        char_literal511 = (pANTLR3_COMMON_TOKEN) MATCHT(198, &FOLLOW_198_in_unaryOps5627); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_198; stream_198->add(stream_198, char_literal511, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 619:9: -> ^( UNARY_PLUS )
        	        	{
        	        	    // .//Emerson.g:619:12: ^( UNARY_PLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_PLUS, (pANTLR3_UINT8)"UNARY_PLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:620:3: '-'
        	    {
        	        char_literal512 = (pANTLR3_COMMON_TOKEN) MATCHT(199, &FOLLOW_199_in_unaryOps5639); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_199; stream_199->add(stream_199, char_literal512, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 620:9: -> ^( UNARY_MINUS )
        	        	{
        	        	    // .//Emerson.g:620:12: ^( UNARY_MINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_MINUS, (pANTLR3_UINT8)"UNARY_MINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:621:3: '~'
        	    {
        	        char_literal513 = (pANTLR3_COMMON_TOKEN) MATCHT(209, &FOLLOW_209_in_unaryOps5651); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_209; stream_209->add(stream_209, char_literal513, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 621:9: -> ^( COMPLEMENT )
        	        	{
        	        	    // .//Emerson.g:621:12: ^( COMPLEMENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COMPLEMENT, (pANTLR3_UINT8)"COMPLEMENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:622:3: '!'
        	    {
        	        char_literal514 = (pANTLR3_COMMON_TOKEN) MATCHT(210, &FOLLOW_210_in_unaryOps5663); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_210; stream_210->add(stream_210, char_literal514, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 622:9: -> ^( NOT )
        	        	{
        	        	    // .//Emerson.g:622:12: ^( NOT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT, (pANTLR3_UINT8)"NOT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryOpsEx; /* Prevent compiler warnings */
    ruleunaryOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_203 != NULL) stream_203->free(stream_203);
        if (stream_204 != NULL) stream_204->free(stream_204);
        if (stream_210 != NULL) stream_210->free(stream_210);
        if (stream_205 != NULL) stream_205->free(stream_205);
        if (stream_198 != NULL) stream_198->free(stream_198);
        if (stream_199 != NULL) stream_199->free(stream_199);
        if (stream_206 != NULL) stream_206->free(stream_206);
        if (stream_207 != NULL) stream_207->free(stream_207);
        if (stream_208 != NULL) stream_208->free(stream_208);
        if (stream_209 != NULL) stream_209->free(stream_209);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(91, unaryOps_StartIndex); }
    return retval;
}
/* $ANTLR end unaryOps */

/** 
 * $ANTLR start unaryExpression
 * .//Emerson.g:626:1: unaryExpression : ( postfixExpression -> postfixExpression | unaryOps e= unaryExpression -> ^( unaryOps $e) );
 */
static EmersonParser_unaryExpression_return
unaryExpression(pEmersonParser ctx)
{   
    EmersonParser_unaryExpression_return retval;
    ANTLR3_UINT32 unaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_unaryExpression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e EmersonParser_unaryExpression_return

    EmersonParser_postfixExpression_return postfixExpression515;
    #undef	RETURN_TYPE_postfixExpression515
    #define	RETURN_TYPE_postfixExpression515 EmersonParser_postfixExpression_return

    EmersonParser_unaryOps_return unaryOps516;
    #undef	RETURN_TYPE_unaryOps516
    #define	RETURN_TYPE_unaryOps516 EmersonParser_unaryOps_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_postfixExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryOps;
    /* Initialize rule variables
     */
    unaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(92)) )
    {
    	retval.start = 0;

        return retval; 
    }
    e.tree = NULL;

    postfixExpression515.tree = NULL;

    unaryOps516.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }
    stream_postfixExpression   = NULL;
    #define CREATE_stream_postfixExpression  if (stream_postfixExpression == NULL) {stream_postfixExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule postfixExpression"); }
    stream_unaryOps   = NULL;
    #define CREATE_stream_unaryOps  if (stream_unaryOps == NULL) {stream_unaryOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryOps"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:627:9: ( postfixExpression -> postfixExpression | unaryOps e= unaryExpression -> ^( unaryOps $e) )
            
            ANTLR3_UINT32 alt272;

            alt272=2;


            {
                int LA272_0 = LA(1);
                if ( (((LA272_0 >= Identifier) && (LA272_0 <= StringLiteral)) || ((LA272_0 >= 141) && (LA272_0 <= 142)) || LA272_0 == 145 || ((LA272_0 >= 168) && (LA272_0 <= 169)) || LA272_0 == 193 || ((LA272_0 >= 211) && (LA272_0 <= 215))) ) 
                {
                    alt272=1;
                }
                else if ( (((LA272_0 >= 198) && (LA272_0 <= 199)) || ((LA272_0 >= 203) && (LA272_0 <= 210))) ) 
                {
                    alt272=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 272;
                    EXCEPTION->state        = 0;


                    goto ruleunaryExpressionEx;
                }
            }
            switch (alt272) 
            {
        	case 1:
        	    // .//Emerson.g:627:11: postfixExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_postfixExpression_in_unaryExpression5689);
        	        postfixExpression515=postfixExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_postfixExpression; stream_postfixExpression->add(stream_postfixExpression, postfixExpression515.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : postfixExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 627:29: -> postfixExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_postfixExpression == NULL ? NULL : stream_postfixExpression->nextTree(stream_postfixExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:628:11: unaryOps e= unaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_unaryOps_in_unaryExpression5705);
        	        unaryOps516=unaryOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryOps; stream_unaryOps->add(stream_unaryOps, unaryOps516.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_unaryExpression5709);
        	        e=unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, e.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : e, unaryOps
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 628:38: -> ^( unaryOps $e)
        	        	{
        	        	    // .//Emerson.g:628:41: ^( unaryOps $e)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_unaryOps == NULL ? NULL : stream_unaryOps->nextNode(stream_unaryOps), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
        if (stream_postfixExpression != NULL) stream_postfixExpression->free(stream_postfixExpression);
        if (stream_unaryOps != NULL) stream_unaryOps->free(stream_unaryOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(92, unaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end unaryExpression */

/** 
 * $ANTLR start primaryExpression
 * .//Emerson.g:632:1: primaryExpression : ( 'this' | ( vectorLiteral )=> vectorLiteral | ( quaternionLiteral )=> quaternionLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );
 */
static EmersonParser_primaryExpression_return
primaryExpression(pEmersonParser ctx)
{   
    EmersonParser_primaryExpression_return retval;
    ANTLR3_UINT32 primaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal517;
    pANTLR3_COMMON_TOKEN    Identifier520;
    pANTLR3_COMMON_TOKEN    char_literal526;
    pANTLR3_COMMON_TOKEN    LTERM527;
    pANTLR3_COMMON_TOKEN    LTERM529;
    pANTLR3_COMMON_TOKEN    char_literal530;
    EmersonParser_vectorLiteral_return vectorLiteral518;
    #undef	RETURN_TYPE_vectorLiteral518
    #define	RETURN_TYPE_vectorLiteral518 EmersonParser_vectorLiteral_return

    EmersonParser_quaternionLiteral_return quaternionLiteral519;
    #undef	RETURN_TYPE_quaternionLiteral519
    #define	RETURN_TYPE_quaternionLiteral519 EmersonParser_quaternionLiteral_return

    EmersonParser_dollarExpression_return dollarExpression521;
    #undef	RETURN_TYPE_dollarExpression521
    #define	RETURN_TYPE_dollarExpression521 EmersonParser_dollarExpression_return

    EmersonParser_literal_return literal522;
    #undef	RETURN_TYPE_literal522
    #define	RETURN_TYPE_literal522 EmersonParser_literal_return

    EmersonParser_arrayLiteral_return arrayLiteral523;
    #undef	RETURN_TYPE_arrayLiteral523
    #define	RETURN_TYPE_arrayLiteral523 EmersonParser_arrayLiteral_return

    EmersonParser_objectLiteral_return objectLiteral524;
    #undef	RETURN_TYPE_objectLiteral524
    #define	RETURN_TYPE_objectLiteral524 EmersonParser_objectLiteral_return

    EmersonParser_patternLiteral_return patternLiteral525;
    #undef	RETURN_TYPE_patternLiteral525
    #define	RETURN_TYPE_patternLiteral525 EmersonParser_patternLiteral_return

    EmersonParser_expression_return expression528;
    #undef	RETURN_TYPE_expression528
    #define	RETURN_TYPE_expression528 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal517_tree;
    pANTLR3_BASE_TREE Identifier520_tree;
    pANTLR3_BASE_TREE char_literal526_tree;
    pANTLR3_BASE_TREE LTERM527_tree;
    pANTLR3_BASE_TREE LTERM529_tree;
    pANTLR3_BASE_TREE char_literal530_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    primaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(93)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal517       = NULL;
    Identifier520       = NULL;
    char_literal526       = NULL;
    LTERM527       = NULL;
    LTERM529       = NULL;
    char_literal530       = NULL;
    vectorLiteral518.tree = NULL;

    quaternionLiteral519.tree = NULL;

    dollarExpression521.tree = NULL;

    literal522.tree = NULL;

    arrayLiteral523.tree = NULL;

    objectLiteral524.tree = NULL;

    patternLiteral525.tree = NULL;

    expression528.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal517_tree   = NULL;
    Identifier520_tree   = NULL;
    char_literal526_tree   = NULL;
    LTERM527_tree   = NULL;
    LTERM529_tree   = NULL;
    char_literal530_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:633:2: ( 'this' | ( vectorLiteral )=> vectorLiteral | ( quaternionLiteral )=> quaternionLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) )
            
            ANTLR3_UINT32 alt275;

            alt275=10;

            alt275 = cdfa275.predict(ctx, RECOGNIZER, ISTREAM, &cdfa275);
            if  (HASEXCEPTION())
            {
                goto ruleprimaryExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt275) 
            {
        	case 1:
        	    // .//Emerson.g:633:4: 'this'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal517 = (pANTLR3_COMMON_TOKEN) MATCHT(211, &FOLLOW_211_in_primaryExpression5738); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        string_literal517_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal517));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal517_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:634:11: ( vectorLiteral )=> vectorLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_vectorLiteral_in_primaryExpression5756);
        	        vectorLiteral518=vectorLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, vectorLiteral518.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:635:11: ( quaternionLiteral )=> quaternionLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_quaternionLiteral_in_primaryExpression5774);
        	        quaternionLiteral519=quaternionLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, quaternionLiteral519.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:636:4: Identifier
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        Identifier520 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_primaryExpression5779); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        Identifier520_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Identifier520));
        	        ADAPTOR->addChild(ADAPTOR, root_0, Identifier520_tree);
        	        }

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:637:11: dollarExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_dollarExpression_in_primaryExpression5791);
        	        dollarExpression521=dollarExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, dollarExpression521.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:638:4: literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_literal_in_primaryExpression5796);
        	        literal522=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal522.tree);

        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:639:4: arrayLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_arrayLiteral_in_primaryExpression5801);
        	        arrayLiteral523=arrayLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, arrayLiteral523.tree);

        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:640:4: objectLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_objectLiteral_in_primaryExpression5806);
        	        objectLiteral524=objectLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, objectLiteral524.tree);

        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:641:11: patternLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_patternLiteral_in_primaryExpression5818);
        	        patternLiteral525=patternLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, patternLiteral525.tree);

        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:642:4: '(' ( LTERM )* expression ( LTERM )* ')'
        	    {
        	        char_literal526 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_primaryExpression5823); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal526, NULL); }


        	        // .//Emerson.g:642:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt273=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA273_0 = LA(1);
        	                if ( (LA273_0 == LTERM) ) 
        	                {
        	                    alt273=1;
        	                }

        	            }
        	            switch (alt273) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM527 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression5825); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM527, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop273;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop273: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_primaryExpression5828);
        	        expression528=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression528.tree, NULL); }

        	        // .//Emerson.g:642:26: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt274=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA274_0 = LA(1);
        	                if ( (LA274_0 == LTERM) ) 
        	                {
        	                    alt274=1;
        	                }

        	            }
        	            switch (alt274) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM529 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression5830); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM529, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop274;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop274: ; /* Jump out to here if this rule does not match */

        	        char_literal530 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_primaryExpression5833); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal530, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 642:37: -> ^( PAREN expression )
        	        	{
        	        	    // .//Emerson.g:642:40: ^( PAREN expression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PAREN, (pANTLR3_UINT8)"PAREN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryExpressionEx; /* Prevent compiler warnings */
    ruleprimaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(93, primaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end primaryExpression */

/** 
 * $ANTLR start vectorLiteral
 * .//Emerson.g:645:1: vectorLiteral : '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* '>' -> ^( VECTOR $e1 $e2 $e3) ;
 */
static EmersonParser_vectorLiteral_return
vectorLiteral(pEmersonParser ctx)
{   
    EmersonParser_vectorLiteral_return retval;
    ANTLR3_UINT32 vectorLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal531;
    pANTLR3_COMMON_TOKEN    LTERM532;
    pANTLR3_COMMON_TOKEN    LTERM533;
    pANTLR3_COMMON_TOKEN    char_literal534;
    pANTLR3_COMMON_TOKEN    LTERM535;
    pANTLR3_COMMON_TOKEN    LTERM536;
    pANTLR3_COMMON_TOKEN    char_literal537;
    pANTLR3_COMMON_TOKEN    LTERM538;
    pANTLR3_COMMON_TOKEN    LTERM539;
    pANTLR3_COMMON_TOKEN    char_literal540;
    EmersonParser_vectorLiteralField_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_vectorLiteralField_return

    EmersonParser_vectorLiteralField_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_vectorLiteralField_return

    EmersonParser_vectorLiteralField_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_vectorLiteralField_return

    pANTLR3_BASE_TREE char_literal531_tree;
    pANTLR3_BASE_TREE LTERM532_tree;
    pANTLR3_BASE_TREE LTERM533_tree;
    pANTLR3_BASE_TREE char_literal534_tree;
    pANTLR3_BASE_TREE LTERM535_tree;
    pANTLR3_BASE_TREE LTERM536_tree;
    pANTLR3_BASE_TREE char_literal537_tree;
    pANTLR3_BASE_TREE LTERM538_tree;
    pANTLR3_BASE_TREE LTERM539_tree;
    pANTLR3_BASE_TREE char_literal540_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_vectorLiteralField;
    /* Initialize rule variables
     */
    vectorLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(94)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal531       = NULL;
    LTERM532       = NULL;
    LTERM533       = NULL;
    char_literal534       = NULL;
    LTERM535       = NULL;
    LTERM536       = NULL;
    char_literal537       = NULL;
    LTERM538       = NULL;
    LTERM539       = NULL;
    char_literal540       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    e3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal531_tree   = NULL;
    LTERM532_tree   = NULL;
    LTERM533_tree   = NULL;
    char_literal534_tree   = NULL;
    LTERM535_tree   = NULL;
    LTERM536_tree   = NULL;
    char_literal537_tree   = NULL;
    LTERM538_tree   = NULL;
    LTERM539_tree   = NULL;
    char_literal540_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 
    stream_vectorLiteralField   = NULL;
    #define CREATE_stream_vectorLiteralField  if (stream_vectorLiteralField == NULL) {stream_vectorLiteralField = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule vectorLiteralField"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:646:9: ( '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* '>' -> ^( VECTOR $e1 $e2 $e3) )
        // .//Emerson.g:646:11: '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* '>'
        {
            char_literal531 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_vectorLiteral5861); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, char_literal531, NULL); }


            // .//Emerson.g:646:15: ( LTERM )*

            for (;;)
            {
                int alt276=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA276_0 = LA(1);
                    if ( (LA276_0 == LTERM) ) 
                    {
                        alt276=1;
                    }

                }
                switch (alt276) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM532 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5863); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM532, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop276;	/* break out of the loop */
            	    break;
                }
            }
            loop276: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral5868);
            e1=vectorLiteralField(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e1.tree, NULL); }

            // .//Emerson.g:646:44: ( LTERM )*

            for (;;)
            {
                int alt277=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA277_0 = LA(1);
                    if ( (LA277_0 == LTERM) ) 
                    {
                        alt277=1;
                    }

                }
                switch (alt277) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM533 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5870); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM533, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop277;	/* break out of the loop */
            	    break;
                }
            }
            loop277: ; /* Jump out to here if this rule does not match */

            char_literal534 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_vectorLiteral5873); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal534, NULL); }


            // .//Emerson.g:646:55: ( LTERM )*

            for (;;)
            {
                int alt278=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA278_0 = LA(1);
                    if ( (LA278_0 == LTERM) ) 
                    {
                        alt278=1;
                    }

                }
                switch (alt278) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM535 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5875); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM535, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop278;	/* break out of the loop */
            	    break;
                }
            }
            loop278: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral5880);
            e2=vectorLiteralField(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e2.tree, NULL); }

            // .//Emerson.g:646:84: ( LTERM )*

            for (;;)
            {
                int alt279=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA279_0 = LA(1);
                    if ( (LA279_0 == LTERM) ) 
                    {
                        alt279=1;
                    }

                }
                switch (alt279) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM536 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5882); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM536, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop279;	/* break out of the loop */
            	    break;
                }
            }
            loop279: ; /* Jump out to here if this rule does not match */

            char_literal537 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_vectorLiteral5885); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal537, NULL); }


            // .//Emerson.g:646:95: ( LTERM )*

            for (;;)
            {
                int alt280=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA280_0 = LA(1);
                    if ( (LA280_0 == LTERM) ) 
                    {
                        alt280=1;
                    }

                }
                switch (alt280) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM538 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5887); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM538, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop280;	/* break out of the loop */
            	    break;
                }
            }
            loop280: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral5892);
            e3=vectorLiteralField(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e3.tree, NULL); }

            // .//Emerson.g:646:124: ( LTERM )*

            for (;;)
            {
                int alt281=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA281_0 = LA(1);
                    if ( (LA281_0 == LTERM) ) 
                    {
                        alt281=1;
                    }

                }
                switch (alt281) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM539 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5894); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM539, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop281;	/* break out of the loop */
            	    break;
                }
            }
            loop281: ; /* Jump out to here if this rule does not match */

            char_literal540 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_vectorLiteral5897); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, char_literal540, NULL); }


             
            /* AST REWRITE
             * elements          : e3, e1, e2
             * token labels      : 
             * rule labels       : e3, retval, e1, e2
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
            	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 646:135: -> ^( VECTOR $e1 $e2 $e3)
            	{
            	    // .//Emerson.g:646:138: ^( VECTOR $e1 $e2 $e3)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VECTOR, (pANTLR3_UINT8)"VECTOR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_e3 != NULL) stream_e3->free(stream_e3);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_e1 != NULL) stream_e1->free(stream_e1);
            	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralEx; /* Prevent compiler warnings */
    rulevectorLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_194 != NULL) stream_194->free(stream_194);
        if (stream_193 != NULL) stream_193->free(stream_193);
        if (stream_vectorLiteralField != NULL) stream_vectorLiteralField->free(stream_vectorLiteralField);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(94, vectorLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end vectorLiteral */

/** 
 * $ANTLR start quaternionLiteral
 * .//Emerson.g:649:1: quaternionLiteral : ( '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ',' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>' -> ^( QUATERNION $e1 $e2 $e3 $e4) | '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ';' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>' -> ^( QUATERNION_AXISANGLE $e1 $e2 $e3 $e4) | '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ';' ( LTERM )* e2= vectorLiteralField ( LTERM )* '>' -> ^( QUATERNION_AXISANGLE $e1 $e2) );
 */
static EmersonParser_quaternionLiteral_return
quaternionLiteral(pEmersonParser ctx)
{   
    EmersonParser_quaternionLiteral_return retval;
    ANTLR3_UINT32 quaternionLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal541;
    pANTLR3_COMMON_TOKEN    LTERM542;
    pANTLR3_COMMON_TOKEN    LTERM543;
    pANTLR3_COMMON_TOKEN    char_literal544;
    pANTLR3_COMMON_TOKEN    LTERM545;
    pANTLR3_COMMON_TOKEN    LTERM546;
    pANTLR3_COMMON_TOKEN    char_literal547;
    pANTLR3_COMMON_TOKEN    LTERM548;
    pANTLR3_COMMON_TOKEN    LTERM549;
    pANTLR3_COMMON_TOKEN    char_literal550;
    pANTLR3_COMMON_TOKEN    LTERM551;
    pANTLR3_COMMON_TOKEN    LTERM552;
    pANTLR3_COMMON_TOKEN    char_literal553;
    pANTLR3_COMMON_TOKEN    char_literal554;
    pANTLR3_COMMON_TOKEN    LTERM555;
    pANTLR3_COMMON_TOKEN    LTERM556;
    pANTLR3_COMMON_TOKEN    char_literal557;
    pANTLR3_COMMON_TOKEN    LTERM558;
    pANTLR3_COMMON_TOKEN    LTERM559;
    pANTLR3_COMMON_TOKEN    char_literal560;
    pANTLR3_COMMON_TOKEN    LTERM561;
    pANTLR3_COMMON_TOKEN    LTERM562;
    pANTLR3_COMMON_TOKEN    char_literal563;
    pANTLR3_COMMON_TOKEN    LTERM564;
    pANTLR3_COMMON_TOKEN    LTERM565;
    pANTLR3_COMMON_TOKEN    char_literal566;
    pANTLR3_COMMON_TOKEN    char_literal567;
    pANTLR3_COMMON_TOKEN    LTERM568;
    pANTLR3_COMMON_TOKEN    LTERM569;
    pANTLR3_COMMON_TOKEN    char_literal570;
    pANTLR3_COMMON_TOKEN    LTERM571;
    pANTLR3_COMMON_TOKEN    LTERM572;
    pANTLR3_COMMON_TOKEN    char_literal573;
    EmersonParser_vectorLiteralField_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_vectorLiteralField_return

    EmersonParser_vectorLiteralField_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_vectorLiteralField_return

    EmersonParser_vectorLiteralField_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_vectorLiteralField_return

    EmersonParser_vectorLiteralField_return e4;
    #undef	RETURN_TYPE_e4
    #define	RETURN_TYPE_e4 EmersonParser_vectorLiteralField_return

    pANTLR3_BASE_TREE char_literal541_tree;
    pANTLR3_BASE_TREE LTERM542_tree;
    pANTLR3_BASE_TREE LTERM543_tree;
    pANTLR3_BASE_TREE char_literal544_tree;
    pANTLR3_BASE_TREE LTERM545_tree;
    pANTLR3_BASE_TREE LTERM546_tree;
    pANTLR3_BASE_TREE char_literal547_tree;
    pANTLR3_BASE_TREE LTERM548_tree;
    pANTLR3_BASE_TREE LTERM549_tree;
    pANTLR3_BASE_TREE char_literal550_tree;
    pANTLR3_BASE_TREE LTERM551_tree;
    pANTLR3_BASE_TREE LTERM552_tree;
    pANTLR3_BASE_TREE char_literal553_tree;
    pANTLR3_BASE_TREE char_literal554_tree;
    pANTLR3_BASE_TREE LTERM555_tree;
    pANTLR3_BASE_TREE LTERM556_tree;
    pANTLR3_BASE_TREE char_literal557_tree;
    pANTLR3_BASE_TREE LTERM558_tree;
    pANTLR3_BASE_TREE LTERM559_tree;
    pANTLR3_BASE_TREE char_literal560_tree;
    pANTLR3_BASE_TREE LTERM561_tree;
    pANTLR3_BASE_TREE LTERM562_tree;
    pANTLR3_BASE_TREE char_literal563_tree;
    pANTLR3_BASE_TREE LTERM564_tree;
    pANTLR3_BASE_TREE LTERM565_tree;
    pANTLR3_BASE_TREE char_literal566_tree;
    pANTLR3_BASE_TREE char_literal567_tree;
    pANTLR3_BASE_TREE LTERM568_tree;
    pANTLR3_BASE_TREE LTERM569_tree;
    pANTLR3_BASE_TREE char_literal570_tree;
    pANTLR3_BASE_TREE LTERM571_tree;
    pANTLR3_BASE_TREE LTERM572_tree;
    pANTLR3_BASE_TREE char_literal573_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_vectorLiteralField;
    /* Initialize rule variables
     */
    quaternionLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(95)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal541       = NULL;
    LTERM542       = NULL;
    LTERM543       = NULL;
    char_literal544       = NULL;
    LTERM545       = NULL;
    LTERM546       = NULL;
    char_literal547       = NULL;
    LTERM548       = NULL;
    LTERM549       = NULL;
    char_literal550       = NULL;
    LTERM551       = NULL;
    LTERM552       = NULL;
    char_literal553       = NULL;
    char_literal554       = NULL;
    LTERM555       = NULL;
    LTERM556       = NULL;
    char_literal557       = NULL;
    LTERM558       = NULL;
    LTERM559       = NULL;
    char_literal560       = NULL;
    LTERM561       = NULL;
    LTERM562       = NULL;
    char_literal563       = NULL;
    LTERM564       = NULL;
    LTERM565       = NULL;
    char_literal566       = NULL;
    char_literal567       = NULL;
    LTERM568       = NULL;
    LTERM569       = NULL;
    char_literal570       = NULL;
    LTERM571       = NULL;
    LTERM572       = NULL;
    char_literal573       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    e3.tree = NULL;

    e4.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal541_tree   = NULL;
    LTERM542_tree   = NULL;
    LTERM543_tree   = NULL;
    char_literal544_tree   = NULL;
    LTERM545_tree   = NULL;
    LTERM546_tree   = NULL;
    char_literal547_tree   = NULL;
    LTERM548_tree   = NULL;
    LTERM549_tree   = NULL;
    char_literal550_tree   = NULL;
    LTERM551_tree   = NULL;
    LTERM552_tree   = NULL;
    char_literal553_tree   = NULL;
    char_literal554_tree   = NULL;
    LTERM555_tree   = NULL;
    LTERM556_tree   = NULL;
    char_literal557_tree   = NULL;
    LTERM558_tree   = NULL;
    LTERM559_tree   = NULL;
    char_literal560_tree   = NULL;
    LTERM561_tree   = NULL;
    LTERM562_tree   = NULL;
    char_literal563_tree   = NULL;
    LTERM564_tree   = NULL;
    LTERM565_tree   = NULL;
    char_literal566_tree   = NULL;
    char_literal567_tree   = NULL;
    LTERM568_tree   = NULL;
    LTERM569_tree   = NULL;
    char_literal570_tree   = NULL;
    LTERM571_tree   = NULL;
    LTERM572_tree   = NULL;
    char_literal573_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 
    stream_vectorLiteralField   = NULL;
    #define CREATE_stream_vectorLiteralField  if (stream_vectorLiteralField == NULL) {stream_vectorLiteralField = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule vectorLiteralField"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:650:9: ( '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ',' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>' -> ^( QUATERNION $e1 $e2 $e3 $e4) | '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ';' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>' -> ^( QUATERNION_AXISANGLE $e1 $e2 $e3 $e4) | '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ';' ( LTERM )* e2= vectorLiteralField ( LTERM )* '>' -> ^( QUATERNION_AXISANGLE $e1 $e2) )
            
            ANTLR3_UINT32 alt302;

            alt302=3;


            {
                int LA302_0 = LA(1);
                if ( (LA302_0 == 193) ) 
                {

                    {
                        int LA302_1 = LA(2);
                        if ( (synpred344_Emerson(ctx)) ) 
                        {
                            alt302=1;
                        }
                        else if ( (synpred353_Emerson(ctx)) ) 
                        {
                            alt302=2;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt302=3;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 302;
                            EXCEPTION->state        = 1;


                            goto rulequaternionLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 302;
                    EXCEPTION->state        = 0;


                    goto rulequaternionLiteralEx;
                }
            }
            switch (alt302) 
            {
        	case 1:
        	    // .//Emerson.g:650:11: '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ',' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>'
        	    {
        	        char_literal541 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_quaternionLiteral5937); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, char_literal541, NULL); }


        	        // .//Emerson.g:650:15: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt282=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA282_0 = LA(1);
        	                if ( (LA282_0 == LTERM) ) 
        	                {
        	                    alt282=1;
        	                }

        	            }
        	            switch (alt282) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM542 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5939); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM542, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop282;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop282: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral5944);
        	        e1=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e1.tree, NULL); }

        	        // .//Emerson.g:650:44: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt283=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA283_0 = LA(1);
        	                if ( (LA283_0 == LTERM) ) 
        	                {
        	                    alt283=1;
        	                }

        	            }
        	            switch (alt283) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM543 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5946); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM543, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop283;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop283: ; /* Jump out to here if this rule does not match */

        	        char_literal544 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_quaternionLiteral5949); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal544, NULL); }


        	        // .//Emerson.g:650:55: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt284=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA284_0 = LA(1);
        	                if ( (LA284_0 == LTERM) ) 
        	                {
        	                    alt284=1;
        	                }

        	            }
        	            switch (alt284) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM545 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5951); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM545, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop284;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop284: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral5956);
        	        e2=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e2.tree, NULL); }

        	        // .//Emerson.g:650:84: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt285=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA285_0 = LA(1);
        	                if ( (LA285_0 == LTERM) ) 
        	                {
        	                    alt285=1;
        	                }

        	            }
        	            switch (alt285) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM546 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5958); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM546, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop285;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop285: ; /* Jump out to here if this rule does not match */

        	        char_literal547 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_quaternionLiteral5961); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal547, NULL); }


        	        // .//Emerson.g:650:95: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt286=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA286_0 = LA(1);
        	                if ( (LA286_0 == LTERM) ) 
        	                {
        	                    alt286=1;
        	                }

        	            }
        	            switch (alt286) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM548 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5963); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM548, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop286;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop286: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral5968);
        	        e3=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e3.tree, NULL); }

        	        // .//Emerson.g:650:124: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt287=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA287_0 = LA(1);
        	                if ( (LA287_0 == LTERM) ) 
        	                {
        	                    alt287=1;
        	                }

        	            }
        	            switch (alt287) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM549 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5970); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM549, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop287;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop287: ; /* Jump out to here if this rule does not match */

        	        char_literal550 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_quaternionLiteral5973); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal550, NULL); }


        	        // .//Emerson.g:650:135: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt288=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA288_0 = LA(1);
        	                if ( (LA288_0 == LTERM) ) 
        	                {
        	                    alt288=1;
        	                }

        	            }
        	            switch (alt288) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM551 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5975); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM551, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop288;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop288: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral5980);
        	        e4=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e4.tree, NULL); }

        	        // .//Emerson.g:650:164: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt289=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA289_0 = LA(1);
        	                if ( (LA289_0 == LTERM) ) 
        	                {
        	                    alt289=1;
        	                }

        	            }
        	            switch (alt289) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM552 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral5982); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM552, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop289;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop289: ; /* Jump out to here if this rule does not match */

        	        char_literal553 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_quaternionLiteral5984); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, char_literal553, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : e1, e4, e3, e2
        	         * token labels      : 
        	         * rule labels       : e3, e4, retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e4;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
        	        	stream_e4=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e4", e4.tree != NULL ? e4.tree : NULL);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 650:174: -> ^( QUATERNION $e1 $e2 $e3 $e4)
        	        	{
        	        	    // .//Emerson.g:650:177: ^( QUATERNION $e1 $e2 $e3 $e4)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, QUATERNION, (pANTLR3_UINT8)"QUATERNION"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e4 == NULL ? NULL : stream_e4->nextTree(stream_e4));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
        	        	if (stream_e4 != NULL) stream_e4->free(stream_e4);
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:651:11: '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ';' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>'
        	    {
        	        char_literal554 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_quaternionLiteral6014); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, char_literal554, NULL); }


        	        // .//Emerson.g:651:15: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt290=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA290_0 = LA(1);
        	                if ( (LA290_0 == LTERM) ) 
        	                {
        	                    alt290=1;
        	                }

        	            }
        	            switch (alt290) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM555 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6016); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM555, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop290;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop290: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral6021);
        	        e1=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e1.tree, NULL); }

        	        // .//Emerson.g:651:44: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt291=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA291_0 = LA(1);
        	                if ( (LA291_0 == LTERM) ) 
        	                {
        	                    alt291=1;
        	                }

        	            }
        	            switch (alt291) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM556 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6023); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM556, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop291;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop291: ; /* Jump out to here if this rule does not match */

        	        char_literal557 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_quaternionLiteral6026); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal557, NULL); }


        	        // .//Emerson.g:651:55: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt292=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA292_0 = LA(1);
        	                if ( (LA292_0 == LTERM) ) 
        	                {
        	                    alt292=1;
        	                }

        	            }
        	            switch (alt292) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM558 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6028); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM558, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop292;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop292: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral6033);
        	        e2=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e2.tree, NULL); }

        	        // .//Emerson.g:651:84: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt293=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA293_0 = LA(1);
        	                if ( (LA293_0 == LTERM) ) 
        	                {
        	                    alt293=1;
        	                }

        	            }
        	            switch (alt293) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM559 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6035); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM559, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop293;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop293: ; /* Jump out to here if this rule does not match */

        	        char_literal560 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_quaternionLiteral6038); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal560, NULL); }


        	        // .//Emerson.g:651:95: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt294=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA294_0 = LA(1);
        	                if ( (LA294_0 == LTERM) ) 
        	                {
        	                    alt294=1;
        	                }

        	            }
        	            switch (alt294) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM561 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6040); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM561, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop294;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop294: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral6045);
        	        e3=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e3.tree, NULL); }

        	        // .//Emerson.g:651:124: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt295=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA295_0 = LA(1);
        	                if ( (LA295_0 == LTERM) ) 
        	                {
        	                    alt295=1;
        	                }

        	            }
        	            switch (alt295) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM562 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6047); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM562, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop295;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop295: ; /* Jump out to here if this rule does not match */

        	        char_literal563 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_quaternionLiteral6050); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal563, NULL); }


        	        // .//Emerson.g:651:135: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt296=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA296_0 = LA(1);
        	                if ( (LA296_0 == LTERM) ) 
        	                {
        	                    alt296=1;
        	                }

        	            }
        	            switch (alt296) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM564 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6052); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM564, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop296;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop296: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral6057);
        	        e4=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e4.tree, NULL); }

        	        // .//Emerson.g:651:164: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt297=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA297_0 = LA(1);
        	                if ( (LA297_0 == LTERM) ) 
        	                {
        	                    alt297=1;
        	                }

        	            }
        	            switch (alt297) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM565 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6059); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM565, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop297;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop297: ; /* Jump out to here if this rule does not match */

        	        char_literal566 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_quaternionLiteral6061); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, char_literal566, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : e4, e3, e2, e1
        	         * token labels      : 
        	         * rule labels       : e3, e4, retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e4;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
        	        	stream_e4=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e4", e4.tree != NULL ? e4.tree : NULL);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 651:174: -> ^( QUATERNION_AXISANGLE $e1 $e2 $e3 $e4)
        	        	{
        	        	    // .//Emerson.g:651:177: ^( QUATERNION_AXISANGLE $e1 $e2 $e3 $e4)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, QUATERNION_AXISANGLE, (pANTLR3_UINT8)"QUATERNION_AXISANGLE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e4 == NULL ? NULL : stream_e4->nextTree(stream_e4));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
        	        	if (stream_e4 != NULL) stream_e4->free(stream_e4);
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:652:11: '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ';' ( LTERM )* e2= vectorLiteralField ( LTERM )* '>'
        	    {
        	        char_literal567 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_quaternionLiteral6091); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, char_literal567, NULL); }


        	        // .//Emerson.g:652:15: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt298=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA298_0 = LA(1);
        	                if ( (LA298_0 == LTERM) ) 
        	                {
        	                    alt298=1;
        	                }

        	            }
        	            switch (alt298) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM568 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6093); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM568, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop298;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop298: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral6098);
        	        e1=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e1.tree, NULL); }

        	        // .//Emerson.g:652:44: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt299=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA299_0 = LA(1);
        	                if ( (LA299_0 == LTERM) ) 
        	                {
        	                    alt299=1;
        	                }

        	            }
        	            switch (alt299) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM569 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6100); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM569, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop299;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop299: ; /* Jump out to here if this rule does not match */

        	        char_literal570 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_quaternionLiteral6103); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, char_literal570, NULL); }


        	        // .//Emerson.g:652:55: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt300=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA300_0 = LA(1);
        	                if ( (LA300_0 == LTERM) ) 
        	                {
        	                    alt300=1;
        	                }

        	            }
        	            switch (alt300) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM571 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6105); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM571, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop300;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop300: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_quaternionLiteral6110);
        	        e2=vectorLiteralField(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e2.tree, NULL); }

        	        // .//Emerson.g:652:84: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt301=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA301_0 = LA(1);
        	                if ( (LA301_0 == LTERM) ) 
        	                {
        	                    alt301=1;
        	                }

        	            }
        	            switch (alt301) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM572 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_quaternionLiteral6112); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulequaternionLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM572, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop301;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop301: ; /* Jump out to here if this rule does not match */

        	        char_literal573 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_quaternionLiteral6114); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequaternionLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, char_literal573, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : e1, e2
        	         * token labels      : 
        	         * rule labels       : retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 652:94: -> ^( QUATERNION_AXISANGLE $e1 $e2)
        	        	{
        	        	    // .//Emerson.g:652:97: ^( QUATERNION_AXISANGLE $e1 $e2)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, QUATERNION_AXISANGLE, (pANTLR3_UINT8)"QUATERNION_AXISANGLE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulequaternionLiteralEx; /* Prevent compiler warnings */
    rulequaternionLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_194 != NULL) stream_194->free(stream_194);
        if (stream_193 != NULL) stream_193->free(stream_193);
        if (stream_vectorLiteralField != NULL) stream_vectorLiteralField->free(stream_vectorLiteralField);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(95, quaternionLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end quaternionLiteral */

/** 
 * $ANTLR start vectorLiteralField
 * .//Emerson.g:658:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );
 */
static EmersonParser_vectorLiteralField_return
vectorLiteralField(pEmersonParser ctx)
{   
    EmersonParser_vectorLiteralField_return retval;
    ANTLR3_UINT32 vectorLiteralField_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    NumericLiteral575;
    EmersonParser_additiveExpression_return additiveExpression574;
    #undef	RETURN_TYPE_additiveExpression574
    #define	RETURN_TYPE_additiveExpression574 EmersonParser_additiveExpression_return

    EmersonParser_callExpression_return callExpression576;
    #undef	RETURN_TYPE_callExpression576
    #define	RETURN_TYPE_callExpression576 EmersonParser_callExpression_return

    EmersonParser_memberExpression_return memberExpression577;
    #undef	RETURN_TYPE_memberExpression577
    #define	RETURN_TYPE_memberExpression577 EmersonParser_memberExpression_return

    pANTLR3_BASE_TREE NumericLiteral575_tree;

    /* Initialize rule variables
     */
    vectorLiteralField_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(96)) )
    {
    	retval.start = 0;

        return retval; 
    }
    NumericLiteral575       = NULL;
    additiveExpression574.tree = NULL;

    callExpression576.tree = NULL;

    memberExpression577.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    NumericLiteral575_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:659:9: ( additiveExpression | NumericLiteral | callExpression | memberExpression )
            
            ANTLR3_UINT32 alt303;

            alt303=4;

            alt303 = cdfa303.predict(ctx, RECOGNIZER, ISTREAM, &cdfa303);
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralFieldEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt303) 
            {
        	case 1:
        	    // .//Emerson.g:659:11: additiveExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_vectorLiteralField6162);
        	        additiveExpression574=additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, additiveExpression574.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:661:11: NumericLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        NumericLiteral575 = (pANTLR3_COMMON_TOKEN) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_vectorLiteralField6175); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        NumericLiteral575_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NumericLiteral575));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NumericLiteral575_tree);
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:662:11: callExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_callExpression_in_vectorLiteralField6187);
        	        callExpression576=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, callExpression576.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:663:11: memberExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_memberExpression_in_vectorLiteralField6200);
        	        memberExpression577=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, memberExpression577.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralFieldEx; /* Prevent compiler warnings */
    rulevectorLiteralFieldEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(96, vectorLiteralField_StartIndex); }
    return retval;
}
/* $ANTLR end vectorLiteralField */

/** 
 * $ANTLR start dollarExpression
 * .//Emerson.g:667:1: dollarExpression : '`' ( LTERM )* Identifier ( LTERM )* '`' -> ^( DOLLAR_EXPRESSION Identifier ) ;
 */
static EmersonParser_dollarExpression_return
dollarExpression(pEmersonParser ctx)
{   
    EmersonParser_dollarExpression_return retval;
    ANTLR3_UINT32 dollarExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal578;
    pANTLR3_COMMON_TOKEN    LTERM579;
    pANTLR3_COMMON_TOKEN    Identifier580;
    pANTLR3_COMMON_TOKEN    LTERM581;
    pANTLR3_COMMON_TOKEN    char_literal582;

    pANTLR3_BASE_TREE char_literal578_tree;
    pANTLR3_BASE_TREE LTERM579_tree;
    pANTLR3_BASE_TREE Identifier580_tree;
    pANTLR3_BASE_TREE LTERM581_tree;
    pANTLR3_BASE_TREE char_literal582_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_212;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    dollarExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(97)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal578       = NULL;
    LTERM579       = NULL;
    Identifier580       = NULL;
    LTERM581       = NULL;
    char_literal582       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal578_tree   = NULL;
    LTERM579_tree   = NULL;
    Identifier580_tree   = NULL;
    LTERM581_tree   = NULL;
    char_literal582_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_212   = NULL;
    #define CREATE_stream_212  if (stream_212 == NULL) {stream_212 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 212"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:668:9: ( '`' ( LTERM )* Identifier ( LTERM )* '`' -> ^( DOLLAR_EXPRESSION Identifier ) )
        // .//Emerson.g:668:11: '`' ( LTERM )* Identifier ( LTERM )* '`'
        {
            char_literal578 = (pANTLR3_COMMON_TOKEN) MATCHT(212, &FOLLOW_212_in_dollarExpression6234); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_212; stream_212->add(stream_212, char_literal578, NULL); }


            // .//Emerson.g:668:15: ( LTERM )*

            for (;;)
            {
                int alt304=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA304_0 = LA(1);
                    if ( (LA304_0 == LTERM) ) 
                    {
                        alt304=1;
                    }

                }
                switch (alt304) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM579 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_dollarExpression6236); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledollarExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM579, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop304;	/* break out of the loop */
            	    break;
                }
            }
            loop304: ; /* Jump out to here if this rule does not match */

            Identifier580 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_dollarExpression6239); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier580, NULL); }


            // .//Emerson.g:668:33: ( LTERM )*

            for (;;)
            {
                int alt305=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA305_0 = LA(1);
                    if ( (LA305_0 == LTERM) ) 
                    {
                        alt305=1;
                    }

                }
                switch (alt305) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM581 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_dollarExpression6241); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledollarExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM581, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop305;	/* break out of the loop */
            	    break;
                }
            }
            loop305: ; /* Jump out to here if this rule does not match */

            char_literal582 = (pANTLR3_COMMON_TOKEN) MATCHT(212, &FOLLOW_212_in_dollarExpression6244); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_212; stream_212->add(stream_212, char_literal582, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 668:44: -> ^( DOLLAR_EXPRESSION Identifier )
            	{
            	    // .//Emerson.g:668:47: ^( DOLLAR_EXPRESSION Identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOLLAR_EXPRESSION, (pANTLR3_UINT8)"DOLLAR_EXPRESSION"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledollarExpressionEx; /* Prevent compiler warnings */
    ruledollarExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_212 != NULL) stream_212->free(stream_212);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(97, dollarExpression_StartIndex); }
    return retval;
}
/* $ANTLR end dollarExpression */

/** 
 * $ANTLR start arrayLiteral
 * .//Emerson.g:672:1: arrayLiteral : ( '[' ( LTERM )* ( expression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( expression )? ) | '[' ( LTERM )* e1= expression ( ',' ( LTERM )* e2= expression )* ( ( ',' )? ) ( LTERM )* ']' -> ^( ARRAY_LITERAL expression ( expression )* ) );
 */
static EmersonParser_arrayLiteral_return
arrayLiteral(pEmersonParser ctx)
{   
    EmersonParser_arrayLiteral_return retval;
    ANTLR3_UINT32 arrayLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal583;
    pANTLR3_COMMON_TOKEN    LTERM584;
    pANTLR3_COMMON_TOKEN    LTERM586;
    pANTLR3_COMMON_TOKEN    char_literal587;
    pANTLR3_COMMON_TOKEN    char_literal588;
    pANTLR3_COMMON_TOKEN    LTERM589;
    pANTLR3_COMMON_TOKEN    char_literal590;
    pANTLR3_COMMON_TOKEN    LTERM591;
    pANTLR3_COMMON_TOKEN    char_literal592;
    pANTLR3_COMMON_TOKEN    LTERM593;
    pANTLR3_COMMON_TOKEN    char_literal594;
    EmersonParser_expression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_expression_return

    EmersonParser_expression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_expression_return

    EmersonParser_expression_return expression585;
    #undef	RETURN_TYPE_expression585
    #define	RETURN_TYPE_expression585 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal583_tree;
    pANTLR3_BASE_TREE LTERM584_tree;
    pANTLR3_BASE_TREE LTERM586_tree;
    pANTLR3_BASE_TREE char_literal587_tree;
    pANTLR3_BASE_TREE char_literal588_tree;
    pANTLR3_BASE_TREE LTERM589_tree;
    pANTLR3_BASE_TREE char_literal590_tree;
    pANTLR3_BASE_TREE LTERM591_tree;
    pANTLR3_BASE_TREE char_literal592_tree;
    pANTLR3_BASE_TREE LTERM593_tree;
    pANTLR3_BASE_TREE char_literal594_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_170;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_169;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    arrayLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(98)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal583       = NULL;
    LTERM584       = NULL;
    LTERM586       = NULL;
    char_literal587       = NULL;
    char_literal588       = NULL;
    LTERM589       = NULL;
    char_literal590       = NULL;
    LTERM591       = NULL;
    char_literal592       = NULL;
    LTERM593       = NULL;
    char_literal594       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    expression585.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal583_tree   = NULL;
    LTERM584_tree   = NULL;
    LTERM586_tree   = NULL;
    char_literal587_tree   = NULL;
    char_literal588_tree   = NULL;
    LTERM589_tree   = NULL;
    char_literal590_tree   = NULL;
    LTERM591_tree   = NULL;
    char_literal592_tree   = NULL;
    LTERM593_tree   = NULL;
    char_literal594_tree   = NULL;

    stream_170   = NULL;
    #define CREATE_stream_170  if (stream_170 == NULL) {stream_170 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 170"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_169   = NULL;
    #define CREATE_stream_169  if (stream_169 == NULL) {stream_169 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 169"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:673:3: ( '[' ( LTERM )* ( expression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( expression )? ) | '[' ( LTERM )* e1= expression ( ',' ( LTERM )* e2= expression )* ( ( ',' )? ) ( LTERM )* ']' -> ^( ARRAY_LITERAL expression ( expression )* ) )
            
            ANTLR3_UINT32 alt314;

            alt314=2;


            {
                int LA314_0 = LA(1);
                if ( (LA314_0 == 169) ) 
                {

                    {
                        int LA314_1 = LA(2);
                        if ( (synpred366_Emerson(ctx)) ) 
                        {
                            alt314=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt314=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 314;
                            EXCEPTION->state        = 1;


                            goto rulearrayLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 314;
                    EXCEPTION->state        = 0;


                    goto rulearrayLiteralEx;
                }
            }
            switch (alt314) 
            {
        	case 1:
        	    // .//Emerson.g:673:5: '[' ( LTERM )* ( expression )? ( LTERM )* ']'
        	    {
        	        char_literal583 = (pANTLR3_COMMON_TOKEN) MATCHT(169, &FOLLOW_169_in_arrayLiteral6280); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_169; stream_169->add(stream_169, char_literal583, NULL); }


        	        // .//Emerson.g:673:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt306=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA306_0 = LA(1);
        	                if ( (LA306_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA306_2 = LA(2);
        	                        if ( (synpred363_Emerson(ctx)) ) 
        	                        {
        	                            alt306=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt306) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM584 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral6282); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM584, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop306;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop306: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:673:16: ( expression )?
        	        {
        	            int alt307=2;
        	            {
        	                int LA307_0 = LA(1);
        	                if ( (((LA307_0 >= Identifier) && (LA307_0 <= StringLiteral)) || ((LA307_0 >= 141) && (LA307_0 <= 142)) || LA307_0 == 145 || ((LA307_0 >= 168) && (LA307_0 <= 169)) || LA307_0 == 193 || ((LA307_0 >= 198) && (LA307_0 <= 199)) || ((LA307_0 >= 203) && (LA307_0 <= 215))) ) 
        	                {
        	                    alt307=1;
        	                }
        	            }
        	            switch (alt307) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:673:17: expression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral6286);
        	        	        expression585=expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression585.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:673:30: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt308=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA308_0 = LA(1);
        	                if ( (LA308_0 == LTERM) ) 
        	                {
        	                    alt308=1;
        	                }

        	            }
        	            switch (alt308) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM586 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral6290); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM586, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop308;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop308: ; /* Jump out to here if this rule does not match */

        	        char_literal587 = (pANTLR3_COMMON_TOKEN) MATCHT(170, &FOLLOW_170_in_arrayLiteral6293); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_170; stream_170->add(stream_170, char_literal587, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 673:41: -> ^( ARRAY_LITERAL ( expression )? )
        	        	{
        	        	    // .//Emerson.g:673:44: ^( ARRAY_LITERAL ( expression )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        // .//Emerson.g:673:60: ( expression )?
        	        	        {
        	        	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        	}
        	        	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:674:5: '[' ( LTERM )* e1= expression ( ',' ( LTERM )* e2= expression )* ( ( ',' )? ) ( LTERM )* ']'
        	    {
        	        char_literal588 = (pANTLR3_COMMON_TOKEN) MATCHT(169, &FOLLOW_169_in_arrayLiteral6308); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_169; stream_169->add(stream_169, char_literal588, NULL); }


        	        // .//Emerson.g:674:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt309=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA309_0 = LA(1);
        	                if ( (LA309_0 == LTERM) ) 
        	                {
        	                    alt309=1;
        	                }

        	            }
        	            switch (alt309) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM589 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral6310); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM589, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop309;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop309: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral6315);
        	        e1=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, e1.tree, NULL); }

        	        // .//Emerson.g:674:30: ( ',' ( LTERM )* e2= expression )*

        	        for (;;)
        	        {
        	            int alt311=2;
        	            alt311 = cdfa311.predict(ctx, RECOGNIZER, ISTREAM, &cdfa311);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulearrayLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt311) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:674:31: ',' ( LTERM )* e2= expression
        	        	    {
        	        	        char_literal590 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_arrayLiteral6318); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal590, NULL); }


        	        	        // .//Emerson.g:674:35: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt310=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA310_0 = LA(1);
        	        	                if ( (LA310_0 == LTERM) ) 
        	        	                {
        	        	                    alt310=1;
        	        	                }

        	        	            }
        	        	            switch (alt310) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM591 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral6320); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulearrayLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM591, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop310;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop310: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral6325);
        	        	        e2=expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, e2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop311;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop311: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:674:58: ( ( ',' )? )
        	        // .//Emerson.g:674:59: ( ',' )?
        	        {

        	            // .//Emerson.g:674:59: ( ',' )?
        	            {
        	                int alt312=2;
        	                {
        	                    int LA312_0 = LA(1);
        	                    if ( (LA312_0 == 144) ) 
        	                    {
        	                        alt312=1;
        	                    }
        	                }
        	                switch (alt312) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: ','
        	            	    {
        	            	        char_literal592 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_arrayLiteral6330); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulearrayLiteralEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal592, NULL); }


        	            	    }
        	            	    break;

        	                }
        	            }

        	        }


        	        // .//Emerson.g:674:65: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt313=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA313_0 = LA(1);
        	                if ( (LA313_0 == LTERM) ) 
        	                {
        	                    alt313=1;
        	                }

        	            }
        	            switch (alt313) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM593 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral6334); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM593, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop313;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop313: ; /* Jump out to here if this rule does not match */

        	        char_literal594 = (pANTLR3_COMMON_TOKEN) MATCHT(170, &FOLLOW_170_in_arrayLiteral6337); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_170; stream_170->add(stream_170, char_literal594, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression, expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 674:76: -> ^( ARRAY_LITERAL expression ( expression )* )
        	        	{
        	        	    // .//Emerson.g:674:79: ^( ARRAY_LITERAL expression ( expression )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
        	        	        // .//Emerson.g:674:106: ( expression )*
        	        	        {
        	        	        	while ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        	}
        	        	        	if (stream_expression != NULL) stream_expression->reset(stream_expression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayLiteralEx; /* Prevent compiler warnings */
    rulearrayLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_170 != NULL) stream_170->free(stream_170);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_169 != NULL) stream_169->free(stream_169);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(98, arrayLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end arrayLiteral */

/** 
 * $ANTLR start objectLiteral
 * .//Emerson.g:678:1: objectLiteral : ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( ( ',' )? ) ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) );
 */
static EmersonParser_objectLiteral_return
objectLiteral(pEmersonParser ctx)
{   
    EmersonParser_objectLiteral_return retval;
    ANTLR3_UINT32 objectLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal595;
    pANTLR3_COMMON_TOKEN    LTERM596;
    pANTLR3_COMMON_TOKEN    LTERM598;
    pANTLR3_COMMON_TOKEN    char_literal599;
    pANTLR3_COMMON_TOKEN    char_literal600;
    pANTLR3_COMMON_TOKEN    LTERM601;
    pANTLR3_COMMON_TOKEN    char_literal602;
    pANTLR3_COMMON_TOKEN    LTERM603;
    pANTLR3_COMMON_TOKEN    char_literal604;
    pANTLR3_COMMON_TOKEN    LTERM605;
    pANTLR3_COMMON_TOKEN    char_literal606;
    EmersonParser_propertyNameAndValue_return p1;
    #undef	RETURN_TYPE_p1
    #define	RETURN_TYPE_p1 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return p2;
    #undef	RETURN_TYPE_p2
    #define	RETURN_TYPE_p2 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return propertyNameAndValue597;
    #undef	RETURN_TYPE_propertyNameAndValue597
    #define	RETURN_TYPE_propertyNameAndValue597 EmersonParser_propertyNameAndValue_return

    pANTLR3_BASE_TREE char_literal595_tree;
    pANTLR3_BASE_TREE LTERM596_tree;
    pANTLR3_BASE_TREE LTERM598_tree;
    pANTLR3_BASE_TREE char_literal599_tree;
    pANTLR3_BASE_TREE char_literal600_tree;
    pANTLR3_BASE_TREE LTERM601_tree;
    pANTLR3_BASE_TREE char_literal602_tree;
    pANTLR3_BASE_TREE LTERM603_tree;
    pANTLR3_BASE_TREE char_literal604_tree;
    pANTLR3_BASE_TREE LTERM605_tree;
    pANTLR3_BASE_TREE char_literal606_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyNameAndValue;
    /* Initialize rule variables
     */
    objectLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(99)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal595       = NULL;
    LTERM596       = NULL;
    LTERM598       = NULL;
    char_literal599       = NULL;
    char_literal600       = NULL;
    LTERM601       = NULL;
    char_literal602       = NULL;
    LTERM603       = NULL;
    char_literal604       = NULL;
    LTERM605       = NULL;
    char_literal606       = NULL;
    p1.tree = NULL;

    p2.tree = NULL;

    propertyNameAndValue597.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal595_tree   = NULL;
    LTERM596_tree   = NULL;
    LTERM598_tree   = NULL;
    char_literal599_tree   = NULL;
    char_literal600_tree   = NULL;
    LTERM601_tree   = NULL;
    char_literal602_tree   = NULL;
    LTERM603_tree   = NULL;
    char_literal604_tree   = NULL;
    LTERM605_tree   = NULL;
    char_literal606_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_propertyNameAndValue   = NULL;
    #define CREATE_stream_propertyNameAndValue  if (stream_propertyNameAndValue == NULL) {stream_propertyNameAndValue = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyNameAndValue"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:679:3: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( ( ',' )? ) ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) )
            
            ANTLR3_UINT32 alt323;

            alt323=2;


            {
                int LA323_0 = LA(1);
                if ( (LA323_0 == 145) ) 
                {

                    {
                        int LA323_1 = LA(2);
                        if ( (synpred375_Emerson(ctx)) ) 
                        {
                            alt323=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt323=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 323;
                            EXCEPTION->state        = 1;


                            goto ruleobjectLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 323;
                    EXCEPTION->state        = 0;


                    goto ruleobjectLiteralEx;
                }
            }
            switch (alt323) 
            {
        	case 1:
        	    // .//Emerson.g:679:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
        	    {
        	        char_literal595 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_objectLiteral6369); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal595, NULL); }


        	        // .//Emerson.g:679:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt315=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA315_0 = LA(1);
        	                if ( (LA315_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA315_2 = LA(2);
        	                        if ( (synpred372_Emerson(ctx)) ) 
        	                        {
        	                            alt315=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt315) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM596 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral6371); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM596, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop315;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop315: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:679:16: ( propertyNameAndValue )?
        	        {
        	            int alt316=2;
        	            {
        	                int LA316_0 = LA(1);
        	                if ( (((LA316_0 >= Identifier) && (LA316_0 <= StringLiteral))) ) 
        	                {
        	                    alt316=1;
        	                }
        	            }
        	            switch (alt316) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: propertyNameAndValue
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral6374);
        	        	        propertyNameAndValue597=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, propertyNameAndValue597.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:679:38: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt317=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA317_0 = LA(1);
        	                if ( (LA317_0 == LTERM) ) 
        	                {
        	                    alt317=1;
        	                }

        	            }
        	            switch (alt317) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM598 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral6377); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM598, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop317;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop317: ; /* Jump out to here if this rule does not match */

        	        char_literal599 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_objectLiteral6380); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal599, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 679:49: -> ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	{
        	        	    // .//Emerson.g:679:52: ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        // .//Emerson.g:679:66: ( propertyNameAndValue )?
        	        	        {
        	        	        	if ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if ( stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:680:5: '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( ( ',' )? ) ( LTERM )* '}'
        	    {
        	        char_literal600 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_objectLiteral6395); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal600, NULL); }


        	        // .//Emerson.g:680:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt318=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA318_0 = LA(1);
        	                if ( (LA318_0 == LTERM) ) 
        	                {
        	                    alt318=1;
        	                }

        	            }
        	            switch (alt318) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM601 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral6397); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM601, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop318;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop318: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral6402);
        	        p1=propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p1.tree, NULL); }

        	        // .//Emerson.g:680:40: ( ',' ( LTERM )* p2= propertyNameAndValue )*

        	        for (;;)
        	        {
        	            int alt320=2;
        	            alt320 = cdfa320.predict(ctx, RECOGNIZER, ISTREAM, &cdfa320);
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleobjectLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt320) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:680:41: ',' ( LTERM )* p2= propertyNameAndValue
        	        	    {
        	        	        char_literal602 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_objectLiteral6405); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal602, NULL); }


        	        	        // .//Emerson.g:680:45: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt319=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA319_0 = LA(1);
        	        	                if ( (LA319_0 == LTERM) ) 
        	        	                {
        	        	                    alt319=1;
        	        	                }

        	        	            }
        	        	            switch (alt319) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM603 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral6407); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleobjectLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM603, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop319;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop319: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral6412);
        	        	        p2=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop320;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop320: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:680:78: ( ( ',' )? )
        	        // .//Emerson.g:680:79: ( ',' )?
        	        {

        	            // .//Emerson.g:680:79: ( ',' )?
        	            {
        	                int alt321=2;
        	                {
        	                    int LA321_0 = LA(1);
        	                    if ( (LA321_0 == 144) ) 
        	                    {
        	                        alt321=1;
        	                    }
        	                }
        	                switch (alt321) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: ','
        	            	    {
        	            	        char_literal604 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_objectLiteral6417); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto ruleobjectLiteralEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal604, NULL); }


        	            	    }
        	            	    break;

        	                }
        	            }

        	        }


        	        // .//Emerson.g:680:85: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt322=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA322_0 = LA(1);
        	                if ( (LA322_0 == LTERM) ) 
        	                {
        	                    alt322=1;
        	                }

        	            }
        	            switch (alt322) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM605 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral6421); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM605, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop322;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop322: ; /* Jump out to here if this rule does not match */

        	        char_literal606 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_objectLiteral6428); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal606, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue, propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 680:100: -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	{
        	        	    // .//Emerson.g:680:103: ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));
        	        	        // .//Emerson.g:680:138: ( propertyNameAndValue )*
        	        	        {
        	        	        	while ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectLiteralEx; /* Prevent compiler warnings */
    ruleobjectLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->free(stream_propertyNameAndValue);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(99, objectLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end objectLiteral */

/** 
 * $ANTLR start patternLiteral
 * .//Emerson.g:684:1: patternLiteral : ( '{' ( LTERM )* ( nameValueProto )? ( LTERM )* '}' -> ^( PATTERN_LITERAL ( nameValueProto )? ) | '{' ( LTERM )* p1= nameValueProto ( ',' ( LTERM )* p2= nameValueProto )* ( LTERM )* '}' -> ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* ) );
 */
static EmersonParser_patternLiteral_return
patternLiteral(pEmersonParser ctx)
{   
    EmersonParser_patternLiteral_return retval;
    ANTLR3_UINT32 patternLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal607;
    pANTLR3_COMMON_TOKEN    LTERM608;
    pANTLR3_COMMON_TOKEN    LTERM610;
    pANTLR3_COMMON_TOKEN    char_literal611;
    pANTLR3_COMMON_TOKEN    char_literal612;
    pANTLR3_COMMON_TOKEN    LTERM613;
    pANTLR3_COMMON_TOKEN    char_literal614;
    pANTLR3_COMMON_TOKEN    LTERM615;
    pANTLR3_COMMON_TOKEN    LTERM616;
    pANTLR3_COMMON_TOKEN    char_literal617;
    EmersonParser_nameValueProto_return p1;
    #undef	RETURN_TYPE_p1
    #define	RETURN_TYPE_p1 EmersonParser_nameValueProto_return

    EmersonParser_nameValueProto_return p2;
    #undef	RETURN_TYPE_p2
    #define	RETURN_TYPE_p2 EmersonParser_nameValueProto_return

    EmersonParser_nameValueProto_return nameValueProto609;
    #undef	RETURN_TYPE_nameValueProto609
    #define	RETURN_TYPE_nameValueProto609 EmersonParser_nameValueProto_return

    pANTLR3_BASE_TREE char_literal607_tree;
    pANTLR3_BASE_TREE LTERM608_tree;
    pANTLR3_BASE_TREE LTERM610_tree;
    pANTLR3_BASE_TREE char_literal611_tree;
    pANTLR3_BASE_TREE char_literal612_tree;
    pANTLR3_BASE_TREE LTERM613_tree;
    pANTLR3_BASE_TREE char_literal614_tree;
    pANTLR3_BASE_TREE LTERM615_tree;
    pANTLR3_BASE_TREE LTERM616_tree;
    pANTLR3_BASE_TREE char_literal617_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_nameValueProto;
    /* Initialize rule variables
     */
    patternLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(100)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal607       = NULL;
    LTERM608       = NULL;
    LTERM610       = NULL;
    char_literal611       = NULL;
    char_literal612       = NULL;
    LTERM613       = NULL;
    char_literal614       = NULL;
    LTERM615       = NULL;
    LTERM616       = NULL;
    char_literal617       = NULL;
    p1.tree = NULL;

    p2.tree = NULL;

    nameValueProto609.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal607_tree   = NULL;
    LTERM608_tree   = NULL;
    LTERM610_tree   = NULL;
    char_literal611_tree   = NULL;
    char_literal612_tree   = NULL;
    LTERM613_tree   = NULL;
    char_literal614_tree   = NULL;
    LTERM615_tree   = NULL;
    LTERM616_tree   = NULL;
    char_literal617_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_nameValueProto   = NULL;
    #define CREATE_stream_nameValueProto  if (stream_nameValueProto == NULL) {stream_nameValueProto = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule nameValueProto"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:685:3: ( '{' ( LTERM )* ( nameValueProto )? ( LTERM )* '}' -> ^( PATTERN_LITERAL ( nameValueProto )? ) | '{' ( LTERM )* p1= nameValueProto ( ',' ( LTERM )* p2= nameValueProto )* ( LTERM )* '}' -> ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* ) )
            
            ANTLR3_UINT32 alt331;

            alt331=2;


            {
                int LA331_0 = LA(1);
                if ( (LA331_0 == 145) ) 
                {

                    {
                        int LA331_1 = LA(2);
                        if ( (synpred384_Emerson(ctx)) ) 
                        {
                            alt331=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt331=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 331;
                            EXCEPTION->state        = 1;


                            goto rulepatternLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 331;
                    EXCEPTION->state        = 0;


                    goto rulepatternLiteralEx;
                }
            }
            switch (alt331) 
            {
        	case 1:
        	    // .//Emerson.g:685:5: '{' ( LTERM )* ( nameValueProto )? ( LTERM )* '}'
        	    {
        	        char_literal607 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_patternLiteral6454); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal607, NULL); }


        	        // .//Emerson.g:685:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt324=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA324_0 = LA(1);
        	                if ( (LA324_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA324_2 = LA(2);
        	                        if ( (synpred381_Emerson(ctx)) ) 
        	                        {
        	                            alt324=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt324) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM608 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral6456); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM608, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop324;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop324: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:685:16: ( nameValueProto )?
        	        {
        	            int alt325=2;
        	            alt325 = cdfa325.predict(ctx, RECOGNIZER, ISTREAM, &cdfa325);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulepatternLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt325) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: nameValueProto
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral6459);
        	        	        nameValueProto609=nameValueProto(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_nameValueProto; stream_nameValueProto->add(stream_nameValueProto, nameValueProto609.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:685:32: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt326=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA326_0 = LA(1);
        	                if ( (LA326_0 == LTERM) ) 
        	                {
        	                    alt326=1;
        	                }

        	            }
        	            switch (alt326) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM610 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral6462); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM610, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop326;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop326: ; /* Jump out to here if this rule does not match */

        	        char_literal611 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_patternLiteral6465); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal611, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : nameValueProto
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 685:43: -> ^( PATTERN_LITERAL ( nameValueProto )? )
        	        	{
        	        	    // .//Emerson.g:685:46: ^( PATTERN_LITERAL ( nameValueProto )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PATTERN_LITERAL, (pANTLR3_UINT8)"PATTERN_LITERAL"), root_1));

        	        	        // .//Emerson.g:685:64: ( nameValueProto )?
        	        	        {
        	        	        	if ( (stream_nameValueProto != NULL && stream_nameValueProto->hasNext(stream_nameValueProto))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_nameValueProto == NULL ? NULL : stream_nameValueProto->nextTree(stream_nameValueProto));

        	        	        	}
        	        	        	if ( stream_nameValueProto != NULL) stream_nameValueProto->reset(stream_nameValueProto);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:686:5: '{' ( LTERM )* p1= nameValueProto ( ',' ( LTERM )* p2= nameValueProto )* ( LTERM )* '}'
        	    {
        	        char_literal612 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_patternLiteral6480); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal612, NULL); }


        	        // .//Emerson.g:686:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt327=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA327_0 = LA(1);
        	                if ( (LA327_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA327_2 = LA(2);
        	                        if ( (synpred385_Emerson(ctx)) ) 
        	                        {
        	                            alt327=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt327) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM613 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral6482); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM613, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop327;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop327: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral6488);
        	        p1=nameValueProto(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_nameValueProto; stream_nameValueProto->add(stream_nameValueProto, p1.tree, NULL); }

        	        // .//Emerson.g:686:35: ( ',' ( LTERM )* p2= nameValueProto )*

        	        for (;;)
        	        {
        	            int alt329=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA329_0 = LA(1);
        	                if ( (LA329_0 == 144) ) 
        	                {
        	                    alt329=1;
        	                }

        	            }
        	            switch (alt329) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:686:36: ',' ( LTERM )* p2= nameValueProto
        	        	    {
        	        	        char_literal614 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_patternLiteral6491); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, char_literal614, NULL); }


        	        	        // .//Emerson.g:686:40: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt328=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA328_0 = LA(1);
        	        	                if ( (LA328_0 == LTERM) ) 
        	        	                {
        	        	                    {
        	        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                        */
        	        	                        int LA328_2 = LA(2);
        	        	                        if ( (synpred386_Emerson(ctx)) ) 
        	        	                        {
        	        	                            alt328=1;
        	        	                        }

        	        	                    }
        	        	                }

        	        	            }
        	        	            switch (alt328) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM615 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral6493); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulepatternLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM615, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop328;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop328: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral6498);
        	        	        p2=nameValueProto(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_nameValueProto; stream_nameValueProto->add(stream_nameValueProto, p2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop329;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop329: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:686:67: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt330=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA330_0 = LA(1);
        	                if ( (LA330_0 == LTERM) ) 
        	                {
        	                    alt330=1;
        	                }

        	            }
        	            switch (alt330) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM616 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral6502); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM616, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop330;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop330: ; /* Jump out to here if this rule does not match */

        	        char_literal617 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_patternLiteral6505); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, char_literal617, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : nameValueProto, nameValueProto
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 686:78: -> ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* )
        	        	{
        	        	    // .//Emerson.g:686:81: ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PATTERN_LITERAL, (pANTLR3_UINT8)"PATTERN_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_nameValueProto == NULL ? NULL : stream_nameValueProto->nextTree(stream_nameValueProto));
        	        	        // .//Emerson.g:686:114: ( nameValueProto )*
        	        	        {
        	        	        	while ( (stream_nameValueProto != NULL && stream_nameValueProto->hasNext(stream_nameValueProto))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_nameValueProto == NULL ? NULL : stream_nameValueProto->nextTree(stream_nameValueProto));

        	        	        	}
        	        	        	if (stream_nameValueProto != NULL) stream_nameValueProto->reset(stream_nameValueProto);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepatternLiteralEx; /* Prevent compiler warnings */
    rulepatternLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_nameValueProto != NULL) stream_nameValueProto->free(stream_nameValueProto);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(100, patternLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end patternLiteral */

/** 
 * $ANTLR start propertyNameAndValue
 * .//Emerson.g:689:1: propertyNameAndValue : propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) ;
 */
static EmersonParser_propertyNameAndValue_return
propertyNameAndValue(pEmersonParser ctx)
{   
    EmersonParser_propertyNameAndValue_return retval;
    ANTLR3_UINT32 propertyNameAndValue_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM619;
    pANTLR3_COMMON_TOKEN    char_literal620;
    pANTLR3_COMMON_TOKEN    LTERM621;
    EmersonParser_propertyName_return propertyName618;
    #undef	RETURN_TYPE_propertyName618
    #define	RETURN_TYPE_propertyName618 EmersonParser_propertyName_return

    EmersonParser_assignmentExpression_return assignmentExpression622;
    #undef	RETURN_TYPE_assignmentExpression622
    #define	RETURN_TYPE_assignmentExpression622 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM619_tree;
    pANTLR3_BASE_TREE char_literal620_tree;
    pANTLR3_BASE_TREE LTERM621_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_162;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyName;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    propertyNameAndValue_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(101)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM619       = NULL;
    char_literal620       = NULL;
    LTERM621       = NULL;
    propertyName618.tree = NULL;

    assignmentExpression622.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM619_tree   = NULL;
    char_literal620_tree   = NULL;
    LTERM621_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_162   = NULL;
    #define CREATE_stream_162  if (stream_162 == NULL) {stream_162 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 162"); } 
    stream_propertyName   = NULL;
    #define CREATE_stream_propertyName  if (stream_propertyName == NULL) {stream_propertyName = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyName"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:690:9: ( propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) )
        // .//Emerson.g:690:11: propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression
        {
            FOLLOWPUSH(FOLLOW_propertyName_in_propertyNameAndValue6535);
            propertyName618=propertyName(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_propertyName; stream_propertyName->add(stream_propertyName, propertyName618.tree, NULL); }

            // .//Emerson.g:690:24: ( LTERM )*

            for (;;)
            {
                int alt332=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA332_0 = LA(1);
                    if ( (LA332_0 == LTERM) ) 
                    {
                        alt332=1;
                    }

                }
                switch (alt332) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM619 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue6537); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM619, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop332;	/* break out of the loop */
            	    break;
                }
            }
            loop332: ; /* Jump out to here if this rule does not match */

            char_literal620 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_propertyNameAndValue6540); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, char_literal620, NULL); }


            // .//Emerson.g:690:35: ( LTERM )*

            for (;;)
            {
                int alt333=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA333_0 = LA(1);
                    if ( (LA333_0 == LTERM) ) 
                    {
                        alt333=1;
                    }

                }
                switch (alt333) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM621 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue6542); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM621, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop333;	/* break out of the loop */
            	    break;
                }
            }
            loop333: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_propertyNameAndValue6545);
            assignmentExpression622=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression622.tree, NULL); }

             
            /* AST REWRITE
             * elements          : propertyName, assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 690:63: -> ^( NAME_VALUE propertyName assignmentExpression )
            	{
            	    // .//Emerson.g:690:66: ^( NAME_VALUE propertyName assignmentExpression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME_VALUE, (pANTLR3_UINT8)"NAME_VALUE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyName == NULL ? NULL : stream_propertyName->nextTree(stream_propertyName));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameAndValueEx; /* Prevent compiler warnings */
    rulepropertyNameAndValueEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_162 != NULL) stream_162->free(stream_162);
        if (stream_propertyName != NULL) stream_propertyName->free(stream_propertyName);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(101, propertyNameAndValue_StartIndex); }
    return retval;
}
/* $ANTLR end propertyNameAndValue */

/** 
 * $ANTLR start nameValueProto
 * .//Emerson.g:694:1: nameValueProto : ( ( propertyName ( LTERM )* ) ':' ( LTERM )* (a1= assignmentExpression ( LTERM )* )? ':' ( LTERM )* (a2= assignmentExpression )? -> ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? ) | ( LTERM )* ':' ( LTERM )* ':' -> ^( BLANK_NAME_VAL_PROT ) );
 */
static EmersonParser_nameValueProto_return
nameValueProto(pEmersonParser ctx)
{   
    EmersonParser_nameValueProto_return retval;
    ANTLR3_UINT32 nameValueProto_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM624;
    pANTLR3_COMMON_TOKEN    char_literal625;
    pANTLR3_COMMON_TOKEN    LTERM626;
    pANTLR3_COMMON_TOKEN    LTERM627;
    pANTLR3_COMMON_TOKEN    char_literal628;
    pANTLR3_COMMON_TOKEN    LTERM629;
    pANTLR3_COMMON_TOKEN    LTERM630;
    pANTLR3_COMMON_TOKEN    char_literal631;
    pANTLR3_COMMON_TOKEN    LTERM632;
    pANTLR3_COMMON_TOKEN    char_literal633;
    EmersonParser_assignmentExpression_return a1;
    #undef	RETURN_TYPE_a1
    #define	RETURN_TYPE_a1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return a2;
    #undef	RETURN_TYPE_a2
    #define	RETURN_TYPE_a2 EmersonParser_assignmentExpression_return

    EmersonParser_propertyName_return propertyName623;
    #undef	RETURN_TYPE_propertyName623
    #define	RETURN_TYPE_propertyName623 EmersonParser_propertyName_return

    pANTLR3_BASE_TREE LTERM624_tree;
    pANTLR3_BASE_TREE char_literal625_tree;
    pANTLR3_BASE_TREE LTERM626_tree;
    pANTLR3_BASE_TREE LTERM627_tree;
    pANTLR3_BASE_TREE char_literal628_tree;
    pANTLR3_BASE_TREE LTERM629_tree;
    pANTLR3_BASE_TREE LTERM630_tree;
    pANTLR3_BASE_TREE char_literal631_tree;
    pANTLR3_BASE_TREE LTERM632_tree;
    pANTLR3_BASE_TREE char_literal633_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_162;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyName;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    nameValueProto_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(102)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM624       = NULL;
    char_literal625       = NULL;
    LTERM626       = NULL;
    LTERM627       = NULL;
    char_literal628       = NULL;
    LTERM629       = NULL;
    LTERM630       = NULL;
    char_literal631       = NULL;
    LTERM632       = NULL;
    char_literal633       = NULL;
    a1.tree = NULL;

    a2.tree = NULL;

    propertyName623.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM624_tree   = NULL;
    char_literal625_tree   = NULL;
    LTERM626_tree   = NULL;
    LTERM627_tree   = NULL;
    char_literal628_tree   = NULL;
    LTERM629_tree   = NULL;
    LTERM630_tree   = NULL;
    char_literal631_tree   = NULL;
    LTERM632_tree   = NULL;
    char_literal633_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_162   = NULL;
    #define CREATE_stream_162  if (stream_162 == NULL) {stream_162 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 162"); } 
    stream_propertyName   = NULL;
    #define CREATE_stream_propertyName  if (stream_propertyName == NULL) {stream_propertyName = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyName"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:695:5: ( ( propertyName ( LTERM )* ) ':' ( LTERM )* (a1= assignmentExpression ( LTERM )* )? ':' ( LTERM )* (a2= assignmentExpression )? -> ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? ) | ( LTERM )* ':' ( LTERM )* ':' -> ^( BLANK_NAME_VAL_PROT ) )
            
            ANTLR3_UINT32 alt342;

            alt342=2;


            {
                int LA342_0 = LA(1);
                if ( (((LA342_0 >= Identifier) && (LA342_0 <= StringLiteral))) ) 
                {
                    alt342=1;
                }
                else if ( (LA342_0 == LTERM || LA342_0 == 162) ) 
                {
                    alt342=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 342;
                    EXCEPTION->state        = 0;


                    goto rulenameValueProtoEx;
                }
            }
            switch (alt342) 
            {
        	case 1:
        	    // .//Emerson.g:695:7: ( propertyName ( LTERM )* ) ':' ( LTERM )* (a1= assignmentExpression ( LTERM )* )? ':' ( LTERM )* (a2= assignmentExpression )?
        	    {
        	        // .//Emerson.g:695:7: ( propertyName ( LTERM )* )
        	        // .//Emerson.g:695:8: propertyName ( LTERM )*
        	        {
        	            FOLLOWPUSH(FOLLOW_propertyName_in_nameValueProto6578);
        	            propertyName623=propertyName(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenameValueProtoEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_propertyName; stream_propertyName->add(stream_propertyName, propertyName623.tree, NULL); }

        	            // .//Emerson.g:695:21: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt334=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA334_0 = LA(1);
        	                    if ( (LA334_0 == LTERM) ) 
        	                    {
        	                        alt334=1;
        	                    }

        	                }
        	                switch (alt334) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM624 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6580); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulenameValueProtoEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM624, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop334;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop334: ; /* Jump out to here if this rule does not match */


        	        }

        	        char_literal625 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_nameValueProto6584); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, char_literal625, NULL); }


        	        // .//Emerson.g:695:34: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt335=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA335_0 = LA(1);
        	                if ( (LA335_0 == LTERM) ) 
        	                {
        	                    alt335=1;
        	                }

        	            }
        	            switch (alt335) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM626 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6587); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM626, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop335;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop335: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:695:41: (a1= assignmentExpression ( LTERM )* )?
        	        {
        	            int alt337=2;
        	            {
        	                int LA337_0 = LA(1);
        	                if ( (((LA337_0 >= Identifier) && (LA337_0 <= StringLiteral)) || ((LA337_0 >= 141) && (LA337_0 <= 142)) || LA337_0 == 145 || ((LA337_0 >= 168) && (LA337_0 <= 169)) || LA337_0 == 193 || ((LA337_0 >= 198) && (LA337_0 <= 199)) || ((LA337_0 >= 203) && (LA337_0 <= 215))) ) 
        	                {
        	                    alt337=1;
        	                }
        	            }
        	            switch (alt337) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:695:42: a1= assignmentExpression ( LTERM )*
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_nameValueProto6593);
        	        	        a1=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, a1.tree, NULL); }

        	        	        // .//Emerson.g:695:66: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt336=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA336_0 = LA(1);
        	        	                if ( (LA336_0 == LTERM) ) 
        	        	                {
        	        	                    alt336=1;
        	        	                }

        	        	            }
        	        	            switch (alt336) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM627 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6595); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulenameValueProtoEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM627, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop336;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop336: ; /* Jump out to here if this rule does not match */


        	        	    }
        	        	    break;

        	            }
        	        }
        	        char_literal628 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_nameValueProto6600); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, char_literal628, NULL); }


        	        // .//Emerson.g:695:79: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt338=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA338_0 = LA(1);
        	                if ( (LA338_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA338_2 = LA(2);
        	                        if ( (synpred395_Emerson(ctx)) ) 
        	                        {
        	                            alt338=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt338) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM629 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6602); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM629, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop338;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop338: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:695:86: (a2= assignmentExpression )?
        	        {
        	            int alt339=2;
        	            {
        	                int LA339_0 = LA(1);
        	                if ( (((LA339_0 >= Identifier) && (LA339_0 <= StringLiteral)) || ((LA339_0 >= 141) && (LA339_0 <= 142)) || LA339_0 == 145 || ((LA339_0 >= 168) && (LA339_0 <= 169)) || LA339_0 == 193 || ((LA339_0 >= 198) && (LA339_0 <= 199)) || ((LA339_0 >= 203) && (LA339_0 <= 215))) ) 
        	                {
        	                    alt339=1;
        	                }
        	            }
        	            switch (alt339) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:695:88: a2= assignmentExpression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_nameValueProto6609);
        	        	        a2=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, a2.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : a1, a2, propertyName
        	         * token labels      : 
        	         * rule labels       : retval, a1, a2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a2;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_a1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a1", a1.tree != NULL ? a1.tree : NULL);
        	        	stream_a2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a2", a2.tree != NULL ? a2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 695:115: -> ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? )
        	        	{
        	        	    // .//Emerson.g:695:118: ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME_VALUE_PROTO, (pANTLR3_UINT8)"NAME_VALUE_PROTO"), root_1));

        	        	        // .//Emerson.g:695:137: ^( NAME propertyName )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME, (pANTLR3_UINT8)"NAME"), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_propertyName == NULL ? NULL : stream_propertyName->nextTree(stream_propertyName));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        // .//Emerson.g:695:158: ( ^( VALUE $a1) )?
        	        	        {
        	        	        	if ( (stream_a1 != NULL && stream_a1->hasNext(stream_a1))  )
        	        	        	{
        	        	        		// .//Emerson.g:695:159: ^( VALUE $a1)
        	        	        		{
        	        	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VALUE, (pANTLR3_UINT8)"VALUE"), root_2));

        	        	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_a1 == NULL ? NULL : stream_a1->nextTree(stream_a1));

        	        	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        		}

        	        	        	}
        	        	        	if ( stream_a1 != NULL) stream_a1->reset(stream_a1);

        	        	        }
        	        	        // .//Emerson.g:695:174: ( ^( PROTO $a2) )?
        	        	        {
        	        	        	if ( (stream_a2 != NULL && stream_a2->hasNext(stream_a2))  )
        	        	        	{
        	        	        		// .//Emerson.g:695:175: ^( PROTO $a2)
        	        	        		{
        	        	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PROTO, (pANTLR3_UINT8)"PROTO"), root_2));

        	        	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_a2 == NULL ? NULL : stream_a2->nextTree(stream_a2));

        	        	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        		}

        	        	        	}
        	        	        	if ( stream_a2 != NULL) stream_a2->reset(stream_a2);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_a1 != NULL) stream_a1->free(stream_a1);
        	        	if (stream_a2 != NULL) stream_a2->free(stream_a2);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:696:7: ( LTERM )* ':' ( LTERM )* ':'
        	    {

        	        // .//Emerson.g:696:7: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt340=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA340_0 = LA(1);
        	                if ( (LA340_0 == LTERM) ) 
        	                {
        	                    alt340=1;
        	                }

        	            }
        	            switch (alt340) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM630 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6653); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM630, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop340;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop340: ; /* Jump out to here if this rule does not match */

        	        char_literal631 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_nameValueProto6656); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, char_literal631, NULL); }


        	        // .//Emerson.g:696:18: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt341=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA341_0 = LA(1);
        	                if ( (LA341_0 == LTERM) ) 
        	                {
        	                    alt341=1;
        	                }

        	            }
        	            switch (alt341) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM632 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6658); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM632, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop341;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop341: ; /* Jump out to here if this rule does not match */

        	        char_literal633 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_nameValueProto6661); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, char_literal633, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 696:29: -> ^( BLANK_NAME_VAL_PROT )
        	        	{
        	        	    // .//Emerson.g:696:32: ^( BLANK_NAME_VAL_PROT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BLANK_NAME_VAL_PROT, (pANTLR3_UINT8)"BLANK_NAME_VAL_PROT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenameValueProtoEx; /* Prevent compiler warnings */
    rulenameValueProtoEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_162 != NULL) stream_162->free(stream_162);
        if (stream_propertyName != NULL) stream_propertyName->free(stream_propertyName);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(102, nameValueProto_StartIndex); }
    return retval;
}
/* $ANTLR end nameValueProto */

/** 
 * $ANTLR start propertyName
 * .//Emerson.g:701:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
 */
static EmersonParser_propertyName_return
propertyName(pEmersonParser ctx)
{   
    EmersonParser_propertyName_return retval;
    ANTLR3_UINT32 propertyName_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set634;

    pANTLR3_BASE_TREE set634_tree;

    /* Initialize rule variables
     */
    propertyName_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(103)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set634       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set634_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:702:2: ( Identifier | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set634=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= Identifier) && (LA(1) <= StringLiteral)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set634)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_propertyName0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_propertyName0);    goto rulepropertyNameEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameEx; /* Prevent compiler warnings */
    rulepropertyNameEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(103, propertyName_StartIndex); }
    return retval;
}
/* $ANTLR end propertyName */

/** 
 * $ANTLR start literal
 * .//Emerson.g:709:1: literal : ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral );
 */
static EmersonParser_literal_return
literal(pEmersonParser ctx)
{   
    EmersonParser_literal_return retval;
    ANTLR3_UINT32 literal_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set635;

    pANTLR3_BASE_TREE set635_tree;

    /* Initialize rule variables
     */
    literal_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(104)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set635       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set635_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:710:2: ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set635=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= NumericLiteral) && (LA(1) <= StringLiteral)) || ((LA(1) >= 213) && (LA(1) <= 215)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set635)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_literal0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(104, literal_StartIndex); }
    return retval;
}
/* $ANTLR end literal */

// $ANTLR start synpred1_Emerson
static void synpred1_Emerson_fragment(pEmersonParser ctx ) 
{
	pANTLR3_COMMON_TOKEN    a;

	a       = NULL;

    // .//Emerson.g:146:5: (a= LTERM )
    // .//Emerson.g:146:5: a= LTERM
    {
        a = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_synpred1_Emerson909); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred1_EmersonEx; /* Prevent compiler warnings */
rulesynpred1_EmersonEx: ;

}
// $ANTLR end synpred1_Emerson

// $ANTLR start synpred4_Emerson
static void synpred4_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:151:26: ( LTERM )
    // .//Emerson.g:151:26: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred4_Emerson951); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred4_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred4_EmersonEx; /* Prevent compiler warnings */
rulesynpred4_EmersonEx: ;

}
// $ANTLR end synpred4_Emerson

// $ANTLR start synpred8_Emerson
static void synpred8_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:161:33: ( LTERM )
    // .//Emerson.g:161:33: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred8_Emerson1008); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred8_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred8_EmersonEx; /* Prevent compiler warnings */
rulesynpred8_EmersonEx: ;

}
// $ANTLR end synpred8_Emerson

// $ANTLR start synpred11_Emerson
static void synpred11_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:165:15: ( LTERM )
    // .//Emerson.g:165:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred11_Emerson1045); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred11_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred11_EmersonEx; /* Prevent compiler warnings */
rulesynpred11_EmersonEx: ;

}
// $ANTLR end synpred11_Emerson

// $ANTLR start synpred14_Emerson
static void synpred14_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:165:45: ( LTERM )
    // .//Emerson.g:165:45: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred14_Emerson1056); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred14_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred14_EmersonEx; /* Prevent compiler warnings */
rulesynpred14_EmersonEx: ;

}
// $ANTLR end synpred14_Emerson

// $ANTLR start synpred22_Emerson
static void synpred22_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:174:8: ( LTERM )
    // .//Emerson.g:174:8: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred22_Emerson1147); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred22_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred22_EmersonEx; /* Prevent compiler warnings */
rulesynpred22_EmersonEx: ;

}
// $ANTLR end synpred22_Emerson

// $ANTLR start synpred24_Emerson
static void synpred24_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:179:11: ( switchStatement )
    // .//Emerson.g:179:12: switchStatement
    {
        FOLLOWPUSH(FOLLOW_switchStatement_in_synpred24_Emerson1181);
        switchStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred24_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred24_EmersonEx; /* Prevent compiler warnings */
rulesynpred24_EmersonEx: ;

}
// $ANTLR end synpred24_Emerson

// $ANTLR start synpred26_Emerson
static void synpred26_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:181:11: ( statementBlock )
    // .//Emerson.g:181:11: statementBlock
    {
        FOLLOWPUSH(FOLLOW_statementBlock_in_synpred26_Emerson1203);
        statementBlock(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred26_EmersonEx; /* Prevent compiler warnings */
rulesynpred26_EmersonEx: ;

}
// $ANTLR end synpred26_Emerson

// $ANTLR start synpred28_Emerson
static void synpred28_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:183:4: ( expressionStatement )
    // .//Emerson.g:183:4: expressionStatement
    {
        FOLLOWPUSH(FOLLOW_expressionStatement_in_synpred28_Emerson1213);
        expressionStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred28_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred28_EmersonEx; /* Prevent compiler warnings */
rulesynpred28_EmersonEx: ;

}
// $ANTLR end synpred28_Emerson

// $ANTLR start synpred36_Emerson
static void synpred36_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:195:8: ( LTERM )
    // .//Emerson.g:195:8: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred36_Emerson1267); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred36_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred36_EmersonEx; /* Prevent compiler warnings */
rulesynpred36_EmersonEx: ;

}
// $ANTLR end synpred36_Emerson

// $ANTLR start synpred40_Emerson
static void synpred40_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:204:15: ( LTERM )
    // .//Emerson.g:204:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred40_Emerson1346); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred40_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred40_EmersonEx; /* Prevent compiler warnings */
rulesynpred40_EmersonEx: ;

}
// $ANTLR end synpred40_Emerson

// $ANTLR start synpred50_Emerson
static void synpred50_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:220:15: ( LTERM )
    // .//Emerson.g:220:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred50_Emerson1469); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred50_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred50_EmersonEx; /* Prevent compiler warnings */
rulesynpred50_EmersonEx: ;

}
// $ANTLR end synpred50_Emerson

// $ANTLR start synpred52_Emerson
static void synpred52_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:224:15: ( LTERM )
    // .//Emerson.g:224:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred52_Emerson1498); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred52_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred52_EmersonEx; /* Prevent compiler warnings */
rulesynpred52_EmersonEx: ;

}
// $ANTLR end synpred52_Emerson

// $ANTLR start synpred60_Emerson
static void synpred60_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:242:52: ( LTERM )
    // .//Emerson.g:242:52: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred60_Emerson1615); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred60_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred60_EmersonEx; /* Prevent compiler warnings */
rulesynpred60_EmersonEx: ;

}
// $ANTLR end synpred60_Emerson

// $ANTLR start synpred62_Emerson
static void synpred62_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:242:87: ( LTERM )
    // .//Emerson.g:242:87: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred62_Emerson1628); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred62_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred62_EmersonEx; /* Prevent compiler warnings */
rulesynpred62_EmersonEx: ;

}
// $ANTLR end synpred62_Emerson

// $ANTLR start synpred63_Emerson
static void synpred63_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_statement_return s2;
	#undef	RETURN_TYPE_s2
	#define	RETURN_TYPE_s2 EmersonParser_statement_return

    // .//Emerson.g:242:73: ( ( LTERM )* 'else' ( LTERM )* s2= statement )
    // .//Emerson.g:242:73: ( LTERM )* 'else' ( LTERM )* s2= statement
    {

        // .//Emerson.g:242:73: ( LTERM )*

        for (;;)
        {
            int alt351=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA351_0 = LA(1);
                if ( (LA351_0 == LTERM) ) 
                {
                    alt351=1;
                }

            }
            switch (alt351) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred63_Emerson1623); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred63_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop351;	/* break out of the loop */
        	    break;
            }
        }
        loop351: ; /* Jump out to here if this rule does not match */

         MATCHT(151, &FOLLOW_151_in_synpred63_Emerson1626); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred63_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:242:87: ( LTERM )*

        for (;;)
        {
            int alt352=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA352_0 = LA(1);
                if ( (LA352_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA352_2 = LA(2);
                        if ( (synpred62_Emerson(ctx)) ) 
                        {
                            alt352=1;
                        }

                    }
                }

            }
            switch (alt352) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred63_Emerson1628); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred63_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop352;	/* break out of the loop */
        	    break;
            }
        }
        loop352: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_statement_in_synpred63_Emerson1633);
        s2=statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred63_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred63_EmersonEx; /* Prevent compiler warnings */
rulesynpred63_EmersonEx: ;

}
// $ANTLR end synpred63_Emerson

// $ANTLR start synpred66_Emerson
static void synpred66_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:248:4: ( forStatement )
    // .//Emerson.g:248:4: forStatement
    {
        FOLLOWPUSH(FOLLOW_forStatement_in_synpred66_Emerson1675);
        forStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred66_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred66_EmersonEx; /* Prevent compiler warnings */
rulesynpred66_EmersonEx: ;

}
// $ANTLR end synpred66_Emerson

// $ANTLR start synpred67_Emerson
static void synpred67_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:253:9: ( LTERM )
    // .//Emerson.g:253:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred67_Emerson1694); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred67_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred67_EmersonEx; /* Prevent compiler warnings */
rulesynpred67_EmersonEx: ;

}
// $ANTLR end synpred67_Emerson

// $ANTLR start synpred74_Emerson
static void synpred74_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:257:52: ( LTERM )
    // .//Emerson.g:257:52: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred74_Emerson1761); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred74_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred74_EmersonEx; /* Prevent compiler warnings */
rulesynpred74_EmersonEx: ;

}
// $ANTLR end synpred74_Emerson

// $ANTLR start synpred85_Emerson
static void synpred85_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:261:149: ( LTERM )
    // .//Emerson.g:261:149: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred85_Emerson1839); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred85_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred85_EmersonEx; /* Prevent compiler warnings */
rulesynpred85_EmersonEx: ;

}
// $ANTLR end synpred85_Emerson

// $ANTLR start synpred93_Emerson
static void synpred93_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:270:99: ( LTERM )
    // .//Emerson.g:270:99: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred93_Emerson1948); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred93_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred93_EmersonEx; /* Prevent compiler warnings */
rulesynpred93_EmersonEx: ;

}
// $ANTLR end synpred93_Emerson

// $ANTLR start synpred105_Emerson
static void synpred105_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:291:51: ( LTERM )
    // .//Emerson.g:291:51: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred105_Emerson2120); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred105_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred105_EmersonEx; /* Prevent compiler warnings */
rulesynpred105_EmersonEx: ;

}
// $ANTLR end synpred105_Emerson

// $ANTLR start synpred110_Emerson
static void synpred110_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:301:16: ( LTERM )
    // .//Emerson.g:301:16: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred110_Emerson2199); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred110_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred110_EmersonEx; /* Prevent compiler warnings */
rulesynpred110_EmersonEx: ;

}
// $ANTLR end synpred110_Emerson

// $ANTLR start synpred118_Emerson
static void synpred118_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:308:49: ( LTERM )
    // .//Emerson.g:308:49: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred118_Emerson2303); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred118_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred118_EmersonEx; /* Prevent compiler warnings */
rulesynpred118_EmersonEx: ;

}
// $ANTLR end synpred118_Emerson

// $ANTLR start synpred121_Emerson
static void synpred121_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_ternaryExpression_return e1;
	#undef	RETURN_TYPE_e1
	#define	RETURN_TYPE_e1 EmersonParser_ternaryExpression_return

    // .//Emerson.g:308:3: ( 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* defaultClause )
    // .//Emerson.g:308:3: 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* defaultClause
    {
         MATCHT(161, &FOLLOW_161_in_synpred121_Emerson2289); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred121_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:308:10: ( LTERM )*

        for (;;)
        {
            int alt359=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA359_0 = LA(1);
                if ( (LA359_0 == LTERM) ) 
                {
                    alt359=1;
                }

            }
            switch (alt359) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred121_Emerson2291); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred121_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop359;	/* break out of the loop */
        	    break;
            }
        }
        loop359: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_ternaryExpression_in_synpred121_Emerson2296);
        e1=ternaryExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred121_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:308:38: ( LTERM )*

        for (;;)
        {
            int alt360=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA360_0 = LA(1);
                if ( (LA360_0 == LTERM) ) 
                {
                    alt360=1;
                }

            }
            switch (alt360) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred121_Emerson2298); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred121_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop360;	/* break out of the loop */
        	    break;
            }
        }
        loop360: ; /* Jump out to here if this rule does not match */

         MATCHT(162, &FOLLOW_162_in_synpred121_Emerson2301); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred121_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:308:49: ( LTERM )*

        for (;;)
        {
            int alt361=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA361_0 = LA(1);
                if ( (LA361_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA361_2 = LA(2);
                        if ( (synpred118_Emerson(ctx)) ) 
                        {
                            alt361=1;
                        }

                    }
                }

            }
            switch (alt361) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred121_Emerson2303); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred121_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop361;	/* break out of the loop */
        	    break;
            }
        }
        loop361: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:308:56: ( statementList )?
        {
            int alt362=2;
            alt362 = cdfa362.predict(ctx, RECOGNIZER, ISTREAM, &cdfa362);
            if  (HASEXCEPTION())
            {
                goto rulesynpred121_EmersonEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt362) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: statementList
        	    {
        	        FOLLOWPUSH(FOLLOW_statementList_in_synpred121_Emerson2306);
        	        statementList(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred121_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:308:71: ( LTERM )*

        for (;;)
        {
            int alt363=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA363_0 = LA(1);
                if ( (LA363_0 == LTERM) ) 
                {
                    alt363=1;
                }

            }
            switch (alt363) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred121_Emerson2309); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred121_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop363;	/* break out of the loop */
        	    break;
            }
        }
        loop363: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_defaultClause_in_synpred121_Emerson2312);
        defaultClause(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred121_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred121_EmersonEx; /* Prevent compiler warnings */
rulesynpred121_EmersonEx: ;

}
// $ANTLR end synpred121_Emerson

// $ANTLR start synpred124_Emerson
static void synpred124_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:309:57: ( LTERM )
    // .//Emerson.g:309:57: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred124_Emerson2353); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred124_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred124_EmersonEx; /* Prevent compiler warnings */
rulesynpred124_EmersonEx: ;

}
// $ANTLR end synpred124_Emerson

// $ANTLR start synpred126_Emerson
static void synpred126_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:309:79: ( LTERM )
    // .//Emerson.g:309:79: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred126_Emerson2359); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred126_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred126_EmersonEx; /* Prevent compiler warnings */
rulesynpred126_EmersonEx: ;

}
// $ANTLR end synpred126_Emerson

// $ANTLR start synpred129_Emerson
static void synpred129_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:313:25: ( LTERM )
    // .//Emerson.g:313:25: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred129_Emerson2398); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred129_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred129_EmersonEx; /* Prevent compiler warnings */
rulesynpred129_EmersonEx: ;

}
// $ANTLR end synpred129_Emerson

// $ANTLR start synpred131_Emerson
static void synpred131_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:313:47: ( LTERM )
    // .//Emerson.g:313:47: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred131_Emerson2404); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred131_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred131_EmersonEx; /* Prevent compiler warnings */
rulesynpred131_EmersonEx: ;

}
// $ANTLR end synpred131_Emerson

// $ANTLR start synpred135_Emerson
static void synpred135_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:318:57: ( LTERM )
    // .//Emerson.g:318:57: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred135_Emerson2461); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred135_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred135_EmersonEx; /* Prevent compiler warnings */
rulesynpred135_EmersonEx: ;

}
// $ANTLR end synpred135_Emerson

// $ANTLR start synpred137_Emerson
static void synpred137_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:318:79: ( LTERM )
    // .//Emerson.g:318:79: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred137_Emerson2467); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred137_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred137_EmersonEx; /* Prevent compiler warnings */
rulesynpred137_EmersonEx: ;

}
// $ANTLR end synpred137_Emerson

// $ANTLR start synpred142_Emerson
static void synpred142_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:334:22: ( LTERM )
    // .//Emerson.g:334:22: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred142_Emerson2616); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred142_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred142_EmersonEx; /* Prevent compiler warnings */
rulesynpred142_EmersonEx: ;

}
// $ANTLR end synpred142_Emerson

// $ANTLR start synpred150_Emerson
static void synpred150_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:350:11: ( callExpression )
    // .//Emerson.g:350:11: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred150_Emerson2804);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred150_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred150_EmersonEx; /* Prevent compiler warnings */
rulesynpred150_EmersonEx: ;

}
// $ANTLR end synpred150_Emerson

// $ANTLR start synpred152_Emerson
static void synpred152_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:358:34: ( ',' ( LTERM )* assignmentExpression )
    // .//Emerson.g:358:34: ',' ( LTERM )* assignmentExpression
    {
         MATCHT(144, &FOLLOW_144_in_synpred152_Emerson2864); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred152_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:358:38: ( LTERM )*

        for (;;)
        {
            int alt366=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA366_0 = LA(1);
                if ( (LA366_0 == LTERM) ) 
                {
                    alt366=1;
                }

            }
            switch (alt366) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred152_Emerson2866); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred152_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop366;	/* break out of the loop */
        	    break;
            }
        }
        loop366: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred152_Emerson2869);
        assignmentExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred152_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred152_EmersonEx; /* Prevent compiler warnings */
rulesynpred152_EmersonEx: ;

}
// $ANTLR end synpred152_Emerson

// $ANTLR start synpred154_Emerson
static void synpred154_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:362:38: ( ',' ( LTERM )* assignmentExpressionNoIn )
    // .//Emerson.g:362:38: ',' ( LTERM )* assignmentExpressionNoIn
    {
         MATCHT(144, &FOLLOW_144_in_synpred154_Emerson2911); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred154_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:362:42: ( LTERM )*

        for (;;)
        {
            int alt367=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA367_0 = LA(1);
                if ( (LA367_0 == LTERM) ) 
                {
                    alt367=1;
                }

            }
            switch (alt367) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred154_Emerson2913); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred154_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop367;	/* break out of the loop */
        	    break;
            }
        }
        loop367: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_synpred154_Emerson2916);
        assignmentExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred154_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred154_EmersonEx; /* Prevent compiler warnings */
rulesynpred154_EmersonEx: ;

}
// $ANTLR end synpred154_Emerson

// $ANTLR start synpred155_Emerson
static void synpred155_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:367:11: ( conditionalExpression )
    // .//Emerson.g:367:11: conditionalExpression
    {
        FOLLOWPUSH(FOLLOW_conditionalExpression_in_synpred155_Emerson2955);
        conditionalExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred155_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred155_EmersonEx; /* Prevent compiler warnings */
rulesynpred155_EmersonEx: ;

}
// $ANTLR end synpred155_Emerson

// $ANTLR start synpred158_Emerson
static void synpred158_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:372:11: ( conditionalExpressionNoIn )
    // .//Emerson.g:372:11: conditionalExpressionNoIn
    {
        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_synpred158_Emerson3022);
        conditionalExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred158_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred158_EmersonEx; /* Prevent compiler warnings */
rulesynpred158_EmersonEx: ;

}
// $ANTLR end synpred158_Emerson

// $ANTLR start synpred161_Emerson
static void synpred161_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:379:4: ( callExpression )
    // .//Emerson.g:379:4: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred161_Emerson3092);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred161_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred161_EmersonEx; /* Prevent compiler warnings */
rulesynpred161_EmersonEx: ;

}
// $ANTLR end synpred161_Emerson

// $ANTLR start synpred162_Emerson
static void synpred162_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:384:4: ( memberExpression )
    // .//Emerson.g:384:4: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred162_Emerson3117);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred162_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred162_EmersonEx; /* Prevent compiler warnings */
rulesynpred162_EmersonEx: ;

}
// $ANTLR end synpred162_Emerson

// $ANTLR start synpred168_Emerson
static void synpred168_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:400:47: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:400:47: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:400:47: ( LTERM )*

        for (;;)
        {
            int alt368=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA368_0 = LA(1);
                if ( (LA368_0 == LTERM) ) 
                {
                    alt368=1;
                }

            }
            switch (alt368) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred168_Emerson3211); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred168_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop368;	/* break out of the loop */
        	    break;
            }
        }
        loop368: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred168_Emerson3214);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred168_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred168_EmersonEx; /* Prevent compiler warnings */
rulesynpred168_EmersonEx: ;

}
// $ANTLR end synpred168_Emerson

// $ANTLR start synpred170_Emerson
static void synpred170_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:400:136: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:400:136: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:400:136: ( LTERM )*

        for (;;)
        {
            int alt369=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA369_0 = LA(1);
                if ( (LA369_0 == LTERM) ) 
                {
                    alt369=1;
                }

            }
            switch (alt369) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred170_Emerson3231); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred170_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop369;	/* break out of the loop */
        	    break;
            }
        }
        loop369: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred170_Emerson3234);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred170_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred170_EmersonEx; /* Prevent compiler warnings */
rulesynpred170_EmersonEx: ;

}
// $ANTLR end synpred170_Emerson

// $ANTLR start synpred173_Emerson
static void synpred173_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:401:48: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:401:48: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:401:48: ( LTERM )*

        for (;;)
        {
            int alt373=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA373_0 = LA(1);
                if ( (LA373_0 == LTERM) ) 
                {
                    alt373=1;
                }

            }
            switch (alt373) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred173_Emerson3261); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred173_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop373;	/* break out of the loop */
        	    break;
            }
        }
        loop373: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred173_Emerson3264);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred173_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred173_EmersonEx; /* Prevent compiler warnings */
rulesynpred173_EmersonEx: ;

}
// $ANTLR end synpred173_Emerson

// $ANTLR start synpred175_Emerson
static void synpred175_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:401:136: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:401:136: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:401:136: ( LTERM )*

        for (;;)
        {
            int alt374=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA374_0 = LA(1);
                if ( (LA374_0 == LTERM) ) 
                {
                    alt374=1;
                }

            }
            switch (alt374) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred175_Emerson3280); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred175_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop374;	/* break out of the loop */
        	    break;
            }
        }
        loop374: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred175_Emerson3283);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred175_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred175_EmersonEx; /* Prevent compiler warnings */
rulesynpred175_EmersonEx: ;

}
// $ANTLR end synpred175_Emerson

// $ANTLR start synpred180_Emerson
static void synpred180_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:402:85: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:402:85: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:402:85: ( LTERM )*

        for (;;)
        {
            int alt378=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA378_0 = LA(1);
                if ( (LA378_0 == LTERM) ) 
                {
                    alt378=1;
                }

            }
            switch (alt378) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred180_Emerson3329); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred180_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop378;	/* break out of the loop */
        	    break;
            }
        }
        loop378: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred180_Emerson3332);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred180_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred180_EmersonEx; /* Prevent compiler warnings */
rulesynpred180_EmersonEx: ;

}
// $ANTLR end synpred180_Emerson

// $ANTLR start synpred182_Emerson
static void synpred182_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:402:172: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:402:172: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:402:172: ( LTERM )*

        for (;;)
        {
            int alt379=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA379_0 = LA(1);
                if ( (LA379_0 == LTERM) ) 
                {
                    alt379=1;
                }

            }
            switch (alt379) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred182_Emerson3347); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred182_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop379;	/* break out of the loop */
        	    break;
            }
        }
        loop379: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred182_Emerson3350);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred182_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred182_EmersonEx; /* Prevent compiler warnings */
rulesynpred182_EmersonEx: ;

}
// $ANTLR end synpred182_Emerson

// $ANTLR start synpred186_Emerson
static void synpred186_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:413:82: ( ( LTERM )* arguments )
    // .//Emerson.g:413:82: ( LTERM )* arguments
    {

        // .//Emerson.g:413:82: ( LTERM )*

        for (;;)
        {
            int alt380=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA380_0 = LA(1);
                if ( (LA380_0 == LTERM) ) 
                {
                    alt380=1;
                }

            }
            switch (alt380) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred186_Emerson3436); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred186_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop380;	/* break out of the loop */
        	    break;
            }
        }
        loop380: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_arguments_in_synpred186_Emerson3439);
        arguments(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred186_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred186_EmersonEx; /* Prevent compiler warnings */
rulesynpred186_EmersonEx: ;

}
// $ANTLR end synpred186_Emerson

// $ANTLR start synpred188_Emerson
static void synpred188_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:413:138: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:413:138: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:413:138: ( LTERM )*

        for (;;)
        {
            int alt381=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA381_0 = LA(1);
                if ( (LA381_0 == LTERM) ) 
                {
                    alt381=1;
                }

            }
            switch (alt381) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred188_Emerson3454); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred188_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop381;	/* break out of the loop */
        	    break;
            }
        }
        loop381: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred188_Emerson3457);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred188_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred188_EmersonEx; /* Prevent compiler warnings */
rulesynpred188_EmersonEx: ;

}
// $ANTLR end synpred188_Emerson

// $ANTLR start synpred190_Emerson
static void synpred190_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:413:207: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:413:207: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:413:207: ( LTERM )*

        for (;;)
        {
            int alt382=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA382_0 = LA(1);
                if ( (LA382_0 == LTERM) ) 
                {
                    alt382=1;
                }

            }
            switch (alt382) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred190_Emerson3472); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred190_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop382;	/* break out of the loop */
        	    break;
            }
        }
        loop382: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred190_Emerson3475);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred190_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred190_EmersonEx; /* Prevent compiler warnings */
rulesynpred190_EmersonEx: ;

}
// $ANTLR end synpred190_Emerson

// $ANTLR start synpred193_Emerson
static void synpred193_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:423:15: ( LTERM )
    // .//Emerson.g:423:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred193_Emerson3544); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred193_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred193_EmersonEx; /* Prevent compiler warnings */
rulesynpred193_EmersonEx: ;

}
// $ANTLR end synpred193_Emerson

// $ANTLR start synpred196_Emerson
static void synpred196_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:423:11: ( '(' ( LTERM )* ( assignmentExpression )? ( LTERM )* ')' )
    // .//Emerson.g:423:11: '(' ( LTERM )* ( assignmentExpression )? ( LTERM )* ')'
    {
         MATCHT(142, &FOLLOW_142_in_synpred196_Emerson3542); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred196_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:423:15: ( LTERM )*

        for (;;)
        {
            int alt383=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA383_0 = LA(1);
                if ( (LA383_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA383_2 = LA(2);
                        if ( (synpred193_Emerson(ctx)) ) 
                        {
                            alt383=1;
                        }

                    }
                }

            }
            switch (alt383) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred196_Emerson3544); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred196_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop383;	/* break out of the loop */
        	    break;
            }
        }
        loop383: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:423:22: ( assignmentExpression )?
        {
            int alt384=2;
            {
                int LA384_0 = LA(1);
                if ( (((LA384_0 >= Identifier) && (LA384_0 <= StringLiteral)) || ((LA384_0 >= 141) && (LA384_0 <= 142)) || LA384_0 == 145 || ((LA384_0 >= 168) && (LA384_0 <= 169)) || LA384_0 == 193 || ((LA384_0 >= 198) && (LA384_0 <= 199)) || ((LA384_0 >= 203) && (LA384_0 <= 215))) ) 
                {
                    alt384=1;
                }
            }
            switch (alt384) 
            {
        	case 1:
        	    // .//Emerson.g:423:23: assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred196_Emerson3548);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred196_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:423:46: ( LTERM )*

        for (;;)
        {
            int alt385=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA385_0 = LA(1);
                if ( (LA385_0 == LTERM) ) 
                {
                    alt385=1;
                }

            }
            switch (alt385) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred196_Emerson3552); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred196_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop385;	/* break out of the loop */
        	    break;
            }
        }
        loop385: ; /* Jump out to here if this rule does not match */

         MATCHT(143, &FOLLOW_143_in_synpred196_Emerson3555); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred196_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred196_EmersonEx; /* Prevent compiler warnings */
rulesynpred196_EmersonEx: ;

}
// $ANTLR end synpred196_Emerson

// $ANTLR start synpred214_Emerson
static void synpred214_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgConstruct_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_msgConstruct_return

	EmersonParser_msgConstruct_return e3;
	#undef	RETURN_TYPE_e3
	#define	RETURN_TYPE_e3 EmersonParser_msgConstruct_return




    // .//Emerson.g:449:13: ( ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct )
    // .//Emerson.g:449:13: ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct
    {

        // .//Emerson.g:449:13: ( LTERM )*

        for (;;)
        {
            int alt387=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA387_0 = LA(1);
                if ( (LA387_0 == LTERM) ) 
                {
                    alt387=1;
                }

            }
            switch (alt387) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred214_Emerson3842); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred214_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop387;	/* break out of the loop */
        	    break;
            }
        }
        loop387: ; /* Jump out to here if this rule does not match */

         MATCHT(180, &FOLLOW_180_in_synpred214_Emerson3845); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred214_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:449:25: ( LTERM )*

        for (;;)
        {
            int alt388=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA388_0 = LA(1);
                if ( (LA388_0 == LTERM) ) 
                {
                    alt388=1;
                }

            }
            switch (alt388) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred214_Emerson3847); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred214_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop388;	/* break out of the loop */
        	    break;
            }
        }
        loop388: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_msgConstruct_in_synpred214_Emerson3852);
        e2=msgConstruct(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred214_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(180, &FOLLOW_180_in_synpred214_Emerson3854); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred214_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_msgConstruct_in_synpred214_Emerson3858);
        e3=msgConstruct(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred214_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred214_EmersonEx; /* Prevent compiler warnings */
rulesynpred214_EmersonEx: ;

}
// $ANTLR end synpred214_Emerson

// $ANTLR start synpred217_Emerson
static void synpred217_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgConstruct_return e4;
	#undef	RETURN_TYPE_e4
	#define	RETURN_TYPE_e4 EmersonParser_msgConstruct_return

    // .//Emerson.g:450:13: ( ( LTERM )* '<<' ( LTERM )* e4= msgConstruct )
    // .//Emerson.g:450:13: ( LTERM )* '<<' ( LTERM )* e4= msgConstruct
    {

        // .//Emerson.g:450:13: ( LTERM )*

        for (;;)
        {
            int alt389=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA389_0 = LA(1);
                if ( (LA389_0 == LTERM) ) 
                {
                    alt389=1;
                }

            }
            switch (alt389) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred217_Emerson3889); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred217_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop389;	/* break out of the loop */
        	    break;
            }
        }
        loop389: ; /* Jump out to here if this rule does not match */

         MATCHT(180, &FOLLOW_180_in_synpred217_Emerson3892); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred217_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:450:25: ( LTERM )*

        for (;;)
        {
            int alt390=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA390_0 = LA(1);
                if ( (LA390_0 == LTERM) ) 
                {
                    alt390=1;
                }

            }
            switch (alt390) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred217_Emerson3894); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred217_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop390;	/* break out of the loop */
        	    break;
            }
        }
        loop390: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_msgConstruct_in_synpred217_Emerson3899);
        e4=msgConstruct(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred217_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred217_EmersonEx; /* Prevent compiler warnings */
rulesynpred217_EmersonEx: ;

}
// $ANTLR end synpred217_Emerson

// $ANTLR start synpred220_Emerson
static void synpred220_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgSenderConstruct_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_msgSenderConstruct_return

    // .//Emerson.g:456:12: ( ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct )
    // .//Emerson.g:456:12: ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct
    {

        // .//Emerson.g:456:12: ( LTERM )*

        for (;;)
        {
            int alt391=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA391_0 = LA(1);
                if ( (LA391_0 == LTERM) ) 
                {
                    alt391=1;
                }

            }
            switch (alt391) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred220_Emerson3959); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred220_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop391;	/* break out of the loop */
        	    break;
            }
        }
        loop391: ; /* Jump out to here if this rule does not match */

         MATCHT(181, &FOLLOW_181_in_synpred220_Emerson3962); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred220_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:456:24: ( LTERM )*

        for (;;)
        {
            int alt392=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA392_0 = LA(1);
                if ( (LA392_0 == LTERM) ) 
                {
                    alt392=1;
                }

            }
            switch (alt392) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred220_Emerson3964); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred220_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop392;	/* break out of the loop */
        	    break;
            }
        }
        loop392: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_msgSenderConstruct_in_synpred220_Emerson3969);
        e2=msgSenderConstruct(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred220_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred220_EmersonEx; /* Prevent compiler warnings */
rulesynpred220_EmersonEx: ;

}
// $ANTLR end synpred220_Emerson

// $ANTLR start synpred223_Emerson
static void synpred223_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_ternaryExpression_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_ternaryExpression_return

    // .//Emerson.g:461:12: ( ( LTERM )* '#' ( LTERM )* e2= ternaryExpression )
    // .//Emerson.g:461:12: ( LTERM )* '#' ( LTERM )* e2= ternaryExpression
    {

        // .//Emerson.g:461:12: ( LTERM )*

        for (;;)
        {
            int alt393=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA393_0 = LA(1);
                if ( (LA393_0 == LTERM) ) 
                {
                    alt393=1;
                }

            }
            switch (alt393) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred223_Emerson4027); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred223_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop393;	/* break out of the loop */
        	    break;
            }
        }
        loop393: ; /* Jump out to here if this rule does not match */

         MATCHT(182, &FOLLOW_182_in_synpred223_Emerson4030); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred223_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:461:23: ( LTERM )*

        for (;;)
        {
            int alt394=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA394_0 = LA(1);
                if ( (LA394_0 == LTERM) ) 
                {
                    alt394=1;
                }

            }
            switch (alt394) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred223_Emerson4032); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred223_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop394;	/* break out of the loop */
        	    break;
            }
        }
        loop394: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_ternaryExpression_in_synpred223_Emerson4037);
        e2=ternaryExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred223_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred223_EmersonEx; /* Prevent compiler warnings */
rulesynpred223_EmersonEx: ;

}
// $ANTLR end synpred223_Emerson

// $ANTLR start synpred228_Emerson
static void synpred228_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_assignmentExpression_return expr1;
	#undef	RETURN_TYPE_expr1
	#define	RETURN_TYPE_expr1 EmersonParser_assignmentExpression_return

	EmersonParser_assignmentExpression_return expr2;
	#undef	RETURN_TYPE_expr2
	#define	RETURN_TYPE_expr2 EmersonParser_assignmentExpression_return




    // .//Emerson.g:466:57: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression )
    // .//Emerson.g:466:57: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression
    {

        // .//Emerson.g:466:57: ( LTERM )*

        for (;;)
        {
            int alt395=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA395_0 = LA(1);
                if ( (LA395_0 == LTERM) ) 
                {
                    alt395=1;
                }

            }
            switch (alt395) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred228_Emerson4086); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred228_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop395;	/* break out of the loop */
        	    break;
            }
        }
        loop395: ; /* Jump out to here if this rule does not match */

         MATCHT(183, &FOLLOW_183_in_synpred228_Emerson4089); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred228_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:466:68: ( LTERM )*

        for (;;)
        {
            int alt396=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA396_0 = LA(1);
                if ( (LA396_0 == LTERM) ) 
                {
                    alt396=1;
                }

            }
            switch (alt396) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred228_Emerson4091); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred228_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop396;	/* break out of the loop */
        	    break;
            }
        }
        loop396: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred228_Emerson4096);
        expr1=assignmentExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred228_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:466:102: ( LTERM )*

        for (;;)
        {
            int alt397=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA397_0 = LA(1);
                if ( (LA397_0 == LTERM) ) 
                {
                    alt397=1;
                }

            }
            switch (alt397) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred228_Emerson4098); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred228_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop397;	/* break out of the loop */
        	    break;
            }
        }
        loop397: ; /* Jump out to here if this rule does not match */

         MATCHT(162, &FOLLOW_162_in_synpred228_Emerson4101); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred228_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:466:113: ( LTERM )*

        for (;;)
        {
            int alt398=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA398_0 = LA(1);
                if ( (LA398_0 == LTERM) ) 
                {
                    alt398=1;
                }

            }
            switch (alt398) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred228_Emerson4103); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred228_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop398;	/* break out of the loop */
        	    break;
            }
        }
        loop398: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred228_Emerson4108);
        expr2=assignmentExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred228_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred228_EmersonEx; /* Prevent compiler warnings */
rulesynpred228_EmersonEx: ;

}
// $ANTLR end synpred228_Emerson

// $ANTLR start synpred231_Emerson
static void synpred231_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgConstructNoIn_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_msgConstructNoIn_return

	EmersonParser_msgConstructNoIn_return e3;
	#undef	RETURN_TYPE_e3
	#define	RETURN_TYPE_e3 EmersonParser_msgConstructNoIn_return




    // .//Emerson.g:477:13: ( ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn )
    // .//Emerson.g:477:13: ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn
    {

        // .//Emerson.g:477:13: ( LTERM )*

        for (;;)
        {
            int alt399=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA399_0 = LA(1);
                if ( (LA399_0 == LTERM) ) 
                {
                    alt399=1;
                }

            }
            switch (alt399) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred231_Emerson4197); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred231_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop399;	/* break out of the loop */
        	    break;
            }
        }
        loop399: ; /* Jump out to here if this rule does not match */

         MATCHT(180, &FOLLOW_180_in_synpred231_Emerson4200); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred231_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:477:25: ( LTERM )*

        for (;;)
        {
            int alt400=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA400_0 = LA(1);
                if ( (LA400_0 == LTERM) ) 
                {
                    alt400=1;
                }

            }
            switch (alt400) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred231_Emerson4202); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred231_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop400;	/* break out of the loop */
        	    break;
            }
        }
        loop400: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_synpred231_Emerson4207);
        e2=msgConstructNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred231_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(180, &FOLLOW_180_in_synpred231_Emerson4209); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred231_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_synpred231_Emerson4213);
        e3=msgConstructNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred231_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred231_EmersonEx; /* Prevent compiler warnings */
rulesynpred231_EmersonEx: ;

}
// $ANTLR end synpred231_Emerson

// $ANTLR start synpred234_Emerson
static void synpred234_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgConstructNoIn_return e4;
	#undef	RETURN_TYPE_e4
	#define	RETURN_TYPE_e4 EmersonParser_msgConstructNoIn_return

	EmersonParser_msgConstructNoIn_return e5;
	#undef	RETURN_TYPE_e5
	#define	RETURN_TYPE_e5 EmersonParser_msgConstructNoIn_return




    // .//Emerson.g:478:13: (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn )
    // .//Emerson.g:478:13: e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn
    {
        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_synpred234_Emerson4246);
        e4=msgConstructNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred234_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:478:33: ( LTERM )*

        for (;;)
        {
            int alt401=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA401_0 = LA(1);
                if ( (LA401_0 == LTERM) ) 
                {
                    alt401=1;
                }

            }
            switch (alt401) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred234_Emerson4248); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred234_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop401;	/* break out of the loop */
        	    break;
            }
        }
        loop401: ; /* Jump out to here if this rule does not match */

         MATCHT(180, &FOLLOW_180_in_synpred234_Emerson4251); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred234_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:478:45: ( LTERM )*

        for (;;)
        {
            int alt402=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA402_0 = LA(1);
                if ( (LA402_0 == LTERM) ) 
                {
                    alt402=1;
                }

            }
            switch (alt402) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred234_Emerson4253); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred234_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop402;	/* break out of the loop */
        	    break;
            }
        }
        loop402: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_synpred234_Emerson4258);
        e5=msgConstructNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred234_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred234_EmersonEx; /* Prevent compiler warnings */
rulesynpred234_EmersonEx: ;

}
// $ANTLR end synpred234_Emerson

// $ANTLR start synpred236_Emerson
static void synpred236_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgSenderConstructNoIn_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_msgSenderConstructNoIn_return

    // .//Emerson.g:484:12: ( ( LTERM )* '>>' e2= msgSenderConstructNoIn )
    // .//Emerson.g:484:12: ( LTERM )* '>>' e2= msgSenderConstructNoIn
    {

        // .//Emerson.g:484:12: ( LTERM )*

        for (;;)
        {
            int alt403=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA403_0 = LA(1);
                if ( (LA403_0 == LTERM) ) 
                {
                    alt403=1;
                }

            }
            switch (alt403) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred236_Emerson4329); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred236_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop403;	/* break out of the loop */
        	    break;
            }
        }
        loop403: ; /* Jump out to here if this rule does not match */

         MATCHT(181, &FOLLOW_181_in_synpred236_Emerson4332); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred236_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_msgSenderConstructNoIn_in_synpred236_Emerson4336);
        e2=msgSenderConstructNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred236_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred236_EmersonEx; /* Prevent compiler warnings */
rulesynpred236_EmersonEx: ;

}
// $ANTLR end synpred236_Emerson

// $ANTLR start synpred238_Emerson
static void synpred238_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_ternaryExpressionNoIn_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_ternaryExpressionNoIn_return

    // .//Emerson.g:489:12: ( ( LTERM )* '#' e2= ternaryExpressionNoIn )
    // .//Emerson.g:489:12: ( LTERM )* '#' e2= ternaryExpressionNoIn
    {

        // .//Emerson.g:489:12: ( LTERM )*

        for (;;)
        {
            int alt404=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA404_0 = LA(1);
                if ( (LA404_0 == LTERM) ) 
                {
                    alt404=1;
                }

            }
            switch (alt404) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred238_Emerson4402); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred238_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop404;	/* break out of the loop */
        	    break;
            }
        }
        loop404: ; /* Jump out to here if this rule does not match */

         MATCHT(182, &FOLLOW_182_in_synpred238_Emerson4405); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred238_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_synpred238_Emerson4409);
        e2=ternaryExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred238_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred238_EmersonEx; /* Prevent compiler warnings */
rulesynpred238_EmersonEx: ;

}
// $ANTLR end synpred238_Emerson

// $ANTLR start synpred243_Emerson
static void synpred243_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_assignmentExpressionNoIn_return expr1;
	#undef	RETURN_TYPE_expr1
	#define	RETURN_TYPE_expr1 EmersonParser_assignmentExpressionNoIn_return

	EmersonParser_assignmentExpressionNoIn_return expr2;
	#undef	RETURN_TYPE_expr2
	#define	RETURN_TYPE_expr2 EmersonParser_assignmentExpressionNoIn_return




    // .//Emerson.g:495:65: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn )
    // .//Emerson.g:495:65: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn
    {

        // .//Emerson.g:495:65: ( LTERM )*

        for (;;)
        {
            int alt405=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA405_0 = LA(1);
                if ( (LA405_0 == LTERM) ) 
                {
                    alt405=1;
                }

            }
            switch (alt405) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred243_Emerson4483); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred243_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop405;	/* break out of the loop */
        	    break;
            }
        }
        loop405: ; /* Jump out to here if this rule does not match */

         MATCHT(183, &FOLLOW_183_in_synpred243_Emerson4486); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred243_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:495:76: ( LTERM )*

        for (;;)
        {
            int alt406=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA406_0 = LA(1);
                if ( (LA406_0 == LTERM) ) 
                {
                    alt406=1;
                }

            }
            switch (alt406) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred243_Emerson4488); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred243_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop406;	/* break out of the loop */
        	    break;
            }
        }
        loop406: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_synpred243_Emerson4493);
        expr1=assignmentExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred243_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:495:114: ( LTERM )*

        for (;;)
        {
            int alt407=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA407_0 = LA(1);
                if ( (LA407_0 == LTERM) ) 
                {
                    alt407=1;
                }

            }
            switch (alt407) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred243_Emerson4495); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred243_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop407;	/* break out of the loop */
        	    break;
            }
        }
        loop407: ; /* Jump out to here if this rule does not match */

         MATCHT(162, &FOLLOW_162_in_synpred243_Emerson4498); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred243_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:495:125: ( LTERM )*

        for (;;)
        {
            int alt408=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA408_0 = LA(1);
                if ( (LA408_0 == LTERM) ) 
                {
                    alt408=1;
                }

            }
            switch (alt408) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred243_Emerson4500); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred243_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop408;	/* break out of the loop */
        	    break;
            }
        }
        loop408: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_synpred243_Emerson4505);
        expr2=assignmentExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred243_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred243_EmersonEx; /* Prevent compiler warnings */
rulesynpred243_EmersonEx: ;

}
// $ANTLR end synpred243_Emerson

// $ANTLR start synpred290_Emerson
static void synpred290_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:568:55: ( ( LTERM )* relationalOps ( LTERM )* additiveExpression )
    // .//Emerson.g:568:55: ( LTERM )* relationalOps ( LTERM )* additiveExpression
    {

        // .//Emerson.g:568:55: ( LTERM )*

        for (;;)
        {
            int alt433=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA433_0 = LA(1);
                if ( (LA433_0 == LTERM) ) 
                {
                    alt433=1;
                }

            }
            switch (alt433) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred290_Emerson5223); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred290_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop433;	/* break out of the loop */
        	    break;
            }
        }
        loop433: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_relationalOps_in_synpred290_Emerson5226);
        relationalOps(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred290_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:568:76: ( LTERM )*

        for (;;)
        {
            int alt434=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA434_0 = LA(1);
                if ( (LA434_0 == LTERM) ) 
                {
                    alt434=1;
                }

            }
            switch (alt434) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred290_Emerson5228); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred290_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop434;	/* break out of the loop */
        	    break;
            }
        }
        loop434: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_additiveExpression_in_synpred290_Emerson5231);
        additiveExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred290_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred290_EmersonEx; /* Prevent compiler warnings */
rulesynpred290_EmersonEx: ;

}
// $ANTLR end synpred290_Emerson

// $ANTLR start synpred298_Emerson
static void synpred298_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:586:55: ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression )
    // .//Emerson.g:586:55: ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression
    {

        // .//Emerson.g:586:55: ( LTERM )*

        for (;;)
        {
            int alt435=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA435_0 = LA(1);
                if ( (LA435_0 == LTERM) ) 
                {
                    alt435=1;
                }

            }
            switch (alt435) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred298_Emerson5362); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred298_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop435;	/* break out of the loop */
        	    break;
            }
        }
        loop435: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_synpred298_Emerson5365);
        relationalOpsNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred298_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:586:80: ( LTERM )*

        for (;;)
        {
            int alt436=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA436_0 = LA(1);
                if ( (LA436_0 == LTERM) ) 
                {
                    alt436=1;
                }

            }
            switch (alt436) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred298_Emerson5367); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred298_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop436;	/* break out of the loop */
        	    break;
            }
        }
        loop436: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_additiveExpression_in_synpred298_Emerson5370);
        additiveExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred298_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred298_EmersonEx; /* Prevent compiler warnings */
rulesynpred298_EmersonEx: ;

}
// $ANTLR end synpred298_Emerson

// $ANTLR start synpred301_Emerson
static void synpred301_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:591:59: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression )
    // .//Emerson.g:591:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
    {

        // .//Emerson.g:591:59: ( LTERM )*

        for (;;)
        {
            int alt437=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA437_0 = LA(1);
                if ( (LA437_0 == LTERM) ) 
                {
                    alt437=1;
                }

            }
            switch (alt437) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred301_Emerson5404); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred301_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop437;	/* break out of the loop */
        	    break;
            }
        }
        loop437: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_addOps_in_synpred301_Emerson5407);
        addOps(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred301_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:591:73: ( LTERM )*

        for (;;)
        {
            int alt438=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA438_0 = LA(1);
                if ( (LA438_0 == LTERM) ) 
                {
                    alt438=1;
                }

            }
            switch (alt438) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred301_Emerson5409); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred301_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop438;	/* break out of the loop */
        	    break;
            }
        }
        loop438: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_synpred301_Emerson5412);
        multiplicativeExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred301_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred301_EmersonEx; /* Prevent compiler warnings */
rulesynpred301_EmersonEx: ;

}
// $ANTLR end synpred301_Emerson

// $ANTLR start synpred307_Emerson
static void synpred307_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:606:4: ( leftHandSideExpression '--' )
    // .//Emerson.g:606:4: leftHandSideExpression '--'
    {
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred307_Emerson5520);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred307_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(203, &FOLLOW_203_in_synpred307_Emerson5522); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred307_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred307_EmersonEx; /* Prevent compiler warnings */
rulesynpred307_EmersonEx: ;

}
// $ANTLR end synpred307_Emerson

// $ANTLR start synpred308_Emerson
static void synpred308_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:607:4: ( leftHandSideExpression '++' )
    // .//Emerson.g:607:4: leftHandSideExpression '++'
    {
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred308_Emerson5536);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred308_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(204, &FOLLOW_204_in_synpred308_Emerson5538); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred308_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred308_EmersonEx; /* Prevent compiler warnings */
rulesynpred308_EmersonEx: ;

}
// $ANTLR end synpred308_Emerson

// $ANTLR start synpred320_Emerson
static void synpred320_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:634:11: ( vectorLiteral )
    // .//Emerson.g:634:12: vectorLiteral
    {
        FOLLOWPUSH(FOLLOW_vectorLiteral_in_synpred320_Emerson5751);
        vectorLiteral(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred320_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred320_EmersonEx; /* Prevent compiler warnings */
rulesynpred320_EmersonEx: ;

}
// $ANTLR end synpred320_Emerson

// $ANTLR start synpred321_Emerson
static void synpred321_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:635:11: ( quaternionLiteral )
    // .//Emerson.g:635:12: quaternionLiteral
    {
        FOLLOWPUSH(FOLLOW_quaternionLiteral_in_synpred321_Emerson5769);
        quaternionLiteral(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred321_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred321_EmersonEx; /* Prevent compiler warnings */
rulesynpred321_EmersonEx: ;

}
// $ANTLR end synpred321_Emerson

// $ANTLR start synpred326_Emerson
static void synpred326_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:640:4: ( objectLiteral )
    // .//Emerson.g:640:4: objectLiteral
    {
        FOLLOWPUSH(FOLLOW_objectLiteral_in_synpred326_Emerson5806);
        objectLiteral(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred326_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred326_EmersonEx; /* Prevent compiler warnings */
rulesynpred326_EmersonEx: ;

}
// $ANTLR end synpred326_Emerson

// $ANTLR start synpred327_Emerson
static void synpred327_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:641:11: ( patternLiteral )
    // .//Emerson.g:641:11: patternLiteral
    {
        FOLLOWPUSH(FOLLOW_patternLiteral_in_synpred327_Emerson5818);
        patternLiteral(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred327_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred327_EmersonEx; /* Prevent compiler warnings */
rulesynpred327_EmersonEx: ;

}
// $ANTLR end synpred327_Emerson

// $ANTLR start synpred344_Emerson
static void synpred344_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_vectorLiteralField_return e1;
	#undef	RETURN_TYPE_e1
	#define	RETURN_TYPE_e1 EmersonParser_vectorLiteralField_return

	EmersonParser_vectorLiteralField_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_vectorLiteralField_return

	EmersonParser_vectorLiteralField_return e3;
	#undef	RETURN_TYPE_e3
	#define	RETURN_TYPE_e3 EmersonParser_vectorLiteralField_return

	EmersonParser_vectorLiteralField_return e4;
	#undef	RETURN_TYPE_e4
	#define	RETURN_TYPE_e4 EmersonParser_vectorLiteralField_return






    // .//Emerson.g:650:11: ( '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ',' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>' )
    // .//Emerson.g:650:11: '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ',' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>'
    {
         MATCHT(193, &FOLLOW_193_in_synpred344_Emerson5937); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred344_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:15: ( LTERM )*

        for (;;)
        {
            int alt441=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA441_0 = LA(1);
                if ( (LA441_0 == LTERM) ) 
                {
                    alt441=1;
                }

            }
            switch (alt441) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred344_Emerson5939); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred344_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop441;	/* break out of the loop */
        	    break;
            }
        }
        loop441: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred344_Emerson5944);
        e1=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred344_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:44: ( LTERM )*

        for (;;)
        {
            int alt442=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA442_0 = LA(1);
                if ( (LA442_0 == LTERM) ) 
                {
                    alt442=1;
                }

            }
            switch (alt442) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred344_Emerson5946); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred344_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop442;	/* break out of the loop */
        	    break;
            }
        }
        loop442: ; /* Jump out to here if this rule does not match */

         MATCHT(144, &FOLLOW_144_in_synpred344_Emerson5949); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred344_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:55: ( LTERM )*

        for (;;)
        {
            int alt443=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA443_0 = LA(1);
                if ( (LA443_0 == LTERM) ) 
                {
                    alt443=1;
                }

            }
            switch (alt443) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred344_Emerson5951); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred344_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop443;	/* break out of the loop */
        	    break;
            }
        }
        loop443: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred344_Emerson5956);
        e2=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred344_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:84: ( LTERM )*

        for (;;)
        {
            int alt444=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA444_0 = LA(1);
                if ( (LA444_0 == LTERM) ) 
                {
                    alt444=1;
                }

            }
            switch (alt444) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred344_Emerson5958); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred344_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop444;	/* break out of the loop */
        	    break;
            }
        }
        loop444: ; /* Jump out to here if this rule does not match */

         MATCHT(144, &FOLLOW_144_in_synpred344_Emerson5961); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred344_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:95: ( LTERM )*

        for (;;)
        {
            int alt445=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA445_0 = LA(1);
                if ( (LA445_0 == LTERM) ) 
                {
                    alt445=1;
                }

            }
            switch (alt445) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred344_Emerson5963); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred344_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop445;	/* break out of the loop */
        	    break;
            }
        }
        loop445: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred344_Emerson5968);
        e3=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred344_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:124: ( LTERM )*

        for (;;)
        {
            int alt446=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA446_0 = LA(1);
                if ( (LA446_0 == LTERM) ) 
                {
                    alt446=1;
                }

            }
            switch (alt446) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred344_Emerson5970); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred344_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop446;	/* break out of the loop */
        	    break;
            }
        }
        loop446: ; /* Jump out to here if this rule does not match */

         MATCHT(144, &FOLLOW_144_in_synpred344_Emerson5973); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred344_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:135: ( LTERM )*

        for (;;)
        {
            int alt447=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA447_0 = LA(1);
                if ( (LA447_0 == LTERM) ) 
                {
                    alt447=1;
                }

            }
            switch (alt447) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred344_Emerson5975); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred344_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop447;	/* break out of the loop */
        	    break;
            }
        }
        loop447: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred344_Emerson5980);
        e4=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred344_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:650:164: ( LTERM )*

        for (;;)
        {
            int alt448=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA448_0 = LA(1);
                if ( (LA448_0 == LTERM) ) 
                {
                    alt448=1;
                }

            }
            switch (alt448) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred344_Emerson5982); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred344_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop448;	/* break out of the loop */
        	    break;
            }
        }
        loop448: ; /* Jump out to here if this rule does not match */

         MATCHT(194, &FOLLOW_194_in_synpred344_Emerson5984); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred344_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred344_EmersonEx; /* Prevent compiler warnings */
rulesynpred344_EmersonEx: ;

}
// $ANTLR end synpred344_Emerson

// $ANTLR start synpred353_Emerson
static void synpred353_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_vectorLiteralField_return e1;
	#undef	RETURN_TYPE_e1
	#define	RETURN_TYPE_e1 EmersonParser_vectorLiteralField_return

	EmersonParser_vectorLiteralField_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_vectorLiteralField_return

	EmersonParser_vectorLiteralField_return e3;
	#undef	RETURN_TYPE_e3
	#define	RETURN_TYPE_e3 EmersonParser_vectorLiteralField_return

	EmersonParser_vectorLiteralField_return e4;
	#undef	RETURN_TYPE_e4
	#define	RETURN_TYPE_e4 EmersonParser_vectorLiteralField_return






    // .//Emerson.g:651:11: ( '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ';' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>' )
    // .//Emerson.g:651:11: '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* ';' ( LTERM )* e4= vectorLiteralField ( LTERM )* '>'
    {
         MATCHT(193, &FOLLOW_193_in_synpred353_Emerson6014); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred353_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:15: ( LTERM )*

        for (;;)
        {
            int alt449=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA449_0 = LA(1);
                if ( (LA449_0 == LTERM) ) 
                {
                    alt449=1;
                }

            }
            switch (alt449) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred353_Emerson6016); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred353_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop449;	/* break out of the loop */
        	    break;
            }
        }
        loop449: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred353_Emerson6021);
        e1=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred353_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:44: ( LTERM )*

        for (;;)
        {
            int alt450=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA450_0 = LA(1);
                if ( (LA450_0 == LTERM) ) 
                {
                    alt450=1;
                }

            }
            switch (alt450) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred353_Emerson6023); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred353_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop450;	/* break out of the loop */
        	    break;
            }
        }
        loop450: ; /* Jump out to here if this rule does not match */

         MATCHT(144, &FOLLOW_144_in_synpred353_Emerson6026); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred353_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:55: ( LTERM )*

        for (;;)
        {
            int alt451=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA451_0 = LA(1);
                if ( (LA451_0 == LTERM) ) 
                {
                    alt451=1;
                }

            }
            switch (alt451) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred353_Emerson6028); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred353_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop451;	/* break out of the loop */
        	    break;
            }
        }
        loop451: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred353_Emerson6033);
        e2=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred353_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:84: ( LTERM )*

        for (;;)
        {
            int alt452=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA452_0 = LA(1);
                if ( (LA452_0 == LTERM) ) 
                {
                    alt452=1;
                }

            }
            switch (alt452) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred353_Emerson6035); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred353_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop452;	/* break out of the loop */
        	    break;
            }
        }
        loop452: ; /* Jump out to here if this rule does not match */

         MATCHT(144, &FOLLOW_144_in_synpred353_Emerson6038); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred353_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:95: ( LTERM )*

        for (;;)
        {
            int alt453=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA453_0 = LA(1);
                if ( (LA453_0 == LTERM) ) 
                {
                    alt453=1;
                }

            }
            switch (alt453) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred353_Emerson6040); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred353_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop453;	/* break out of the loop */
        	    break;
            }
        }
        loop453: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred353_Emerson6045);
        e3=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred353_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:124: ( LTERM )*

        for (;;)
        {
            int alt454=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA454_0 = LA(1);
                if ( (LA454_0 == LTERM) ) 
                {
                    alt454=1;
                }

            }
            switch (alt454) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred353_Emerson6047); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred353_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop454;	/* break out of the loop */
        	    break;
            }
        }
        loop454: ; /* Jump out to here if this rule does not match */

         MATCHT(147, &FOLLOW_147_in_synpred353_Emerson6050); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred353_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:135: ( LTERM )*

        for (;;)
        {
            int alt455=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA455_0 = LA(1);
                if ( (LA455_0 == LTERM) ) 
                {
                    alt455=1;
                }

            }
            switch (alt455) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred353_Emerson6052); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred353_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop455;	/* break out of the loop */
        	    break;
            }
        }
        loop455: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_vectorLiteralField_in_synpred353_Emerson6057);
        e4=vectorLiteralField(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred353_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:651:164: ( LTERM )*

        for (;;)
        {
            int alt456=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA456_0 = LA(1);
                if ( (LA456_0 == LTERM) ) 
                {
                    alt456=1;
                }

            }
            switch (alt456) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred353_Emerson6059); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred353_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop456;	/* break out of the loop */
        	    break;
            }
        }
        loop456: ; /* Jump out to here if this rule does not match */

         MATCHT(194, &FOLLOW_194_in_synpred353_Emerson6061); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred353_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred353_EmersonEx; /* Prevent compiler warnings */
rulesynpred353_EmersonEx: ;

}
// $ANTLR end synpred353_Emerson

// $ANTLR start synpred358_Emerson
static void synpred358_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:659:11: ( additiveExpression )
    // .//Emerson.g:659:11: additiveExpression
    {
        FOLLOWPUSH(FOLLOW_additiveExpression_in_synpred358_Emerson6162);
        additiveExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred358_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred358_EmersonEx; /* Prevent compiler warnings */
rulesynpred358_EmersonEx: ;

}
// $ANTLR end synpred358_Emerson

// $ANTLR start synpred359_Emerson
static void synpred359_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:661:11: ( NumericLiteral )
    // .//Emerson.g:661:11: NumericLiteral
    {
         MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_synpred359_Emerson6175); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred359_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred359_EmersonEx; /* Prevent compiler warnings */
rulesynpred359_EmersonEx: ;

}
// $ANTLR end synpred359_Emerson

// $ANTLR start synpred360_Emerson
static void synpred360_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:662:11: ( callExpression )
    // .//Emerson.g:662:11: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred360_Emerson6187);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred360_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred360_EmersonEx; /* Prevent compiler warnings */
rulesynpred360_EmersonEx: ;

}
// $ANTLR end synpred360_Emerson

// $ANTLR start synpred363_Emerson
static void synpred363_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:673:9: ( LTERM )
    // .//Emerson.g:673:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred363_Emerson6282); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred363_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred363_EmersonEx; /* Prevent compiler warnings */
rulesynpred363_EmersonEx: ;

}
// $ANTLR end synpred363_Emerson

// $ANTLR start synpred366_Emerson
static void synpred366_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:673:5: ( '[' ( LTERM )* ( expression )? ( LTERM )* ']' )
    // .//Emerson.g:673:5: '[' ( LTERM )* ( expression )? ( LTERM )* ']'
    {
         MATCHT(169, &FOLLOW_169_in_synpred366_Emerson6280); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred366_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:673:9: ( LTERM )*

        for (;;)
        {
            int alt457=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA457_0 = LA(1);
                if ( (LA457_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA457_2 = LA(2);
                        if ( (synpred363_Emerson(ctx)) ) 
                        {
                            alt457=1;
                        }

                    }
                }

            }
            switch (alt457) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred366_Emerson6282); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred366_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop457;	/* break out of the loop */
        	    break;
            }
        }
        loop457: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:673:16: ( expression )?
        {
            int alt458=2;
            {
                int LA458_0 = LA(1);
                if ( (((LA458_0 >= Identifier) && (LA458_0 <= StringLiteral)) || ((LA458_0 >= 141) && (LA458_0 <= 142)) || LA458_0 == 145 || ((LA458_0 >= 168) && (LA458_0 <= 169)) || LA458_0 == 193 || ((LA458_0 >= 198) && (LA458_0 <= 199)) || ((LA458_0 >= 203) && (LA458_0 <= 215))) ) 
                {
                    alt458=1;
                }
            }
            switch (alt458) 
            {
        	case 1:
        	    // .//Emerson.g:673:17: expression
        	    {
        	        FOLLOWPUSH(FOLLOW_expression_in_synpred366_Emerson6286);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred366_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:673:30: ( LTERM )*

        for (;;)
        {
            int alt459=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA459_0 = LA(1);
                if ( (LA459_0 == LTERM) ) 
                {
                    alt459=1;
                }

            }
            switch (alt459) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred366_Emerson6290); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred366_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop459;	/* break out of the loop */
        	    break;
            }
        }
        loop459: ; /* Jump out to here if this rule does not match */

         MATCHT(170, &FOLLOW_170_in_synpred366_Emerson6293); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred366_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred366_EmersonEx; /* Prevent compiler warnings */
rulesynpred366_EmersonEx: ;

}
// $ANTLR end synpred366_Emerson

// $ANTLR start synpred372_Emerson
static void synpred372_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:679:9: ( LTERM )
    // .//Emerson.g:679:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred372_Emerson6371); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred372_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred372_EmersonEx; /* Prevent compiler warnings */
rulesynpred372_EmersonEx: ;

}
// $ANTLR end synpred372_Emerson

// $ANTLR start synpred375_Emerson
static void synpred375_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:679:5: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' )
    // .//Emerson.g:679:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
    {
         MATCHT(145, &FOLLOW_145_in_synpred375_Emerson6369); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred375_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:679:9: ( LTERM )*

        for (;;)
        {
            int alt461=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA461_0 = LA(1);
                if ( (LA461_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA461_2 = LA(2);
                        if ( (synpred372_Emerson(ctx)) ) 
                        {
                            alt461=1;
                        }

                    }
                }

            }
            switch (alt461) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred375_Emerson6371); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred375_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop461;	/* break out of the loop */
        	    break;
            }
        }
        loop461: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:679:16: ( propertyNameAndValue )?
        {
            int alt462=2;
            {
                int LA462_0 = LA(1);
                if ( (((LA462_0 >= Identifier) && (LA462_0 <= StringLiteral))) ) 
                {
                    alt462=1;
                }
            }
            switch (alt462) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: propertyNameAndValue
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_synpred375_Emerson6374);
        	        propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred375_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:679:38: ( LTERM )*

        for (;;)
        {
            int alt463=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA463_0 = LA(1);
                if ( (LA463_0 == LTERM) ) 
                {
                    alt463=1;
                }

            }
            switch (alt463) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred375_Emerson6377); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred375_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop463;	/* break out of the loop */
        	    break;
            }
        }
        loop463: ; /* Jump out to here if this rule does not match */

         MATCHT(146, &FOLLOW_146_in_synpred375_Emerson6380); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred375_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred375_EmersonEx; /* Prevent compiler warnings */
rulesynpred375_EmersonEx: ;

}
// $ANTLR end synpred375_Emerson

// $ANTLR start synpred381_Emerson
static void synpred381_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:685:9: ( LTERM )
    // .//Emerson.g:685:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred381_Emerson6456); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred381_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred381_EmersonEx; /* Prevent compiler warnings */
rulesynpred381_EmersonEx: ;

}
// $ANTLR end synpred381_Emerson

// $ANTLR start synpred384_Emerson
static void synpred384_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:685:5: ( '{' ( LTERM )* ( nameValueProto )? ( LTERM )* '}' )
    // .//Emerson.g:685:5: '{' ( LTERM )* ( nameValueProto )? ( LTERM )* '}'
    {
         MATCHT(145, &FOLLOW_145_in_synpred384_Emerson6454); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred384_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:685:9: ( LTERM )*

        for (;;)
        {
            int alt465=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA465_0 = LA(1);
                if ( (LA465_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA465_2 = LA(2);
                        if ( (synpred381_Emerson(ctx)) ) 
                        {
                            alt465=1;
                        }

                    }
                }

            }
            switch (alt465) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred384_Emerson6456); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred384_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop465;	/* break out of the loop */
        	    break;
            }
        }
        loop465: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:685:16: ( nameValueProto )?
        {
            int alt466=2;
            alt466 = cdfa466.predict(ctx, RECOGNIZER, ISTREAM, &cdfa466);
            if  (HASEXCEPTION())
            {
                goto rulesynpred384_EmersonEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt466) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: nameValueProto
        	    {
        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_synpred384_Emerson6459);
        	        nameValueProto(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred384_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:685:32: ( LTERM )*

        for (;;)
        {
            int alt467=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA467_0 = LA(1);
                if ( (LA467_0 == LTERM) ) 
                {
                    alt467=1;
                }

            }
            switch (alt467) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred384_Emerson6462); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred384_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop467;	/* break out of the loop */
        	    break;
            }
        }
        loop467: ; /* Jump out to here if this rule does not match */

         MATCHT(146, &FOLLOW_146_in_synpred384_Emerson6465); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred384_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred384_EmersonEx; /* Prevent compiler warnings */
rulesynpred384_EmersonEx: ;

}
// $ANTLR end synpred384_Emerson

// $ANTLR start synpred385_Emerson
static void synpred385_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:686:9: ( LTERM )
    // .//Emerson.g:686:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred385_Emerson6482); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred385_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred385_EmersonEx; /* Prevent compiler warnings */
rulesynpred385_EmersonEx: ;

}
// $ANTLR end synpred385_Emerson

// $ANTLR start synpred386_Emerson
static void synpred386_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:686:40: ( LTERM )
    // .//Emerson.g:686:40: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred386_Emerson6493); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred386_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred386_EmersonEx; /* Prevent compiler warnings */
rulesynpred386_EmersonEx: ;

}
// $ANTLR end synpred386_Emerson

// $ANTLR start synpred395_Emerson
static void synpred395_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:695:79: ( LTERM )
    // .//Emerson.g:695:79: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred395_Emerson6602); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred395_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred395_EmersonEx; /* Prevent compiler warnings */
rulesynpred395_EmersonEx: ;

}
// $ANTLR end synpred395_Emerson
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred26_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred26_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred228_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred228_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred36_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred36_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred155_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred155_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred190_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred190_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred154_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred154_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred22_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred22_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred186_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred186_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred63_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred63_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred326_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred326_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred67_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred67_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred358_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred358_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred1_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred1_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred142_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred142_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred384_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred384_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred168_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred168_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred137_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred137_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred321_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred321_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred28_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred28_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred175_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred175_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred243_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred243_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred66_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred66_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred162_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred162_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred231_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred231_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred214_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred214_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred193_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred193_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred121_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred121_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred381_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred381_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred344_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred344_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred152_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred152_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred220_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred220_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred217_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred217_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred131_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred131_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred62_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred62_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred161_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred161_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred110_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred110_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred363_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred363_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred386_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred386_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred353_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred353_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred238_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred238_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred320_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred320_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred118_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred118_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred74_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred74_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred180_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred180_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred188_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred188_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred375_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred375_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred126_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred126_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred385_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred385_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred366_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred366_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred158_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred158_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred4_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred4_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred223_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred223_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred173_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred173_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred395_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred395_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred150_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred150_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred124_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred124_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred234_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred234_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred52_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred52_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred85_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred85_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred135_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred135_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred307_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred307_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred40_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred40_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred372_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred372_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred359_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred359_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred290_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred290_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred93_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred93_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred11_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred11_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred14_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred14_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred196_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred196_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred308_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred308_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred105_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred105_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred60_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred60_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred236_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred236_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred170_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred170_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred301_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred301_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred8_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred8_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred129_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred129_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred298_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred298_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred50_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred50_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred182_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred182_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred24_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred24_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred327_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred327_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred360_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred360_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
