/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//Emerson.g
 *     -                            On : 2011-07-21 17:00:00
 *     -                for the parser : EmersonParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

  #include <stdlib.h>
  #include <stdio.h>
  #include "Util.h"

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "EmersonParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pEmersonParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pEmersonParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pEmersonParser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   EmersonParserTokenNames[207+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "UNDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "ARRAY_INDEX",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "SLIST",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "VARLIST",
        (pANTLR3_UINT8) "VAR",
        (pANTLR3_UINT8) "PROG",
        (pANTLR3_UINT8) "DO",
        (pANTLR3_UINT8) "WHILE",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FORINIT",
        (pANTLR3_UINT8) "FORCOND",
        (pANTLR3_UINT8) "FORITER",
        (pANTLR3_UINT8) "FORIN",
        (pANTLR3_UINT8) "BREAK",
        (pANTLR3_UINT8) "CONTINUE",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "NEW",
        (pANTLR3_UINT8) "WHEN",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_FIRST",
        (pANTLR3_UINT8) "WHEN_CHECKED_LIST_SUBSEQUENT",
        (pANTLR3_UINT8) "WHEN_PRED",
        (pANTLR3_UINT8) "VECTOR",
        (pANTLR3_UINT8) "NOOP",
        (pANTLR3_UINT8) "DOLLAR_EXPRESSION",
        (pANTLR3_UINT8) "TRY",
        (pANTLR3_UINT8) "THROW",
        (pANTLR3_UINT8) "CATCH",
        (pANTLR3_UINT8) "FINALLY",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "SWITCH",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "CASE_BLOCK",
        (pANTLR3_UINT8) "LABEL",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "MULT_ASSIGN",
        (pANTLR3_UINT8) "DIV_ASSIGN",
        (pANTLR3_UINT8) "MOD_ASSIGN",
        (pANTLR3_UINT8) "ADD_ASSIGN",
        (pANTLR3_UINT8) "SUB_ASSIGN",
        (pANTLR3_UINT8) "AND_ASSIGN",
        (pANTLR3_UINT8) "EXP_ASSIGN",
        (pANTLR3_UINT8) "OR_ASSIGN",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "EXP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "EQUALS",
        (pANTLR3_UINT8) "NOT_EQUALS",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "NOT_IDENT",
        (pANTLR3_UINT8) "LESS_THAN",
        (pANTLR3_UINT8) "GREATER_THAN",
        (pANTLR3_UINT8) "LESS_THAN_EQUAL",
        (pANTLR3_UINT8) "GREATER_THAN_EQUAL",
        (pANTLR3_UINT8) "INSTANCE_OF",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "ADD_OP",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "MULT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "ARRAY_LITERAL",
        (pANTLR3_UINT8) "OBJ_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE",
        (pANTLR3_UINT8) "DELETE_OP",
        (pANTLR3_UINT8) "VOID",
        (pANTLR3_UINT8) "TYPEOF",
        (pANTLR3_UINT8) "PLUSPLUS",
        (pANTLR3_UINT8) "MINUSMINUS",
        (pANTLR3_UINT8) "UNARY_PLUS",
        (pANTLR3_UINT8) "UNARY_MINUS",
        (pANTLR3_UINT8) "COMPLEMENT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "POSTEXPR",
        (pANTLR3_UINT8) "FUNC_PARAMS",
        (pANTLR3_UINT8) "FUNC_DECL",
        (pANTLR3_UINT8) "FUNC_EXPR",
        (pANTLR3_UINT8) "ARGLIST",
        (pANTLR3_UINT8) "TERNARYOP",
        (pANTLR3_UINT8) "TERNARYOP_NO_IN",
        (pANTLR3_UINT8) "EMPTY_FUNC_BODY",
        (pANTLR3_UINT8) "MESSAGE_RECV_NO_SENDER_NO_IN",
        (pANTLR3_UINT8) "MESSAGE_RECV_AND_SENDER_NO_IN",
        (pANTLR3_UINT8) "MESSAGE_RECV_NO_SENDER",
        (pANTLR3_UINT8) "MESSAGE_RECV_AND_SENDER",
        (pANTLR3_UINT8) "PAREN",
        (pANTLR3_UINT8) "PATTERN_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE_PROTO",
        (pANTLR3_UINT8) "BLANK_NAME_VAL_PROT",
        (pANTLR3_UINT8) "NAME",
        (pANTLR3_UINT8) "VALUE",
        (pANTLR3_UINT8) "PROTO",
        (pANTLR3_UINT8) "EXPR",
        (pANTLR3_UINT8) "EXPR_NO_IN",
        (pANTLR3_UINT8) "VERBATIM",
        (pANTLR3_UINT8) "SEND_CONSTRUCT",
        (pANTLR3_UINT8) "SENDER_CONSTRUCT",
        (pANTLR3_UINT8) "SEND_CONSTRUCT_NO_IN",
        (pANTLR3_UINT8) "SENDER_CONSTRUCT_NO_IN",
        (pANTLR3_UINT8) "LTERM",
        (pANTLR3_UINT8) "Identifier",
        (pANTLR3_UINT8) "NumericLiteral",
        (pANTLR3_UINT8) "StringLiteral",
        (pANTLR3_UINT8) "VerbatimStringCharacter",
        (pANTLR3_UINT8) "DoubleStringCharacter",
        (pANTLR3_UINT8) "SingleStringCharacter",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "CharacterEscapeSequence",
        (pANTLR3_UINT8) "HexEscapeSequence",
        (pANTLR3_UINT8) "UnicodeEscapeSequence",
        (pANTLR3_UINT8) "SingleEscapeCharacter",
        (pANTLR3_UINT8) "NonEscapeCharacter",
        (pANTLR3_UINT8) "EscapeCharacter",
        (pANTLR3_UINT8) "DecimalDigit",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "DecimalLiteral",
        (pANTLR3_UINT8) "HexIntegerLiteral",
        (pANTLR3_UINT8) "ExponentPart",
        (pANTLR3_UINT8) "IdentifierStart",
        (pANTLR3_UINT8) "IdentifierPart",
        (pANTLR3_UINT8) "UnicodeLetter",
        (pANTLR3_UINT8) "UnicodeDigit",
        (pANTLR3_UINT8) "UnicodeConnectorPunctuation",
        (pANTLR3_UINT8) "UnicodeCombiningMark",
        (pANTLR3_UINT8) "Comment",
        (pANTLR3_UINT8) "LineComment",
        (pANTLR3_UINT8) "WhiteSpace",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'var'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'with'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'throw'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'finally'",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'&='",
        (pANTLR3_UINT8) "'^='",
        (pANTLR3_UINT8) "'|='",
        (pANTLR3_UINT8) "'<<'",
        (pANTLR3_UINT8) "'>>'",
        (pANTLR3_UINT8) "'#'",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'^'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'==='",
        (pANTLR3_UINT8) "'!=='",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'instanceof'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'delete'",
        (pANTLR3_UINT8) "'void'",
        (pANTLR3_UINT8) "'typeof'",
        (pANTLR3_UINT8) "'~'",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'`'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static EmersonParser_program_return	program    (pEmersonParser ctx);
static EmersonParser_sourceElements_return	sourceElements    (pEmersonParser ctx);
static EmersonParser_sourceElement_return	sourceElement    (pEmersonParser ctx);
static EmersonParser_functionDeclaration_return	functionDeclaration    (pEmersonParser ctx);
static EmersonParser_functionExpression_return	functionExpression    (pEmersonParser ctx);
static EmersonParser_formalParameterList_return	formalParameterList    (pEmersonParser ctx);
static EmersonParser_functionBody_return	functionBody    (pEmersonParser ctx);
static EmersonParser_statement_return	statement    (pEmersonParser ctx);
static EmersonParser_statementBlock_return	statementBlock    (pEmersonParser ctx);
static EmersonParser_noOpStatement_return	noOpStatement    (pEmersonParser ctx);
static EmersonParser_statementList_return	statementList    (pEmersonParser ctx);
static EmersonParser_variableStatement_return	variableStatement    (pEmersonParser ctx);
static EmersonParser_variableDeclarationList_return	variableDeclarationList    (pEmersonParser ctx);
static EmersonParser_variableDeclarationListNoIn_return	variableDeclarationListNoIn    (pEmersonParser ctx);
static EmersonParser_variableDeclaration_return	variableDeclaration    (pEmersonParser ctx);
static EmersonParser_variableDeclarationNoIn_return	variableDeclarationNoIn    (pEmersonParser ctx);
static EmersonParser_initialiser_return	initialiser    (pEmersonParser ctx);
static EmersonParser_initialiserNoIn_return	initialiserNoIn    (pEmersonParser ctx);
static EmersonParser_emptyStatement_return	emptyStatement    (pEmersonParser ctx);
static EmersonParser_expressionStatement_return	expressionStatement    (pEmersonParser ctx);
static EmersonParser_ifStatement_return	ifStatement    (pEmersonParser ctx);
static EmersonParser_iterationStatement_return	iterationStatement    (pEmersonParser ctx);
static EmersonParser_doWhileStatement_return	doWhileStatement    (pEmersonParser ctx);
static EmersonParser_whileStatement_return	whileStatement    (pEmersonParser ctx);
static EmersonParser_forStatement_return	forStatement    (pEmersonParser ctx);
static EmersonParser_forStatementInitialiserPart_return	forStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_forInStatement_return	forInStatement    (pEmersonParser ctx);
static EmersonParser_forInStatementInitialiserPart_return	forInStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_continueStatement_return	continueStatement    (pEmersonParser ctx);
static EmersonParser_breakStatement_return	breakStatement    (pEmersonParser ctx);
static EmersonParser_returnStatement_return	returnStatement    (pEmersonParser ctx);
static EmersonParser_withStatement_return	withStatement    (pEmersonParser ctx);
static EmersonParser_switchStatement_return	switchStatement    (pEmersonParser ctx);
static EmersonParser_caseBlock_return	caseBlock    (pEmersonParser ctx);
static EmersonParser_caseClause_return	caseClause    (pEmersonParser ctx);
static EmersonParser_defaultClause_return	defaultClause    (pEmersonParser ctx);
static EmersonParser_caseClauseSeenDefault_return	caseClauseSeenDefault    (pEmersonParser ctx);
static EmersonParser_throwStatement_return	throwStatement    (pEmersonParser ctx);
static EmersonParser_tryStatement_return	tryStatement    (pEmersonParser ctx);
static EmersonParser_catchFinallyBlock_return	catchFinallyBlock    (pEmersonParser ctx);
static EmersonParser_catchBlock_return	catchBlock    (pEmersonParser ctx);
static EmersonParser_finallyBlock_return	finallyBlock    (pEmersonParser ctx);
static EmersonParser_memAndCallExpression_return	memAndCallExpression    (pEmersonParser ctx);
static EmersonParser_expression_return	expression    (pEmersonParser ctx);
static EmersonParser_expressionNoIn_return	expressionNoIn    (pEmersonParser ctx);
static EmersonParser_assignmentExpression_return	assignmentExpression    (pEmersonParser ctx);
static EmersonParser_assignmentExpressionNoIn_return	assignmentExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_leftHandSideExpression_return	leftHandSideExpression    (pEmersonParser ctx);
static EmersonParser_newExpression_return	newExpression    (pEmersonParser ctx);
static EmersonParser_indexSuffix1_return	indexSuffix1    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix1_return	propertyReferenceSuffix1    (pEmersonParser ctx);
static EmersonParser_memberExpression_return	memberExpression    (pEmersonParser ctx);
static EmersonParser_memberExpressionSuffix_return	memberExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_callExpression_return	callExpression    (pEmersonParser ctx);
static EmersonParser_callExpressionSuffix_return	callExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_arguments_return	arguments    (pEmersonParser ctx);
static EmersonParser_indexSuffix_return	indexSuffix    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix_return	propertyReferenceSuffix    (pEmersonParser ctx);
static EmersonParser_assignmentOperator_return	assignmentOperator    (pEmersonParser ctx);
static EmersonParser_conditionalExpression_return	conditionalExpression    (pEmersonParser ctx);
static EmersonParser_msgRecvConstruct_return	msgRecvConstruct    (pEmersonParser ctx);
static EmersonParser_msgConstruct_return	msgConstruct    (pEmersonParser ctx);
static EmersonParser_msgSenderConstruct_return	msgSenderConstruct    (pEmersonParser ctx);
static EmersonParser_ternaryExpression_return	ternaryExpression    (pEmersonParser ctx);
static EmersonParser_conditionalExpressionNoIn_return	conditionalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_msgRecvConstructNoIn_return	msgRecvConstructNoIn    (pEmersonParser ctx);
static EmersonParser_msgConstructNoIn_return	msgConstructNoIn    (pEmersonParser ctx);
static EmersonParser_msgSenderConstructNoIn_return	msgSenderConstructNoIn    (pEmersonParser ctx);
static EmersonParser_ternaryExpressionNoIn_return	ternaryExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalORExpression_return	logicalORExpression    (pEmersonParser ctx);
static EmersonParser_logicalANDExpression_return	logicalANDExpression    (pEmersonParser ctx);
static EmersonParser_logicalORExpressionNoIn_return	logicalORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalANDExpressionNoIn_return	logicalANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpression_return	bitwiseORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpressionNoIn_return	bitwiseORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpression_return	bitwiseXORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpressionNoIn_return	bitwiseXORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpression_return	bitwiseANDExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpressionNoIn_return	bitwiseANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_equalityExpression_return	equalityExpression    (pEmersonParser ctx);
static EmersonParser_equalityOps_return	equalityOps    (pEmersonParser ctx);
static EmersonParser_equalityExpressionNoIn_return	equalityExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_relationalOps_return	relationalOps    (pEmersonParser ctx);
static EmersonParser_relationalExpression_return	relationalExpression    (pEmersonParser ctx);
static EmersonParser_relationalOpsNoIn_return	relationalOpsNoIn    (pEmersonParser ctx);
static EmersonParser_addOps_return	addOps    (pEmersonParser ctx);
static EmersonParser_relationalExpressionNoIn_return	relationalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_additiveExpression_return	additiveExpression    (pEmersonParser ctx);
static EmersonParser_multOps_return	multOps    (pEmersonParser ctx);
static EmersonParser_multiplicativeExpression_return	multiplicativeExpression    (pEmersonParser ctx);
static EmersonParser_postfixExpression_return	postfixExpression    (pEmersonParser ctx);
static EmersonParser_unaryOps_return	unaryOps    (pEmersonParser ctx);
static EmersonParser_unaryExpression_return	unaryExpression    (pEmersonParser ctx);
static EmersonParser_primaryExpression_return	primaryExpression    (pEmersonParser ctx);
static EmersonParser_vectorLiteral_return	vectorLiteral    (pEmersonParser ctx);
static EmersonParser_vectorLiteralField_return	vectorLiteralField    (pEmersonParser ctx);
static EmersonParser_dollarExpression_return	dollarExpression    (pEmersonParser ctx);
static EmersonParser_arrayLiteral_return	arrayLiteral    (pEmersonParser ctx);
static EmersonParser_objectLiteral_return	objectLiteral    (pEmersonParser ctx);
static EmersonParser_patternLiteral_return	patternLiteral    (pEmersonParser ctx);
static EmersonParser_propertyNameAndValue_return	propertyNameAndValue    (pEmersonParser ctx);
static EmersonParser_nameValueProto_return	nameValueProto    (pEmersonParser ctx);
static EmersonParser_propertyName_return	propertyName    (pEmersonParser ctx);
static EmersonParser_literal_return	literal    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred1_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred4_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred8_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred11_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred14_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred22_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred24_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred25_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred26_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred28_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred29_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred39_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred41_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred51_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred53_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred62_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred64_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred65_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred68_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred69_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred76_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred87_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred95_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred107_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred112_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred120_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred123_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred126_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred128_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred131_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred133_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred137_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred139_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred144_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred152_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred153_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred156_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred159_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred160_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred166_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred168_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred171_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred173_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred178_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred180_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred184_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred186_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred188_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred191_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred194_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred212_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred215_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred218_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred221_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred226_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred229_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred232_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred234_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred236_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred241_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred288_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred296_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred299_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred305_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred306_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred317_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred322_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred323_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred332_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred333_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred334_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred337_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred340_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred345_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred348_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred353_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred356_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred357_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred358_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred367_Emerson    (pEmersonParser ctx);
static void	EmersonParserFree(pEmersonParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = ".//Emerson.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return EmersonParserNewSSD(instream, NULL);
}

/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pEmersonParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pEmersonParser) ANTLR3_CALLOC(1, sizeof(EmersonParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in EmersonParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our EmersonParser interface
     */
    ctx->program	= program;
    ctx->sourceElements	= sourceElements;
    ctx->sourceElement	= sourceElement;
    ctx->functionDeclaration	= functionDeclaration;
    ctx->functionExpression	= functionExpression;
    ctx->formalParameterList	= formalParameterList;
    ctx->functionBody	= functionBody;
    ctx->statement	= statement;
    ctx->statementBlock	= statementBlock;
    ctx->noOpStatement	= noOpStatement;
    ctx->statementList	= statementList;
    ctx->variableStatement	= variableStatement;
    ctx->variableDeclarationList	= variableDeclarationList;
    ctx->variableDeclarationListNoIn	= variableDeclarationListNoIn;
    ctx->variableDeclaration	= variableDeclaration;
    ctx->variableDeclarationNoIn	= variableDeclarationNoIn;
    ctx->initialiser	= initialiser;
    ctx->initialiserNoIn	= initialiserNoIn;
    ctx->emptyStatement	= emptyStatement;
    ctx->expressionStatement	= expressionStatement;
    ctx->ifStatement	= ifStatement;
    ctx->iterationStatement	= iterationStatement;
    ctx->doWhileStatement	= doWhileStatement;
    ctx->whileStatement	= whileStatement;
    ctx->forStatement	= forStatement;
    ctx->forStatementInitialiserPart	= forStatementInitialiserPart;
    ctx->forInStatement	= forInStatement;
    ctx->forInStatementInitialiserPart	= forInStatementInitialiserPart;
    ctx->continueStatement	= continueStatement;
    ctx->breakStatement	= breakStatement;
    ctx->returnStatement	= returnStatement;
    ctx->withStatement	= withStatement;
    ctx->switchStatement	= switchStatement;
    ctx->caseBlock	= caseBlock;
    ctx->caseClause	= caseClause;
    ctx->defaultClause	= defaultClause;
    ctx->caseClauseSeenDefault	= caseClauseSeenDefault;
    ctx->throwStatement	= throwStatement;
    ctx->tryStatement	= tryStatement;
    ctx->catchFinallyBlock	= catchFinallyBlock;
    ctx->catchBlock	= catchBlock;
    ctx->finallyBlock	= finallyBlock;
    ctx->memAndCallExpression	= memAndCallExpression;
    ctx->expression	= expression;
    ctx->expressionNoIn	= expressionNoIn;
    ctx->assignmentExpression	= assignmentExpression;
    ctx->assignmentExpressionNoIn	= assignmentExpressionNoIn;
    ctx->leftHandSideExpression	= leftHandSideExpression;
    ctx->newExpression	= newExpression;
    ctx->indexSuffix1	= indexSuffix1;
    ctx->propertyReferenceSuffix1	= propertyReferenceSuffix1;
    ctx->memberExpression	= memberExpression;
    ctx->memberExpressionSuffix	= memberExpressionSuffix;
    ctx->callExpression	= callExpression;
    ctx->callExpressionSuffix	= callExpressionSuffix;
    ctx->arguments	= arguments;
    ctx->indexSuffix	= indexSuffix;
    ctx->propertyReferenceSuffix	= propertyReferenceSuffix;
    ctx->assignmentOperator	= assignmentOperator;
    ctx->conditionalExpression	= conditionalExpression;
    ctx->msgRecvConstruct	= msgRecvConstruct;
    ctx->msgConstruct	= msgConstruct;
    ctx->msgSenderConstruct	= msgSenderConstruct;
    ctx->ternaryExpression	= ternaryExpression;
    ctx->conditionalExpressionNoIn	= conditionalExpressionNoIn;
    ctx->msgRecvConstructNoIn	= msgRecvConstructNoIn;
    ctx->msgConstructNoIn	= msgConstructNoIn;
    ctx->msgSenderConstructNoIn	= msgSenderConstructNoIn;
    ctx->ternaryExpressionNoIn	= ternaryExpressionNoIn;
    ctx->logicalORExpression	= logicalORExpression;
    ctx->logicalANDExpression	= logicalANDExpression;
    ctx->logicalORExpressionNoIn	= logicalORExpressionNoIn;
    ctx->logicalANDExpressionNoIn	= logicalANDExpressionNoIn;
    ctx->bitwiseORExpression	= bitwiseORExpression;
    ctx->bitwiseORExpressionNoIn	= bitwiseORExpressionNoIn;
    ctx->bitwiseXORExpression	= bitwiseXORExpression;
    ctx->bitwiseXORExpressionNoIn	= bitwiseXORExpressionNoIn;
    ctx->bitwiseANDExpression	= bitwiseANDExpression;
    ctx->bitwiseANDExpressionNoIn	= bitwiseANDExpressionNoIn;
    ctx->equalityExpression	= equalityExpression;
    ctx->equalityOps	= equalityOps;
    ctx->equalityExpressionNoIn	= equalityExpressionNoIn;
    ctx->relationalOps	= relationalOps;
    ctx->relationalExpression	= relationalExpression;
    ctx->relationalOpsNoIn	= relationalOpsNoIn;
    ctx->addOps	= addOps;
    ctx->relationalExpressionNoIn	= relationalExpressionNoIn;
    ctx->additiveExpression	= additiveExpression;
    ctx->multOps	= multOps;
    ctx->multiplicativeExpression	= multiplicativeExpression;
    ctx->postfixExpression	= postfixExpression;
    ctx->unaryOps	= unaryOps;
    ctx->unaryExpression	= unaryExpression;
    ctx->primaryExpression	= primaryExpression;
    ctx->vectorLiteral	= vectorLiteral;
    ctx->vectorLiteralField	= vectorLiteralField;
    ctx->dollarExpression	= dollarExpression;
    ctx->arrayLiteral	= arrayLiteral;
    ctx->objectLiteral	= objectLiteral;
    ctx->patternLiteral	= patternLiteral;
    ctx->propertyNameAndValue	= propertyNameAndValue;
    ctx->nameValueProto	= nameValueProto;
    ctx->propertyName	= propertyName;
    ctx->literal	= literal;
    ctx->synpred1_Emerson	= synpred1_Emerson;
    ctx->synpred4_Emerson	= synpred4_Emerson;
    ctx->synpred8_Emerson	= synpred8_Emerson;
    ctx->synpred11_Emerson	= synpred11_Emerson;
    ctx->synpred14_Emerson	= synpred14_Emerson;
    ctx->synpred22_Emerson	= synpred22_Emerson;
    ctx->synpred24_Emerson	= synpred24_Emerson;
    ctx->synpred25_Emerson	= synpred25_Emerson;
    ctx->synpred26_Emerson	= synpred26_Emerson;
    ctx->synpred28_Emerson	= synpred28_Emerson;
    ctx->synpred29_Emerson	= synpred29_Emerson;
    ctx->synpred39_Emerson	= synpred39_Emerson;
    ctx->synpred41_Emerson	= synpred41_Emerson;
    ctx->synpred51_Emerson	= synpred51_Emerson;
    ctx->synpred53_Emerson	= synpred53_Emerson;
    ctx->synpred62_Emerson	= synpred62_Emerson;
    ctx->synpred64_Emerson	= synpred64_Emerson;
    ctx->synpred65_Emerson	= synpred65_Emerson;
    ctx->synpred68_Emerson	= synpred68_Emerson;
    ctx->synpred69_Emerson	= synpred69_Emerson;
    ctx->synpred76_Emerson	= synpred76_Emerson;
    ctx->synpred87_Emerson	= synpred87_Emerson;
    ctx->synpred95_Emerson	= synpred95_Emerson;
    ctx->synpred107_Emerson	= synpred107_Emerson;
    ctx->synpred112_Emerson	= synpred112_Emerson;
    ctx->synpred120_Emerson	= synpred120_Emerson;
    ctx->synpred123_Emerson	= synpred123_Emerson;
    ctx->synpred126_Emerson	= synpred126_Emerson;
    ctx->synpred128_Emerson	= synpred128_Emerson;
    ctx->synpred131_Emerson	= synpred131_Emerson;
    ctx->synpred133_Emerson	= synpred133_Emerson;
    ctx->synpred137_Emerson	= synpred137_Emerson;
    ctx->synpred139_Emerson	= synpred139_Emerson;
    ctx->synpred144_Emerson	= synpred144_Emerson;
    ctx->synpred152_Emerson	= synpred152_Emerson;
    ctx->synpred153_Emerson	= synpred153_Emerson;
    ctx->synpred156_Emerson	= synpred156_Emerson;
    ctx->synpred159_Emerson	= synpred159_Emerson;
    ctx->synpred160_Emerson	= synpred160_Emerson;
    ctx->synpred166_Emerson	= synpred166_Emerson;
    ctx->synpred168_Emerson	= synpred168_Emerson;
    ctx->synpred171_Emerson	= synpred171_Emerson;
    ctx->synpred173_Emerson	= synpred173_Emerson;
    ctx->synpred178_Emerson	= synpred178_Emerson;
    ctx->synpred180_Emerson	= synpred180_Emerson;
    ctx->synpred184_Emerson	= synpred184_Emerson;
    ctx->synpred186_Emerson	= synpred186_Emerson;
    ctx->synpred188_Emerson	= synpred188_Emerson;
    ctx->synpred191_Emerson	= synpred191_Emerson;
    ctx->synpred194_Emerson	= synpred194_Emerson;
    ctx->synpred212_Emerson	= synpred212_Emerson;
    ctx->synpred215_Emerson	= synpred215_Emerson;
    ctx->synpred218_Emerson	= synpred218_Emerson;
    ctx->synpred221_Emerson	= synpred221_Emerson;
    ctx->synpred226_Emerson	= synpred226_Emerson;
    ctx->synpred229_Emerson	= synpred229_Emerson;
    ctx->synpred232_Emerson	= synpred232_Emerson;
    ctx->synpred234_Emerson	= synpred234_Emerson;
    ctx->synpred236_Emerson	= synpred236_Emerson;
    ctx->synpred241_Emerson	= synpred241_Emerson;
    ctx->synpred288_Emerson	= synpred288_Emerson;
    ctx->synpred296_Emerson	= synpred296_Emerson;
    ctx->synpred299_Emerson	= synpred299_Emerson;
    ctx->synpred305_Emerson	= synpred305_Emerson;
    ctx->synpred306_Emerson	= synpred306_Emerson;
    ctx->synpred317_Emerson	= synpred317_Emerson;
    ctx->synpred322_Emerson	= synpred322_Emerson;
    ctx->synpred323_Emerson	= synpred323_Emerson;
    ctx->synpred332_Emerson	= synpred332_Emerson;
    ctx->synpred333_Emerson	= synpred333_Emerson;
    ctx->synpred334_Emerson	= synpred334_Emerson;
    ctx->synpred337_Emerson	= synpred337_Emerson;
    ctx->synpred340_Emerson	= synpred340_Emerson;
    ctx->synpred345_Emerson	= synpred345_Emerson;
    ctx->synpred348_Emerson	= synpred348_Emerson;
    ctx->synpred353_Emerson	= synpred353_Emerson;
    ctx->synpred356_Emerson	= synpred356_Emerson;
    ctx->synpred357_Emerson	= synpred357_Emerson;
    ctx->synpred358_Emerson	= synpred358_Emerson;
    ctx->synpred367_Emerson	= synpred367_Emerson;
    ctx->free			= EmersonParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

    /* Create a LIST for recording rule memos.
     */
     RULEMEMO    = antlr3IntTrieNew(15);	/* 16 bit depth is enough for 32768 rules! */
	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = EmersonParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 EmersonParserFree(pEmersonParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	if	(RULEMEMO != NULL)
	{
		RULEMEMO->free(RULEMEMO);
		RULEMEMO = NULL;
	}	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return EmersonParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program881  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program881_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program881	= { FOLLOW_LTERM_in_program881_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_program885  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_program885_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_program885	= { FOLLOW_sourceElements_in_program885_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program888  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program888_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program888	= { FOLLOW_LTERM_in_program888_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_program891  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_program891_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_program891	= { FOLLOW_EOF_in_program891_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements912  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements912	= { FOLLOW_sourceElement_in_sourceElements912_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_sourceElements915  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_sourceElements915_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_sourceElements915	= { FOLLOW_LTERM_in_sourceElements915_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements918  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements918_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements918	= { FOLLOW_sourceElement_in_sourceElements918_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_sourceElement939  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_sourceElement939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_sourceElement939	= { FOLLOW_functionDeclaration_in_sourceElement939_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_sourceElement948  */
static	ANTLR3_BITWORD FOLLOW_statement_in_sourceElement948_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_sourceElement948	= { FOLLOW_statement_in_sourceElement948_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_functionDeclaration965  */
static	ANTLR3_BITWORD FOLLOW_137_in_functionDeclaration965_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_functionDeclaration965	= { FOLLOW_137_in_functionDeclaration965_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration967  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration967_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration967	= { FOLLOW_LTERM_in_functionDeclaration967_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionDeclaration970  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionDeclaration970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionDeclaration970	= { FOLLOW_Identifier_in_functionDeclaration970_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration972  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration972	= { FOLLOW_LTERM_in_functionDeclaration972_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionDeclaration976  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionDeclaration976_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionDeclaration976	= { FOLLOW_formalParameterList_in_functionDeclaration976_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration979  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration979_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration979	= { FOLLOW_LTERM_in_functionDeclaration979_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionDeclaration982  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionDeclaration982_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionDeclaration982	= { FOLLOW_functionBody_in_functionDeclaration982_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_functionExpression1007  */
static	ANTLR3_BITWORD FOLLOW_137_in_functionExpression1007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_functionExpression1007	= { FOLLOW_137_in_functionExpression1007_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1009  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1009	= { FOLLOW_LTERM_in_functionExpression1009_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionExpression1012  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionExpression1012_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionExpression1012	= { FOLLOW_Identifier_in_functionExpression1012_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1015  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1015	= { FOLLOW_LTERM_in_functionExpression1015_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_functionExpression1018  */
static	ANTLR3_BITWORD FOLLOW_138_in_functionExpression1018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_functionExpression1018	= { FOLLOW_138_in_functionExpression1018_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1020  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1020	= { FOLLOW_LTERM_in_functionExpression1020_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionExpression1023  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionExpression1023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionExpression1023	= { FOLLOW_formalParameterList_in_functionExpression1023_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1026  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1026	= { FOLLOW_LTERM_in_functionExpression1026_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_functionExpression1029  */
static	ANTLR3_BITWORD FOLLOW_139_in_functionExpression1029_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_functionExpression1029	= { FOLLOW_139_in_functionExpression1029_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression1031  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression1031_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression1031	= { FOLLOW_LTERM_in_functionExpression1031_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionExpression1034  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionExpression1034_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionExpression1034	= { FOLLOW_functionBody_in_functionExpression1034_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList1062  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList1062_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList1062	= { FOLLOW_Identifier_in_formalParameterList1062_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_formalParameterList1065  */
static	ANTLR3_BITWORD FOLLOW_140_in_formalParameterList1065_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_formalParameterList1065	= { FOLLOW_140_in_formalParameterList1065_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList1067  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList1067_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList1067	= { FOLLOW_LTERM_in_formalParameterList1067_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList1070  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList1070_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList1070	= { FOLLOW_Identifier_in_formalParameterList1070_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_functionBody1093  */
static	ANTLR3_BITWORD FOLLOW_141_in_functionBody1093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_functionBody1093	= { FOLLOW_141_in_functionBody1093_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1095  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1095_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1095	= { FOLLOW_LTERM_in_functionBody1095_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_functionBody1098  */
static	ANTLR3_BITWORD FOLLOW_142_in_functionBody1098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_functionBody1098	= { FOLLOW_142_in_functionBody1098_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_functionBody1109  */
static	ANTLR3_BITWORD FOLLOW_141_in_functionBody1109_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_functionBody1109	= { FOLLOW_141_in_functionBody1109_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1111  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1111	= { FOLLOW_LTERM_in_functionBody1111_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_functionBody1115  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_functionBody1115_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_functionBody1115	= { FOLLOW_sourceElements_in_functionBody1115_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody1122  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody1122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody1122	= { FOLLOW_LTERM_in_functionBody1122_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_functionBody1125  */
static	ANTLR3_BITWORD FOLLOW_142_in_functionBody1125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_functionBody1125	= { FOLLOW_142_in_functionBody1125_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noOpStatement_in_statement1137  */
static	ANTLR3_BITWORD FOLLOW_noOpStatement_in_statement1137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noOpStatement_in_statement1137	= { FOLLOW_noOpStatement_in_statement1137_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_statement1155  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_statement1155_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_statement1155	= { FOLLOW_switchStatement_in_statement1155_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_statement1167  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_statement1167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_statement1167	= { FOLLOW_statementBlock_in_statement1167_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableStatement_in_statement1172  */
static	ANTLR3_BITWORD FOLLOW_variableStatement_in_statement1172_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableStatement_in_statement1172	= { FOLLOW_variableStatement_in_statement1172_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_emptyStatement_in_statement1177  */
static	ANTLR3_BITWORD FOLLOW_emptyStatement_in_statement1177_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_emptyStatement_in_statement1177	= { FOLLOW_emptyStatement_in_statement1177_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_statement1182  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_statement1182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_statement1182	= { FOLLOW_expressionStatement_in_statement1182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement1187  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement1187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement1187	= { FOLLOW_ifStatement_in_statement1187_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iterationStatement_in_statement1192  */
static	ANTLR3_BITWORD FOLLOW_iterationStatement_in_statement1192_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iterationStatement_in_statement1192	= { FOLLOW_iterationStatement_in_statement1192_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_continueStatement_in_statement1197  */
static	ANTLR3_BITWORD FOLLOW_continueStatement_in_statement1197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_continueStatement_in_statement1197	= { FOLLOW_continueStatement_in_statement1197_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_statement1202  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_statement1202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_statement1202	= { FOLLOW_breakStatement_in_statement1202_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement1207  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement1207_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement1207	= { FOLLOW_returnStatement_in_statement1207_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_withStatement_in_statement1212  */
static	ANTLR3_BITWORD FOLLOW_withStatement_in_statement1212_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_withStatement_in_statement1212	= { FOLLOW_withStatement_in_statement1212_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throwStatement_in_statement1217  */
static	ANTLR3_BITWORD FOLLOW_throwStatement_in_statement1217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throwStatement_in_statement1217	= { FOLLOW_throwStatement_in_statement1217_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tryStatement_in_statement1222  */
static	ANTLR3_BITWORD FOLLOW_tryStatement_in_statement1222_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tryStatement_in_statement1222	= { FOLLOW_tryStatement_in_statement1222_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_statementBlock1241  */
static	ANTLR3_BITWORD FOLLOW_141_in_statementBlock1241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_statementBlock1241	= { FOLLOW_141_in_statementBlock1241_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1243  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1243	= { FOLLOW_LTERM_in_statementBlock1243_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_statementBlock1246  */
static	ANTLR3_BITWORD FOLLOW_142_in_statementBlock1246_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_statementBlock1246	= { FOLLOW_142_in_statementBlock1246_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_statementBlock1259  */
static	ANTLR3_BITWORD FOLLOW_141_in_statementBlock1259_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_statementBlock1259	= { FOLLOW_141_in_statementBlock1259_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1261  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1261	= { FOLLOW_LTERM_in_statementBlock1261_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_statementBlock1265  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_statementBlock1265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_statementBlock1265	= { FOLLOW_statementList_in_statementBlock1265_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock1270  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock1270_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock1270	= { FOLLOW_LTERM_in_statementBlock1270_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_statementBlock1273  */
static	ANTLR3_BITWORD FOLLOW_142_in_statementBlock1273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_statementBlock1273	= { FOLLOW_142_in_statementBlock1273_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_noOpStatement1293  */
static	ANTLR3_BITWORD FOLLOW_143_in_noOpStatement1293_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_noOpStatement1293	= { FOLLOW_143_in_noOpStatement1293_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementList1335  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementList1335_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementList1335	= { FOLLOW_LTERM_in_statementList1335_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList1338  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList1338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList1338	= { FOLLOW_statement_in_statementList1338_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_variableStatement1361  */
static	ANTLR3_BITWORD FOLLOW_144_in_variableStatement1361_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_variableStatement1361	= { FOLLOW_144_in_variableStatement1361_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1363  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1363	= { FOLLOW_LTERM_in_variableStatement1363_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationList_in_variableStatement1366  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationList_in_variableStatement1366_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationList_in_variableStatement1366	= { FOLLOW_variableDeclarationList_in_variableStatement1366_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1369  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1369_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1369	= { FOLLOW_LTERM_in_variableStatement1369_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_variableStatement1373  */
static	ANTLR3_BITWORD FOLLOW_143_in_variableStatement1373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_variableStatement1373	= { FOLLOW_143_in_variableStatement1373_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1395  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1395_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1395	= { FOLLOW_variableDeclaration_in_variableDeclarationList1395_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1398  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1398	= { FOLLOW_LTERM_in_variableDeclarationList1398_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_variableDeclarationList1401  */
static	ANTLR3_BITWORD FOLLOW_140_in_variableDeclarationList1401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_variableDeclarationList1401	= { FOLLOW_140_in_variableDeclarationList1401_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1403  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1403_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1403	= { FOLLOW_LTERM_in_variableDeclarationList1403_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1406  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1406	= { FOLLOW_variableDeclaration_in_variableDeclarationList1406_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1425  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1425_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1425	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1425_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1428  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1428	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1428_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_variableDeclarationListNoIn1431  */
static	ANTLR3_BITWORD FOLLOW_140_in_variableDeclarationListNoIn1431_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_variableDeclarationListNoIn1431	= { FOLLOW_140_in_variableDeclarationListNoIn1431_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1433  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1433_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1433	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1433_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1436  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1436	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1436_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclaration1455  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclaration1455_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclaration1455	= { FOLLOW_Identifier_in_variableDeclaration1455_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclaration1457  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclaration1457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclaration1457	= { FOLLOW_LTERM_in_variableDeclaration1457_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiser_in_variableDeclaration1460  */
static	ANTLR3_BITWORD FOLLOW_initialiser_in_variableDeclaration1460_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiser_in_variableDeclaration1460	= { FOLLOW_initialiser_in_variableDeclaration1460_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclarationNoIn1484  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclarationNoIn1484_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclarationNoIn1484	= { FOLLOW_Identifier_in_variableDeclarationNoIn1484_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationNoIn1486  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationNoIn1486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationNoIn1486	= { FOLLOW_LTERM_in_variableDeclarationNoIn1486_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1489  */
static	ANTLR3_BITWORD FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1489_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1489	= { FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1489_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_initialiser1514  */
static	ANTLR3_BITWORD FOLLOW_145_in_initialiser1514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_initialiser1514	= { FOLLOW_145_in_initialiser1514_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiser1516  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiser1516_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiser1516	= { FOLLOW_LTERM_in_initialiser1516_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_initialiser1519  */
static	ANTLR3_BITWORD FOLLOW_expression_in_initialiser1519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_initialiser1519	= { FOLLOW_expression_in_initialiser1519_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_initialiserNoIn1536  */
static	ANTLR3_BITWORD FOLLOW_145_in_initialiserNoIn1536_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_initialiserNoIn1536	= { FOLLOW_145_in_initialiserNoIn1536_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiserNoIn1538  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiserNoIn1538_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiserNoIn1538	= { FOLLOW_LTERM_in_initialiserNoIn1538_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_initialiserNoIn1541  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_initialiserNoIn1541_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_initialiserNoIn1541	= { FOLLOW_expressionNoIn_in_initialiserNoIn1541_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_emptyStatement1564  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_emptyStatement1564_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_emptyStatement1564	= { FOLLOW_LTERM_in_emptyStatement1564_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_emptyStatement1567  */
static	ANTLR3_BITWORD FOLLOW_143_in_emptyStatement1567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_emptyStatement1567	= { FOLLOW_143_in_emptyStatement1567_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionStatement1579  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionStatement1579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionStatement1579	= { FOLLOW_expression_in_expressionStatement1579_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionStatement1582  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionStatement1582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionStatement1582	= { FOLLOW_LTERM_in_expressionStatement1582_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_expressionStatement1586  */
static	ANTLR3_BITWORD FOLLOW_143_in_expressionStatement1586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_expressionStatement1586	= { FOLLOW_143_in_expressionStatement1586_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_ifStatement1606  */
static	ANTLR3_BITWORD FOLLOW_146_in_ifStatement1606_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_ifStatement1606	= { FOLLOW_146_in_ifStatement1606_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1608  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1608_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1608	= { FOLLOW_LTERM_in_ifStatement1608_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_ifStatement1611  */
static	ANTLR3_BITWORD FOLLOW_138_in_ifStatement1611_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_ifStatement1611	= { FOLLOW_138_in_ifStatement1611_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1613  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1613	= { FOLLOW_LTERM_in_ifStatement1613_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1616  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1616	= { FOLLOW_expression_in_ifStatement1616_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1618  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1618_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1618	= { FOLLOW_LTERM_in_ifStatement1618_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_ifStatement1621  */
static	ANTLR3_BITWORD FOLLOW_139_in_ifStatement1621_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_ifStatement1621	= { FOLLOW_139_in_ifStatement1621_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1623  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1623_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1623	= { FOLLOW_LTERM_in_ifStatement1623_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1628  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1628	= { FOLLOW_statement_in_ifStatement1628_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1631  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1631_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1631	= { FOLLOW_LTERM_in_ifStatement1631_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_ifStatement1634  */
static	ANTLR3_BITWORD FOLLOW_147_in_ifStatement1634_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_ifStatement1634	= { FOLLOW_147_in_ifStatement1634_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1636  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1636	= { FOLLOW_LTERM_in_ifStatement1636_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1641  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1641	= { FOLLOW_statement_in_ifStatement1641_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_doWhileStatement_in_iterationStatement1673  */
static	ANTLR3_BITWORD FOLLOW_doWhileStatement_in_iterationStatement1673_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_doWhileStatement_in_iterationStatement1673	= { FOLLOW_doWhileStatement_in_iterationStatement1673_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_iterationStatement1678  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_iterationStatement1678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_iterationStatement1678	= { FOLLOW_whileStatement_in_iterationStatement1678_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_iterationStatement1683  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_iterationStatement1683_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_iterationStatement1683	= { FOLLOW_forStatement_in_iterationStatement1683_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatement_in_iterationStatement1688  */
static	ANTLR3_BITWORD FOLLOW_forInStatement_in_iterationStatement1688_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatement_in_iterationStatement1688	= { FOLLOW_forInStatement_in_iterationStatement1688_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_148_in_doWhileStatement1700  */
static	ANTLR3_BITWORD FOLLOW_148_in_doWhileStatement1700_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_148_in_doWhileStatement1700	= { FOLLOW_148_in_doWhileStatement1700_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1702  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1702_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1702	= { FOLLOW_LTERM_in_doWhileStatement1702_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_doWhileStatement1705  */
static	ANTLR3_BITWORD FOLLOW_statement_in_doWhileStatement1705_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_doWhileStatement1705	= { FOLLOW_statement_in_doWhileStatement1705_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1707  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1707_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1707	= { FOLLOW_LTERM_in_doWhileStatement1707_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_doWhileStatement1710  */
static	ANTLR3_BITWORD FOLLOW_149_in_doWhileStatement1710_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_doWhileStatement1710	= { FOLLOW_149_in_doWhileStatement1710_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1712  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1712_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1712	= { FOLLOW_LTERM_in_doWhileStatement1712_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_doWhileStatement1715  */
static	ANTLR3_BITWORD FOLLOW_138_in_doWhileStatement1715_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001C00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_doWhileStatement1715	= { FOLLOW_138_in_doWhileStatement1715_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_doWhileStatement1717  */
static	ANTLR3_BITWORD FOLLOW_expression_in_doWhileStatement1717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_doWhileStatement1717	= { FOLLOW_expression_in_doWhileStatement1717_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_doWhileStatement1719  */
static	ANTLR3_BITWORD FOLLOW_139_in_doWhileStatement1719_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_doWhileStatement1719	= { FOLLOW_139_in_doWhileStatement1719_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1722  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1722	= { FOLLOW_LTERM_in_doWhileStatement1722_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_doWhileStatement1726  */
static	ANTLR3_BITWORD FOLLOW_143_in_doWhileStatement1726_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_doWhileStatement1726	= { FOLLOW_143_in_doWhileStatement1726_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_whileStatement1752  */
static	ANTLR3_BITWORD FOLLOW_149_in_whileStatement1752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_whileStatement1752	= { FOLLOW_149_in_whileStatement1752_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1754  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1754_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1754	= { FOLLOW_LTERM_in_whileStatement1754_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_whileStatement1757  */
static	ANTLR3_BITWORD FOLLOW_138_in_whileStatement1757_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_whileStatement1757	= { FOLLOW_138_in_whileStatement1757_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1759  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1759_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1759	= { FOLLOW_LTERM_in_whileStatement1759_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1762  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1762_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1762	= { FOLLOW_expression_in_whileStatement1762_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1764  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1764_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1764	= { FOLLOW_LTERM_in_whileStatement1764_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_whileStatement1767  */
static	ANTLR3_BITWORD FOLLOW_139_in_whileStatement1767_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_whileStatement1767	= { FOLLOW_139_in_whileStatement1767_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1769  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1769	= { FOLLOW_LTERM_in_whileStatement1769_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1772  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1772_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1772	= { FOLLOW_statement_in_whileStatement1772_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_150_in_forStatement1795  */
static	ANTLR3_BITWORD FOLLOW_150_in_forStatement1795_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_150_in_forStatement1795	= { FOLLOW_150_in_forStatement1795_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1797  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1797_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1797	= { FOLLOW_LTERM_in_forStatement1797_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_forStatement1800  */
static	ANTLR3_BITWORD FOLLOW_138_in_forStatement1800_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000300001A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_forStatement1800	= { FOLLOW_138_in_forStatement1800_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1803  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1803_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000012600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1803	= { FOLLOW_LTERM_in_forStatement1803_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatementInitialiserPart_in_forStatement1808  */
static	ANTLR3_BITWORD FOLLOW_forStatementInitialiserPart_in_forStatement1808_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatementInitialiserPart_in_forStatement1808	= { FOLLOW_forStatementInitialiserPart_in_forStatement1808_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1812  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1812_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1812	= { FOLLOW_LTERM_in_forStatement1812_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_forStatement1815  */
static	ANTLR3_BITWORD FOLLOW_143_in_forStatement1815_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000300000A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_forStatement1815	= { FOLLOW_143_in_forStatement1815_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1818  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1818_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1818	= { FOLLOW_LTERM_in_forStatement1818_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1823  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1823	= { FOLLOW_expression_in_forStatement1823_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1827  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1827_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1827	= { FOLLOW_LTERM_in_forStatement1827_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_forStatement1830  */
static	ANTLR3_BITWORD FOLLOW_143_in_forStatement1830_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002E00), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_forStatement1830	= { FOLLOW_143_in_forStatement1830_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1833  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1833_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1833	= { FOLLOW_LTERM_in_forStatement1833_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1838  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1838_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1838	= { FOLLOW_expression_in_forStatement1838_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1842  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1842	= { FOLLOW_LTERM_in_forStatement1842_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_forStatement1845  */
static	ANTLR3_BITWORD FOLLOW_139_in_forStatement1845_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_forStatement1845	= { FOLLOW_139_in_forStatement1845_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1847  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1847	= { FOLLOW_LTERM_in_forStatement1847_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forStatement1850  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forStatement1850_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forStatement1850	= { FOLLOW_statement_in_forStatement1850_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_forStatementInitialiserPart1899  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_forStatementInitialiserPart1899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_forStatementInitialiserPart1899	= { FOLLOW_expressionNoIn_in_forStatementInitialiserPart1899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_forStatementInitialiserPart1904  */
static	ANTLR3_BITWORD FOLLOW_144_in_forStatementInitialiserPart1904_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_forStatementInitialiserPart1904	= { FOLLOW_144_in_forStatementInitialiserPart1904_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatementInitialiserPart1906  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatementInitialiserPart1906_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatementInitialiserPart1906	= { FOLLOW_LTERM_in_forStatementInitialiserPart1906_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1909  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1909_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1909	= { FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1909_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_150_in_forInStatement1929  */
static	ANTLR3_BITWORD FOLLOW_150_in_forInStatement1929_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_150_in_forInStatement1929	= { FOLLOW_150_in_forInStatement1929_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1931  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1931_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1931	= { FOLLOW_LTERM_in_forInStatement1931_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_forInStatement1934  */
static	ANTLR3_BITWORD FOLLOW_138_in_forInStatement1934_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000012600), ANTLR3_UINT64_LIT(0x000000000007C000) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_forInStatement1934	= { FOLLOW_138_in_forInStatement1934_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1936  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1936_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000012600), ANTLR3_UINT64_LIT(0x000000000007C000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1936	= { FOLLOW_LTERM_in_forInStatement1936_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatementInitialiserPart_in_forInStatement1939  */
static	ANTLR3_BITWORD FOLLOW_forInStatementInitialiserPart_in_forInStatement1939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatementInitialiserPart_in_forInStatement1939	= { FOLLOW_forInStatementInitialiserPart_in_forInStatement1939_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1941  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1941_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1941	= { FOLLOW_LTERM_in_forInStatement1941_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_forInStatement1944  */
static	ANTLR3_BITWORD FOLLOW_151_in_forInStatement1944_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_forInStatement1944	= { FOLLOW_151_in_forInStatement1944_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1946  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1946_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1946	= { FOLLOW_LTERM_in_forInStatement1946_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forInStatement1949  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forInStatement1949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forInStatement1949	= { FOLLOW_expression_in_forInStatement1949_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1951  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1951_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1951	= { FOLLOW_LTERM_in_forInStatement1951_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_forInStatement1954  */
static	ANTLR3_BITWORD FOLLOW_139_in_forInStatement1954_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_forInStatement1954	= { FOLLOW_139_in_forInStatement1954_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1956  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1956_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1956	= { FOLLOW_LTERM_in_forInStatement1956_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forInStatement1959  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forInStatement1959_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forInStatement1959	= { FOLLOW_statement_in_forInStatement1959_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1983  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1983_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1983	= { FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1983_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_forInStatementInitialiserPart1992  */
static	ANTLR3_BITWORD FOLLOW_144_in_forInStatementInitialiserPart1992_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_forInStatementInitialiserPart1992	= { FOLLOW_144_in_forInStatementInitialiserPart1992_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatementInitialiserPart1994  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatementInitialiserPart1994_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatementInitialiserPart1994	= { FOLLOW_LTERM_in_forInStatementInitialiserPart1994_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1997  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1997_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1997	= { FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1997_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_continueStatement2016  */
static	ANTLR3_BITWORD FOLLOW_152_in_continueStatement2016_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_continueStatement2016	= { FOLLOW_152_in_continueStatement2016_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_continueStatement2018  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_continueStatement2018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_continueStatement2018	= { FOLLOW_Identifier_in_continueStatement2018_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_continueStatement2022  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_continueStatement2022_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_continueStatement2022	= { FOLLOW_LTERM_in_continueStatement2022_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_continueStatement2026  */
static	ANTLR3_BITWORD FOLLOW_143_in_continueStatement2026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_continueStatement2026	= { FOLLOW_143_in_continueStatement2026_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_153_in_breakStatement2048  */
static	ANTLR3_BITWORD FOLLOW_153_in_breakStatement2048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_153_in_breakStatement2048	= { FOLLOW_153_in_breakStatement2048_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_breakStatement2050  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_breakStatement2050_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_breakStatement2050	= { FOLLOW_Identifier_in_breakStatement2050_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_breakStatement2054  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_breakStatement2054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_breakStatement2054	= { FOLLOW_LTERM_in_breakStatement2054_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_breakStatement2058  */
static	ANTLR3_BITWORD FOLLOW_143_in_breakStatement2058_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_breakStatement2058	= { FOLLOW_143_in_breakStatement2058_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_154_in_returnStatement2079  */
static	ANTLR3_BITWORD FOLLOW_154_in_returnStatement2079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000300000A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_154_in_returnStatement2079	= { FOLLOW_154_in_returnStatement2079_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement2081  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement2081_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement2081	= { FOLLOW_expression_in_returnStatement2081_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_returnStatement2085  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_returnStatement2085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_returnStatement2085	= { FOLLOW_LTERM_in_returnStatement2085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_returnStatement2089  */
static	ANTLR3_BITWORD FOLLOW_143_in_returnStatement2089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_returnStatement2089	= { FOLLOW_143_in_returnStatement2089_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_withStatement2111  */
static	ANTLR3_BITWORD FOLLOW_155_in_withStatement2111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_withStatement2111	= { FOLLOW_155_in_withStatement2111_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2113  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2113_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2113	= { FOLLOW_LTERM_in_withStatement2113_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_withStatement2116  */
static	ANTLR3_BITWORD FOLLOW_138_in_withStatement2116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_withStatement2116	= { FOLLOW_138_in_withStatement2116_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2118  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2118_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2118	= { FOLLOW_LTERM_in_withStatement2118_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_withStatement2121  */
static	ANTLR3_BITWORD FOLLOW_expression_in_withStatement2121_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_withStatement2121	= { FOLLOW_expression_in_withStatement2121_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2123  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2123_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2123	= { FOLLOW_LTERM_in_withStatement2123_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_withStatement2126  */
static	ANTLR3_BITWORD FOLLOW_139_in_withStatement2126_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_withStatement2126	= { FOLLOW_139_in_withStatement2126_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement2128  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement2128_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement2128	= { FOLLOW_LTERM_in_withStatement2128_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_withStatement2131  */
static	ANTLR3_BITWORD FOLLOW_statement_in_withStatement2131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_withStatement2131	= { FOLLOW_statement_in_withStatement2131_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_switchStatement2154  */
static	ANTLR3_BITWORD FOLLOW_156_in_switchStatement2154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_switchStatement2154	= { FOLLOW_156_in_switchStatement2154_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2156  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2156_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2156	= { FOLLOW_LTERM_in_switchStatement2156_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_switchStatement2159  */
static	ANTLR3_BITWORD FOLLOW_138_in_switchStatement2159_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_switchStatement2159	= { FOLLOW_138_in_switchStatement2159_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2161  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2161_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2161	= { FOLLOW_LTERM_in_switchStatement2161_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_switchStatement2164  */
static	ANTLR3_BITWORD FOLLOW_expression_in_switchStatement2164_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_switchStatement2164	= { FOLLOW_expression_in_switchStatement2164_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2166  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2166_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2166	= { FOLLOW_LTERM_in_switchStatement2166_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_switchStatement2169  */
static	ANTLR3_BITWORD FOLLOW_139_in_switchStatement2169_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_switchStatement2169	= { FOLLOW_139_in_switchStatement2169_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement2171  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement2171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement2171	= { FOLLOW_LTERM_in_switchStatement2171_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseBlock_in_switchStatement2174  */
static	ANTLR3_BITWORD FOLLOW_caseBlock_in_switchStatement2174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseBlock_in_switchStatement2174	= { FOLLOW_caseBlock_in_switchStatement2174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_caseBlock2205  */
static	ANTLR3_BITWORD FOLLOW_141_in_caseBlock2205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000020004000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_caseBlock2205	= { FOLLOW_141_in_caseBlock2205_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2207  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2207_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000020004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2207	= { FOLLOW_LTERM_in_caseBlock2207_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock2212  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock2212_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock2212	= { FOLLOW_caseClause_in_caseBlock2212_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2215  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2215	= { FOLLOW_LTERM_in_caseBlock2215_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_caseBlock2218  */
static	ANTLR3_BITWORD FOLLOW_142_in_caseBlock2218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_caseBlock2218	= { FOLLOW_142_in_caseBlock2218_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_caseBlock2241  */
static	ANTLR3_BITWORD FOLLOW_141_in_caseBlock2241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_caseBlock2241	= { FOLLOW_141_in_caseBlock2241_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2243  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2243	= { FOLLOW_LTERM_in_caseBlock2243_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseBlock2248  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseBlock2248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseBlock2248	= { FOLLOW_defaultClause_in_caseBlock2248_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock2250  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock2250_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock2250	= { FOLLOW_LTERM_in_caseBlock2250_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_caseBlock2253  */
static	ANTLR3_BITWORD FOLLOW_142_in_caseBlock2253_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_caseBlock2253	= { FOLLOW_142_in_caseBlock2253_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_caseClause2297  */
static	ANTLR3_BITWORD FOLLOW_157_in_caseClause2297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_caseClause2297	= { FOLLOW_157_in_caseClause2297_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2299  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2299_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2299	= { FOLLOW_LTERM_in_caseClause2299_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_caseClause2304  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_caseClause2304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_caseClause2304	= { FOLLOW_ternaryExpression_in_caseClause2304_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2306  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2306_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2306	= { FOLLOW_LTERM_in_caseClause2306_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_caseClause2309  */
static	ANTLR3_BITWORD FOLLOW_158_in_caseClause2309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000339F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_caseClause2309	= { FOLLOW_158_in_caseClause2309_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2311  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000339F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2311	= { FOLLOW_LTERM_in_caseClause2311_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2314  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2314_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2314	= { FOLLOW_statementList_in_caseClause2314_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2317  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2317	= { FOLLOW_LTERM_in_caseClause2317_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseClause2320  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseClause2320_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseClause2320	= { FOLLOW_defaultClause_in_caseClause2320_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_caseClause2347  */
static	ANTLR3_BITWORD FOLLOW_157_in_caseClause2347_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_caseClause2347	= { FOLLOW_157_in_caseClause2347_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2349  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2349	= { FOLLOW_LTERM_in_caseClause2349_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_caseClause2354  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_caseClause2354_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_caseClause2354	= { FOLLOW_ternaryExpression_in_caseClause2354_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2356  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2356_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2356	= { FOLLOW_LTERM_in_caseClause2356_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_caseClause2359  */
static	ANTLR3_BITWORD FOLLOW_158_in_caseClause2359_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000333F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_caseClause2359	= { FOLLOW_158_in_caseClause2359_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2361  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2361_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000333F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2361	= { FOLLOW_LTERM_in_caseClause2361_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause2364  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause2364_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause2364	= { FOLLOW_statementList_in_caseClause2364_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause2367  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause2367_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause2367	= { FOLLOW_LTERM_in_caseClause2367_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseClause2370  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseClause2370_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseClause2370	= { FOLLOW_caseClause_in_caseClause2370_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_defaultClause2399  */
static	ANTLR3_BITWORD FOLLOW_159_in_defaultClause2399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_defaultClause2399	= { FOLLOW_159_in_defaultClause2399_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2401  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2401_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2401	= { FOLLOW_LTERM_in_defaultClause2401_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_defaultClause2404  */
static	ANTLR3_BITWORD FOLLOW_158_in_defaultClause2404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000333F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_defaultClause2404	= { FOLLOW_158_in_defaultClause2404_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2406  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000333F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2406	= { FOLLOW_LTERM_in_defaultClause2406_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_defaultClause2409  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_defaultClause2409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_defaultClause2409	= { FOLLOW_statementList_in_defaultClause2409_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause2412  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause2412_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause2412	= { FOLLOW_LTERM_in_defaultClause2412_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClauseSeenDefault_in_defaultClause2415  */
static	ANTLR3_BITWORD FOLLOW_caseClauseSeenDefault_in_defaultClause2415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClauseSeenDefault_in_defaultClause2415	= { FOLLOW_caseClauseSeenDefault_in_defaultClause2415_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_caseClauseSeenDefault2455  */
static	ANTLR3_BITWORD FOLLOW_157_in_caseClauseSeenDefault2455_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_caseClauseSeenDefault2455	= { FOLLOW_157_in_caseClauseSeenDefault2455_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClauseSeenDefault2457  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClauseSeenDefault2457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClauseSeenDefault2457	= { FOLLOW_LTERM_in_caseClauseSeenDefault2457_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_caseClauseSeenDefault2462  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_caseClauseSeenDefault2462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_caseClauseSeenDefault2462	= { FOLLOW_ternaryExpression_in_caseClauseSeenDefault2462_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClauseSeenDefault2464  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClauseSeenDefault2464_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClauseSeenDefault2464	= { FOLLOW_LTERM_in_caseClauseSeenDefault2464_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_caseClauseSeenDefault2467  */
static	ANTLR3_BITWORD FOLLOW_158_in_caseClauseSeenDefault2467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000333F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_caseClauseSeenDefault2467	= { FOLLOW_158_in_caseClauseSeenDefault2467_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClauseSeenDefault2469  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClauseSeenDefault2469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000333F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClauseSeenDefault2469	= { FOLLOW_LTERM_in_caseClauseSeenDefault2469_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClauseSeenDefault2472  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClauseSeenDefault2472_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClauseSeenDefault2472	= { FOLLOW_statementList_in_caseClauseSeenDefault2472_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClauseSeenDefault2475  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClauseSeenDefault2475_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClauseSeenDefault2475	= { FOLLOW_LTERM_in_caseClauseSeenDefault2475_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault2478  */
static	ANTLR3_BITWORD FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault2478_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault2478	= { FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault2478_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_throwStatement2540  */
static	ANTLR3_BITWORD FOLLOW_160_in_throwStatement2540_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001C00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_throwStatement2540	= { FOLLOW_160_in_throwStatement2540_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_throwStatement2542  */
static	ANTLR3_BITWORD FOLLOW_expression_in_throwStatement2542_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_throwStatement2542	= { FOLLOW_expression_in_throwStatement2542_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_throwStatement2545  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_throwStatement2545_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_throwStatement2545	= { FOLLOW_LTERM_in_throwStatement2545_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_throwStatement2549  */
static	ANTLR3_BITWORD FOLLOW_143_in_throwStatement2549_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_throwStatement2549	= { FOLLOW_143_in_throwStatement2549_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_161_in_tryStatement2577  */
static	ANTLR3_BITWORD FOLLOW_161_in_tryStatement2577_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_161_in_tryStatement2577	= { FOLLOW_161_in_tryStatement2577_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2579  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2579	= { FOLLOW_LTERM_in_tryStatement2579_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_tryStatement2582  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_tryStatement2582_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_tryStatement2582	= { FOLLOW_statementBlock_in_tryStatement2582_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2584  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2584_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2584	= { FOLLOW_LTERM_in_tryStatement2584_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchFinallyBlock_in_tryStatement2587  */
static	ANTLR3_BITWORD FOLLOW_catchFinallyBlock_in_tryStatement2587_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_catchFinallyBlock_in_tryStatement2587	= { FOLLOW_catchFinallyBlock_in_tryStatement2587_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchBlock_in_catchFinallyBlock2622  */
static	ANTLR3_BITWORD FOLLOW_catchBlock_in_catchFinallyBlock2622_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_catchBlock_in_catchFinallyBlock2622	= { FOLLOW_catchBlock_in_catchFinallyBlock2622_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchFinallyBlock2624  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchFinallyBlock2624_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000C00000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchFinallyBlock2624	= { FOLLOW_LTERM_in_catchFinallyBlock2624_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock2627  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock2627_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock2627	= { FOLLOW_finallyBlock_in_catchFinallyBlock2627_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyBlock_in_catchFinallyBlock2648  */
static	ANTLR3_BITWORD FOLLOW_finallyBlock_in_catchFinallyBlock2648_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyBlock_in_catchFinallyBlock2648	= { FOLLOW_finallyBlock_in_catchFinallyBlock2648_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_catchBlock2697  */
static	ANTLR3_BITWORD FOLLOW_162_in_catchBlock2697_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_catchBlock2697	= { FOLLOW_162_in_catchBlock2697_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2699  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2699	= { FOLLOW_LTERM_in_catchBlock2699_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_catchBlock2702  */
static	ANTLR3_BITWORD FOLLOW_138_in_catchBlock2702_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_catchBlock2702	= { FOLLOW_138_in_catchBlock2702_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2704  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2704_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2704	= { FOLLOW_LTERM_in_catchBlock2704_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchBlock2707  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchBlock2707_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchBlock2707	= { FOLLOW_Identifier_in_catchBlock2707_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2709  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2709	= { FOLLOW_LTERM_in_catchBlock2709_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_catchBlock2712  */
static	ANTLR3_BITWORD FOLLOW_139_in_catchBlock2712_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_catchBlock2712	= { FOLLOW_139_in_catchBlock2712_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchBlock2714  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchBlock2714_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchBlock2714	= { FOLLOW_LTERM_in_catchBlock2714_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchBlock2717  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchBlock2717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchBlock2717	= { FOLLOW_statementBlock_in_catchBlock2717_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_163_in_finallyBlock2753  */
static	ANTLR3_BITWORD FOLLOW_163_in_finallyBlock2753_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_163_in_finallyBlock2753	= { FOLLOW_163_in_finallyBlock2753_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_finallyBlock2755  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_finallyBlock2755_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_finallyBlock2755	= { FOLLOW_LTERM_in_finallyBlock2755_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyBlock2759  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyBlock2759_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyBlock2759	= { FOLLOW_statementBlock_in_finallyBlock2759_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_memAndCallExpression2803  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_memAndCallExpression2803_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_memAndCallExpression2803	= { FOLLOW_callExpression_in_memAndCallExpression2803_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memAndCallExpression2819  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memAndCallExpression2819_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memAndCallExpression2819	= { FOLLOW_memberExpression_in_memAndCallExpression2819_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression2859  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression2859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression2859	= { FOLLOW_assignmentExpression_in_expression2859_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2893  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2893_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2893	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2893_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpression2927  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpression2927_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpression2927	= { FOLLOW_conditionalExpression_in_assignmentExpression2927_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression2939  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression2939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000FF0000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression2939	= { FOLLOW_leftHandSideExpression_in_assignmentExpression2939_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2941  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2941_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000FF0000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2941	= { FOLLOW_LTERM_in_assignmentExpression2941_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpression2944  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpression2944_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpression2944	= { FOLLOW_assignmentOperator_in_assignmentExpression2944_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2946  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2946_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2946	= { FOLLOW_LTERM_in_assignmentExpression2946_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpression2949  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpression2949_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpression2949	= { FOLLOW_assignmentExpression_in_assignmentExpression2949_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2994  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2994_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2994	= { FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2994_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3006  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3006_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000FF0000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3006	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3006_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn3008  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn3008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000FF0000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn3008	= { FOLLOW_LTERM_in_assignmentExpressionNoIn3008_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3011  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3011_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3011	= { FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3011_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn3013  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn3013_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn3013	= { FOLLOW_LTERM_in_assignmentExpressionNoIn3013_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3016  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3016_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3016	= { FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3016_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_leftHandSideExpression3064  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_leftHandSideExpression3064_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_leftHandSideExpression3064	= { FOLLOW_callExpression_in_leftHandSideExpression3064_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_leftHandSideExpression3073  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_leftHandSideExpression3073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_leftHandSideExpression3073	= { FOLLOW_newExpression_in_leftHandSideExpression3073_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_newExpression3089  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_newExpression3089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_newExpression3089	= { FOLLOW_memberExpression_in_newExpression3089_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_164_in_newExpression3098  */
static	ANTLR3_BITWORD FOLLOW_164_in_newExpression3098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007C000) };
static  ANTLR3_BITSET_LIST FOLLOW_164_in_newExpression3098	= { FOLLOW_164_in_newExpression3098_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_newExpression3100  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_newExpression3100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007C000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_newExpression3100	= { FOLLOW_LTERM_in_newExpression3100_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_newExpression3103  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_newExpression3103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_newExpression3103	= { FOLLOW_newExpression_in_newExpression3103_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_indexSuffix13125  */
static	ANTLR3_BITWORD FOLLOW_165_in_indexSuffix13125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_indexSuffix13125	= { FOLLOW_165_in_indexSuffix13125_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix13127  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix13127_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix13127	= { FOLLOW_LTERM_in_indexSuffix13127_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix13130  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix13130_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix13130	= { FOLLOW_expression_in_indexSuffix13130_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix13132  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix13132_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix13132	= { FOLLOW_LTERM_in_indexSuffix13132_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_indexSuffix13135  */
static	ANTLR3_BITWORD FOLLOW_166_in_indexSuffix13135_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_indexSuffix13135	= { FOLLOW_166_in_indexSuffix13135_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_propertyReferenceSuffix13152  */
static	ANTLR3_BITWORD FOLLOW_167_in_propertyReferenceSuffix13152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_propertyReferenceSuffix13152	= { FOLLOW_167_in_propertyReferenceSuffix13152_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix13154  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix13154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix13154	= { FOLLOW_LTERM_in_propertyReferenceSuffix13154_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix13157  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix13157_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix13157	= { FOLLOW_Identifier_in_propertyReferenceSuffix13157_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primaryExpression_in_memberExpression3174  */
static	ANTLR3_BITWORD FOLLOW_primaryExpression_in_memberExpression3174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_primaryExpression_in_memberExpression3174	= { FOLLOW_primaryExpression_in_memberExpression3174_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3183  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3183_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3183	= { FOLLOW_LTERM_in_memberExpression3183_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3186  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3186	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3186_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3203  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3203	= { FOLLOW_LTERM_in_memberExpression3203_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3206  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3206_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3206	= { FOLLOW_indexSuffix1_in_memberExpression3206_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionExpression_in_memberExpression3225  */
static	ANTLR3_BITWORD FOLLOW_functionExpression_in_memberExpression3225_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_functionExpression_in_memberExpression3225	= { FOLLOW_functionExpression_in_memberExpression3225_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3233  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3233_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3233	= { FOLLOW_LTERM_in_memberExpression3233_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3236  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3236	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3236_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3252  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3252	= { FOLLOW_LTERM_in_memberExpression3252_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3255  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3255	= { FOLLOW_indexSuffix1_in_memberExpression3255_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_164_in_memberExpression3274  */
static	ANTLR3_BITWORD FOLLOW_164_in_memberExpression3274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007C000) };
static  ANTLR3_BITSET_LIST FOLLOW_164_in_memberExpression3274	= { FOLLOW_164_in_memberExpression3274_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3276  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3276_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007C000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3276	= { FOLLOW_LTERM_in_memberExpression3276_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression3281  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression3281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression3281	= { FOLLOW_memberExpression_in_memberExpression3281_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3283  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3283	= { FOLLOW_LTERM_in_memberExpression3283_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_memberExpression3286  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_memberExpression3286_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_memberExpression3286	= { FOLLOW_arguments_in_memberExpression3286_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3301  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3301	= { FOLLOW_LTERM_in_memberExpression3301_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression3304  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression3304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression3304	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression3304_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression3317  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression3317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression3317	= { FOLLOW_LTERM_in_memberExpression3317_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression3320  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression3320_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression3320	= { FOLLOW_indexSuffix1_in_memberExpression3320_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_memberExpressionSuffix3357  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_memberExpressionSuffix3357_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_memberExpressionSuffix3357	= { FOLLOW_indexSuffix_in_memberExpressionSuffix3357_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3367  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3367_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3367	= { FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3367_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_callExpression3387  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_callExpression3387_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_callExpression3387	= { FOLLOW_memberExpression_in_callExpression3387_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3389  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3389_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3389	= { FOLLOW_LTERM_in_callExpression3389_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3392  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3392_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3392	= { FOLLOW_arguments_in_callExpression3392_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3406  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3406	= { FOLLOW_LTERM_in_callExpression3406_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression3409  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression3409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression3409	= { FOLLOW_arguments_in_callExpression3409_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3424  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3424_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3424	= { FOLLOW_LTERM_in_callExpression3424_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_callExpression3427  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_callExpression3427_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_callExpression3427	= { FOLLOW_indexSuffix1_in_callExpression3427_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression3442  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression3442_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression3442	= { FOLLOW_LTERM_in_callExpression3442_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_callExpression3445  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_callExpression3445_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_callExpression3445	= { FOLLOW_propertyReferenceSuffix1_in_callExpression3445_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpressionSuffix3472  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpressionSuffix3472_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpressionSuffix3472	= { FOLLOW_arguments_in_callExpressionSuffix3472_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_callExpressionSuffix3481  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_callExpressionSuffix3481_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_callExpressionSuffix3481	= { FOLLOW_indexSuffix_in_callExpressionSuffix3481_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3490  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3490	= { FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3490_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_arguments3512  */
static	ANTLR3_BITWORD FOLLOW_138_in_arguments3512_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002E00), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_arguments3512	= { FOLLOW_138_in_arguments3512_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3514  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002E00), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3514	= { FOLLOW_LTERM_in_arguments3514_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arguments3518  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arguments3518_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arguments3518	= { FOLLOW_expression_in_arguments3518_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3522  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3522	= { FOLLOW_LTERM_in_arguments3522_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_arguments3525  */
static	ANTLR3_BITWORD FOLLOW_139_in_arguments3525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_arguments3525	= { FOLLOW_139_in_arguments3525_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_arguments3539  */
static	ANTLR3_BITWORD FOLLOW_138_in_arguments3539_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_arguments3539	= { FOLLOW_138_in_arguments3539_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3541  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3541_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3541	= { FOLLOW_LTERM_in_arguments3541_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arguments3544  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arguments3544_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000001800) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arguments3544	= { FOLLOW_expression_in_arguments3544_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_arguments3547  */
static	ANTLR3_BITWORD FOLLOW_140_in_arguments3547_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_arguments3547	= { FOLLOW_140_in_arguments3547_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3549  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3549_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3549	= { FOLLOW_LTERM_in_arguments3549_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arguments3552  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arguments3552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000001800) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arguments3552	= { FOLLOW_expression_in_arguments3552_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments3556  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments3556_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments3556	= { FOLLOW_LTERM_in_arguments3556_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_arguments3559  */
static	ANTLR3_BITWORD FOLLOW_139_in_arguments3559_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_arguments3559	= { FOLLOW_139_in_arguments3559_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_indexSuffix3593  */
static	ANTLR3_BITWORD FOLLOW_165_in_indexSuffix3593_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_indexSuffix3593	= { FOLLOW_165_in_indexSuffix3593_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3595  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3595_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3595	= { FOLLOW_LTERM_in_indexSuffix3595_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix3598  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix3598_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix3598	= { FOLLOW_expression_in_indexSuffix3598_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix3600  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix3600_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix3600	= { FOLLOW_LTERM_in_indexSuffix3600_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_indexSuffix3603  */
static	ANTLR3_BITWORD FOLLOW_166_in_indexSuffix3603_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_indexSuffix3603	= { FOLLOW_166_in_indexSuffix3603_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_propertyReferenceSuffix3624  */
static	ANTLR3_BITWORD FOLLOW_167_in_propertyReferenceSuffix3624_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_propertyReferenceSuffix3624	= { FOLLOW_167_in_propertyReferenceSuffix3624_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix3626  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix3626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix3626	= { FOLLOW_LTERM_in_propertyReferenceSuffix3626_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix3629  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix3629_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix3629	= { FOLLOW_Identifier_in_propertyReferenceSuffix3629_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_assignmentOperator3657  */
static	ANTLR3_BITWORD FOLLOW_145_in_assignmentOperator3657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_assignmentOperator3657	= { FOLLOW_145_in_assignmentOperator3657_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_assignmentOperator3666  */
static	ANTLR3_BITWORD FOLLOW_168_in_assignmentOperator3666_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_assignmentOperator3666	= { FOLLOW_168_in_assignmentOperator3666_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_assignmentOperator3675  */
static	ANTLR3_BITWORD FOLLOW_169_in_assignmentOperator3675_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_assignmentOperator3675	= { FOLLOW_169_in_assignmentOperator3675_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_170_in_assignmentOperator3685  */
static	ANTLR3_BITWORD FOLLOW_170_in_assignmentOperator3685_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_170_in_assignmentOperator3685	= { FOLLOW_170_in_assignmentOperator3685_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_171_in_assignmentOperator3694  */
static	ANTLR3_BITWORD FOLLOW_171_in_assignmentOperator3694_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_171_in_assignmentOperator3694	= { FOLLOW_171_in_assignmentOperator3694_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_172_in_assignmentOperator3703  */
static	ANTLR3_BITWORD FOLLOW_172_in_assignmentOperator3703_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_172_in_assignmentOperator3703	= { FOLLOW_172_in_assignmentOperator3703_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_173_in_assignmentOperator3713  */
static	ANTLR3_BITWORD FOLLOW_173_in_assignmentOperator3713_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_173_in_assignmentOperator3713	= { FOLLOW_173_in_assignmentOperator3713_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_174_in_assignmentOperator3721  */
static	ANTLR3_BITWORD FOLLOW_174_in_assignmentOperator3721_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_174_in_assignmentOperator3721	= { FOLLOW_174_in_assignmentOperator3721_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_assignmentOperator3730  */
static	ANTLR3_BITWORD FOLLOW_175_in_assignmentOperator3730_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_assignmentOperator3730	= { FOLLOW_175_in_assignmentOperator3730_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstruct_in_conditionalExpression3763  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstruct_in_conditionalExpression3763_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstruct_in_conditionalExpression3763	= { FOLLOW_msgRecvConstruct_in_conditionalExpression3763_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct3801  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct3801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct3801	= { FOLLOW_msgConstruct_in_msgRecvConstruct3801_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstruct3820  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstruct3820_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstruct3820	= { FOLLOW_LTERM_in_msgRecvConstruct3820_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_msgRecvConstruct3823  */
static	ANTLR3_BITWORD FOLLOW_176_in_msgRecvConstruct3823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_msgRecvConstruct3823	= { FOLLOW_176_in_msgRecvConstruct3823_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstruct3825  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstruct3825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstruct3825	= { FOLLOW_LTERM_in_msgRecvConstruct3825_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct3830  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct3830_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct3830	= { FOLLOW_msgConstruct_in_msgRecvConstruct3830_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_msgRecvConstruct3832  */
static	ANTLR3_BITWORD FOLLOW_176_in_msgRecvConstruct3832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001C00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_msgRecvConstruct3832	= { FOLLOW_176_in_msgRecvConstruct3832_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct3836  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct3836_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct3836	= { FOLLOW_msgConstruct_in_msgRecvConstruct3836_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstruct3867  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstruct3867_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstruct3867	= { FOLLOW_LTERM_in_msgRecvConstruct3867_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_msgRecvConstruct3870  */
static	ANTLR3_BITWORD FOLLOW_176_in_msgRecvConstruct3870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_msgRecvConstruct3870	= { FOLLOW_176_in_msgRecvConstruct3870_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstruct3872  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstruct3872_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstruct3872	= { FOLLOW_LTERM_in_msgRecvConstruct3872_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_msgRecvConstruct3877  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_msgRecvConstruct3877_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_msgRecvConstruct3877	= { FOLLOW_msgConstruct_in_msgRecvConstruct3877_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstruct_in_msgConstruct3919  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstruct_in_msgConstruct3919_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstruct_in_msgConstruct3919	= { FOLLOW_msgSenderConstruct_in_msgConstruct3919_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgConstruct3937  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgConstruct3937_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgConstruct3937	= { FOLLOW_LTERM_in_msgConstruct3937_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_177_in_msgConstruct3940  */
static	ANTLR3_BITWORD FOLLOW_177_in_msgConstruct3940_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_177_in_msgConstruct3940	= { FOLLOW_177_in_msgConstruct3940_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgConstruct3942  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgConstruct3942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgConstruct3942	= { FOLLOW_LTERM_in_msgConstruct3942_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstruct_in_msgConstruct3947  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstruct_in_msgConstruct3947_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstruct_in_msgConstruct3947	= { FOLLOW_msgSenderConstruct_in_msgConstruct3947_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_msgSenderConstruct3987  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_msgSenderConstruct3987_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_msgSenderConstruct3987	= { FOLLOW_ternaryExpression_in_msgSenderConstruct3987_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSenderConstruct4005  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSenderConstruct4005_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSenderConstruct4005	= { FOLLOW_LTERM_in_msgSenderConstruct4005_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_msgSenderConstruct4008  */
static	ANTLR3_BITWORD FOLLOW_178_in_msgSenderConstruct4008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_msgSenderConstruct4008	= { FOLLOW_178_in_msgSenderConstruct4008_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSenderConstruct4010  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSenderConstruct4010_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSenderConstruct4010	= { FOLLOW_LTERM_in_msgSenderConstruct4010_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_msgSenderConstruct4015  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_msgSenderConstruct4015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_msgSenderConstruct4015	= { FOLLOW_ternaryExpression_in_msgSenderConstruct4015_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_ternaryExpression4056  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_ternaryExpression4056_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_ternaryExpression4056	= { FOLLOW_logicalORExpression_in_ternaryExpression4056_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpression4064  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpression4064_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpression4064	= { FOLLOW_LTERM_in_ternaryExpression4064_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_ternaryExpression4067  */
static	ANTLR3_BITWORD FOLLOW_179_in_ternaryExpression4067_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_ternaryExpression4067	= { FOLLOW_179_in_ternaryExpression4067_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpression4069  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpression4069_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpression4069	= { FOLLOW_LTERM_in_ternaryExpression4069_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_ternaryExpression4074  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_ternaryExpression4074_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_ternaryExpression4074	= { FOLLOW_assignmentExpression_in_ternaryExpression4074_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpression4076  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpression4076_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpression4076	= { FOLLOW_LTERM_in_ternaryExpression4076_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_ternaryExpression4079  */
static	ANTLR3_BITWORD FOLLOW_158_in_ternaryExpression4079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_ternaryExpression4079	= { FOLLOW_158_in_ternaryExpression4079_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpression4081  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpression4081_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpression4081	= { FOLLOW_LTERM_in_ternaryExpression4081_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_ternaryExpression4086  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_ternaryExpression4086_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_ternaryExpression4086	= { FOLLOW_assignmentExpression_in_ternaryExpression4086_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn4129  */
static	ANTLR3_BITWORD FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn4129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn4129	= { FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn4129_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4156  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4156_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2001003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4156	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4156_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstructNoIn4175  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstructNoIn4175_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstructNoIn4175	= { FOLLOW_LTERM_in_msgRecvConstructNoIn4175_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_msgRecvConstructNoIn4178  */
static	ANTLR3_BITWORD FOLLOW_176_in_msgRecvConstructNoIn4178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_msgRecvConstructNoIn4178	= { FOLLOW_176_in_msgRecvConstructNoIn4178_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstructNoIn4180  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstructNoIn4180_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstructNoIn4180	= { FOLLOW_LTERM_in_msgRecvConstructNoIn4180_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4185  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4185_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4185	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4185_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_msgRecvConstructNoIn4187  */
static	ANTLR3_BITWORD FOLLOW_176_in_msgRecvConstructNoIn4187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001C00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_msgRecvConstructNoIn4187	= { FOLLOW_176_in_msgRecvConstructNoIn4187_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4191  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4191_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0001C00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4191	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4191_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4224  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4224_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4224	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4224_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstructNoIn4226  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstructNoIn4226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstructNoIn4226	= { FOLLOW_LTERM_in_msgRecvConstructNoIn4226_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_msgRecvConstructNoIn4229  */
static	ANTLR3_BITWORD FOLLOW_176_in_msgRecvConstructNoIn4229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_msgRecvConstructNoIn4229	= { FOLLOW_176_in_msgRecvConstructNoIn4229_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvConstructNoIn4231  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvConstructNoIn4231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvConstructNoIn4231	= { FOLLOW_LTERM_in_msgRecvConstructNoIn4231_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4236  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4236	= { FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4236_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4289  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4289_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4289	= { FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4289_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgConstructNoIn4307  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgConstructNoIn4307_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgConstructNoIn4307	= { FOLLOW_LTERM_in_msgConstructNoIn4307_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_177_in_msgConstructNoIn4310  */
static	ANTLR3_BITWORD FOLLOW_177_in_msgConstructNoIn4310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001C00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_177_in_msgConstructNoIn4310	= { FOLLOW_177_in_msgConstructNoIn4310_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4314  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4314_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4314	= { FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4314_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4362  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4362_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4362	= { FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4362_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSenderConstructNoIn4380  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSenderConstructNoIn4380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSenderConstructNoIn4380	= { FOLLOW_LTERM_in_msgSenderConstructNoIn4380_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_msgSenderConstructNoIn4383  */
static	ANTLR3_BITWORD FOLLOW_178_in_msgSenderConstructNoIn4383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001C00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_msgSenderConstructNoIn4383	= { FOLLOW_178_in_msgSenderConstructNoIn4383_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4387  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4387_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4387	= { FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4387_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn4453  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn4453_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn4453	= { FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn4453_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpressionNoIn4461  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpressionNoIn4461_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpressionNoIn4461	= { FOLLOW_LTERM_in_ternaryExpressionNoIn4461_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_ternaryExpressionNoIn4464  */
static	ANTLR3_BITWORD FOLLOW_179_in_ternaryExpressionNoIn4464_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_ternaryExpressionNoIn4464	= { FOLLOW_179_in_ternaryExpressionNoIn4464_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpressionNoIn4466  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpressionNoIn4466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpressionNoIn4466	= { FOLLOW_LTERM_in_ternaryExpressionNoIn4466_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4471  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4471	= { FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4471_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpressionNoIn4473  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpressionNoIn4473_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpressionNoIn4473	= { FOLLOW_LTERM_in_ternaryExpressionNoIn4473_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_ternaryExpressionNoIn4476  */
static	ANTLR3_BITWORD FOLLOW_158_in_ternaryExpressionNoIn4476_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_ternaryExpressionNoIn4476	= { FOLLOW_158_in_ternaryExpressionNoIn4476_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ternaryExpressionNoIn4478  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ternaryExpressionNoIn4478_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ternaryExpressionNoIn4478	= { FOLLOW_LTERM_in_ternaryExpressionNoIn4478_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4483  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4483	= { FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4483_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression4536  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression4536_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression4536	= { FOLLOW_logicalANDExpression_in_logicalORExpression4536_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression4543  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression4543_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression4543	= { FOLLOW_LTERM_in_logicalORExpression4543_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_logicalORExpression4546  */
static	ANTLR3_BITWORD FOLLOW_180_in_logicalORExpression4546_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_logicalORExpression4546	= { FOLLOW_180_in_logicalORExpression4546_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression4548  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression4548_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression4548	= { FOLLOW_LTERM_in_logicalORExpression4548_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression4551  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression4551_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression4551	= { FOLLOW_logicalANDExpression_in_logicalORExpression4551_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression4578  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression4578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression4578	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression4578_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression4585  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression4585_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression4585	= { FOLLOW_LTERM_in_logicalANDExpression4585_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_logicalANDExpression4588  */
static	ANTLR3_BITWORD FOLLOW_181_in_logicalANDExpression4588_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_logicalANDExpression4588	= { FOLLOW_181_in_logicalANDExpression4588_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression4590  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression4590_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression4590	= { FOLLOW_LTERM_in_logicalANDExpression4590_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression4593  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression4593_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression4593	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression4593_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4621  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4621_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4621	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4621_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn4628  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn4628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn4628	= { FOLLOW_LTERM_in_logicalORExpressionNoIn4628_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_logicalORExpressionNoIn4631  */
static	ANTLR3_BITWORD FOLLOW_180_in_logicalORExpressionNoIn4631_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_logicalORExpressionNoIn4631	= { FOLLOW_180_in_logicalORExpressionNoIn4631_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn4633  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn4633_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn4633	= { FOLLOW_LTERM_in_logicalORExpressionNoIn4633_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4636  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0010000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4636	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4636_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4665  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4665	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4665_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn4673  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn4673_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn4673	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn4673_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_logicalANDExpressionNoIn4676  */
static	ANTLR3_BITWORD FOLLOW_181_in_logicalANDExpressionNoIn4676_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_logicalANDExpressionNoIn4676	= { FOLLOW_181_in_logicalANDExpressionNoIn4676_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn4678  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn4678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn4678	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn4678_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4681  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4681_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0020000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4681	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4681_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4708  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4708	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4708_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression4716  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression4716_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression4716	= { FOLLOW_LTERM_in_bitwiseORExpression4716_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_bitwiseORExpression4719  */
static	ANTLR3_BITWORD FOLLOW_182_in_bitwiseORExpression4719_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_bitwiseORExpression4719	= { FOLLOW_182_in_bitwiseORExpression4719_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression4721  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression4721_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression4721	= { FOLLOW_LTERM_in_bitwiseORExpression4721_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4724  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4724	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4724_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4751  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4751	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4751_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn4759  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn4759_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn4759	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn4759_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_bitwiseORExpressionNoIn4762  */
static	ANTLR3_BITWORD FOLLOW_182_in_bitwiseORExpressionNoIn4762_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_bitwiseORExpressionNoIn4762	= { FOLLOW_182_in_bitwiseORExpressionNoIn4762_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn4764  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn4764_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn4764	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn4764_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4767  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4767_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0040000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4767	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4767_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4793  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4793	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4793_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression4801  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression4801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression4801	= { FOLLOW_LTERM_in_bitwiseXORExpression4801_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_bitwiseXORExpression4804  */
static	ANTLR3_BITWORD FOLLOW_183_in_bitwiseXORExpression4804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_bitwiseXORExpression4804	= { FOLLOW_183_in_bitwiseXORExpression4804_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression4806  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression4806_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression4806	= { FOLLOW_LTERM_in_bitwiseXORExpression4806_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4809  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4809_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4809	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4809_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4836  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4836_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4836	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4836_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4843  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4843_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4843	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4843_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_bitwiseXORExpressionNoIn4846  */
static	ANTLR3_BITWORD FOLLOW_183_in_bitwiseXORExpressionNoIn4846_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_bitwiseXORExpressionNoIn4846	= { FOLLOW_183_in_bitwiseXORExpressionNoIn4846_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4848  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4848_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4848	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4848_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4851  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4851	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4851_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression4879  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression4879_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression4879	= { FOLLOW_equalityExpression_in_bitwiseANDExpression4879_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression4887  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression4887_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression4887	= { FOLLOW_LTERM_in_bitwiseANDExpression4887_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_bitwiseANDExpression4890  */
static	ANTLR3_BITWORD FOLLOW_184_in_bitwiseANDExpression4890_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_bitwiseANDExpression4890	= { FOLLOW_184_in_bitwiseANDExpression4890_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression4892  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression4892_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression4892	= { FOLLOW_LTERM_in_bitwiseANDExpression4892_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression4895  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression4895_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression4895	= { FOLLOW_equalityExpression_in_bitwiseANDExpression4895_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4923  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4923_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4923	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4923_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4931  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4931_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4931	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4931_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_bitwiseANDExpressionNoIn4934  */
static	ANTLR3_BITWORD FOLLOW_184_in_bitwiseANDExpressionNoIn4934_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_bitwiseANDExpressionNoIn4934	= { FOLLOW_184_in_bitwiseANDExpressionNoIn4934_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4936  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4936_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4936	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4936_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4939  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4939	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4939_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression4966  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression4966_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x1E00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression4966	= { FOLLOW_relationalExpression_in_equalityExpression4966_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression4973  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression4973_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x1E00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression4973	= { FOLLOW_LTERM_in_equalityExpression4973_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpression4976  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpression4976_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpression4976	= { FOLLOW_equalityOps_in_equalityExpression4976_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression4978  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression4978_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression4978	= { FOLLOW_LTERM_in_equalityExpression4978_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression4981  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression4981_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x1E00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression4981	= { FOLLOW_relationalExpression_in_equalityExpression4981_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_185_in_equalityOps5007  */
static	ANTLR3_BITWORD FOLLOW_185_in_equalityOps5007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_185_in_equalityOps5007	= { FOLLOW_185_in_equalityOps5007_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_186_in_equalityOps5017  */
static	ANTLR3_BITWORD FOLLOW_186_in_equalityOps5017_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_186_in_equalityOps5017	= { FOLLOW_186_in_equalityOps5017_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_187_in_equalityOps5027  */
static	ANTLR3_BITWORD FOLLOW_187_in_equalityOps5027_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_187_in_equalityOps5027	= { FOLLOW_187_in_equalityOps5027_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_188_in_equalityOps5037  */
static	ANTLR3_BITWORD FOLLOW_188_in_equalityOps5037_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_188_in_equalityOps5037	= { FOLLOW_188_in_equalityOps5037_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5061  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x1E00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5061	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5061_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn5068  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn5068_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x1E00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn5068	= { FOLLOW_LTERM_in_equalityExpressionNoIn5068_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpressionNoIn5071  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpressionNoIn5071_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpressionNoIn5071	= { FOLLOW_equalityOps_in_equalityExpressionNoIn5071_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn5073  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn5073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn5073	= { FOLLOW_LTERM_in_equalityExpressionNoIn5073_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5076  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5076_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x1E00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5076	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5076_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_189_in_relationalOps5108  */
static	ANTLR3_BITWORD FOLLOW_189_in_relationalOps5108_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_189_in_relationalOps5108	= { FOLLOW_189_in_relationalOps5108_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_relationalOps5119  */
static	ANTLR3_BITWORD FOLLOW_190_in_relationalOps5119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_relationalOps5119	= { FOLLOW_190_in_relationalOps5119_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_relationalOps5130  */
static	ANTLR3_BITWORD FOLLOW_191_in_relationalOps5130_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_relationalOps5130	= { FOLLOW_191_in_relationalOps5130_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_relationalOps5140  */
static	ANTLR3_BITWORD FOLLOW_192_in_relationalOps5140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_relationalOps5140	= { FOLLOW_192_in_relationalOps5140_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_relationalOps5150  */
static	ANTLR3_BITWORD FOLLOW_193_in_relationalOps5150_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_relationalOps5150	= { FOLLOW_193_in_relationalOps5150_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_relationalOps5160  */
static	ANTLR3_BITWORD FOLLOW_151_in_relationalOps5160_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_relationalOps5160	= { FOLLOW_151_in_relationalOps5160_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpression5193  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpression5193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0xE000000000800000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpression5193	= { FOLLOW_additiveExpression_in_relationalExpression5193_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression5201  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression5201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0xE000000000800000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression5201	= { FOLLOW_LTERM_in_relationalExpression5201_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_relationalExpression5204  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_relationalExpression5204_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_relationalExpression5204	= { FOLLOW_relationalOps_in_relationalExpression5204_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression5206  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression5206_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression5206	= { FOLLOW_LTERM_in_relationalExpression5206_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpression5209  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpression5209_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0xE000000000800000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpression5209	= { FOLLOW_additiveExpression_in_relationalExpression5209_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_189_in_relationalOpsNoIn5240  */
static	ANTLR3_BITWORD FOLLOW_189_in_relationalOpsNoIn5240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_189_in_relationalOpsNoIn5240	= { FOLLOW_189_in_relationalOpsNoIn5240_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_relationalOpsNoIn5251  */
static	ANTLR3_BITWORD FOLLOW_190_in_relationalOpsNoIn5251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_relationalOpsNoIn5251	= { FOLLOW_190_in_relationalOpsNoIn5251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_relationalOpsNoIn5262  */
static	ANTLR3_BITWORD FOLLOW_191_in_relationalOpsNoIn5262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_relationalOpsNoIn5262	= { FOLLOW_191_in_relationalOpsNoIn5262_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_relationalOpsNoIn5272  */
static	ANTLR3_BITWORD FOLLOW_192_in_relationalOpsNoIn5272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_relationalOpsNoIn5272	= { FOLLOW_192_in_relationalOpsNoIn5272_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_relationalOpsNoIn5282  */
static	ANTLR3_BITWORD FOLLOW_193_in_relationalOpsNoIn5282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_relationalOpsNoIn5282	= { FOLLOW_193_in_relationalOpsNoIn5282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_addOps5297  */
static	ANTLR3_BITWORD FOLLOW_194_in_addOps5297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_addOps5297	= { FOLLOW_194_in_addOps5297_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_addOps5307  */
static	ANTLR3_BITWORD FOLLOW_195_in_addOps5307_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_addOps5307	= { FOLLOW_195_in_addOps5307_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpressionNoIn5332  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpressionNoIn5332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0xE000000000000000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpressionNoIn5332	= { FOLLOW_additiveExpression_in_relationalExpressionNoIn5332_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn5340  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn5340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0xE000000000000000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn5340	= { FOLLOW_LTERM_in_relationalExpressionNoIn5340_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5343  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5343	= { FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5343_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn5345  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn5345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn5345	= { FOLLOW_LTERM_in_relationalExpressionNoIn5345_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_relationalExpressionNoIn5348  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_relationalExpressionNoIn5348_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0xE000000000000000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_relationalExpressionNoIn5348	= { FOLLOW_additiveExpression_in_relationalExpressionNoIn5348_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression5375  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression5375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000000000000C) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression5375	= { FOLLOW_multiplicativeExpression_in_additiveExpression5375_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression5382  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression5382_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000000000000C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression5382	= { FOLLOW_LTERM_in_additiveExpression5382_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_additiveExpression5385  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_additiveExpression5385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_additiveExpression5385	= { FOLLOW_addOps_in_additiveExpression5385_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression5387  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression5387_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression5387	= { FOLLOW_LTERM_in_additiveExpression5387_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression5390  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression5390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000000000000C) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression5390	= { FOLLOW_multiplicativeExpression_in_additiveExpression5390_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_196_in_multOps5415  */
static	ANTLR3_BITWORD FOLLOW_196_in_multOps5415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_196_in_multOps5415	= { FOLLOW_196_in_multOps5415_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_197_in_multOps5425  */
static	ANTLR3_BITWORD FOLLOW_197_in_multOps5425_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_197_in_multOps5425	= { FOLLOW_197_in_multOps5425_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_198_in_multOps5435  */
static	ANTLR3_BITWORD FOLLOW_198_in_multOps5435_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_198_in_multOps5435	= { FOLLOW_198_in_multOps5435_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression5454  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression5454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000070) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression5454	= { FOLLOW_unaryExpression_in_multiplicativeExpression5454_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression5463  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression5463_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000070) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression5463	= { FOLLOW_LTERM_in_multiplicativeExpression5463_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multOps_in_multiplicativeExpression5466  */
static	ANTLR3_BITWORD FOLLOW_multOps_in_multiplicativeExpression5466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_multOps_in_multiplicativeExpression5466	= { FOLLOW_multOps_in_multiplicativeExpression5466_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression5468  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression5468_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression5468	= { FOLLOW_LTERM_in_multiplicativeExpression5468_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression5471  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression5471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000070) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression5471	= { FOLLOW_unaryExpression_in_multiplicativeExpression5471_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression5498  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression5498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression5498	= { FOLLOW_leftHandSideExpression_in_postfixExpression5498_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_199_in_postfixExpression5500  */
static	ANTLR3_BITWORD FOLLOW_199_in_postfixExpression5500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_199_in_postfixExpression5500	= { FOLLOW_199_in_postfixExpression5500_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression5514  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression5514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression5514	= { FOLLOW_leftHandSideExpression_in_postfixExpression5514_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_200_in_postfixExpression5516  */
static	ANTLR3_BITWORD FOLLOW_200_in_postfixExpression5516_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_200_in_postfixExpression5516	= { FOLLOW_200_in_postfixExpression5516_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression5529  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression5529_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression5529	= { FOLLOW_leftHandSideExpression_in_postfixExpression5529_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_201_in_unaryOps5543  */
static	ANTLR3_BITWORD FOLLOW_201_in_unaryOps5543_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_201_in_unaryOps5543	= { FOLLOW_201_in_unaryOps5543_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_202_in_unaryOps5553  */
static	ANTLR3_BITWORD FOLLOW_202_in_unaryOps5553_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_202_in_unaryOps5553	= { FOLLOW_202_in_unaryOps5553_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_203_in_unaryOps5563  */
static	ANTLR3_BITWORD FOLLOW_203_in_unaryOps5563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_203_in_unaryOps5563	= { FOLLOW_203_in_unaryOps5563_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_200_in_unaryOps5573  */
static	ANTLR3_BITWORD FOLLOW_200_in_unaryOps5573_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_200_in_unaryOps5573	= { FOLLOW_200_in_unaryOps5573_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_199_in_unaryOps5584  */
static	ANTLR3_BITWORD FOLLOW_199_in_unaryOps5584_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_199_in_unaryOps5584	= { FOLLOW_199_in_unaryOps5584_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_unaryOps5595  */
static	ANTLR3_BITWORD FOLLOW_194_in_unaryOps5595_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_unaryOps5595	= { FOLLOW_194_in_unaryOps5595_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_unaryOps5607  */
static	ANTLR3_BITWORD FOLLOW_195_in_unaryOps5607_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_unaryOps5607	= { FOLLOW_195_in_unaryOps5607_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_204_in_unaryOps5619  */
static	ANTLR3_BITWORD FOLLOW_204_in_unaryOps5619_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_204_in_unaryOps5619	= { FOLLOW_204_in_unaryOps5619_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_205_in_unaryOps5631  */
static	ANTLR3_BITWORD FOLLOW_205_in_unaryOps5631_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_205_in_unaryOps5631	= { FOLLOW_205_in_unaryOps5631_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_unaryExpression5657  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_unaryExpression5657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_unaryExpression5657	= { FOLLOW_postfixExpression_in_unaryExpression5657_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryOps_in_unaryExpression5673  */
static	ANTLR3_BITWORD FOLLOW_unaryOps_in_unaryExpression5673_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001C00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryOps_in_unaryExpression5673	= { FOLLOW_unaryOps_in_unaryExpression5673_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_unaryExpression5677  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_unaryExpression5677_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_unaryExpression5677	= { FOLLOW_unaryExpression_in_unaryExpression5677_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_206_in_primaryExpression5706  */
static	ANTLR3_BITWORD FOLLOW_206_in_primaryExpression5706_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_206_in_primaryExpression5706	= { FOLLOW_206_in_primaryExpression5706_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteral_in_primaryExpression5724  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteral_in_primaryExpression5724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteral_in_primaryExpression5724	= { FOLLOW_vectorLiteral_in_primaryExpression5724_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_primaryExpression5729  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_primaryExpression5729_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_primaryExpression5729	= { FOLLOW_Identifier_in_primaryExpression5729_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dollarExpression_in_primaryExpression5741  */
static	ANTLR3_BITWORD FOLLOW_dollarExpression_in_primaryExpression5741_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dollarExpression_in_primaryExpression5741	= { FOLLOW_dollarExpression_in_primaryExpression5741_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primaryExpression5746  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primaryExpression5746_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primaryExpression5746	= { FOLLOW_literal_in_primaryExpression5746_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayLiteral_in_primaryExpression5751  */
static	ANTLR3_BITWORD FOLLOW_arrayLiteral_in_primaryExpression5751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayLiteral_in_primaryExpression5751	= { FOLLOW_arrayLiteral_in_primaryExpression5751_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_primaryExpression5756  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_primaryExpression5756_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_primaryExpression5756	= { FOLLOW_objectLiteral_in_primaryExpression5756_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_patternLiteral_in_primaryExpression5768  */
static	ANTLR3_BITWORD FOLLOW_patternLiteral_in_primaryExpression5768_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_patternLiteral_in_primaryExpression5768	= { FOLLOW_patternLiteral_in_primaryExpression5768_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_primaryExpression5773  */
static	ANTLR3_BITWORD FOLLOW_138_in_primaryExpression5773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_primaryExpression5773	= { FOLLOW_138_in_primaryExpression5773_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression5775  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression5775_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression5775	= { FOLLOW_LTERM_in_primaryExpression5775_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primaryExpression5778  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primaryExpression5778_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primaryExpression5778	= { FOLLOW_expression_in_primaryExpression5778_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression5780  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression5780_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression5780	= { FOLLOW_LTERM_in_primaryExpression5780_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_primaryExpression5783  */
static	ANTLR3_BITWORD FOLLOW_139_in_primaryExpression5783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_primaryExpression5783	= { FOLLOW_139_in_primaryExpression5783_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_189_in_vectorLiteral5811  */
static	ANTLR3_BITWORD FOLLOW_189_in_vectorLiteral5811_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_189_in_vectorLiteral5811	= { FOLLOW_189_in_vectorLiteral5811_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5813  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5813_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5813	= { FOLLOW_LTERM_in_vectorLiteral5813_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral5818  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral5818_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral5818	= { FOLLOW_vectorLiteralField_in_vectorLiteral5818_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5820  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5820_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5820	= { FOLLOW_LTERM_in_vectorLiteral5820_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_vectorLiteral5823  */
static	ANTLR3_BITWORD FOLLOW_140_in_vectorLiteral5823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_vectorLiteral5823	= { FOLLOW_140_in_vectorLiteral5823_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5825  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5825	= { FOLLOW_LTERM_in_vectorLiteral5825_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral5830  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral5830_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral5830	= { FOLLOW_vectorLiteralField_in_vectorLiteral5830_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5832  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5832	= { FOLLOW_LTERM_in_vectorLiteral5832_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_vectorLiteral5835  */
static	ANTLR3_BITWORD FOLLOW_140_in_vectorLiteral5835_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_vectorLiteral5835	= { FOLLOW_140_in_vectorLiteral5835_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5837  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5837_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5837	= { FOLLOW_LTERM_in_vectorLiteral5837_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteralField_in_vectorLiteral5842  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteralField_in_vectorLiteral5842_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x4000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteralField_in_vectorLiteral5842	= { FOLLOW_vectorLiteralField_in_vectorLiteral5842_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_vectorLiteral5844  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_vectorLiteral5844_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x4000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_vectorLiteral5844	= { FOLLOW_LTERM_in_vectorLiteral5844_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_vectorLiteral5847  */
static	ANTLR3_BITWORD FOLLOW_190_in_vectorLiteral5847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_vectorLiteral5847	= { FOLLOW_190_in_vectorLiteral5847_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_vectorLiteralField5889  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_vectorLiteralField5889_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_vectorLiteralField5889	= { FOLLOW_additiveExpression_in_vectorLiteralField5889_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_vectorLiteralField5902  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_vectorLiteralField5902_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_vectorLiteralField5902	= { FOLLOW_NumericLiteral_in_vectorLiteralField5902_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_vectorLiteralField5914  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_vectorLiteralField5914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_vectorLiteralField5914	= { FOLLOW_callExpression_in_vectorLiteralField5914_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_vectorLiteralField5927  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_vectorLiteralField5927_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_vectorLiteralField5927	= { FOLLOW_memberExpression_in_vectorLiteralField5927_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_207_in_dollarExpression5961  */
static	ANTLR3_BITWORD FOLLOW_207_in_dollarExpression5961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_207_in_dollarExpression5961	= { FOLLOW_207_in_dollarExpression5961_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_dollarExpression5963  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_dollarExpression5963_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000600000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_dollarExpression5963	= { FOLLOW_LTERM_in_dollarExpression5963_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_dollarExpression5966  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_dollarExpression5966_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_dollarExpression5966	= { FOLLOW_Identifier_in_dollarExpression5966_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_dollarExpression5968  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_dollarExpression5968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_dollarExpression5968	= { FOLLOW_LTERM_in_dollarExpression5968_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_207_in_dollarExpression5971  */
static	ANTLR3_BITWORD FOLLOW_207_in_dollarExpression5971_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_207_in_dollarExpression5971	= { FOLLOW_207_in_dollarExpression5971_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_arrayLiteral6007  */
static	ANTLR3_BITWORD FOLLOW_165_in_arrayLiteral6007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000007000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_arrayLiteral6007	= { FOLLOW_165_in_arrayLiteral6007_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral6009  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral6009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000007000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral6009	= { FOLLOW_LTERM_in_arrayLiteral6009_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral6013  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral6013_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral6013	= { FOLLOW_expression_in_arrayLiteral6013_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral6017  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral6017_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral6017	= { FOLLOW_LTERM_in_arrayLiteral6017_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_arrayLiteral6020  */
static	ANTLR3_BITWORD FOLLOW_166_in_arrayLiteral6020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_arrayLiteral6020	= { FOLLOW_166_in_arrayLiteral6020_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_arrayLiteral6035  */
static	ANTLR3_BITWORD FOLLOW_165_in_arrayLiteral6035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_arrayLiteral6035	= { FOLLOW_165_in_arrayLiteral6035_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral6037  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral6037_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral6037	= { FOLLOW_LTERM_in_arrayLiteral6037_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral6042  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral6042_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000004000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral6042	= { FOLLOW_expression_in_arrayLiteral6042_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_arrayLiteral6045  */
static	ANTLR3_BITWORD FOLLOW_140_in_arrayLiteral6045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_arrayLiteral6045	= { FOLLOW_140_in_arrayLiteral6045_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral6047  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral6047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral6047	= { FOLLOW_LTERM_in_arrayLiteral6047_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_arrayLiteral6052  */
static	ANTLR3_BITWORD FOLLOW_expression_in_arrayLiteral6052_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000004000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_arrayLiteral6052	= { FOLLOW_expression_in_arrayLiteral6052_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral6056  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral6056_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral6056	= { FOLLOW_LTERM_in_arrayLiteral6056_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_arrayLiteral6059  */
static	ANTLR3_BITWORD FOLLOW_166_in_arrayLiteral6059_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_arrayLiteral6059	= { FOLLOW_166_in_arrayLiteral6059_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_objectLiteral6091  */
static	ANTLR3_BITWORD FOLLOW_141_in_objectLiteral6091_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_objectLiteral6091	= { FOLLOW_141_in_objectLiteral6091_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral6093  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral6093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral6093	= { FOLLOW_LTERM_in_objectLiteral6093_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral6096  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral6096_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral6096	= { FOLLOW_propertyNameAndValue_in_objectLiteral6096_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral6099  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral6099_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral6099	= { FOLLOW_LTERM_in_objectLiteral6099_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_objectLiteral6102  */
static	ANTLR3_BITWORD FOLLOW_142_in_objectLiteral6102_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_objectLiteral6102	= { FOLLOW_142_in_objectLiteral6102_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_objectLiteral6117  */
static	ANTLR3_BITWORD FOLLOW_141_in_objectLiteral6117_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_objectLiteral6117	= { FOLLOW_141_in_objectLiteral6117_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral6119  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral6119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral6119	= { FOLLOW_LTERM_in_objectLiteral6119_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral6124  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral6124_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000005000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral6124	= { FOLLOW_propertyNameAndValue_in_objectLiteral6124_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_objectLiteral6127  */
static	ANTLR3_BITWORD FOLLOW_140_in_objectLiteral6127_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_objectLiteral6127	= { FOLLOW_140_in_objectLiteral6127_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral6129  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral6129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral6129	= { FOLLOW_LTERM_in_objectLiteral6129_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral6134  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral6134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000005000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral6134	= { FOLLOW_propertyNameAndValue_in_objectLiteral6134_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral6138  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral6138_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral6138	= { FOLLOW_LTERM_in_objectLiteral6138_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_objectLiteral6145  */
static	ANTLR3_BITWORD FOLLOW_142_in_objectLiteral6145_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_objectLiteral6145	= { FOLLOW_142_in_objectLiteral6145_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_patternLiteral6171  */
static	ANTLR3_BITWORD FOLLOW_141_in_patternLiteral6171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x0000000040004000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_patternLiteral6171	= { FOLLOW_141_in_patternLiteral6171_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral6173  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral6173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x0000000040004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral6173	= { FOLLOW_LTERM_in_patternLiteral6173_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral6176  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral6176_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral6176	= { FOLLOW_nameValueProto_in_patternLiteral6176_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral6179  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral6179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral6179	= { FOLLOW_LTERM_in_patternLiteral6179_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_patternLiteral6182  */
static	ANTLR3_BITWORD FOLLOW_142_in_patternLiteral6182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_patternLiteral6182	= { FOLLOW_142_in_patternLiteral6182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_patternLiteral6197  */
static	ANTLR3_BITWORD FOLLOW_141_in_patternLiteral6197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_patternLiteral6197	= { FOLLOW_141_in_patternLiteral6197_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral6199  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral6199_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral6199	= { FOLLOW_LTERM_in_patternLiteral6199_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral6205  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral6205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000005000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral6205	= { FOLLOW_nameValueProto_in_patternLiteral6205_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_patternLiteral6208  */
static	ANTLR3_BITWORD FOLLOW_140_in_patternLiteral6208_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_patternLiteral6208	= { FOLLOW_140_in_patternLiteral6208_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral6210  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral6210_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral6210	= { FOLLOW_LTERM_in_patternLiteral6210_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_patternLiteral6215  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_patternLiteral6215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000005000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_patternLiteral6215	= { FOLLOW_nameValueProto_in_patternLiteral6215_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_patternLiteral6219  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_patternLiteral6219_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_patternLiteral6219	= { FOLLOW_LTERM_in_patternLiteral6219_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_patternLiteral6222  */
static	ANTLR3_BITWORD FOLLOW_142_in_patternLiteral6222_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_patternLiteral6222	= { FOLLOW_142_in_patternLiteral6222_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_propertyNameAndValue6252  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_propertyNameAndValue6252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_propertyNameAndValue6252	= { FOLLOW_propertyName_in_propertyNameAndValue6252_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue6254  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue6254_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue6254	= { FOLLOW_LTERM_in_propertyNameAndValue6254_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_propertyNameAndValue6257  */
static	ANTLR3_BITWORD FOLLOW_158_in_propertyNameAndValue6257_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_propertyNameAndValue6257	= { FOLLOW_158_in_propertyNameAndValue6257_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue6259  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue6259_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue6259	= { FOLLOW_LTERM_in_propertyNameAndValue6259_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_propertyNameAndValue6262  */
static	ANTLR3_BITWORD FOLLOW_expression_in_propertyNameAndValue6262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_propertyNameAndValue6262	= { FOLLOW_expression_in_propertyNameAndValue6262_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_nameValueProto6295  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_nameValueProto6295_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_nameValueProto6295	= { FOLLOW_propertyName_in_nameValueProto6295_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6297  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6297	= { FOLLOW_LTERM_in_nameValueProto6297_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_nameValueProto6301  */
static	ANTLR3_BITWORD FOLLOW_158_in_nameValueProto6301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003040002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_nameValueProto6301	= { FOLLOW_158_in_nameValueProto6301_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6304  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003040002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6304	= { FOLLOW_LTERM_in_nameValueProto6304_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_nameValueProto6310  */
static	ANTLR3_BITWORD FOLLOW_expression_in_nameValueProto6310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_nameValueProto6310	= { FOLLOW_expression_in_nameValueProto6310_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6312  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6312	= { FOLLOW_LTERM_in_nameValueProto6312_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_nameValueProto6317  */
static	ANTLR3_BITWORD FOLLOW_158_in_nameValueProto6317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_nameValueProto6317	= { FOLLOW_158_in_nameValueProto6317_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6319  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6319	= { FOLLOW_LTERM_in_nameValueProto6319_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_nameValueProto6326  */
static	ANTLR3_BITWORD FOLLOW_expression_in_nameValueProto6326_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_nameValueProto6326	= { FOLLOW_expression_in_nameValueProto6326_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6370  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6370_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6370	= { FOLLOW_LTERM_in_nameValueProto6370_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_nameValueProto6373  */
static	ANTLR3_BITWORD FOLLOW_158_in_nameValueProto6373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_nameValueProto6373	= { FOLLOW_158_in_nameValueProto6373_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_nameValueProto6375  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_nameValueProto6375_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_nameValueProto6375	= { FOLLOW_LTERM_in_nameValueProto6375_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_nameValueProto6378  */
static	ANTLR3_BITWORD FOLLOW_158_in_nameValueProto6378_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_nameValueProto6378	= { FOLLOW_158_in_nameValueProto6378_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_propertyName0  */
static	ANTLR3_BITWORD FOLLOW_set_in_propertyName0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_propertyName0	= { FOLLOW_set_in_propertyName0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred1_Emerson881  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred1_Emerson881_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred1_Emerson881	= { FOLLOW_LTERM_in_synpred1_Emerson881_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred4_Emerson915  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred4_Emerson915_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred4_Emerson915	= { FOLLOW_LTERM_in_synpred4_Emerson915_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred8_Emerson972  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred8_Emerson972_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred8_Emerson972	= { FOLLOW_LTERM_in_synpred8_Emerson972_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred11_Emerson1009  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred11_Emerson1009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred11_Emerson1009	= { FOLLOW_LTERM_in_synpred11_Emerson1009_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred14_Emerson1020  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred14_Emerson1020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred14_Emerson1020	= { FOLLOW_LTERM_in_synpred14_Emerson1020_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred22_Emerson1111  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred22_Emerson1111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred22_Emerson1111	= { FOLLOW_LTERM_in_synpred22_Emerson1111_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_noOpStatement_in_synpred24_Emerson1137  */
static	ANTLR3_BITWORD FOLLOW_noOpStatement_in_synpred24_Emerson1137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_noOpStatement_in_synpred24_Emerson1137	= { FOLLOW_noOpStatement_in_synpred24_Emerson1137_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_synpred25_Emerson1150  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_synpred25_Emerson1150_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_synpred25_Emerson1150	= { FOLLOW_switchStatement_in_synpred25_Emerson1150_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_synpred26_Emerson1167  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_synpred26_Emerson1167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_synpred26_Emerson1167	= { FOLLOW_statementBlock_in_synpred26_Emerson1167_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_emptyStatement_in_synpred28_Emerson1177  */
static	ANTLR3_BITWORD FOLLOW_emptyStatement_in_synpred28_Emerson1177_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_emptyStatement_in_synpred28_Emerson1177	= { FOLLOW_emptyStatement_in_synpred28_Emerson1177_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_synpred29_Emerson1182  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_synpred29_Emerson1182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_synpred29_Emerson1182	= { FOLLOW_expressionStatement_in_synpred29_Emerson1182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred39_Emerson1261  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred39_Emerson1261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred39_Emerson1261	= { FOLLOW_LTERM_in_synpred39_Emerson1261_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred41_Emerson1335  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred41_Emerson1335_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred41_Emerson1335	= { FOLLOW_LTERM_in_synpred41_Emerson1335_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred51_Emerson1457  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred51_Emerson1457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred51_Emerson1457	= { FOLLOW_LTERM_in_synpred51_Emerson1457_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred53_Emerson1486  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred53_Emerson1486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred53_Emerson1486	= { FOLLOW_LTERM_in_synpred53_Emerson1486_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred62_Emerson1623  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred62_Emerson1623_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred62_Emerson1623	= { FOLLOW_LTERM_in_synpred62_Emerson1623_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred64_Emerson1636  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred64_Emerson1636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred64_Emerson1636	= { FOLLOW_LTERM_in_synpred64_Emerson1636_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred65_Emerson1631  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred65_Emerson1631_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred65_Emerson1631	= { FOLLOW_LTERM_in_synpred65_Emerson1631_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_synpred65_Emerson1634  */
static	ANTLR3_BITWORD FOLLOW_147_in_synpred65_Emerson1634_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_synpred65_Emerson1634	= { FOLLOW_147_in_synpred65_Emerson1634_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred65_Emerson1636  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred65_Emerson1636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000331F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred65_Emerson1636	= { FOLLOW_LTERM_in_synpred65_Emerson1636_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred65_Emerson1641  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred65_Emerson1641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred65_Emerson1641	= { FOLLOW_statement_in_synpred65_Emerson1641_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_synpred68_Emerson1683  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_synpred68_Emerson1683_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_synpred68_Emerson1683	= { FOLLOW_forStatement_in_synpred68_Emerson1683_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred69_Emerson1702  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred69_Emerson1702_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred69_Emerson1702	= { FOLLOW_LTERM_in_synpred69_Emerson1702_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred76_Emerson1769  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred76_Emerson1769_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred76_Emerson1769	= { FOLLOW_LTERM_in_synpred76_Emerson1769_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred87_Emerson1847  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred87_Emerson1847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred87_Emerson1847	= { FOLLOW_LTERM_in_synpred87_Emerson1847_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred95_Emerson1956  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred95_Emerson1956_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred95_Emerson1956	= { FOLLOW_LTERM_in_synpred95_Emerson1956_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred107_Emerson2128  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred107_Emerson2128_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred107_Emerson2128	= { FOLLOW_LTERM_in_synpred107_Emerson2128_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred112_Emerson2207  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred112_Emerson2207_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred112_Emerson2207	= { FOLLOW_LTERM_in_synpred112_Emerson2207_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred120_Emerson2311  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred120_Emerson2311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred120_Emerson2311	= { FOLLOW_LTERM_in_synpred120_Emerson2311_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_synpred123_Emerson2297  */
static	ANTLR3_BITWORD FOLLOW_157_in_synpred123_Emerson2297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_synpred123_Emerson2297	= { FOLLOW_157_in_synpred123_Emerson2297_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred123_Emerson2299  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred123_Emerson2299_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred123_Emerson2299	= { FOLLOW_LTERM_in_synpred123_Emerson2299_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_synpred123_Emerson2304  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_synpred123_Emerson2304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_synpred123_Emerson2304	= { FOLLOW_ternaryExpression_in_synpred123_Emerson2304_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred123_Emerson2306  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred123_Emerson2306_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred123_Emerson2306	= { FOLLOW_LTERM_in_synpred123_Emerson2306_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_synpred123_Emerson2309  */
static	ANTLR3_BITWORD FOLLOW_158_in_synpred123_Emerson2309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000339F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_synpred123_Emerson2309	= { FOLLOW_158_in_synpred123_Emerson2309_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred123_Emerson2311  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred123_Emerson2311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x200000339F75A600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred123_Emerson2311	= { FOLLOW_LTERM_in_synpred123_Emerson2311_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_synpred123_Emerson2314  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_synpred123_Emerson2314_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_synpred123_Emerson2314	= { FOLLOW_statementList_in_synpred123_Emerson2314_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred123_Emerson2317  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred123_Emerson2317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred123_Emerson2317	= { FOLLOW_LTERM_in_synpred123_Emerson2317_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_synpred123_Emerson2320  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_synpred123_Emerson2320_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_synpred123_Emerson2320	= { FOLLOW_defaultClause_in_synpred123_Emerson2320_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred126_Emerson2361  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred126_Emerson2361_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred126_Emerson2361	= { FOLLOW_LTERM_in_synpred126_Emerson2361_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred128_Emerson2367  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred128_Emerson2367_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred128_Emerson2367	= { FOLLOW_LTERM_in_synpred128_Emerson2367_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred131_Emerson2406  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred131_Emerson2406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred131_Emerson2406	= { FOLLOW_LTERM_in_synpred131_Emerson2406_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred133_Emerson2412  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred133_Emerson2412_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred133_Emerson2412	= { FOLLOW_LTERM_in_synpred133_Emerson2412_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred137_Emerson2469  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred137_Emerson2469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred137_Emerson2469	= { FOLLOW_LTERM_in_synpred137_Emerson2469_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred139_Emerson2475  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred139_Emerson2475_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred139_Emerson2475	= { FOLLOW_LTERM_in_synpred139_Emerson2475_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred144_Emerson2624  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred144_Emerson2624_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred144_Emerson2624	= { FOLLOW_LTERM_in_synpred144_Emerson2624_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred152_Emerson2803  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred152_Emerson2803_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred152_Emerson2803	= { FOLLOW_callExpression_in_synpred152_Emerson2803_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_synpred153_Emerson2927  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_synpred153_Emerson2927_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_synpred153_Emerson2927	= { FOLLOW_conditionalExpression_in_synpred153_Emerson2927_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_synpred156_Emerson2994  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_synpred156_Emerson2994_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_synpred156_Emerson2994	= { FOLLOW_conditionalExpressionNoIn_in_synpred156_Emerson2994_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred159_Emerson3064  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred159_Emerson3064_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred159_Emerson3064	= { FOLLOW_callExpression_in_synpred159_Emerson3064_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred160_Emerson3089  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred160_Emerson3089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred160_Emerson3089	= { FOLLOW_memberExpression_in_synpred160_Emerson3089_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred166_Emerson3183  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred166_Emerson3183_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred166_Emerson3183	= { FOLLOW_LTERM_in_synpred166_Emerson3183_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred166_Emerson3186  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred166_Emerson3186_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred166_Emerson3186	= { FOLLOW_propertyReferenceSuffix1_in_synpred166_Emerson3186_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred168_Emerson3203  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred168_Emerson3203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred168_Emerson3203	= { FOLLOW_LTERM_in_synpred168_Emerson3203_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred168_Emerson3206  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred168_Emerson3206_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred168_Emerson3206	= { FOLLOW_indexSuffix1_in_synpred168_Emerson3206_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred171_Emerson3233  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred171_Emerson3233_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred171_Emerson3233	= { FOLLOW_LTERM_in_synpred171_Emerson3233_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred171_Emerson3236  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred171_Emerson3236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred171_Emerson3236	= { FOLLOW_propertyReferenceSuffix1_in_synpred171_Emerson3236_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred173_Emerson3252  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred173_Emerson3252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred173_Emerson3252	= { FOLLOW_LTERM_in_synpred173_Emerson3252_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred173_Emerson3255  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred173_Emerson3255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred173_Emerson3255	= { FOLLOW_indexSuffix1_in_synpred173_Emerson3255_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred178_Emerson3301  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred178_Emerson3301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred178_Emerson3301	= { FOLLOW_LTERM_in_synpred178_Emerson3301_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred178_Emerson3304  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred178_Emerson3304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred178_Emerson3304	= { FOLLOW_propertyReferenceSuffix1_in_synpred178_Emerson3304_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred180_Emerson3317  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred180_Emerson3317_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred180_Emerson3317	= { FOLLOW_LTERM_in_synpred180_Emerson3317_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred180_Emerson3320  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred180_Emerson3320_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred180_Emerson3320	= { FOLLOW_indexSuffix1_in_synpred180_Emerson3320_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred184_Emerson3406  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred184_Emerson3406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred184_Emerson3406	= { FOLLOW_LTERM_in_synpred184_Emerson3406_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_synpred184_Emerson3409  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_synpred184_Emerson3409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_synpred184_Emerson3409	= { FOLLOW_arguments_in_synpred184_Emerson3409_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred186_Emerson3424  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred186_Emerson3424_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x000000A000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred186_Emerson3424	= { FOLLOW_LTERM_in_synpred186_Emerson3424_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred186_Emerson3427  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred186_Emerson3427_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred186_Emerson3427	= { FOLLOW_indexSuffix1_in_synpred186_Emerson3427_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred188_Emerson3442  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred188_Emerson3442_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred188_Emerson3442	= { FOLLOW_LTERM_in_synpred188_Emerson3442_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred188_Emerson3445  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred188_Emerson3445_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred188_Emerson3445	= { FOLLOW_propertyReferenceSuffix1_in_synpred188_Emerson3445_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred191_Emerson3514  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred191_Emerson3514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred191_Emerson3514	= { FOLLOW_LTERM_in_synpred191_Emerson3514_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_synpred194_Emerson3512  */
static	ANTLR3_BITWORD FOLLOW_138_in_synpred194_Emerson3512_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002E00), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_synpred194_Emerson3512	= { FOLLOW_138_in_synpred194_Emerson3512_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred194_Emerson3514  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred194_Emerson3514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002E00), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred194_Emerson3514	= { FOLLOW_LTERM_in_synpred194_Emerson3514_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred194_Emerson3518  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred194_Emerson3518_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred194_Emerson3518	= { FOLLOW_expression_in_synpred194_Emerson3518_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred194_Emerson3522  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred194_Emerson3522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred194_Emerson3522	= { FOLLOW_LTERM_in_synpred194_Emerson3522_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_synpred194_Emerson3525  */
static	ANTLR3_BITWORD FOLLOW_139_in_synpred194_Emerson3525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_synpred194_Emerson3525	= { FOLLOW_139_in_synpred194_Emerson3525_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred212_Emerson3820  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred212_Emerson3820_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred212_Emerson3820	= { FOLLOW_LTERM_in_synpred212_Emerson3820_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_synpred212_Emerson3823  */
static	ANTLR3_BITWORD FOLLOW_176_in_synpred212_Emerson3823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_synpred212_Emerson3823	= { FOLLOW_176_in_synpred212_Emerson3823_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred212_Emerson3825  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred212_Emerson3825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred212_Emerson3825	= { FOLLOW_LTERM_in_synpred212_Emerson3825_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_synpred212_Emerson3830  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_synpred212_Emerson3830_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_synpred212_Emerson3830	= { FOLLOW_msgConstruct_in_synpred212_Emerson3830_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_synpred212_Emerson3832  */
static	ANTLR3_BITWORD FOLLOW_176_in_synpred212_Emerson3832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001C00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_synpred212_Emerson3832	= { FOLLOW_176_in_synpred212_Emerson3832_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_synpred212_Emerson3836  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_synpred212_Emerson3836_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_synpred212_Emerson3836	= { FOLLOW_msgConstruct_in_synpred212_Emerson3836_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred215_Emerson3867  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred215_Emerson3867_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred215_Emerson3867	= { FOLLOW_LTERM_in_synpred215_Emerson3867_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_synpred215_Emerson3870  */
static	ANTLR3_BITWORD FOLLOW_176_in_synpred215_Emerson3870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_synpred215_Emerson3870	= { FOLLOW_176_in_synpred215_Emerson3870_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred215_Emerson3872  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred215_Emerson3872_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred215_Emerson3872	= { FOLLOW_LTERM_in_synpred215_Emerson3872_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstruct_in_synpred215_Emerson3877  */
static	ANTLR3_BITWORD FOLLOW_msgConstruct_in_synpred215_Emerson3877_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstruct_in_synpred215_Emerson3877	= { FOLLOW_msgConstruct_in_synpred215_Emerson3877_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred218_Emerson3937  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred218_Emerson3937_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred218_Emerson3937	= { FOLLOW_LTERM_in_synpred218_Emerson3937_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_177_in_synpred218_Emerson3940  */
static	ANTLR3_BITWORD FOLLOW_177_in_synpred218_Emerson3940_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_177_in_synpred218_Emerson3940	= { FOLLOW_177_in_synpred218_Emerson3940_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred218_Emerson3942  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred218_Emerson3942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred218_Emerson3942	= { FOLLOW_LTERM_in_synpred218_Emerson3942_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstruct_in_synpred218_Emerson3947  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstruct_in_synpred218_Emerson3947_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstruct_in_synpred218_Emerson3947	= { FOLLOW_msgSenderConstruct_in_synpred218_Emerson3947_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred221_Emerson4005  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred221_Emerson4005_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred221_Emerson4005	= { FOLLOW_LTERM_in_synpred221_Emerson4005_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_synpred221_Emerson4008  */
static	ANTLR3_BITWORD FOLLOW_178_in_synpred221_Emerson4008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_synpred221_Emerson4008	= { FOLLOW_178_in_synpred221_Emerson4008_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred221_Emerson4010  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred221_Emerson4010_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred221_Emerson4010	= { FOLLOW_LTERM_in_synpred221_Emerson4010_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpression_in_synpred221_Emerson4015  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpression_in_synpred221_Emerson4015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpression_in_synpred221_Emerson4015	= { FOLLOW_ternaryExpression_in_synpred221_Emerson4015_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred226_Emerson4064  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred226_Emerson4064_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred226_Emerson4064	= { FOLLOW_LTERM_in_synpred226_Emerson4064_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_synpred226_Emerson4067  */
static	ANTLR3_BITWORD FOLLOW_179_in_synpred226_Emerson4067_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_synpred226_Emerson4067	= { FOLLOW_179_in_synpred226_Emerson4067_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred226_Emerson4069  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred226_Emerson4069_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred226_Emerson4069	= { FOLLOW_LTERM_in_synpred226_Emerson4069_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred226_Emerson4074  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred226_Emerson4074_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred226_Emerson4074	= { FOLLOW_assignmentExpression_in_synpred226_Emerson4074_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred226_Emerson4076  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred226_Emerson4076_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred226_Emerson4076	= { FOLLOW_LTERM_in_synpred226_Emerson4076_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_synpred226_Emerson4079  */
static	ANTLR3_BITWORD FOLLOW_158_in_synpred226_Emerson4079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_synpred226_Emerson4079	= { FOLLOW_158_in_synpred226_Emerson4079_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred226_Emerson4081  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred226_Emerson4081_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred226_Emerson4081	= { FOLLOW_LTERM_in_synpred226_Emerson4081_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred226_Emerson4086  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred226_Emerson4086_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred226_Emerson4086	= { FOLLOW_assignmentExpression_in_synpred226_Emerson4086_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred229_Emerson4175  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred229_Emerson4175_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred229_Emerson4175	= { FOLLOW_LTERM_in_synpred229_Emerson4175_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_synpred229_Emerson4178  */
static	ANTLR3_BITWORD FOLLOW_176_in_synpred229_Emerson4178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_synpred229_Emerson4178	= { FOLLOW_176_in_synpred229_Emerson4178_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred229_Emerson4180  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred229_Emerson4180_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred229_Emerson4180	= { FOLLOW_LTERM_in_synpred229_Emerson4180_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_synpred229_Emerson4185  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_synpred229_Emerson4185_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_synpred229_Emerson4185	= { FOLLOW_msgConstructNoIn_in_synpred229_Emerson4185_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_synpred229_Emerson4187  */
static	ANTLR3_BITWORD FOLLOW_176_in_synpred229_Emerson4187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001C00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_synpred229_Emerson4187	= { FOLLOW_176_in_synpred229_Emerson4187_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_synpred229_Emerson4191  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_synpred229_Emerson4191_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_synpred229_Emerson4191	= { FOLLOW_msgConstructNoIn_in_synpred229_Emerson4191_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_synpred232_Emerson4224  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_synpred232_Emerson4224_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_synpred232_Emerson4224	= { FOLLOW_msgConstructNoIn_in_synpred232_Emerson4224_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred232_Emerson4226  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred232_Emerson4226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred232_Emerson4226	= { FOLLOW_LTERM_in_synpred232_Emerson4226_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_synpred232_Emerson4229  */
static	ANTLR3_BITWORD FOLLOW_176_in_synpred232_Emerson4229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_synpred232_Emerson4229	= { FOLLOW_176_in_synpred232_Emerson4229_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred232_Emerson4231  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred232_Emerson4231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred232_Emerson4231	= { FOLLOW_LTERM_in_synpred232_Emerson4231_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgConstructNoIn_in_synpred232_Emerson4236  */
static	ANTLR3_BITWORD FOLLOW_msgConstructNoIn_in_synpred232_Emerson4236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgConstructNoIn_in_synpred232_Emerson4236	= { FOLLOW_msgConstructNoIn_in_synpred232_Emerson4236_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred234_Emerson4307  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred234_Emerson4307_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred234_Emerson4307	= { FOLLOW_LTERM_in_synpred234_Emerson4307_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_177_in_synpred234_Emerson4310  */
static	ANTLR3_BITWORD FOLLOW_177_in_synpred234_Emerson4310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001C00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_177_in_synpred234_Emerson4310	= { FOLLOW_177_in_synpred234_Emerson4310_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSenderConstructNoIn_in_synpred234_Emerson4314  */
static	ANTLR3_BITWORD FOLLOW_msgSenderConstructNoIn_in_synpred234_Emerson4314_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSenderConstructNoIn_in_synpred234_Emerson4314	= { FOLLOW_msgSenderConstructNoIn_in_synpred234_Emerson4314_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred236_Emerson4380  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred236_Emerson4380_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0004000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred236_Emerson4380	= { FOLLOW_LTERM_in_synpred236_Emerson4380_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_synpred236_Emerson4383  */
static	ANTLR3_BITWORD FOLLOW_178_in_synpred236_Emerson4383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001C00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_synpred236_Emerson4383	= { FOLLOW_178_in_synpred236_Emerson4383_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ternaryExpressionNoIn_in_synpred236_Emerson4387  */
static	ANTLR3_BITWORD FOLLOW_ternaryExpressionNoIn_in_synpred236_Emerson4387_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ternaryExpressionNoIn_in_synpred236_Emerson4387	= { FOLLOW_ternaryExpressionNoIn_in_synpred236_Emerson4387_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred241_Emerson4461  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred241_Emerson4461_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred241_Emerson4461	= { FOLLOW_LTERM_in_synpred241_Emerson4461_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_synpred241_Emerson4464  */
static	ANTLR3_BITWORD FOLLOW_179_in_synpred241_Emerson4464_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_synpred241_Emerson4464	= { FOLLOW_179_in_synpred241_Emerson4464_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred241_Emerson4466  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred241_Emerson4466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred241_Emerson4466	= { FOLLOW_LTERM_in_synpred241_Emerson4466_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_synpred241_Emerson4471  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_synpred241_Emerson4471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_synpred241_Emerson4471	= { FOLLOW_assignmentExpressionNoIn_in_synpred241_Emerson4471_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred241_Emerson4473  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred241_Emerson4473_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred241_Emerson4473	= { FOLLOW_LTERM_in_synpred241_Emerson4473_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_synpred241_Emerson4476  */
static	ANTLR3_BITWORD FOLLOW_158_in_synpred241_Emerson4476_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_synpred241_Emerson4476	= { FOLLOW_158_in_synpred241_Emerson4476_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred241_Emerson4478  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred241_Emerson4478_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred241_Emerson4478	= { FOLLOW_LTERM_in_synpred241_Emerson4478_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_synpred241_Emerson4483  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_synpred241_Emerson4483_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_synpred241_Emerson4483	= { FOLLOW_assignmentExpressionNoIn_in_synpred241_Emerson4483_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred288_Emerson5201  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred288_Emerson5201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0xE000000000800000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred288_Emerson5201	= { FOLLOW_LTERM_in_synpred288_Emerson5201_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_synpred288_Emerson5204  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_synpred288_Emerson5204_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_synpred288_Emerson5204	= { FOLLOW_relationalOps_in_synpred288_Emerson5204_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred288_Emerson5206  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred288_Emerson5206_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred288_Emerson5206	= { FOLLOW_LTERM_in_synpred288_Emerson5206_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_synpred288_Emerson5209  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_synpred288_Emerson5209_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_synpred288_Emerson5209	= { FOLLOW_additiveExpression_in_synpred288_Emerson5209_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred296_Emerson5340  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred296_Emerson5340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0xE000000000000000), ANTLR3_UINT64_LIT(0x0000000000000003) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred296_Emerson5340	= { FOLLOW_LTERM_in_synpred296_Emerson5340_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_synpred296_Emerson5343  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_synpred296_Emerson5343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_synpred296_Emerson5343	= { FOLLOW_relationalOpsNoIn_in_synpred296_Emerson5343_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred296_Emerson5345  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred296_Emerson5345_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred296_Emerson5345	= { FOLLOW_LTERM_in_synpred296_Emerson5345_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_synpred296_Emerson5348  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_synpred296_Emerson5348_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_synpred296_Emerson5348	= { FOLLOW_additiveExpression_in_synpred296_Emerson5348_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred299_Emerson5382  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred299_Emerson5382_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x000000000000000C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred299_Emerson5382	= { FOLLOW_LTERM_in_synpred299_Emerson5382_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_synpred299_Emerson5385  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_synpred299_Emerson5385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_synpred299_Emerson5385	= { FOLLOW_addOps_in_synpred299_Emerson5385_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred299_Emerson5387  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred299_Emerson5387_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000003000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred299_Emerson5387	= { FOLLOW_LTERM_in_synpred299_Emerson5387_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_synpred299_Emerson5390  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_synpred299_Emerson5390_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_synpred299_Emerson5390	= { FOLLOW_multiplicativeExpression_in_synpred299_Emerson5390_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred305_Emerson5498  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred305_Emerson5498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred305_Emerson5498	= { FOLLOW_leftHandSideExpression_in_synpred305_Emerson5498_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_199_in_synpred305_Emerson5500  */
static	ANTLR3_BITWORD FOLLOW_199_in_synpred305_Emerson5500_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_199_in_synpred305_Emerson5500	= { FOLLOW_199_in_synpred305_Emerson5500_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred306_Emerson5514  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred306_Emerson5514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred306_Emerson5514	= { FOLLOW_leftHandSideExpression_in_synpred306_Emerson5514_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_200_in_synpred306_Emerson5516  */
static	ANTLR3_BITWORD FOLLOW_200_in_synpred306_Emerson5516_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_200_in_synpred306_Emerson5516	= { FOLLOW_200_in_synpred306_Emerson5516_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_vectorLiteral_in_synpred317_Emerson5719  */
static	ANTLR3_BITWORD FOLLOW_vectorLiteral_in_synpred317_Emerson5719_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_vectorLiteral_in_synpred317_Emerson5719	= { FOLLOW_vectorLiteral_in_synpred317_Emerson5719_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_synpred322_Emerson5756  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_synpred322_Emerson5756_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_synpred322_Emerson5756	= { FOLLOW_objectLiteral_in_synpred322_Emerson5756_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_patternLiteral_in_synpred323_Emerson5768  */
static	ANTLR3_BITWORD FOLLOW_patternLiteral_in_synpred323_Emerson5768_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_patternLiteral_in_synpred323_Emerson5768	= { FOLLOW_patternLiteral_in_synpred323_Emerson5768_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_synpred332_Emerson5889  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_synpred332_Emerson5889_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_synpred332_Emerson5889	= { FOLLOW_additiveExpression_in_synpred332_Emerson5889_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NumericLiteral_in_synpred333_Emerson5902  */
static	ANTLR3_BITWORD FOLLOW_NumericLiteral_in_synpred333_Emerson5902_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NumericLiteral_in_synpred333_Emerson5902	= { FOLLOW_NumericLiteral_in_synpred333_Emerson5902_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred334_Emerson5914  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred334_Emerson5914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred334_Emerson5914	= { FOLLOW_callExpression_in_synpred334_Emerson5914_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred337_Emerson6009  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred337_Emerson6009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred337_Emerson6009	= { FOLLOW_LTERM_in_synpred337_Emerson6009_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_synpred340_Emerson6007  */
static	ANTLR3_BITWORD FOLLOW_165_in_synpred340_Emerson6007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000007000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_synpred340_Emerson6007	= { FOLLOW_165_in_synpred340_Emerson6007_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred340_Emerson6009  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred340_Emerson6009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x2000007000002600), ANTLR3_UINT64_LIT(0x000000000007FF8C) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred340_Emerson6009	= { FOLLOW_LTERM_in_synpred340_Emerson6009_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_synpred340_Emerson6013  */
static	ANTLR3_BITWORD FOLLOW_expression_in_synpred340_Emerson6013_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_synpred340_Emerson6013	= { FOLLOW_expression_in_synpred340_Emerson6013_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred340_Emerson6017  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred340_Emerson6017_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred340_Emerson6017	= { FOLLOW_LTERM_in_synpred340_Emerson6017_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_synpred340_Emerson6020  */
static	ANTLR3_BITWORD FOLLOW_166_in_synpred340_Emerson6020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_synpred340_Emerson6020	= { FOLLOW_166_in_synpred340_Emerson6020_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred345_Emerson6093  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred345_Emerson6093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred345_Emerson6093	= { FOLLOW_LTERM_in_synpred345_Emerson6093_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_synpred348_Emerson6091  */
static	ANTLR3_BITWORD FOLLOW_141_in_synpred348_Emerson6091_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_synpred348_Emerson6091	= { FOLLOW_141_in_synpred348_Emerson6091_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred348_Emerson6093  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred348_Emerson6093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred348_Emerson6093	= { FOLLOW_LTERM_in_synpred348_Emerson6093_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_synpred348_Emerson6096  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_synpred348_Emerson6096_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_synpred348_Emerson6096	= { FOLLOW_propertyNameAndValue_in_synpred348_Emerson6096_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred348_Emerson6099  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred348_Emerson6099_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred348_Emerson6099	= { FOLLOW_LTERM_in_synpred348_Emerson6099_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_synpred348_Emerson6102  */
static	ANTLR3_BITWORD FOLLOW_142_in_synpred348_Emerson6102_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_synpred348_Emerson6102	= { FOLLOW_142_in_synpred348_Emerson6102_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred353_Emerson6173  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred353_Emerson6173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred353_Emerson6173	= { FOLLOW_LTERM_in_synpred353_Emerson6173_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_synpred356_Emerson6171  */
static	ANTLR3_BITWORD FOLLOW_141_in_synpred356_Emerson6171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x0000000040004000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_synpred356_Emerson6171	= { FOLLOW_141_in_synpred356_Emerson6171_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred356_Emerson6173  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred356_Emerson6173_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001E00000000000), ANTLR3_UINT64_LIT(0x0000000040004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred356_Emerson6173	= { FOLLOW_LTERM_in_synpred356_Emerson6173_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_nameValueProto_in_synpred356_Emerson6176  */
static	ANTLR3_BITWORD FOLLOW_nameValueProto_in_synpred356_Emerson6176_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_nameValueProto_in_synpred356_Emerson6176	= { FOLLOW_nameValueProto_in_synpred356_Emerson6176_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred356_Emerson6179  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred356_Emerson6179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000200000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred356_Emerson6179	= { FOLLOW_LTERM_in_synpred356_Emerson6179_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_synpred356_Emerson6182  */
static	ANTLR3_BITWORD FOLLOW_142_in_synpred356_Emerson6182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_synpred356_Emerson6182	= { FOLLOW_142_in_synpred356_Emerson6182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred357_Emerson6199  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred357_Emerson6199_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred357_Emerson6199	= { FOLLOW_LTERM_in_synpred357_Emerson6199_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred358_Emerson6210  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred358_Emerson6210_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred358_Emerson6210	= { FOLLOW_LTERM_in_synpred358_Emerson6210_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred367_Emerson6319  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred367_Emerson6319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred367_Emerson6319	= { FOLLOW_LTERM_in_synpred367_Emerson6319_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    142:14: ( sourceElements )?
 */
static const ANTLR3_INT32 dfa2_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa2_eof[4] =
    {
	3, -1, 3, -1
    };
static const ANTLR3_INT32 dfa2_min[4] =
    {
	109, -1, 109, -1
    };
static const ANTLR3_INT32 dfa2_max[4] =
    {
	210, -1, 143, -1
    };
static const ANTLR3_INT32 dfa2_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa2_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa2_T_empty	    NULL

static const ANTLR3_INT32 dfa2_T0[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };static const ANTLR3_INT32 dfa2_T1[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 
	1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa2_transitions[] =
{
    dfa2_T1, dfa2_T_empty, dfa2_T0, dfa2_T_empty	
};


/* Declare tracking structure for Cyclic DFA 2
 */
static
ANTLR3_CYCLIC_DFA cdfa2
    =	{
	    2,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"142:14: ( sourceElements )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa2_eot,	    /* EOT table			    */
	    dfa2_eof,	    /* EOF table			    */
	    dfa2_min,	    /* Minimum tokens for each state    */
	    dfa2_max,	    /* Maximum tokens for each state    */
	    dfa2_accept,	/* Accept table			    */
	    dfa2_special,	/* Special transition states	    */
	    dfa2_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 2
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 146:18: ( ( LTERM )* sourceElement )*
 */
static const ANTLR3_INT32 dfa5_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_eof[4] =
    {
	2, 2, -1, -1
    };
static const ANTLR3_INT32 dfa5_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa5_max[4] =
    {
	210, 210, -1, -1
    };
static const ANTLR3_INT32 dfa5_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa5_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa5_T_empty	    NULL

static const ANTLR3_INT32 dfa5_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, 3, -1, -1, -1, 3, 3, -1, -1, 3, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 3, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa5_transitions[] =
{
    dfa5_T0, dfa5_T0, dfa5_T_empty, dfa5_T_empty	
};


/* Declare tracking structure for Cyclic DFA 5
 */
static
ANTLR3_CYCLIC_DFA cdfa5
    =	{
	    5,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 146:18: ( ( LTERM )* sourceElement )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa5_eot,	    /* EOT table			    */
	    dfa5_eof,	    /* EOF table			    */
	    dfa5_min,	    /* Minimum tokens for each state    */
	    dfa5_max,	    /* Maximum tokens for each state    */
	    dfa5_accept,	/* Accept table			    */
	    dfa5_special,	/* Special transition states	    */
	    dfa5_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 5
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    149:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static const ANTLR3_INT32 dfa6_eot[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa6_eof[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa6_min[7] =
    {
	109, 109, -1, 109, 109, 109, -1
    };
static const ANTLR3_INT32 dfa6_max[7] =
    {
	210, 138, -1, 138, 141, 141, -1
    };
static const ANTLR3_INT32 dfa6_accept[7] =
    {
	-1, -1, 2, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa6_special[7] =
    {	
	-1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa6_T_empty	    NULL

static const ANTLR3_INT32 dfa6_T0[] =
    {
	3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };static const ANTLR3_INT32 dfa6_T1[] =
    {
	5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 6
    };static const ANTLR3_INT32 dfa6_T2[] =
    {
	2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, 2, -1, 2, 2, -1, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, -1, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa6_transitions[] =
{
    dfa6_T2, dfa6_T0, dfa6_T_empty, dfa6_T0, dfa6_T1, dfa6_T1, dfa6_T_empty	
};


/* Declare tracking structure for Cyclic DFA 6
 */
static
ANTLR3_CYCLIC_DFA cdfa6
    =	{
	    6,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"149:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa6_eot,	    /* EOT table			    */
	    dfa6_eof,	    /* EOF table			    */
	    dfa6_min,	    /* Minimum tokens for each state    */
	    dfa6_max,	    /* Maximum tokens for each state    */
	    dfa6_accept,	/* Accept table			    */
	    dfa6_special,	/* Special transition states	    */
	    dfa6_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 6
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    167:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa23_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_min[5] =
    {
	141, 109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa23_max[5] =
    {
	141, 210, 210, -1, -1
    };
static const ANTLR3_INT32 dfa23_accept[5] =
    {
	-1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa23_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa23_T_empty	    NULL

static const ANTLR3_INT32 dfa23_T0[] =
    {
	2, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, 4, 3, 4, 4, -1, 4, -1, 
	4, 4, 4, -1, 4, 4, 4, 4, 4, -1, -1, -1, 4, 4, -1, -1, 4, 4, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, 4, 4, -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4
    };static const ANTLR3_INT32 dfa23_T1[] =
    {
	1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa23_transitions[] =
{
    dfa23_T1, dfa23_T0, dfa23_T0, dfa23_T_empty, dfa23_T_empty	
};


/* Declare tracking structure for Cyclic DFA 23
 */
static
ANTLR3_CYCLIC_DFA cdfa23
    =	{
	    23,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"167:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa23_eot,	    /* EOT table			    */
	    dfa23_eof,	    /* EOF table			    */
	    dfa23_min,	    /* Minimum tokens for each state    */
	    dfa23_max,	    /* Maximum tokens for each state    */
	    dfa23_accept,	/* Accept table			    */
	    dfa23_special,	/* Special transition states	    */
	    dfa23_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 23
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    173:1: statement : ( noOpStatement | ( switchStatement )=> switchStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );
 */
static const ANTLR3_INT32 dfa24_eot[36] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa24_eof[36] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa24_min[36] =
    {
	109, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa24_max[36] =
    {
	210, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa24_accept[36] =
    {
	-1, -1, 2, -1, 4, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 7, 8, -1, -1, 9, 10, 11, 12, 13, 14, 1, 3
    };
static const ANTLR3_INT32 dfa24_special[36] =
    {	
	0, 1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa24_T_empty	    NULL

static const ANTLR3_INT32 dfa24_T0[] =
    {
	5, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 6, -1, -1, 3, -1, 1, 4, -1, 24, 
	-1, 25, 25, 25, -1, 28, 29, 30, 31, 2, -1, -1, -1, 32, 33, -1, -1, 6, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 6, -1, -1, -1, -1, 6, 6, -1, -1, -1, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6
    };static const ANTLR3_INT32 dfa24_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa24_transitions[] =
{
    dfa24_T0, dfa24_T1, dfa24_T_empty, dfa24_T1, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, 
    dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty, dfa24_T_empty	
};

static ANTLR3_INT32 dfa24_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA24_0;

    	    ANTLR3_MARKER index24_0;


    		LA24_0 = LA(1);

    	 
    	    index24_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA24_0 == 143) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA24_0 == 156) && (synpred25_Emerson(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA24_0 == 141) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA24_0 == 144) )
    	    {
    	        s = 4;
    	    }

    	    else if ( (LA24_0 == LTERM) )
    	    {
    	        s = 5;
    	    }

    	    else if ( (((LA24_0 >= Identifier) && (LA24_0 <= StringLiteral)) || ((LA24_0 >= 137) && (LA24_0 <= 138)) || ((LA24_0 >= 164) && (LA24_0 <= 165)) || LA24_0 == 189 || ((LA24_0 >= 194) && (LA24_0 <= 195)) || ((LA24_0 >= 199) && (LA24_0 <= 210))) )
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA24_0 == 146) )
    	    {
    	        s = 24;
    	    }

    	    else if ( (((LA24_0 >= 148) && (LA24_0 <= 150))) )
    	    {
    	        s = 25;
    	    }

    	    else if ( (LA24_0 == 152) )
    	    {
    	        s = 28;
    	    }

    	    else if ( (LA24_0 == 153) )
    	    {
    	        s = 29;
    	    }

    	    else if ( (LA24_0 == 154) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (LA24_0 == 155) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (LA24_0 == 160) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (LA24_0 == 161) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index24_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA24_1;

    	    ANTLR3_MARKER index24_1;


    		LA24_1 = LA(1);

    	 
    	    index24_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred24_Emerson(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (synpred28_Emerson(ctx)) )
    	    {
    	        s = 5;
    	    }

    	 
    		SEEK(index24_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA24_3;

    	    ANTLR3_MARKER index24_3;


    		LA24_3 = LA(1);

    	 
    	    index24_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 35;
    	    }

    	    else if ( (synpred29_Emerson(ctx)) )
    	    {
    	        s = 6;
    	    }

    	 
    		SEEK(index24_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"173:1: statement : ( noOpStatement | ( switchStatement )=> switchStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );";
    EXCEPTION->decisionNum  = 24;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 24
 */
static
ANTLR3_CYCLIC_DFA cdfa24
    =	{
	    24,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"173:1: statement : ( noOpStatement | ( switchStatement )=> switchStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );",	
	    (CDFA_SPECIAL_FUNC) dfa24_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa24_eot,	    /* EOT table			    */
	    dfa24_eof,	    /* EOF table			    */
	    dfa24_min,	    /* Minimum tokens for each state    */
	    dfa24_max,	    /* Maximum tokens for each state    */
	    dfa24_accept,	/* Accept table			    */
	    dfa24_special,	/* Special transition states	    */
	    dfa24_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 24
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    190:1: statementBlock : ( '{' ( LTERM )* '}' -> ^( NOOP ) | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa28_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa28_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa28_min[5] =
    {
	141, 109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa28_max[5] =
    {
	141, 210, 210, -1, -1
    };
static const ANTLR3_INT32 dfa28_accept[5] =
    {
	-1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa28_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa28_T_empty	    NULL

static const ANTLR3_INT32 dfa28_T0[] =
    {
	1
    };static const ANTLR3_INT32 dfa28_T1[] =
    {
	2, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, 4, 3, 4, 4, -1, 4, -1, 
	4, 4, 4, -1, 4, 4, 4, 4, 4, -1, -1, -1, 4, 4, -1, -1, 4, 4, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, 4, 4, -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa28_transitions[] =
{
    dfa28_T0, dfa28_T1, dfa28_T1, dfa28_T_empty, dfa28_T_empty	
};


/* Declare tracking structure for Cyclic DFA 28
 */
static
ANTLR3_CYCLIC_DFA cdfa28
    =	{
	    28,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"190:1: statementBlock : ( '{' ( LTERM )* '}' -> ^( NOOP ) | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa28_eot,	    /* EOT table			    */
	    dfa28_eof,	    /* EOF table			    */
	    dfa28_min,	    /* Minimum tokens for each state    */
	    dfa28_max,	    /* Maximum tokens for each state    */
	    dfa28_accept,	/* Accept table			    */
	    dfa28_special,	/* Special transition states	    */
	    dfa28_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 28
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()+ loopback of 201:4: ( ( LTERM )* statement )+
 */
static const ANTLR3_INT32 dfa30_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa30_eof[4] =
    {
	2, 2, -1, -1
    };
static const ANTLR3_INT32 dfa30_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa30_max[4] =
    {
	210, 210, -1, -1
    };
static const ANTLR3_INT32 dfa30_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa30_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa30_T_empty	    NULL

static const ANTLR3_INT32 dfa30_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, -1, 
	3, 3, 3, -1, 3, 3, 3, 3, 3, 2, -1, 2, 3, 3, -1, -1, 3, 3, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 3, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa30_transitions[] =
{
    dfa30_T0, dfa30_T0, dfa30_T_empty, dfa30_T_empty	
};


/* Declare tracking structure for Cyclic DFA 30
 */
static
ANTLR3_CYCLIC_DFA cdfa30
    =	{
	    30,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()+ loopback of 201:4: ( ( LTERM )* statement )+",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa30_eot,	    /* EOT table			    */
	    dfa30_eof,	    /* EOF table			    */
	    dfa30_min,	    /* Minimum tokens for each state    */
	    dfa30_max,	    /* Maximum tokens for each state    */
	    dfa30_accept,	/* Accept table			    */
	    dfa30_special,	/* Special transition states	    */
	    dfa30_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 30
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 209:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
 */
static const ANTLR3_INT32 dfa35_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa35_eof[5] =
    {
	-1, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa35_min[5] =
    {
	109, 109, -1, -1, 109
    };
static const ANTLR3_INT32 dfa35_max[5] =
    {
	143, 210, -1, -1, 210
    };
static const ANTLR3_INT32 dfa35_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa35_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa35_T_empty	    NULL

static const ANTLR3_INT32 dfa35_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 3, 2, 2, 2, 2, -1, 2, 2, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, -1, -1, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2
    };static const ANTLR3_INT32 dfa35_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa35_transitions[] =
{
    dfa35_T1, dfa35_T0, dfa35_T_empty, dfa35_T_empty, dfa35_T0	
};


/* Declare tracking structure for Cyclic DFA 35
 */
static
ANTLR3_CYCLIC_DFA cdfa35
    =	{
	    35,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 209:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa35_eot,	    /* EOT table			    */
	    dfa35_eof,	    /* EOF table			    */
	    dfa35_min,	    /* Minimum tokens for each state    */
	    dfa35_max,	    /* Maximum tokens for each state    */
	    dfa35_accept,	/* Accept table			    */
	    dfa35_special,	/* Special transition states	    */
	    dfa35_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 35
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 213:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
 */
static const ANTLR3_INT32 dfa38_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa38_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa38_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa38_max[4] =
    {
	143, 143, -1, -1
    };
static const ANTLR3_INT32 dfa38_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa38_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa38_T_empty	    NULL

static const ANTLR3_INT32 dfa38_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa38_transitions[] =
{
    dfa38_T0, dfa38_T0, dfa38_T_empty, dfa38_T_empty	
};


/* Declare tracking structure for Cyclic DFA 38
 */
static
ANTLR3_CYCLIC_DFA cdfa38
    =	{
	    38,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 213:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa38_eot,	    /* EOT table			    */
	    dfa38_eof,	    /* EOF table			    */
	    dfa38_min,	    /* Minimum tokens for each state    */
	    dfa38_max,	    /* Maximum tokens for each state    */
	    dfa38_accept,	/* Accept table			    */
	    dfa38_special,	/* Special transition states	    */
	    dfa38_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 38
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    261:21: ( ( LTERM )* init= forStatementInitialiserPart )?
 */
static const ANTLR3_INT32 dfa65_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa65_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa65_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa65_max[4] =
    {
	210, 210, -1, -1
    };
static const ANTLR3_INT32 dfa65_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa65_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa65_T_empty	    NULL

static const ANTLR3_INT32 dfa65_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 3, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa65_transitions[] =
{
    dfa65_T0, dfa65_T0, dfa65_T_empty, dfa65_T_empty	
};


/* Declare tracking structure for Cyclic DFA 65
 */
static
ANTLR3_CYCLIC_DFA cdfa65
    =	{
	    65,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"261:21: ( ( LTERM )* init= forStatementInitialiserPart )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa65_eot,	    /* EOT table			    */
	    dfa65_eof,	    /* EOF table			    */
	    dfa65_min,	    /* Minimum tokens for each state    */
	    dfa65_max,	    /* Maximum tokens for each state    */
	    dfa65_accept,	/* Accept table			    */
	    dfa65_special,	/* Special transition states	    */
	    dfa65_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 65
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    261:75: ( ( LTERM )* cond= expression )?
 */
static const ANTLR3_INT32 dfa68_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa68_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa68_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa68_max[4] =
    {
	210, 210, -1, -1
    };
static const ANTLR3_INT32 dfa68_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa68_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa68_T_empty	    NULL

static const ANTLR3_INT32 dfa68_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa68_transitions[] =
{
    dfa68_T0, dfa68_T0, dfa68_T_empty, dfa68_T_empty	
};


/* Declare tracking structure for Cyclic DFA 68
 */
static
ANTLR3_CYCLIC_DFA cdfa68
    =	{
	    68,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"261:75: ( ( LTERM )* cond= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa68_eot,	    /* EOT table			    */
	    dfa68_eof,	    /* EOF table			    */
	    dfa68_min,	    /* Minimum tokens for each state    */
	    dfa68_max,	    /* Maximum tokens for each state    */
	    dfa68_accept,	/* Accept table			    */
	    dfa68_special,	/* Special transition states	    */
	    dfa68_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 68
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    261:112: ( ( LTERM )* iter= expression )?
 */
static const ANTLR3_INT32 dfa71_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa71_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa71_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa71_max[4] =
    {
	210, 210, -1, -1
    };
static const ANTLR3_INT32 dfa71_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa71_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa71_T_empty	    NULL

static const ANTLR3_INT32 dfa71_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa71_transitions[] =
{
    dfa71_T0, dfa71_T0, dfa71_T_empty, dfa71_T_empty	
};


/* Declare tracking structure for Cyclic DFA 71
 */
static
ANTLR3_CYCLIC_DFA cdfa71
    =	{
	    71,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"261:112: ( ( LTERM )* iter= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa71_eot,	    /* EOT table			    */
	    dfa71_eof,	    /* EOF table			    */
	    dfa71_min,	    /* Minimum tokens for each state    */
	    dfa71_max,	    /* Maximum tokens for each state    */
	    dfa71_accept,	/* Accept table			    */
	    dfa71_special,	/* Special transition states	    */
	    dfa71_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 71
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    300:1: caseBlock : ( '{' ( LTERM )* (case1= caseClause )? ( LTERM )* '}' -> ^( CASE_BLOCK ( $case1)? ) | '{' ( LTERM )* def= defaultClause ( LTERM )* '}' -> ^( CASE_BLOCK $def) );
 */
static const ANTLR3_INT32 dfa103_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa103_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa103_min[5] =
    {
	141, 109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa103_max[5] =
    {
	141, 159, 159, -1, -1
    };
static const ANTLR3_INT32 dfa103_accept[5] =
    {
	-1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa103_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa103_T_empty	    NULL

static const ANTLR3_INT32 dfa103_T0[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 4
    };static const ANTLR3_INT32 dfa103_T1[] =
    {
	1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa103_transitions[] =
{
    dfa103_T1, dfa103_T0, dfa103_T0, dfa103_T_empty, dfa103_T_empty	
};


/* Declare tracking structure for Cyclic DFA 103
 */
static
ANTLR3_CYCLIC_DFA cdfa103
    =	{
	    103,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"300:1: caseBlock : ( '{' ( LTERM )* (case1= caseClause )? ( LTERM )* '}' -> ^( CASE_BLOCK ( $case1)? ) | '{' ( LTERM )* def= defaultClause ( LTERM )* '}' -> ^( CASE_BLOCK $def) );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa103_eot,	    /* EOT table			    */
	    dfa103_eof,	    /* EOF table			    */
	    dfa103_min,	    /* Minimum tokens for each state    */
	    dfa103_max,	    /* Maximum tokens for each state    */
	    dfa103_accept,	/* Accept table			    */
	    dfa103_special,	/* Special transition states	    */
	    dfa103_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 103
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    308:56: ( statementList )?
 */
static const ANTLR3_INT32 dfa107_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa107_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa107_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa107_max[4] =
    {
	210, 210, -1, -1
    };
static const ANTLR3_INT32 dfa107_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa107_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa107_T_empty	    NULL

static const ANTLR3_INT32 dfa107_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 2, 2, -1, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, -1, -1, 3, 2, 2, -1, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa107_transitions[] =
{
    dfa107_T0, dfa107_T0, dfa107_T_empty, dfa107_T_empty	
};


/* Declare tracking structure for Cyclic DFA 107
 */
static
ANTLR3_CYCLIC_DFA cdfa107
    =	{
	    107,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"308:56: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa107_eot,	    /* EOT table			    */
	    dfa107_eof,	    /* EOF table			    */
	    dfa107_min,	    /* Minimum tokens for each state    */
	    dfa107_max,	    /* Maximum tokens for each state    */
	    dfa107_accept,	/* Accept table			    */
	    dfa107_special,	/* Special transition states	    */
	    dfa107_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 107
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    309:64: ( statementList )?
 */
static const ANTLR3_INT32 dfa112_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa112_eof[4] =
    {
	3, 3, -1, -1
    };
static const ANTLR3_INT32 dfa112_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa112_max[4] =
    {
	210, 210, -1, -1
    };
static const ANTLR3_INT32 dfa112_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa112_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa112_T_empty	    NULL

static const ANTLR3_INT32 dfa112_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, 3, 2, 2, -1, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, 3, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa112_transitions[] =
{
    dfa112_T0, dfa112_T0, dfa112_T_empty, dfa112_T_empty	
};


/* Declare tracking structure for Cyclic DFA 112
 */
static
ANTLR3_CYCLIC_DFA cdfa112
    =	{
	    112,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"309:64: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa112_eot,	    /* EOT table			    */
	    dfa112_eof,	    /* EOF table			    */
	    dfa112_min,	    /* Minimum tokens for each state    */
	    dfa112_max,	    /* Maximum tokens for each state    */
	    dfa112_accept,	/* Accept table			    */
	    dfa112_special,	/* Special transition states	    */
	    dfa112_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 112
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    313:32: ( statementList )?
 */
static const ANTLR3_INT32 dfa118_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa118_eof[4] =
    {
	3, 3, -1, -1
    };
static const ANTLR3_INT32 dfa118_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa118_max[4] =
    {
	210, 210, -1, -1
    };
static const ANTLR3_INT32 dfa118_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa118_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa118_T_empty	    NULL

static const ANTLR3_INT32 dfa118_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, 3, 2, 2, -1, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, 3, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa118_transitions[] =
{
    dfa118_T0, dfa118_T0, dfa118_T_empty, dfa118_T_empty	
};


/* Declare tracking structure for Cyclic DFA 118
 */
static
ANTLR3_CYCLIC_DFA cdfa118
    =	{
	    118,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"313:32: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa118_eot,	    /* EOT table			    */
	    dfa118_eof,	    /* EOF table			    */
	    dfa118_min,	    /* Minimum tokens for each state    */
	    dfa118_max,	    /* Maximum tokens for each state    */
	    dfa118_accept,	/* Accept table			    */
	    dfa118_special,	/* Special transition states	    */
	    dfa118_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 118
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    318:64: ( statementList )?
 */
static const ANTLR3_INT32 dfa124_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa124_eof[4] =
    {
	3, 3, -1, -1
    };
static const ANTLR3_INT32 dfa124_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa124_max[4] =
    {
	210, 210, -1, -1
    };
static const ANTLR3_INT32 dfa124_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa124_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa124_T_empty	    NULL

static const ANTLR3_INT32 dfa124_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, 3, 2, 2, -1, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, 3, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa124_transitions[] =
{
    dfa124_T0, dfa124_T0, dfa124_T_empty, dfa124_T_empty	
};


/* Declare tracking structure for Cyclic DFA 124
 */
static
ANTLR3_CYCLIC_DFA cdfa124
    =	{
	    124,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"318:64: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa124_eot,	    /* EOT table			    */
	    dfa124_eof,	    /* EOF table			    */
	    dfa124_min,	    /* Minimum tokens for each state    */
	    dfa124_max,	    /* Maximum tokens for each state    */
	    dfa124_accept,	/* Accept table			    */
	    dfa124_special,	/* Special transition states	    */
	    dfa124_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 124
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    348:1: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );
 */
static const ANTLR3_INT32 dfa138_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa138_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa138_min[13] =
    {
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa138_max[13] =
    {
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa138_accept[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa138_special[13] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa138_T_empty	    NULL

static const ANTLR3_INT32 dfa138_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa138_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa138_transitions[] =
{
    dfa138_T0, dfa138_T1, dfa138_T1, dfa138_T1, dfa138_T1, dfa138_T1, dfa138_T1, 
    dfa138_T1, dfa138_T1, dfa138_T1, dfa138_T1, dfa138_T_empty, dfa138_T_empty	
};

static ANTLR3_INT32 dfa138_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA138_1;

    	    ANTLR3_MARKER index138_1;


    		LA138_1 = LA(1);

    	 
    	    index138_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA138_2;

    	    ANTLR3_MARKER index138_2;


    		LA138_2 = LA(1);

    	 
    	    index138_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA138_3;

    	    ANTLR3_MARKER index138_3;


    		LA138_3 = LA(1);

    	 
    	    index138_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA138_4;

    	    ANTLR3_MARKER index138_4;


    		LA138_4 = LA(1);

    	 
    	    index138_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA138_5;

    	    ANTLR3_MARKER index138_5;


    		LA138_5 = LA(1);

    	 
    	    index138_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA138_6;

    	    ANTLR3_MARKER index138_6;


    		LA138_6 = LA(1);

    	 
    	    index138_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA138_7;

    	    ANTLR3_MARKER index138_7;


    		LA138_7 = LA(1);

    	 
    	    index138_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA138_8;

    	    ANTLR3_MARKER index138_8;


    		LA138_8 = LA(1);

    	 
    	    index138_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA138_9;

    	    ANTLR3_MARKER index138_9;


    		LA138_9 = LA(1);

    	 
    	    index138_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA138_10;

    	    ANTLR3_MARKER index138_10;


    		LA138_10 = LA(1);

    	 
    	    index138_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred152_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index138_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"348:1: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );";
    EXCEPTION->decisionNum  = 138;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 138
 */
static
ANTLR3_CYCLIC_DFA cdfa138
    =	{
	    138,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"348:1: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa138_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa138_eot,	    /* EOT table			    */
	    dfa138_eof,	    /* EOF table			    */
	    dfa138_min,	    /* Minimum tokens for each state    */
	    dfa138_max,	    /* Maximum tokens for each state    */
	    dfa138_accept,	/* Accept table			    */
	    dfa138_special,	/* Special transition states	    */
	    dfa138_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 138
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    365:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static const ANTLR3_INT32 dfa141_eot[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa141_eof[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa141_min[21] =
    {
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa141_max[21] =
    {
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa141_accept[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2
    };
static const ANTLR3_INT32 dfa141_special[21] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa141_T_empty	    NULL

static const ANTLR3_INT32 dfa141_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, 11, -1, -1, -1, 11, 11, 11, 
	11, 11, 11, 11, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa141_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa141_transitions[] =
{
    dfa141_T0, dfa141_T1, dfa141_T1, dfa141_T1, dfa141_T1, dfa141_T1, dfa141_T1, 
    dfa141_T1, dfa141_T1, dfa141_T1, dfa141_T1, dfa141_T_empty, dfa141_T_empty, 
    dfa141_T_empty, dfa141_T_empty, dfa141_T_empty, dfa141_T_empty, dfa141_T_empty, 
    dfa141_T_empty, dfa141_T_empty, dfa141_T_empty	
};

static ANTLR3_INT32 dfa141_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA141_1;

    	    ANTLR3_MARKER index141_1;


    		LA141_1 = LA(1);

    	 
    	    index141_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred153_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index141_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA141_2;

    	    ANTLR3_MARKER index141_2;


    		LA141_2 = LA(1);

    	 
    	    index141_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred153_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index141_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA141_3;

    	    ANTLR3_MARKER index141_3;


    		LA141_3 = LA(1);

    	 
    	    index141_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred153_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index141_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA141_4;

    	    ANTLR3_MARKER index141_4;


    		LA141_4 = LA(1);

    	 
    	    index141_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred153_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index141_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA141_5;

    	    ANTLR3_MARKER index141_5;


    		LA141_5 = LA(1);

    	 
    	    index141_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred153_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index141_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA141_6;

    	    ANTLR3_MARKER index141_6;


    		LA141_6 = LA(1);

    	 
    	    index141_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred153_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index141_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA141_7;

    	    ANTLR3_MARKER index141_7;


    		LA141_7 = LA(1);

    	 
    	    index141_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred153_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index141_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA141_8;

    	    ANTLR3_MARKER index141_8;


    		LA141_8 = LA(1);

    	 
    	    index141_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred153_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index141_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA141_9;

    	    ANTLR3_MARKER index141_9;


    		LA141_9 = LA(1);

    	 
    	    index141_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred153_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index141_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA141_10;

    	    ANTLR3_MARKER index141_10;


    		LA141_10 = LA(1);

    	 
    	    index141_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred153_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index141_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"365:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );";
    EXCEPTION->decisionNum  = 141;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 141
 */
static
ANTLR3_CYCLIC_DFA cdfa141
    =	{
	    141,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"365:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa141_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa141_eot,	    /* EOT table			    */
	    dfa141_eof,	    /* EOF table			    */
	    dfa141_min,	    /* Minimum tokens for each state    */
	    dfa141_max,	    /* Maximum tokens for each state    */
	    dfa141_accept,	/* Accept table			    */
	    dfa141_special,	/* Special transition states	    */
	    dfa141_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 141
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    370:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static const ANTLR3_INT32 dfa144_eot[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa144_eof[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR3_INT32 dfa144_min[21] =
    {
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa144_max[21] =
    {
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa144_accept[21] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2
    };
static const ANTLR3_INT32 dfa144_special[21] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa144_T_empty	    NULL

static const ANTLR3_INT32 dfa144_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, 11, -1, -1, -1, 11, 11, 11, 
	11, 11, 11, 11, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa144_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa144_transitions[] =
{
    dfa144_T0, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, 
    dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T_empty, dfa144_T_empty, 
    dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, dfa144_T_empty, 
    dfa144_T_empty, dfa144_T_empty, dfa144_T_empty	
};

static ANTLR3_INT32 dfa144_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA144_1;

    	    ANTLR3_MARKER index144_1;


    		LA144_1 = LA(1);

    	 
    	    index144_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index144_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA144_2;

    	    ANTLR3_MARKER index144_2;


    		LA144_2 = LA(1);

    	 
    	    index144_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index144_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA144_3;

    	    ANTLR3_MARKER index144_3;


    		LA144_3 = LA(1);

    	 
    	    index144_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index144_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA144_4;

    	    ANTLR3_MARKER index144_4;


    		LA144_4 = LA(1);

    	 
    	    index144_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index144_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA144_5;

    	    ANTLR3_MARKER index144_5;


    		LA144_5 = LA(1);

    	 
    	    index144_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index144_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA144_6;

    	    ANTLR3_MARKER index144_6;


    		LA144_6 = LA(1);

    	 
    	    index144_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index144_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA144_7;

    	    ANTLR3_MARKER index144_7;


    		LA144_7 = LA(1);

    	 
    	    index144_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index144_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA144_8;

    	    ANTLR3_MARKER index144_8;


    		LA144_8 = LA(1);

    	 
    	    index144_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index144_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA144_9;

    	    ANTLR3_MARKER index144_9;


    		LA144_9 = LA(1);

    	 
    	    index144_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index144_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA144_10;

    	    ANTLR3_MARKER index144_10;


    		LA144_10 = LA(1);

    	 
    	    index144_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred156_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index144_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"370:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );";
    EXCEPTION->decisionNum  = 144;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 144
 */
static
ANTLR3_CYCLIC_DFA cdfa144
    =	{
	    144,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"370:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );",	
	    (CDFA_SPECIAL_FUNC) dfa144_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa144_eot,	    /* EOT table			    */
	    dfa144_eof,	    /* EOF table			    */
	    dfa144_min,	    /* Minimum tokens for each state    */
	    dfa144_max,	    /* Maximum tokens for each state    */
	    dfa144_accept,	/* Accept table			    */
	    dfa144_special,	/* Special transition states	    */
	    dfa144_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 144
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    377:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static const ANTLR3_INT32 dfa145_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa145_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa145_min[13] =
    {
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa145_max[13] =
    {
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa145_accept[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa145_special[13] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa145_T_empty	    NULL

static const ANTLR3_INT32 dfa145_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa145_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa145_transitions[] =
{
    dfa145_T0, dfa145_T1, dfa145_T1, dfa145_T1, dfa145_T1, dfa145_T1, dfa145_T1, 
    dfa145_T1, dfa145_T1, dfa145_T1, dfa145_T1, dfa145_T_empty, dfa145_T_empty	
};

static ANTLR3_INT32 dfa145_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA145_1;

    	    ANTLR3_MARKER index145_1;


    		LA145_1 = LA(1);

    	 
    	    index145_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index145_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA145_2;

    	    ANTLR3_MARKER index145_2;


    		LA145_2 = LA(1);

    	 
    	    index145_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index145_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA145_3;

    	    ANTLR3_MARKER index145_3;


    		LA145_3 = LA(1);

    	 
    	    index145_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index145_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA145_4;

    	    ANTLR3_MARKER index145_4;


    		LA145_4 = LA(1);

    	 
    	    index145_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index145_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA145_5;

    	    ANTLR3_MARKER index145_5;


    		LA145_5 = LA(1);

    	 
    	    index145_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index145_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA145_6;

    	    ANTLR3_MARKER index145_6;


    		LA145_6 = LA(1);

    	 
    	    index145_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index145_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA145_7;

    	    ANTLR3_MARKER index145_7;


    		LA145_7 = LA(1);

    	 
    	    index145_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index145_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA145_8;

    	    ANTLR3_MARKER index145_8;


    		LA145_8 = LA(1);

    	 
    	    index145_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index145_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA145_9;

    	    ANTLR3_MARKER index145_9;


    		LA145_9 = LA(1);

    	 
    	    index145_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index145_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA145_10;

    	    ANTLR3_MARKER index145_10;


    		LA145_10 = LA(1);

    	 
    	    index145_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred159_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 12;
    	    }

    	 
    		SEEK(index145_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"377:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );";
    EXCEPTION->decisionNum  = 145;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 145
 */
static
ANTLR3_CYCLIC_DFA cdfa145
    =	{
	    145,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"377:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa145_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa145_eot,	    /* EOT table			    */
	    dfa145_eof,	    /* EOF table			    */
	    dfa145_min,	    /* Minimum tokens for each state    */
	    dfa145_max,	    /* Maximum tokens for each state    */
	    dfa145_accept,	/* Accept table			    */
	    dfa145_special,	/* Special transition states	    */
	    dfa145_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 145
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    382:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static const ANTLR3_INT32 dfa147_eot[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa147_eof[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa147_min[12] =
    {
	110, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa147_max[12] =
    {
	210, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa147_accept[12] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };
static const ANTLR3_INT32 dfa147_special[12] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa147_T_empty	    NULL

static const ANTLR3_INT32 dfa147_T0[] =
    {
	1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa147_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa147_transitions[] =
{
    dfa147_T0, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, 
    dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, dfa147_T_empty, 
    dfa147_T1, dfa147_T_empty	
};

static ANTLR3_INT32 dfa147_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA147_10;

    	    ANTLR3_MARKER index147_10;


    		LA147_10 = LA(1);

    	 
    	    index147_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 11;
    	    }

    	 
    		SEEK(index147_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"382:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );";
    EXCEPTION->decisionNum  = 147;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 147
 */
static
ANTLR3_CYCLIC_DFA cdfa147
    =	{
	    147,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"382:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa147_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa147_eot,	    /* EOT table			    */
	    dfa147_eof,	    /* EOF table			    */
	    dfa147_min,	    /* Minimum tokens for each state    */
	    dfa147_max,	    /* Maximum tokens for each state    */
	    dfa147_accept,	/* Accept table			    */
	    dfa147_special,	/* Special transition states	    */
	    dfa147_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 147
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 399:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa153_eot[60] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa153_eof[60] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa153_min[60] =
    {
	109, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa153_max[60] =
    {
	210, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa153_accept[60] =
    {
	-1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa153_special[60] =
    {	
	-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa153_T_empty	    NULL

static const ANTLR3_INT32 dfa153_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 48, 1, 
	58, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa153_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa153_transitions[] =
{
    dfa153_T0, dfa153_T_empty, dfa153_T1, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T1, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, 
    dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty, dfa153_T_empty	
};

static ANTLR3_INT32 dfa153_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA153_2;

    	    ANTLR3_MARKER index153_2;


    		LA153_2 = LA(1);

    	 
    	    index153_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred166_Emerson(ctx)) )
    	    {
    	        s = 58;
    	    }

    	    else if ( (synpred168_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index153_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA153_48;

    	    ANTLR3_MARKER index153_48;


    		LA153_48 = LA(1);

    	 
    	    index153_48 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred168_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index153_48);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 399:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 153;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 153
 */
static
ANTLR3_CYCLIC_DFA cdfa153
    =	{
	    153,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 399:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa153_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa153_eot,	    /* EOT table			    */
	    dfa153_eof,	    /* EOF table			    */
	    dfa153_min,	    /* Minimum tokens for each state    */
	    dfa153_max,	    /* Maximum tokens for each state    */
	    dfa153_accept,	/* Accept table			    */
	    dfa153_special,	/* Special transition states	    */
	    dfa153_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 153
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 400:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa156_eot[60] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa156_eof[60] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa156_min[60] =
    {
	109, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa156_max[60] =
    {
	210, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa156_accept[60] =
    {
	-1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa156_special[60] =
    {	
	-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa156_T_empty	    NULL

static const ANTLR3_INT32 dfa156_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 48, 1, 
	58, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa156_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa156_transitions[] =
{
    dfa156_T0, dfa156_T_empty, dfa156_T1, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T1, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, 
    dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty, dfa156_T_empty	
};

static ANTLR3_INT32 dfa156_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA156_2;

    	    ANTLR3_MARKER index156_2;


    		LA156_2 = LA(1);

    	 
    	    index156_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred171_Emerson(ctx)) )
    	    {
    	        s = 58;
    	    }

    	    else if ( (synpred173_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index156_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA156_48;

    	    ANTLR3_MARKER index156_48;


    		LA156_48 = LA(1);

    	 
    	    index156_48 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred173_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index156_48);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 400:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 156;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 156
 */
static
ANTLR3_CYCLIC_DFA cdfa156
    =	{
	    156,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 400:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa156_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa156_eot,	    /* EOT table			    */
	    dfa156_eof,	    /* EOF table			    */
	    dfa156_min,	    /* Minimum tokens for each state    */
	    dfa156_max,	    /* Maximum tokens for each state    */
	    dfa156_accept,	/* Accept table			    */
	    dfa156_special,	/* Special transition states	    */
	    dfa156_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 156
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 401:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa161_eot[60] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa161_eof[60] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa161_min[60] =
    {
	109, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa161_max[60] =
    {
	210, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa161_accept[60] =
    {
	-1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa161_special[60] =
    {	
	-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa161_T_empty	    NULL

static const ANTLR3_INT32 dfa161_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 48, 1, 
	58, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa161_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa161_transitions[] =
{
    dfa161_T0, dfa161_T_empty, dfa161_T1, dfa161_T_empty, dfa161_T_empty, 
    dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, 
    dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, 
    dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, 
    dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, 
    dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, 
    dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, 
    dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, 
    dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, 
    dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T1, dfa161_T_empty, 
    dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, 
    dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty, dfa161_T_empty	
};

static ANTLR3_INT32 dfa161_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA161_2;

    	    ANTLR3_MARKER index161_2;


    		LA161_2 = LA(1);

    	 
    	    index161_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred178_Emerson(ctx)) )
    	    {
    	        s = 58;
    	    }

    	    else if ( (synpred180_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index161_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA161_48;

    	    ANTLR3_MARKER index161_48;


    		LA161_48 = LA(1);

    	 
    	    index161_48 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred180_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index161_48);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 401:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 161;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 161
 */
static
ANTLR3_CYCLIC_DFA cdfa161
    =	{
	    161,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 401:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa161_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa161_eot,	    /* EOT table			    */
	    dfa161_eof,	    /* EOF table			    */
	    dfa161_min,	    /* Minimum tokens for each state    */
	    dfa161_max,	    /* Maximum tokens for each state    */
	    dfa161_accept,	/* Accept table			    */
	    dfa161_special,	/* Special transition states	    */
	    dfa161_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 161
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 412:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa168_eot[61] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa168_eof[61] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa168_min[61] =
    {
	109, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa168_max[61] =
    {
	210, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa168_accept[61] =
    {
	-1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 3, 1, 2
    };
static const ANTLR3_INT32 dfa168_special[61] =
    {	
	-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa168_T_empty	    NULL

static const ANTLR3_INT32 dfa168_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 50, 1, 1, 1, 1, 1, -1, 1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 48, 1, 
	58, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa168_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa168_transitions[] =
{
    dfa168_T0, dfa168_T_empty, dfa168_T1, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T1, dfa168_T_empty, 
    dfa168_T1, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, dfa168_T_empty, 
    dfa168_T_empty	
};

static ANTLR3_INT32 dfa168_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA168_2;

    	    ANTLR3_MARKER index168_2;


    		LA168_2 = LA(1);

    	 
    	    index168_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred184_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (synpred186_Emerson(ctx)) )
    	    {
    	        s = 60;
    	    }

    	    else if ( (synpred188_Emerson(ctx)) )
    	    {
    	        s = 58;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index168_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA168_48;

    	    ANTLR3_MARKER index168_48;


    		LA168_48 = LA(1);

    	 
    	    index168_48 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred186_Emerson(ctx)) )
    	    {
    	        s = 60;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index168_48);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA168_50;

    	    ANTLR3_MARKER index168_50;


    		LA168_50 = LA(1);

    	 
    	    index168_50 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred184_Emerson(ctx)) )
    	    {
    	        s = 59;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 1;
    	    }

    	 
    		SEEK(index168_50);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 412:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*";
    EXCEPTION->decisionNum  = 168;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 168
 */
static
ANTLR3_CYCLIC_DFA cdfa168
    =	{
	    168,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 412:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa168_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa168_eot,	    /* EOT table			    */
	    dfa168_eof,	    /* EOF table			    */
	    dfa168_min,	    /* Minimum tokens for each state    */
	    dfa168_max,	    /* Maximum tokens for each state    */
	    dfa168_accept,	/* Accept table			    */
	    dfa168_special,	/* Special transition states	    */
	    dfa168_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 168
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    477:11: (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )?
 */
static const ANTLR3_INT32 dfa204_eot[31] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa204_eof[31] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa204_min[31] =
    {
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa204_max[31] =
    {
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa204_accept[31] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa204_special[31] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa204_T_empty	    NULL

static const ANTLR3_INT32 dfa204_T0[] =
    {
	20, 3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, 20, 7, -1, 20, -1, -1, -1, 
	-1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, 10, 
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 16, 17, -1, -1, -1, 15, 14, 
	11, 12, 13, 18, 19, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa204_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa204_transitions[] =
{
    dfa204_T0, dfa204_T1, dfa204_T1, dfa204_T1, dfa204_T1, dfa204_T1, dfa204_T1, 
    dfa204_T1, dfa204_T1, dfa204_T1, dfa204_T1, dfa204_T1, dfa204_T1, dfa204_T1, 
    dfa204_T1, dfa204_T1, dfa204_T1, dfa204_T1, dfa204_T1, dfa204_T1, dfa204_T_empty, 
    dfa204_T_empty, dfa204_T_empty, dfa204_T_empty, dfa204_T_empty, dfa204_T_empty, 
    dfa204_T_empty, dfa204_T_empty, dfa204_T_empty, dfa204_T_empty, dfa204_T_empty	
};

static ANTLR3_INT32 dfa204_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA204_1;

    	    ANTLR3_MARKER index204_1;


    		LA204_1 = LA(1);

    	 
    	    index204_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA204_2;

    	    ANTLR3_MARKER index204_2;


    		LA204_2 = LA(1);

    	 
    	    index204_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA204_3;

    	    ANTLR3_MARKER index204_3;


    		LA204_3 = LA(1);

    	 
    	    index204_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA204_4;

    	    ANTLR3_MARKER index204_4;


    		LA204_4 = LA(1);

    	 
    	    index204_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA204_5;

    	    ANTLR3_MARKER index204_5;


    		LA204_5 = LA(1);

    	 
    	    index204_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA204_6;

    	    ANTLR3_MARKER index204_6;


    		LA204_6 = LA(1);

    	 
    	    index204_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA204_7;

    	    ANTLR3_MARKER index204_7;


    		LA204_7 = LA(1);

    	 
    	    index204_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA204_8;

    	    ANTLR3_MARKER index204_8;


    		LA204_8 = LA(1);

    	 
    	    index204_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA204_9;

    	    ANTLR3_MARKER index204_9;


    		LA204_9 = LA(1);

    	 
    	    index204_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA204_10;

    	    ANTLR3_MARKER index204_10;


    		LA204_10 = LA(1);

    	 
    	    index204_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA204_11;

    	    ANTLR3_MARKER index204_11;


    		LA204_11 = LA(1);

    	 
    	    index204_11 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_11);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 11:
        
    	{
    	    ANTLR3_UINT32 LA204_12;

    	    ANTLR3_MARKER index204_12;


    		LA204_12 = LA(1);

    	 
    	    index204_12 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_12);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 12:
        
    	{
    	    ANTLR3_UINT32 LA204_13;

    	    ANTLR3_MARKER index204_13;


    		LA204_13 = LA(1);

    	 
    	    index204_13 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_13);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 13:
        
    	{
    	    ANTLR3_UINT32 LA204_14;

    	    ANTLR3_MARKER index204_14;


    		LA204_14 = LA(1);

    	 
    	    index204_14 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_14);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 14:
        
    	{
    	    ANTLR3_UINT32 LA204_15;

    	    ANTLR3_MARKER index204_15;


    		LA204_15 = LA(1);

    	 
    	    index204_15 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_15);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 15:
        
    	{
    	    ANTLR3_UINT32 LA204_16;

    	    ANTLR3_MARKER index204_16;


    		LA204_16 = LA(1);

    	 
    	    index204_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 16:
        
    	{
    	    ANTLR3_UINT32 LA204_17;

    	    ANTLR3_MARKER index204_17;


    		LA204_17 = LA(1);

    	 
    	    index204_17 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_17);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 17:
        
    	{
    	    ANTLR3_UINT32 LA204_18;

    	    ANTLR3_MARKER index204_18;


    		LA204_18 = LA(1);

    	 
    	    index204_18 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_18);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 18:
        
    	{
    	    ANTLR3_UINT32 LA204_19;

    	    ANTLR3_MARKER index204_19;


    		LA204_19 = LA(1);

    	 
    	    index204_19 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred232_Emerson(ctx)) )
    	    {
    	        s = 30;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 20;
    	    }

    	 
    		SEEK(index204_19);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"477:11: (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )?";
    EXCEPTION->decisionNum  = 204;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 204
 */
static
ANTLR3_CYCLIC_DFA cdfa204
    =	{
	    204,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"477:11: (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )?",	
	    (CDFA_SPECIAL_FUNC) dfa204_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa204_eot,	    /* EOT table			    */
	    dfa204_eof,	    /* EOF table			    */
	    dfa204_min,	    /* Minimum tokens for each state    */
	    dfa204_max,	    /* Maximum tokens for each state    */
	    dfa204_accept,	/* Accept table			    */
	    dfa204_special,	/* Special transition states	    */
	    dfa204_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 204
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 499:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
 */
static const ANTLR3_INT32 dfa216_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa216_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa216_min[5] =
    {
	109, 109, -1, -1, 109
    };
static const ANTLR3_INT32 dfa216_max[5] =
    {
	180, 210, -1, -1, 210
    };
static const ANTLR3_INT32 dfa216_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa216_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa216_T_empty	    NULL

static const ANTLR3_INT32 dfa216_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa216_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa216_transitions[] =
{
    dfa216_T1, dfa216_T0, dfa216_T_empty, dfa216_T_empty, dfa216_T0	
};


/* Declare tracking structure for Cyclic DFA 216
 */
static
ANTLR3_CYCLIC_DFA cdfa216
    =	{
	    216,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 499:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa216_eot,	    /* EOT table			    */
	    dfa216_eof,	    /* EOF table			    */
	    dfa216_min,	    /* Minimum tokens for each state    */
	    dfa216_max,	    /* Maximum tokens for each state    */
	    dfa216_accept,	/* Accept table			    */
	    dfa216_special,	/* Special transition states	    */
	    dfa216_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 216
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 503:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
 */
static const ANTLR3_INT32 dfa219_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa219_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa219_min[5] =
    {
	109, 109, -1, -1, 109
    };
static const ANTLR3_INT32 dfa219_max[5] =
    {
	181, 210, -1, -1, 210
    };
static const ANTLR3_INT32 dfa219_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa219_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa219_T_empty	    NULL

static const ANTLR3_INT32 dfa219_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa219_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa219_transitions[] =
{
    dfa219_T1, dfa219_T0, dfa219_T_empty, dfa219_T_empty, dfa219_T0	
};


/* Declare tracking structure for Cyclic DFA 219
 */
static
ANTLR3_CYCLIC_DFA cdfa219
    =	{
	    219,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 503:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa219_eot,	    /* EOT table			    */
	    dfa219_eof,	    /* EOF table			    */
	    dfa219_min,	    /* Minimum tokens for each state    */
	    dfa219_max,	    /* Maximum tokens for each state    */
	    dfa219_accept,	/* Accept table			    */
	    dfa219_special,	/* Special transition states	    */
	    dfa219_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 219
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 507:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa222_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa222_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa222_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa222_max[4] =
    {
	210, 180, -1, -1
    };
static const ANTLR3_INT32 dfa222_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa222_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa222_T_empty	    NULL

static const ANTLR3_INT32 dfa222_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3
    };static const ANTLR3_INT32 dfa222_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa222_transitions[] =
{
    dfa222_T1, dfa222_T0, dfa222_T_empty, dfa222_T_empty	
};


/* Declare tracking structure for Cyclic DFA 222
 */
static
ANTLR3_CYCLIC_DFA cdfa222
    =	{
	    222,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 507:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa222_eot,	    /* EOT table			    */
	    dfa222_eof,	    /* EOF table			    */
	    dfa222_min,	    /* Minimum tokens for each state    */
	    dfa222_max,	    /* Maximum tokens for each state    */
	    dfa222_accept,	/* Accept table			    */
	    dfa222_special,	/* Special transition states	    */
	    dfa222_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 222
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 512:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa225_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa225_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa225_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa225_max[4] =
    {
	210, 181, -1, -1
    };
static const ANTLR3_INT32 dfa225_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa225_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa225_T_empty	    NULL

static const ANTLR3_INT32 dfa225_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };static const ANTLR3_INT32 dfa225_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa225_transitions[] =
{
    dfa225_T0, dfa225_T1, dfa225_T_empty, dfa225_T_empty	
};


/* Declare tracking structure for Cyclic DFA 225
 */
static
ANTLR3_CYCLIC_DFA cdfa225
    =	{
	    225,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 512:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa225_eot,	    /* EOT table			    */
	    dfa225_eof,	    /* EOF table			    */
	    dfa225_min,	    /* Minimum tokens for each state    */
	    dfa225_max,	    /* Maximum tokens for each state    */
	    dfa225_accept,	/* Accept table			    */
	    dfa225_special,	/* Special transition states	    */
	    dfa225_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 225
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 516:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
 */
static const ANTLR3_INT32 dfa228_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa228_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa228_min[5] =
    {
	109, 109, -1, -1, 109
    };
static const ANTLR3_INT32 dfa228_max[5] =
    {
	182, 210, -1, -1, 210
    };
static const ANTLR3_INT32 dfa228_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa228_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa228_T_empty	    NULL

static const ANTLR3_INT32 dfa228_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3
    };static const ANTLR3_INT32 dfa228_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa228_transitions[] =
{
    dfa228_T0, dfa228_T1, dfa228_T_empty, dfa228_T_empty, dfa228_T1	
};


/* Declare tracking structure for Cyclic DFA 228
 */
static
ANTLR3_CYCLIC_DFA cdfa228
    =	{
	    228,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 516:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa228_eot,	    /* EOT table			    */
	    dfa228_eof,	    /* EOF table			    */
	    dfa228_min,	    /* Minimum tokens for each state    */
	    dfa228_max,	    /* Maximum tokens for each state    */
	    dfa228_accept,	/* Accept table			    */
	    dfa228_special,	/* Special transition states	    */
	    dfa228_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 228
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 520:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa231_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa231_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa231_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa231_max[4] =
    {
	210, 182, -1, -1
    };
static const ANTLR3_INT32 dfa231_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa231_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa231_T_empty	    NULL

static const ANTLR3_INT32 dfa231_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };static const ANTLR3_INT32 dfa231_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa231_transitions[] =
{
    dfa231_T0, dfa231_T1, dfa231_T_empty, dfa231_T_empty	
};


/* Declare tracking structure for Cyclic DFA 231
 */
static
ANTLR3_CYCLIC_DFA cdfa231
    =	{
	    231,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 520:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa231_eot,	    /* EOT table			    */
	    dfa231_eof,	    /* EOF table			    */
	    dfa231_min,	    /* Minimum tokens for each state    */
	    dfa231_max,	    /* Maximum tokens for each state    */
	    dfa231_accept,	/* Accept table			    */
	    dfa231_special,	/* Special transition states	    */
	    dfa231_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 231
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 524:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
 */
static const ANTLR3_INT32 dfa234_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa234_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa234_min[5] =
    {
	109, 109, -1, -1, 109
    };
static const ANTLR3_INT32 dfa234_max[5] =
    {
	183, 210, -1, -1, 210
    };
static const ANTLR3_INT32 dfa234_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa234_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa234_T_empty	    NULL

static const ANTLR3_INT32 dfa234_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, -1, 2, -1, 
	-1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa234_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa234_transitions[] =
{
    dfa234_T1, dfa234_T0, dfa234_T_empty, dfa234_T_empty, dfa234_T0	
};


/* Declare tracking structure for Cyclic DFA 234
 */
static
ANTLR3_CYCLIC_DFA cdfa234
    =	{
	    234,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 524:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa234_eot,	    /* EOT table			    */
	    dfa234_eof,	    /* EOF table			    */
	    dfa234_min,	    /* Minimum tokens for each state    */
	    dfa234_max,	    /* Maximum tokens for each state    */
	    dfa234_accept,	/* Accept table			    */
	    dfa234_special,	/* Special transition states	    */
	    dfa234_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 234
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 528:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa237_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa237_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa237_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa237_max[4] =
    {
	210, 183, -1, -1
    };
static const ANTLR3_INT32 dfa237_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa237_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa237_T_empty	    NULL

static const ANTLR3_INT32 dfa237_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 3
    };static const ANTLR3_INT32 dfa237_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 3, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa237_transitions[] =
{
    dfa237_T1, dfa237_T0, dfa237_T_empty, dfa237_T_empty	
};


/* Declare tracking structure for Cyclic DFA 237
 */
static
ANTLR3_CYCLIC_DFA cdfa237
    =	{
	    237,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 528:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa237_eot,	    /* EOT table			    */
	    dfa237_eof,	    /* EOF table			    */
	    dfa237_min,	    /* Minimum tokens for each state    */
	    dfa237_max,	    /* Maximum tokens for each state    */
	    dfa237_accept,	/* Accept table			    */
	    dfa237_special,	/* Special transition states	    */
	    dfa237_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 237
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 532:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
 */
static const ANTLR3_INT32 dfa240_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa240_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa240_min[5] =
    {
	109, 109, -1, -1, 109
    };
static const ANTLR3_INT32 dfa240_max[5] =
    {
	184, 210, -1, -1, 210
    };
static const ANTLR3_INT32 dfa240_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa240_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa240_T_empty	    NULL

static const ANTLR3_INT32 dfa240_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa240_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa240_transitions[] =
{
    dfa240_T1, dfa240_T0, dfa240_T_empty, dfa240_T_empty, dfa240_T0	
};


/* Declare tracking structure for Cyclic DFA 240
 */
static
ANTLR3_CYCLIC_DFA cdfa240
    =	{
	    240,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 532:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa240_eot,	    /* EOT table			    */
	    dfa240_eof,	    /* EOF table			    */
	    dfa240_min,	    /* Minimum tokens for each state    */
	    dfa240_max,	    /* Maximum tokens for each state    */
	    dfa240_accept,	/* Accept table			    */
	    dfa240_special,	/* Special transition states	    */
	    dfa240_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 240
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 536:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa243_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa243_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa243_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa243_max[4] =
    {
	210, 184, -1, -1
    };
static const ANTLR3_INT32 dfa243_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa243_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa243_T_empty	    NULL

static const ANTLR3_INT32 dfa243_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 3, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };static const ANTLR3_INT32 dfa243_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa243_transitions[] =
{
    dfa243_T0, dfa243_T1, dfa243_T_empty, dfa243_T_empty	
};


/* Declare tracking structure for Cyclic DFA 243
 */
static
ANTLR3_CYCLIC_DFA cdfa243
    =	{
	    243,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 536:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa243_eot,	    /* EOT table			    */
	    dfa243_eof,	    /* EOF table			    */
	    dfa243_min,	    /* Minimum tokens for each state    */
	    dfa243_max,	    /* Maximum tokens for each state    */
	    dfa243_accept,	/* Accept table			    */
	    dfa243_special,	/* Special transition states	    */
	    dfa243_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 243
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 540:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
 */
static const ANTLR3_INT32 dfa246_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa246_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa246_min[5] =
    {
	109, 109, -1, -1, 109
    };
static const ANTLR3_INT32 dfa246_max[5] =
    {
	188, 210, -1, -1, 210
    };
static const ANTLR3_INT32 dfa246_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa246_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa246_T_empty	    NULL

static const ANTLR3_INT32 dfa246_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 3, 3
    };static const ANTLR3_INT32 dfa246_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, -1, -1, -1, 
	-1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa246_transitions[] =
{
    dfa246_T0, dfa246_T1, dfa246_T_empty, dfa246_T_empty, dfa246_T1	
};


/* Declare tracking structure for Cyclic DFA 246
 */
static
ANTLR3_CYCLIC_DFA cdfa246
    =	{
	    246,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 540:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa246_eot,	    /* EOT table			    */
	    dfa246_eof,	    /* EOF table			    */
	    dfa246_min,	    /* Minimum tokens for each state    */
	    dfa246_max,	    /* Maximum tokens for each state    */
	    dfa246_accept,	/* Accept table			    */
	    dfa246_special,	/* Special transition states	    */
	    dfa246_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 246
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 552:65: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa250_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa250_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa250_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa250_max[4] =
    {
	210, 188, -1, -1
    };
static const ANTLR3_INT32 dfa250_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa250_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa250_T_empty	    NULL

static const ANTLR3_INT32 dfa250_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	3, 3, 3, 3
    };static const ANTLR3_INT32 dfa250_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 
	3, 3, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa250_transitions[] =
{
    dfa250_T1, dfa250_T0, dfa250_T_empty, dfa250_T_empty	
};


/* Declare tracking structure for Cyclic DFA 250
 */
static
ANTLR3_CYCLIC_DFA cdfa250
    =	{
	    250,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 552:65: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa250_eot,	    /* EOT table			    */
	    dfa250_eof,	    /* EOF table			    */
	    dfa250_min,	    /* Minimum tokens for each state    */
	    dfa250_max,	    /* Maximum tokens for each state    */
	    dfa250_accept,	/* Accept table			    */
	    dfa250_special,	/* Special transition states	    */
	    dfa250_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 250
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 567:54: ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )*
 */
static const ANTLR3_INT32 dfa254_eot[28] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_eof[28] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_min[28] =
    {
	109, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_max[28] =
    {
	193, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_accept[28] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa254_special[28] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa254_T_empty	    NULL

static const ANTLR3_INT32 dfa254_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, -1, 
	-1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 22, 22, 22, 22, 22
    };static const ANTLR3_INT32 dfa254_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa254_transitions[] =
{
    dfa254_T0, dfa254_T1, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, dfa254_T_empty, 
    dfa254_T_empty, dfa254_T_empty, dfa254_T_empty	
};

static ANTLR3_INT32 dfa254_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA254_1;

    	    ANTLR3_MARKER index254_1;


    		LA254_1 = LA(1);

    	 
    	    index254_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred288_Emerson(ctx)) )
    	    {
    	        s = 22;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index254_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 567:54: ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )*";
    EXCEPTION->decisionNum  = 254;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 254
 */
static
ANTLR3_CYCLIC_DFA cdfa254
    =	{
	    254,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 567:54: ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa254_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa254_eot,	    /* EOT table			    */
	    dfa254_eof,	    /* EOF table			    */
	    dfa254_min,	    /* Minimum tokens for each state    */
	    dfa254_max,	    /* Maximum tokens for each state    */
	    dfa254_accept,	/* Accept table			    */
	    dfa254_special,	/* Special transition states	    */
	    dfa254_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 254
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 585:54: ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )*
 */
static const ANTLR3_INT32 dfa259_eot[43] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa259_eof[43] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa259_min[43] =
    {
	109, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa259_max[43] =
    {
	210, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa259_accept[43] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa259_special[43] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa259_T_empty	    NULL

static const ANTLR3_INT32 dfa259_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, 2, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 16, 39, 39, 39, 39, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };static const ANTLR3_INT32 dfa259_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa259_transitions[] =
{
    dfa259_T0, dfa259_T1, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T1, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, dfa259_T_empty, 
    dfa259_T_empty, dfa259_T_empty, dfa259_T_empty	
};

static ANTLR3_INT32 dfa259_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA259_1;

    	    ANTLR3_MARKER index259_1;


    		LA259_1 = LA(1);

    	 
    	    index259_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred296_Emerson(ctx)) )
    	    {
    	        s = 39;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index259_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA259_16;

    	    ANTLR3_MARKER index259_16;


    		LA259_16 = LA(1);

    	 
    	    index259_16 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred296_Emerson(ctx)) )
    	    {
    	        s = 39;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index259_16);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 585:54: ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )*";
    EXCEPTION->decisionNum  = 259;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 259
 */
static
ANTLR3_CYCLIC_DFA cdfa259
    =	{
	    259,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 585:54: ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa259_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa259_eot,	    /* EOT table			    */
	    dfa259_eof,	    /* EOF table			    */
	    dfa259_min,	    /* Minimum tokens for each state    */
	    dfa259_max,	    /* Maximum tokens for each state    */
	    dfa259_accept,	/* Accept table			    */
	    dfa259_special,	/* Special transition states	    */
	    dfa259_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 259
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 590:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
 */
static const ANTLR3_INT32 dfa262_eot[47] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa262_eof[47] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa262_min[47] =
    {
	109, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa262_max[47] =
    {
	210, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa262_accept[47] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa262_special[47] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 1, 2, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa262_T_empty	    NULL

static const ANTLR3_INT32 dfa262_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 42, 43, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2
    };static const ANTLR3_INT32 dfa262_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa262_transitions[] =
{
    dfa262_T0, dfa262_T1, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty, dfa262_T1, dfa262_T1, dfa262_T_empty, 
    dfa262_T_empty, dfa262_T_empty	
};

static ANTLR3_INT32 dfa262_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA262_1;

    	    ANTLR3_MARKER index262_1;


    		LA262_1 = LA(1);

    	 
    	    index262_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred299_Emerson(ctx)) )
    	    {
    	        s = 46;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index262_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA262_42;

    	    ANTLR3_MARKER index262_42;


    		LA262_42 = LA(1);

    	 
    	    index262_42 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred299_Emerson(ctx)) )
    	    {
    	        s = 46;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index262_42);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA262_43;

    	    ANTLR3_MARKER index262_43;


    		LA262_43 = LA(1);

    	 
    	    index262_43 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred299_Emerson(ctx)) )
    	    {
    	        s = 46;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index262_43);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 590:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*";
    EXCEPTION->decisionNum  = 262;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 262
 */
static
ANTLR3_CYCLIC_DFA cdfa262
    =	{
	    262,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 590:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa262_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa262_eot,	    /* EOT table			    */
	    dfa262_eof,	    /* EOF table			    */
	    dfa262_min,	    /* Minimum tokens for each state    */
	    dfa262_max,	    /* Maximum tokens for each state    */
	    dfa262_accept,	/* Accept table			    */
	    dfa262_special,	/* Special transition states	    */
	    dfa262_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 262
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 600:44: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
 */
static const ANTLR3_INT32 dfa266_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa266_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa266_min[5] =
    {
	109, 109, -1, -1, 109
    };
static const ANTLR3_INT32 dfa266_max[5] =
    {
	210, 210, -1, -1, 210
    };
static const ANTLR3_INT32 dfa266_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa266_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa266_T_empty	    NULL

static const ANTLR3_INT32 dfa266_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa266_T1[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 2, 2, 2, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa266_transitions[] =
{
    dfa266_T1, dfa266_T0, dfa266_T_empty, dfa266_T_empty, dfa266_T0	
};


/* Declare tracking structure for Cyclic DFA 266
 */
static
ANTLR3_CYCLIC_DFA cdfa266
    =	{
	    266,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 600:44: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa266_eot,	    /* EOT table			    */
	    dfa266_eof,	    /* EOF table			    */
	    dfa266_min,	    /* Minimum tokens for each state    */
	    dfa266_max,	    /* Maximum tokens for each state    */
	    dfa266_accept,	/* Accept table			    */
	    dfa266_special,	/* Special transition states	    */
	    dfa266_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 266
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    604:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );
 */
static const ANTLR3_INT32 dfa267_eot[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa267_eof[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa267_min[14] =
    {
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa267_max[14] =
    {
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa267_accept[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3
    };
static const ANTLR3_INT32 dfa267_special[14] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa267_T_empty	    NULL

static const ANTLR3_INT32 dfa267_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa267_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa267_transitions[] =
{
    dfa267_T0, dfa267_T1, dfa267_T1, dfa267_T1, dfa267_T1, dfa267_T1, dfa267_T1, 
    dfa267_T1, dfa267_T1, dfa267_T1, dfa267_T1, dfa267_T_empty, dfa267_T_empty, 
    dfa267_T_empty	
};

static ANTLR3_INT32 dfa267_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA267_1;

    	    ANTLR3_MARKER index267_1;


    		LA267_1 = LA(1);

    	 
    	    index267_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index267_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA267_2;

    	    ANTLR3_MARKER index267_2;


    		LA267_2 = LA(1);

    	 
    	    index267_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index267_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA267_3;

    	    ANTLR3_MARKER index267_3;


    		LA267_3 = LA(1);

    	 
    	    index267_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index267_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA267_4;

    	    ANTLR3_MARKER index267_4;


    		LA267_4 = LA(1);

    	 
    	    index267_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index267_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA267_5;

    	    ANTLR3_MARKER index267_5;


    		LA267_5 = LA(1);

    	 
    	    index267_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index267_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA267_6;

    	    ANTLR3_MARKER index267_6;


    		LA267_6 = LA(1);

    	 
    	    index267_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index267_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA267_7;

    	    ANTLR3_MARKER index267_7;


    		LA267_7 = LA(1);

    	 
    	    index267_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index267_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA267_8;

    	    ANTLR3_MARKER index267_8;


    		LA267_8 = LA(1);

    	 
    	    index267_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index267_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA267_9;

    	    ANTLR3_MARKER index267_9;


    		LA267_9 = LA(1);

    	 
    	    index267_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index267_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA267_10;

    	    ANTLR3_MARKER index267_10;


    		LA267_10 = LA(1);

    	 
    	    index267_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred305_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred306_Emerson(ctx)) )
    	    {
    	        s = 12;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 13;
    	    }

    	 
    		SEEK(index267_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"604:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );";
    EXCEPTION->decisionNum  = 267;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 267
 */
static
ANTLR3_CYCLIC_DFA cdfa267
    =	{
	    267,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"604:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa267_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa267_eot,	    /* EOT table			    */
	    dfa267_eof,	    /* EOF table			    */
	    dfa267_min,	    /* Minimum tokens for each state    */
	    dfa267_max,	    /* Maximum tokens for each state    */
	    dfa267_accept,	/* Accept table			    */
	    dfa267_special,	/* Special transition states	    */
	    dfa267_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 267
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    630:1: primaryExpression : ( 'this' | ( vectorLiteral )=> vectorLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );
 */
static const ANTLR3_INT32 dfa272_eot[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa272_eof[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa272_min[11] =
    {
	110, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa272_max[11] =
    {
	210, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa272_accept[11] =
    {
	-1, 1, 2, 3, 4, 5, 6, -1, 9, 7, 8
    };
static const ANTLR3_INT32 dfa272_special[11] =
    {	
	0, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa272_T_empty	    NULL

static const ANTLR3_INT32 dfa272_T0[] =
    {
	3, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 1, 4, 5, 5, 5
    };static const ANTLR3_INT32 dfa272_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa272_transitions[] =
{
    dfa272_T0, dfa272_T_empty, dfa272_T_empty, dfa272_T_empty, dfa272_T_empty, 
    dfa272_T_empty, dfa272_T_empty, dfa272_T1, dfa272_T_empty, dfa272_T_empty, 
    dfa272_T_empty	
};

static ANTLR3_INT32 dfa272_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA272_0;

    	    ANTLR3_MARKER index272_0;


    		LA272_0 = LA(1);

    	 
    	    index272_0 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (LA272_0 == 206) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (LA272_0 == 189) && (synpred317_Emerson(ctx)))
    	    {
    	        s = 2;
    	    }

    	    else if ( (LA272_0 == Identifier) )
    	    {
    	        s = 3;
    	    }

    	    else if ( (LA272_0 == 207) )
    	    {
    	        s = 4;
    	    }

    	    else if ( (((LA272_0 >= NumericLiteral) && (LA272_0 <= StringLiteral)) || ((LA272_0 >= 208) && (LA272_0 <= 210))) )
    	    {
    	        s = 5;
    	    }

    	    else if ( (LA272_0 == 165) )
    	    {
    	        s = 6;
    	    }

    	    else if ( (LA272_0 == 141) )
    	    {
    	        s = 7;
    	    }

    	    else if ( (LA272_0 == 138) )
    	    {
    	        s = 8;
    	    }

    	 
    		SEEK(index272_0);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA272_7;

    	    ANTLR3_MARKER index272_7;


    		LA272_7 = LA(1);

    	 
    	    index272_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred322_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (synpred323_Emerson(ctx)) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index272_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"630:1: primaryExpression : ( 'this' | ( vectorLiteral )=> vectorLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );";
    EXCEPTION->decisionNum  = 272;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 272
 */
static
ANTLR3_CYCLIC_DFA cdfa272
    =	{
	    272,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"630:1: primaryExpression : ( 'this' | ( vectorLiteral )=> vectorLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa272_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa272_eot,	    /* EOT table			    */
	    dfa272_eof,	    /* EOF table			    */
	    dfa272_min,	    /* Minimum tokens for each state    */
	    dfa272_max,	    /* Maximum tokens for each state    */
	    dfa272_accept,	/* Accept table			    */
	    dfa272_special,	/* Special transition states	    */
	    dfa272_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 272
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    648:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );
 */
static const ANTLR3_INT32 dfa279_eot[24] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa279_eof[24] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa279_min[24] =
    {
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa279_max[24] =
    {
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	0, -1, -1, -1
    };
static const ANTLR3_INT32 dfa279_accept[24] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 3, 4, 2
    };
static const ANTLR3_INT32 dfa279_special[24] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 
	-1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa279_T_empty	    NULL

static const ANTLR3_INT32 dfa279_T0[] =
    {
	3, 5, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, 11, -1, -1, -1, 11, 11, 11, 
	11, 11, 11, 11, 1, 4, 20, 20, 20
    };static const ANTLR3_INT32 dfa279_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa279_transitions[] =
{
    dfa279_T0, dfa279_T1, dfa279_T1, dfa279_T1, dfa279_T1, dfa279_T1, dfa279_T1, 
    dfa279_T1, dfa279_T1, dfa279_T1, dfa279_T1, dfa279_T_empty, dfa279_T_empty, 
    dfa279_T_empty, dfa279_T_empty, dfa279_T_empty, dfa279_T_empty, dfa279_T_empty, 
    dfa279_T_empty, dfa279_T_empty, dfa279_T1, dfa279_T_empty, dfa279_T_empty, 
    dfa279_T_empty	
};

static ANTLR3_INT32 dfa279_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA279_1;

    	    ANTLR3_MARKER index279_1;


    		LA279_1 = LA(1);

    	 
    	    index279_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred332_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred334_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index279_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA279_2;

    	    ANTLR3_MARKER index279_2;


    		LA279_2 = LA(1);

    	 
    	    index279_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred332_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred334_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index279_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA279_3;

    	    ANTLR3_MARKER index279_3;


    		LA279_3 = LA(1);

    	 
    	    index279_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred332_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred334_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index279_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA279_4;

    	    ANTLR3_MARKER index279_4;


    		LA279_4 = LA(1);

    	 
    	    index279_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred332_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred334_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index279_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA279_5;

    	    ANTLR3_MARKER index279_5;


    		LA279_5 = LA(1);

    	 
    	    index279_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred332_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred333_Emerson(ctx)) )
    	    {
    	        s = 23;
    	    }

    	    else if ( (synpred334_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index279_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA279_6;

    	    ANTLR3_MARKER index279_6;


    		LA279_6 = LA(1);

    	 
    	    index279_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred332_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred334_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index279_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA279_7;

    	    ANTLR3_MARKER index279_7;


    		LA279_7 = LA(1);

    	 
    	    index279_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred332_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred334_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index279_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA279_8;

    	    ANTLR3_MARKER index279_8;


    		LA279_8 = LA(1);

    	 
    	    index279_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred332_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred334_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index279_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 8:
        
    	{
    	    ANTLR3_UINT32 LA279_9;

    	    ANTLR3_MARKER index279_9;


    		LA279_9 = LA(1);

    	 
    	    index279_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred332_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred334_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index279_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 9:
        
    	{
    	    ANTLR3_UINT32 LA279_10;

    	    ANTLR3_MARKER index279_10;


    		LA279_10 = LA(1);

    	 
    	    index279_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred332_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred334_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index279_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 10:
        
    	{
    	    ANTLR3_UINT32 LA279_20;

    	    ANTLR3_MARKER index279_20;


    		LA279_20 = LA(1);

    	 
    	    index279_20 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred332_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred334_Emerson(ctx)) )
    	    {
    	        s = 21;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 22;
    	    }

    	 
    		SEEK(index279_20);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"648:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );";
    EXCEPTION->decisionNum  = 279;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 279
 */
static
ANTLR3_CYCLIC_DFA cdfa279
    =	{
	    279,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"648:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa279_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa279_eot,	    /* EOT table			    */
	    dfa279_eof,	    /* EOF table			    */
	    dfa279_min,	    /* Minimum tokens for each state    */
	    dfa279_max,	    /* Maximum tokens for each state    */
	    dfa279_accept,	/* Accept table			    */
	    dfa279_special,	/* Special transition states	    */
	    dfa279_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 279
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    675:16: ( nameValueProto )?
 */
static const ANTLR3_INT32 dfa299_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa299_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa299_min[4] =
    {
	109, -1, 109, -1
    };
static const ANTLR3_INT32 dfa299_max[4] =
    {
	158, -1, 158, -1
    };
static const ANTLR3_INT32 dfa299_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa299_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa299_T_empty	    NULL

static const ANTLR3_INT32 dfa299_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };static const ANTLR3_INT32 dfa299_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa299_transitions[] =
{
    dfa299_T0, dfa299_T_empty, dfa299_T1, dfa299_T_empty	
};


/* Declare tracking structure for Cyclic DFA 299
 */
static
ANTLR3_CYCLIC_DFA cdfa299
    =	{
	    299,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"675:16: ( nameValueProto )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa299_eot,	    /* EOT table			    */
	    dfa299_eof,	    /* EOF table			    */
	    dfa299_min,	    /* Minimum tokens for each state    */
	    dfa299_max,	    /* Maximum tokens for each state    */
	    dfa299_accept,	/* Accept table			    */
	    dfa299_special,	/* Special transition states	    */
	    dfa299_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 299
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    308:56: ( statementList )?
 */
static const ANTLR3_INT32 dfa337_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa337_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa337_min[4] =
    {
	109, 109, -1, -1
    };
static const ANTLR3_INT32 dfa337_max[4] =
    {
	210, 210, -1, -1
    };
static const ANTLR3_INT32 dfa337_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa337_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa337_T_empty	    NULL

static const ANTLR3_INT32 dfa337_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 2, 2, -1, 2, -1, 
	2, 2, 2, -1, 2, 2, 2, 2, 2, -1, -1, 3, 2, 2, -1, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa337_transitions[] =
{
    dfa337_T0, dfa337_T0, dfa337_T_empty, dfa337_T_empty	
};


/* Declare tracking structure for Cyclic DFA 337
 */
static
ANTLR3_CYCLIC_DFA cdfa337
    =	{
	    337,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"308:56: ( statementList )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa337_eot,	    /* EOT table			    */
	    dfa337_eof,	    /* EOF table			    */
	    dfa337_min,	    /* Minimum tokens for each state    */
	    dfa337_max,	    /* Maximum tokens for each state    */
	    dfa337_accept,	/* Accept table			    */
	    dfa337_special,	/* Special transition states	    */
	    dfa337_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 337
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    675:16: ( nameValueProto )?
 */
static const ANTLR3_INT32 dfa423_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa423_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa423_min[4] =
    {
	109, -1, 109, -1
    };
static const ANTLR3_INT32 dfa423_max[4] =
    {
	158, -1, 158, -1
    };
static const ANTLR3_INT32 dfa423_accept[4] =
    {
	-1, 1, -1, 2
    };
static const ANTLR3_INT32 dfa423_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa423_T_empty	    NULL

static const ANTLR3_INT32 dfa423_T0[] =
    {
	2, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };static const ANTLR3_INT32 dfa423_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa423_transitions[] =
{
    dfa423_T0, dfa423_T_empty, dfa423_T1, dfa423_T_empty	
};


/* Declare tracking structure for Cyclic DFA 423
 */
static
ANTLR3_CYCLIC_DFA cdfa423
    =	{
	    423,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"675:16: ( nameValueProto )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa423_eot,	    /* EOT table			    */
	    dfa423_eof,	    /* EOF table			    */
	    dfa423_min,	    /* Minimum tokens for each state    */
	    dfa423_max,	    /* Maximum tokens for each state    */
	    dfa423_accept,	/* Accept table			    */
	    dfa423_special,	/* Special transition states	    */
	    dfa423_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 423
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * .//Emerson.g:141:1: program : (a= LTERM )* ( sourceElements )? ( LTERM )* EOF -> ^( PROG ( sourceElements )? ) ;
 */
static EmersonParser_program_return
program(pEmersonParser ctx)
{   
    EmersonParser_program_return retval;
    ANTLR3_UINT32 program_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    a;
    pANTLR3_COMMON_TOKEN    LTERM2;
    pANTLR3_COMMON_TOKEN    EOF3;
    EmersonParser_sourceElements_return sourceElements1;
    #undef	RETURN_TYPE_sourceElements1
    #define	RETURN_TYPE_sourceElements1 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE a_tree;
    pANTLR3_BASE_TREE LTERM2_tree;
    pANTLR3_BASE_TREE EOF3_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    program_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(1)) )
    {
    	retval.start = 0;

        return retval; 
    }
    a       = NULL;
    LTERM2       = NULL;
    EOF3       = NULL;
    sourceElements1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    a_tree   = NULL;
    LTERM2_tree   = NULL;
    EOF3_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:142:2: ( (a= LTERM )* ( sourceElements )? ( LTERM )* EOF -> ^( PROG ( sourceElements )? ) )
        // .//Emerson.g:142:4: (a= LTERM )* ( sourceElements )? ( LTERM )* EOF
        {

            // .//Emerson.g:142:5: (a= LTERM )*

            for (;;)
            {
                int alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA1_0 = LA(1);
                    if ( (LA1_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA1_2 = LA(2);
                            if ( (synpred1_Emerson(ctx)) ) 
                            {
                                alt1=1;
                            }

                        }
                    }

                }
                switch (alt1) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: a= LTERM
            	    {
            	        a = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program881); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, a, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:142:14: ( sourceElements )?
            {
                int alt2=2;
                alt2 = cdfa2.predict(ctx, RECOGNIZER, ISTREAM, &cdfa2);
                if  (HASEXCEPTION())
                {
                    goto ruleprogramEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt2) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: sourceElements
            	    {
            	        FOLLOWPUSH(FOLLOW_sourceElements_in_program885);
            	        sourceElements1=sourceElements(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements1.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:142:30: ( LTERM )*

            for (;;)
            {
                int alt3=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA3_0 = LA(1);
                    if ( (LA3_0 == LTERM) ) 
                    {
                        alt3=1;
                    }

                }
                switch (alt3) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM2 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program888); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM2, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */

            EOF3 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_program891); 
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF3, NULL); }


             
            /* AST REWRITE
             * elements          : sourceElements
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 142:41: -> ^( PROG ( sourceElements )? )
            	{
            	    // .//Emerson.g:142:44: ^( PROG ( sourceElements )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PROG, (pANTLR3_UINT8)"PROG"), root_1));

            	        // .//Emerson.g:142:51: ( sourceElements )?
            	        {
            	        	if ( (stream_sourceElements != NULL && stream_sourceElements->hasNext(stream_sourceElements))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

            	        	}
            	        	if ( stream_sourceElements != NULL) stream_sourceElements->reset(stream_sourceElements);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(1, program_StartIndex); }
    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start sourceElements
 * .//Emerson.g:145:1: sourceElements : sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ ;
 */
static EmersonParser_sourceElements_return
sourceElements(pEmersonParser ctx)
{   
    EmersonParser_sourceElements_return retval;
    ANTLR3_UINT32 sourceElements_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM5;
    EmersonParser_sourceElement_return sourceElement4;
    #undef	RETURN_TYPE_sourceElement4
    #define	RETURN_TYPE_sourceElement4 EmersonParser_sourceElement_return

    EmersonParser_sourceElement_return sourceElement6;
    #undef	RETURN_TYPE_sourceElement6
    #define	RETURN_TYPE_sourceElement6 EmersonParser_sourceElement_return

    pANTLR3_BASE_TREE LTERM5_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElement;
    /* Initialize rule variables
     */
    sourceElements_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(2)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM5       = NULL;
    sourceElement4.tree = NULL;

    sourceElement6.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM5_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_sourceElement   = NULL;
    #define CREATE_stream_sourceElement  if (stream_sourceElement == NULL) {stream_sourceElement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:146:2: ( sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ )
        // .//Emerson.g:146:4: sourceElement ( ( LTERM )* sourceElement )*
        {
            FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements912);
            sourceElement4=sourceElement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceElementsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement4.tree, NULL); }

            // .//Emerson.g:146:18: ( ( LTERM )* sourceElement )*

            for (;;)
            {
                int alt5=2;
                alt5 = cdfa5.predict(ctx, RECOGNIZER, ISTREAM, &cdfa5);
                if  (HASEXCEPTION())
                {
                    goto rulesourceElementsEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt5) 
                {
            	case 1:
            	    // .//Emerson.g:146:19: ( LTERM )* sourceElement
            	    {

            	        // .//Emerson.g:146:19: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt4=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA4_0 = LA(1);
            	                if ( (LA4_0 == LTERM) ) 
            	                {
            	                    {
            	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                        */
            	                        int LA4_2 = LA(2);
            	                        if ( (synpred4_Emerson(ctx)) ) 
            	                        {
            	                            alt4=1;
            	                        }

            	                    }
            	                }

            	            }
            	            switch (alt4) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM5 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_sourceElements915); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesourceElementsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM5, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop4;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop4: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements918);
            	        sourceElement6=sourceElement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceElementsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement6.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop5;	/* break out of the loop */
            	    break;
                }
            }
            loop5: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : sourceElement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 146:42: -> ( sourceElement )+
            	{
            	    if ((stream_sourceElement == NULL || !stream_sourceElement->hasNext(stream_sourceElement))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_sourceElement->hasNext(stream_sourceElement))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElement == NULL ? NULL : stream_sourceElement->nextTree(stream_sourceElement));

            	    	}
            	    	stream_sourceElement->reset(stream_sourceElement);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementsEx; /* Prevent compiler warnings */
    rulesourceElementsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_sourceElement != NULL) stream_sourceElement->free(stream_sourceElement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(2, sourceElements_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElements */

/** 
 * $ANTLR start sourceElement
 * .//Emerson.g:149:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static EmersonParser_sourceElement_return
sourceElement(pEmersonParser ctx)
{   
    EmersonParser_sourceElement_return retval;
    ANTLR3_UINT32 sourceElement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_functionDeclaration_return functionDeclaration7;
    #undef	RETURN_TYPE_functionDeclaration7
    #define	RETURN_TYPE_functionDeclaration7 EmersonParser_functionDeclaration_return

    EmersonParser_statement_return statement8;
    #undef	RETURN_TYPE_statement8
    #define	RETURN_TYPE_statement8 EmersonParser_statement_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionDeclaration;
    /* Initialize rule variables
     */
    sourceElement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(3)) )
    {
    	retval.start = 0;

        return retval; 
    }
    functionDeclaration7.tree = NULL;

    statement8.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_functionDeclaration   = NULL;
    #define CREATE_stream_functionDeclaration  if (stream_functionDeclaration == NULL) {stream_functionDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionDeclaration"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:150:2: ( functionDeclaration -> functionDeclaration | statement -> statement )
            
            ANTLR3_UINT32 alt6;

            alt6=2;

            alt6 = cdfa6.predict(ctx, RECOGNIZER, ISTREAM, &cdfa6);
            if  (HASEXCEPTION())
            {
                goto rulesourceElementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt6) 
            {
        	case 1:
        	    // .//Emerson.g:150:4: functionDeclaration
        	    {
        	        FOLLOWPUSH(FOLLOW_functionDeclaration_in_sourceElement939);
        	        functionDeclaration7=functionDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_functionDeclaration; stream_functionDeclaration->add(stream_functionDeclaration, functionDeclaration7.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : functionDeclaration
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 150:24: -> functionDeclaration
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionDeclaration == NULL ? NULL : stream_functionDeclaration->nextTree(stream_functionDeclaration));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:151:4: statement
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_sourceElement948);
        	        statement8=statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement8.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : statement
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 151:14: -> statement
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementEx; /* Prevent compiler warnings */
    rulesourceElementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_functionDeclaration != NULL) stream_functionDeclaration->free(stream_functionDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(3, sourceElement_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElement */

/** 
 * $ANTLR start functionDeclaration
 * .//Emerson.g:155:1: functionDeclaration : 'function' ( LTERM )* Identifier ( LTERM )* ( formalParameterList )? ( LTERM )* functionBody -> ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) ;
 */
static EmersonParser_functionDeclaration_return
functionDeclaration(pEmersonParser ctx)
{   
    EmersonParser_functionDeclaration_return retval;
    ANTLR3_UINT32 functionDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal9;
    pANTLR3_COMMON_TOKEN    LTERM10;
    pANTLR3_COMMON_TOKEN    Identifier11;
    pANTLR3_COMMON_TOKEN    LTERM12;
    pANTLR3_COMMON_TOKEN    LTERM14;
    EmersonParser_formalParameterList_return formalParameterList13;
    #undef	RETURN_TYPE_formalParameterList13
    #define	RETURN_TYPE_formalParameterList13 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody15;
    #undef	RETURN_TYPE_functionBody15
    #define	RETURN_TYPE_functionBody15 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal9_tree;
    pANTLR3_BASE_TREE LTERM10_tree;
    pANTLR3_BASE_TREE Identifier11_tree;
    pANTLR3_BASE_TREE LTERM12_tree;
    pANTLR3_BASE_TREE LTERM14_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(4)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal9       = NULL;
    LTERM10       = NULL;
    Identifier11       = NULL;
    LTERM12       = NULL;
    LTERM14       = NULL;
    formalParameterList13.tree = NULL;

    functionBody15.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal9_tree   = NULL;
    LTERM10_tree   = NULL;
    Identifier11_tree   = NULL;
    LTERM12_tree   = NULL;
    LTERM14_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:156:2: ( 'function' ( LTERM )* Identifier ( LTERM )* ( formalParameterList )? ( LTERM )* functionBody -> ^( FUNC_DECL Identifier ( formalParameterList )? functionBody ) )
        // .//Emerson.g:156:4: 'function' ( LTERM )* Identifier ( LTERM )* ( formalParameterList )? ( LTERM )* functionBody
        {
            string_literal9 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_functionDeclaration965); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, string_literal9, NULL); }


            // .//Emerson.g:156:15: ( LTERM )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == LTERM) ) 
                    {
                        alt7=1;
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM10 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration967); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM10, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */

            Identifier11 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionDeclaration970); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier11, NULL); }


            // .//Emerson.g:156:33: ( LTERM )*

            for (;;)
            {
                int alt8=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA8_2 = LA(2);
                            if ( (synpred8_Emerson(ctx)) ) 
                            {
                                alt8=1;
                            }

                        }
                    }

                }
                switch (alt8) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM12 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration972); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM12, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:156:41: ( formalParameterList )?
            {
                int alt9=2;
                {
                    int LA9_0 = LA(1);
                    if ( (LA9_0 == Identifier) ) 
                    {
                        alt9=1;
                    }
                }
                switch (alt9) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionDeclaration976);
            	        formalParameterList13=formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList13.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:156:62: ( LTERM )*

            for (;;)
            {
                int alt10=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA10_0 = LA(1);
                    if ( (LA10_0 == LTERM) ) 
                    {
                        alt10=1;
                    }

                }
                switch (alt10) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM14 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration979); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM14, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionDeclaration982);
            functionBody15=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody15.tree, NULL); }

             
            /* AST REWRITE
             * elements          : Identifier, formalParameterList, functionBody
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 156:82: -> ^( FUNC_DECL Identifier ( formalParameterList )? functionBody )
            	{
            	    // .//Emerson.g:156:85: ^( FUNC_DECL Identifier ( formalParameterList )? functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_DECL, (pANTLR3_UINT8)"FUNC_DECL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:156:109: ( formalParameterList )?
            	        {
            	        	if ( (stream_formalParameterList != NULL && stream_formalParameterList->hasNext(stream_formalParameterList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));

            	        	}
            	        	if ( stream_formalParameterList != NULL) stream_formalParameterList->reset(stream_formalParameterList);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionDeclarationEx; /* Prevent compiler warnings */
    rulefunctionDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(4, functionDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end functionDeclaration */

/** 
 * $ANTLR start functionExpression
 * .//Emerson.g:159:1: functionExpression : 'function' ( LTERM )* ( Identifier )? ( LTERM )* '(' ( LTERM )* ( formalParameterList )? ( LTERM )* ')' ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) ;
 */
static EmersonParser_functionExpression_return
functionExpression(pEmersonParser ctx)
{   
    EmersonParser_functionExpression_return retval;
    ANTLR3_UINT32 functionExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal16;
    pANTLR3_COMMON_TOKEN    LTERM17;
    pANTLR3_COMMON_TOKEN    Identifier18;
    pANTLR3_COMMON_TOKEN    LTERM19;
    pANTLR3_COMMON_TOKEN    char_literal20;
    pANTLR3_COMMON_TOKEN    LTERM21;
    pANTLR3_COMMON_TOKEN    LTERM23;
    pANTLR3_COMMON_TOKEN    char_literal24;
    pANTLR3_COMMON_TOKEN    LTERM25;
    EmersonParser_formalParameterList_return formalParameterList22;
    #undef	RETURN_TYPE_formalParameterList22
    #define	RETURN_TYPE_formalParameterList22 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody26;
    #undef	RETURN_TYPE_functionBody26
    #define	RETURN_TYPE_functionBody26 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal16_tree;
    pANTLR3_BASE_TREE LTERM17_tree;
    pANTLR3_BASE_TREE Identifier18_tree;
    pANTLR3_BASE_TREE LTERM19_tree;
    pANTLR3_BASE_TREE char_literal20_tree;
    pANTLR3_BASE_TREE LTERM21_tree;
    pANTLR3_BASE_TREE LTERM23_tree;
    pANTLR3_BASE_TREE char_literal24_tree;
    pANTLR3_BASE_TREE LTERM25_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(5)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal16       = NULL;
    LTERM17       = NULL;
    Identifier18       = NULL;
    LTERM19       = NULL;
    char_literal20       = NULL;
    LTERM21       = NULL;
    LTERM23       = NULL;
    char_literal24       = NULL;
    LTERM25       = NULL;
    formalParameterList22.tree = NULL;

    functionBody26.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal16_tree   = NULL;
    LTERM17_tree   = NULL;
    Identifier18_tree   = NULL;
    LTERM19_tree   = NULL;
    char_literal20_tree   = NULL;
    LTERM21_tree   = NULL;
    LTERM23_tree   = NULL;
    char_literal24_tree   = NULL;
    LTERM25_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:160:2: ( 'function' ( LTERM )* ( Identifier )? ( LTERM )* '(' ( LTERM )* ( formalParameterList )? ( LTERM )* ')' ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody ) )
        // .//Emerson.g:160:4: 'function' ( LTERM )* ( Identifier )? ( LTERM )* '(' ( LTERM )* ( formalParameterList )? ( LTERM )* ')' ( LTERM )* functionBody
        {
            string_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_functionExpression1007); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, string_literal16, NULL); }


            // .//Emerson.g:160:15: ( LTERM )*

            for (;;)
            {
                int alt11=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA11_0 = LA(1);
                    if ( (LA11_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA11_2 = LA(2);
                            if ( (synpred11_Emerson(ctx)) ) 
                            {
                                alt11=1;
                            }

                        }
                    }

                }
                switch (alt11) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM17 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1009); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM17, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:160:22: ( Identifier )?
            {
                int alt12=2;
                {
                    int LA12_0 = LA(1);
                    if ( (LA12_0 == Identifier) ) 
                    {
                        alt12=1;
                    }
                }
                switch (alt12) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier18 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionExpression1012); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier18, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:160:34: ( LTERM )*

            for (;;)
            {
                int alt13=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA13_0 = LA(1);
                    if ( (LA13_0 == LTERM) ) 
                    {
                        alt13=1;
                    }

                }
                switch (alt13) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM19 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1015); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM19, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */

            char_literal20 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_functionExpression1018); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal20, NULL); }


            // .//Emerson.g:160:45: ( LTERM )*

            for (;;)
            {
                int alt14=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA14_0 = LA(1);
                    if ( (LA14_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA14_2 = LA(2);
                            if ( (synpred14_Emerson(ctx)) ) 
                            {
                                alt14=1;
                            }

                        }
                    }

                }
                switch (alt14) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM21 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1020); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM21, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:160:52: ( formalParameterList )?
            {
                int alt15=2;
                {
                    int LA15_0 = LA(1);
                    if ( (LA15_0 == Identifier) ) 
                    {
                        alt15=1;
                    }
                }
                switch (alt15) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: formalParameterList
            	    {
            	        FOLLOWPUSH(FOLLOW_formalParameterList_in_functionExpression1023);
            	        formalParameterList22=formalParameterList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList22.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:160:73: ( LTERM )*

            for (;;)
            {
                int alt16=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA16_0 = LA(1);
                    if ( (LA16_0 == LTERM) ) 
                    {
                        alt16=1;
                    }

                }
                switch (alt16) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM23 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1026); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM23, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */

            char_literal24 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_functionExpression1029); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal24, NULL); }


            // .//Emerson.g:160:84: ( LTERM )*

            for (;;)
            {
                int alt17=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA17_0 = LA(1);
                    if ( (LA17_0 == LTERM) ) 
                    {
                        alt17=1;
                    }

                }
                switch (alt17) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM25 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression1031); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM25, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionExpression1034);
            functionBody26=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody26.tree, NULL); }

             
            /* AST REWRITE
             * elements          : Identifier, formalParameterList, functionBody
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 160:104: -> ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody )
            	{
            	    // .//Emerson.g:160:107: ^( FUNC_EXPR ( Identifier )? ( formalParameterList )? functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_EXPR, (pANTLR3_UINT8)"FUNC_EXPR"), root_1));

            	        // .//Emerson.g:160:120: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }
            	        // .//Emerson.g:160:133: ( formalParameterList )?
            	        {
            	        	if ( (stream_formalParameterList != NULL && stream_formalParameterList->hasNext(stream_formalParameterList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));

            	        	}
            	        	if ( stream_formalParameterList != NULL) stream_formalParameterList->reset(stream_formalParameterList);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionExpressionEx; /* Prevent compiler warnings */
    rulefunctionExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(5, functionExpression_StartIndex); }
    return retval;
}
/* $ANTLR end functionExpression */

/** 
 * $ANTLR start formalParameterList
 * .//Emerson.g:163:1: formalParameterList : Identifier ( ',' ( LTERM )* Identifier )* -> ^( FUNC_PARAMS ( Identifier )+ ) ;
 */
static EmersonParser_formalParameterList_return
formalParameterList(pEmersonParser ctx)
{   
    EmersonParser_formalParameterList_return retval;
    ANTLR3_UINT32 formalParameterList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier27;
    pANTLR3_COMMON_TOKEN    char_literal28;
    pANTLR3_COMMON_TOKEN    LTERM29;
    pANTLR3_COMMON_TOKEN    Identifier30;

    pANTLR3_BASE_TREE Identifier27_tree;
    pANTLR3_BASE_TREE char_literal28_tree;
    pANTLR3_BASE_TREE LTERM29_tree;
    pANTLR3_BASE_TREE Identifier30_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;

    /* Initialize rule variables
     */
    formalParameterList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(6)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier27       = NULL;
    char_literal28       = NULL;
    LTERM29       = NULL;
    Identifier30       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    Identifier27_tree   = NULL;
    char_literal28_tree   = NULL;
    LTERM29_tree   = NULL;
    Identifier30_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:164:2: ( Identifier ( ',' ( LTERM )* Identifier )* -> ^( FUNC_PARAMS ( Identifier )+ ) )
        // .//Emerson.g:164:4: Identifier ( ',' ( LTERM )* Identifier )*
        {
            Identifier27 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList1062); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier27, NULL); }


            // .//Emerson.g:164:15: ( ',' ( LTERM )* Identifier )*

            for (;;)
            {
                int alt19=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA19_0 = LA(1);
                    if ( (LA19_0 == 140) ) 
                    {
                        alt19=1;
                    }

                }
                switch (alt19) 
                {
            	case 1:
            	    // .//Emerson.g:164:16: ',' ( LTERM )* Identifier
            	    {
            	        char_literal28 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_formalParameterList1065); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal28, NULL); }


            	        // .//Emerson.g:164:20: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt18=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA18_0 = LA(1);
            	                if ( (LA18_0 == LTERM) ) 
            	                {
            	                    alt18=1;
            	                }

            	            }
            	            switch (alt18) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM29 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList1067); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM29, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop18;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop18: ; /* Jump out to here if this rule does not match */

            	        Identifier30 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList1070); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier30, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop19;	/* break out of the loop */
            	    break;
                }
            }
            loop19: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 164:40: -> ^( FUNC_PARAMS ( Identifier )+ )
            	{
            	    // .//Emerson.g:164:43: ^( FUNC_PARAMS ( Identifier )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_PARAMS, (pANTLR3_UINT8)"FUNC_PARAMS"), root_1));

            	        if ((stream_Identifier == NULL || !stream_Identifier->hasNext(stream_Identifier))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_Identifier->hasNext(stream_Identifier))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	stream_Identifier->reset(stream_Identifier);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalParameterListEx; /* Prevent compiler warnings */
    ruleformalParameterListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_140 != NULL) stream_140->free(stream_140);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(6, formalParameterList_StartIndex); }
    return retval;
}
/* $ANTLR end formalParameterList */

/** 
 * $ANTLR start functionBody
 * .//Emerson.g:167:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static EmersonParser_functionBody_return
functionBody(pEmersonParser ctx)
{   
    EmersonParser_functionBody_return retval;
    ANTLR3_UINT32 functionBody_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal31;
    pANTLR3_COMMON_TOKEN    LTERM32;
    pANTLR3_COMMON_TOKEN    char_literal33;
    pANTLR3_COMMON_TOKEN    char_literal34;
    pANTLR3_COMMON_TOKEN    LTERM35;
    pANTLR3_COMMON_TOKEN    LTERM37;
    pANTLR3_COMMON_TOKEN    char_literal38;
    EmersonParser_sourceElements_return sourceElements36;
    #undef	RETURN_TYPE_sourceElements36
    #define	RETURN_TYPE_sourceElements36 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE char_literal31_tree;
    pANTLR3_BASE_TREE LTERM32_tree;
    pANTLR3_BASE_TREE char_literal33_tree;
    pANTLR3_BASE_TREE char_literal34_tree;
    pANTLR3_BASE_TREE LTERM35_tree;
    pANTLR3_BASE_TREE LTERM37_tree;
    pANTLR3_BASE_TREE char_literal38_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    functionBody_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(7)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal31       = NULL;
    LTERM32       = NULL;
    char_literal33       = NULL;
    char_literal34       = NULL;
    LTERM35       = NULL;
    LTERM37       = NULL;
    char_literal38       = NULL;
    sourceElements36.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal31_tree   = NULL;
    LTERM32_tree   = NULL;
    char_literal33_tree   = NULL;
    char_literal34_tree   = NULL;
    LTERM35_tree   = NULL;
    LTERM37_tree   = NULL;
    char_literal38_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:168:2: ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt23;

            alt23=2;

            alt23 = cdfa23.predict(ctx, RECOGNIZER, ISTREAM, &cdfa23);
            if  (HASEXCEPTION())
            {
                goto rulefunctionBodyEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt23) 
            {
        	case 1:
        	    // .//Emerson.g:168:4: '{' ( LTERM )* '}'
        	    {
        	        char_literal31 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_functionBody1093); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal31, NULL); }


        	        // .//Emerson.g:168:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt20=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA20_0 = LA(1);
        	                if ( (LA20_0 == LTERM) ) 
        	                {
        	                    alt20=1;
        	                }

        	            }
        	            switch (alt20) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM32 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1095); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM32, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop20;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop20: ; /* Jump out to here if this rule does not match */

        	        char_literal33 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_functionBody1098); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal33, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 168:19: -> ^( EMPTY_FUNC_BODY )
        	        	{
        	        	    // .//Emerson.g:168:22: ^( EMPTY_FUNC_BODY )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EMPTY_FUNC_BODY, (pANTLR3_UINT8)"EMPTY_FUNC_BODY"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:169:4: '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}'
        	    {
        	        char_literal34 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_functionBody1109); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal34, NULL); }


        	        // .//Emerson.g:169:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt21=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA21_0 = LA(1);
        	                if ( (LA21_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA21_2 = LA(2);
        	                        if ( (synpred22_Emerson(ctx)) ) 
        	                        {
        	                            alt21=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt21) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM35 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1111); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM35, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop21;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop21: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:169:15: ( sourceElements -> sourceElements )
        	        // .//Emerson.g:169:16: sourceElements
        	        {
        	            FOLLOWPUSH(FOLLOW_sourceElements_in_functionBody1115);
        	            sourceElements36=sourceElements(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulefunctionBodyEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements36.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : sourceElements
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 169:31: -> sourceElements
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:169:50: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt22=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA22_0 = LA(1);
        	                if ( (LA22_0 == LTERM) ) 
        	                {
        	                    alt22=1;
        	                }

        	            }
        	            switch (alt22) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM37 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody1122); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM37, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop22;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop22: ; /* Jump out to here if this rule does not match */

        	        char_literal38 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_functionBody1125); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal38, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionBodyEx; /* Prevent compiler warnings */
    rulefunctionBodyEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(7, functionBody_StartIndex); }
    return retval;
}
/* $ANTLR end functionBody */

/** 
 * $ANTLR start statement
 * .//Emerson.g:173:1: statement : ( noOpStatement | ( switchStatement )=> switchStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement );
 */
static EmersonParser_statement_return
statement(pEmersonParser ctx)
{   
    EmersonParser_statement_return retval;
    ANTLR3_UINT32 statement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_noOpStatement_return noOpStatement39;
    #undef	RETURN_TYPE_noOpStatement39
    #define	RETURN_TYPE_noOpStatement39 EmersonParser_noOpStatement_return

    EmersonParser_switchStatement_return switchStatement40;
    #undef	RETURN_TYPE_switchStatement40
    #define	RETURN_TYPE_switchStatement40 EmersonParser_switchStatement_return

    EmersonParser_statementBlock_return statementBlock41;
    #undef	RETURN_TYPE_statementBlock41
    #define	RETURN_TYPE_statementBlock41 EmersonParser_statementBlock_return

    EmersonParser_variableStatement_return variableStatement42;
    #undef	RETURN_TYPE_variableStatement42
    #define	RETURN_TYPE_variableStatement42 EmersonParser_variableStatement_return

    EmersonParser_emptyStatement_return emptyStatement43;
    #undef	RETURN_TYPE_emptyStatement43
    #define	RETURN_TYPE_emptyStatement43 EmersonParser_emptyStatement_return

    EmersonParser_expressionStatement_return expressionStatement44;
    #undef	RETURN_TYPE_expressionStatement44
    #define	RETURN_TYPE_expressionStatement44 EmersonParser_expressionStatement_return

    EmersonParser_ifStatement_return ifStatement45;
    #undef	RETURN_TYPE_ifStatement45
    #define	RETURN_TYPE_ifStatement45 EmersonParser_ifStatement_return

    EmersonParser_iterationStatement_return iterationStatement46;
    #undef	RETURN_TYPE_iterationStatement46
    #define	RETURN_TYPE_iterationStatement46 EmersonParser_iterationStatement_return

    EmersonParser_continueStatement_return continueStatement47;
    #undef	RETURN_TYPE_continueStatement47
    #define	RETURN_TYPE_continueStatement47 EmersonParser_continueStatement_return

    EmersonParser_breakStatement_return breakStatement48;
    #undef	RETURN_TYPE_breakStatement48
    #define	RETURN_TYPE_breakStatement48 EmersonParser_breakStatement_return

    EmersonParser_returnStatement_return returnStatement49;
    #undef	RETURN_TYPE_returnStatement49
    #define	RETURN_TYPE_returnStatement49 EmersonParser_returnStatement_return

    EmersonParser_withStatement_return withStatement50;
    #undef	RETURN_TYPE_withStatement50
    #define	RETURN_TYPE_withStatement50 EmersonParser_withStatement_return

    EmersonParser_throwStatement_return throwStatement51;
    #undef	RETURN_TYPE_throwStatement51
    #define	RETURN_TYPE_throwStatement51 EmersonParser_throwStatement_return

    EmersonParser_tryStatement_return tryStatement52;
    #undef	RETURN_TYPE_tryStatement52
    #define	RETURN_TYPE_tryStatement52 EmersonParser_tryStatement_return


    /* Initialize rule variables
     */
    statement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(8)) )
    {
    	retval.start = 0;

        return retval; 
    }
    noOpStatement39.tree = NULL;

    switchStatement40.tree = NULL;

    statementBlock41.tree = NULL;

    variableStatement42.tree = NULL;

    emptyStatement43.tree = NULL;

    expressionStatement44.tree = NULL;

    ifStatement45.tree = NULL;

    iterationStatement46.tree = NULL;

    continueStatement47.tree = NULL;

    breakStatement48.tree = NULL;

    returnStatement49.tree = NULL;

    withStatement50.tree = NULL;

    throwStatement51.tree = NULL;

    tryStatement52.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:174:2: ( noOpStatement | ( switchStatement )=> switchStatement | statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | throwStatement | tryStatement )
            
            ANTLR3_UINT32 alt24;

            alt24=14;

            alt24 = cdfa24.predict(ctx, RECOGNIZER, ISTREAM, &cdfa24);
            if  (HASEXCEPTION())
            {
                goto rulestatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt24) 
            {
        	case 1:
        	    // .//Emerson.g:174:4: noOpStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_noOpStatement_in_statement1137);
        	        noOpStatement39=noOpStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, noOpStatement39.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:175:11: ( switchStatement )=> switchStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_switchStatement_in_statement1155);
        	        switchStatement40=switchStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switchStatement40.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:176:11: statementBlock
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_statementBlock_in_statement1167);
        	        statementBlock41=statementBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statementBlock41.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:177:4: variableStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableStatement_in_statement1172);
        	        variableStatement42=variableStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableStatement42.tree);

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:178:4: emptyStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_emptyStatement_in_statement1177);
        	        emptyStatement43=emptyStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, emptyStatement43.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:179:4: expressionStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionStatement_in_statement1182);
        	        expressionStatement44=expressionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionStatement44.tree);

        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:180:4: ifStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement1187);
        	        ifStatement45=ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ifStatement45.tree);

        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:181:4: iterationStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_iterationStatement_in_statement1192);
        	        iterationStatement46=iterationStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, iterationStatement46.tree);

        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:182:4: continueStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_continueStatement_in_statement1197);
        	        continueStatement47=continueStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, continueStatement47.tree);

        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:183:4: breakStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_breakStatement_in_statement1202);
        	        breakStatement48=breakStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, breakStatement48.tree);

        	    }
        	    break;
        	case 11:
        	    // .//Emerson.g:184:4: returnStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement1207);
        	        returnStatement49=returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, returnStatement49.tree);

        	    }
        	    break;
        	case 12:
        	    // .//Emerson.g:185:4: withStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_withStatement_in_statement1212);
        	        withStatement50=withStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, withStatement50.tree);

        	    }
        	    break;
        	case 13:
        	    // .//Emerson.g:186:4: throwStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_throwStatement_in_statement1217);
        	        throwStatement51=throwStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, throwStatement51.tree);

        	    }
        	    break;
        	case 14:
        	    // .//Emerson.g:187:4: tryStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_tryStatement_in_statement1222);
        	        tryStatement52=tryStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tryStatement52.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(8, statement_StartIndex); }
    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start statementBlock
 * .//Emerson.g:190:1: statementBlock : ( '{' ( LTERM )* '}' -> ^( NOOP ) | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static EmersonParser_statementBlock_return
statementBlock(pEmersonParser ctx)
{   
    EmersonParser_statementBlock_return retval;
    ANTLR3_UINT32 statementBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal53;
    pANTLR3_COMMON_TOKEN    LTERM54;
    pANTLR3_COMMON_TOKEN    char_literal55;
    pANTLR3_COMMON_TOKEN    char_literal56;
    pANTLR3_COMMON_TOKEN    LTERM57;
    pANTLR3_COMMON_TOKEN    LTERM59;
    pANTLR3_COMMON_TOKEN    char_literal60;
    EmersonParser_statementList_return statementList58;
    #undef	RETURN_TYPE_statementList58
    #define	RETURN_TYPE_statementList58 EmersonParser_statementList_return

    pANTLR3_BASE_TREE char_literal53_tree;
    pANTLR3_BASE_TREE LTERM54_tree;
    pANTLR3_BASE_TREE char_literal55_tree;
    pANTLR3_BASE_TREE char_literal56_tree;
    pANTLR3_BASE_TREE LTERM57_tree;
    pANTLR3_BASE_TREE LTERM59_tree;
    pANTLR3_BASE_TREE char_literal60_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    statementBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(9)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal53       = NULL;
    LTERM54       = NULL;
    char_literal55       = NULL;
    char_literal56       = NULL;
    LTERM57       = NULL;
    LTERM59       = NULL;
    char_literal60       = NULL;
    statementList58.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal53_tree   = NULL;
    LTERM54_tree   = NULL;
    char_literal55_tree   = NULL;
    char_literal56_tree   = NULL;
    LTERM57_tree   = NULL;
    LTERM59_tree   = NULL;
    char_literal60_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:191:9: ( '{' ( LTERM )* '}' -> ^( NOOP ) | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt28;

            alt28=2;

            alt28 = cdfa28.predict(ctx, RECOGNIZER, ISTREAM, &cdfa28);
            if  (HASEXCEPTION())
            {
                goto rulestatementBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt28) 
            {
        	case 1:
        	    // .//Emerson.g:191:11: '{' ( LTERM )* '}'
        	    {
        	        char_literal53 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_statementBlock1241); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal53, NULL); }


        	        // .//Emerson.g:191:15: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt25=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA25_0 = LA(1);
        	                if ( (LA25_0 == LTERM) ) 
        	                {
        	                    alt25=1;
        	                }

        	            }
        	            switch (alt25) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM54 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1243); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM54, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop25;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop25: ; /* Jump out to here if this rule does not match */

        	        char_literal55 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_statementBlock1246); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal55, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 191:28: -> ^( NOOP )
        	        	{
        	        	    // .//Emerson.g:191:31: ^( NOOP )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOOP, (pANTLR3_UINT8)"NOOP"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:192:4: '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}'
        	    {
        	        char_literal56 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_statementBlock1259); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal56, NULL); }


        	        // .//Emerson.g:192:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt26=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA26_0 = LA(1);
        	                if ( (LA26_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA26_1 = LA(2);
        	                        if ( (synpred39_Emerson(ctx)) ) 
        	                        {
        	                            alt26=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt26) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM57 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1261); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM57, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop26;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop26: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:192:15: ( statementList -> statementList )
        	        // .//Emerson.g:192:16: statementList
        	        {
        	            FOLLOWPUSH(FOLLOW_statementList_in_statementBlock1265);
        	            statementList58=statementList(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulestatementBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList58.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : statementList
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 192:29: -> statementList
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:192:46: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt27=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA27_0 = LA(1);
        	                if ( (LA27_0 == LTERM) ) 
        	                {
        	                    alt27=1;
        	                }

        	            }
        	            switch (alt27) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM59 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock1270); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM59, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop27;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop27: ; /* Jump out to here if this rule does not match */

        	        char_literal60 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_statementBlock1273); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal60, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementBlockEx; /* Prevent compiler warnings */
    rulestatementBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(9, statementBlock_StartIndex); }
    return retval;
}
/* $ANTLR end statementBlock */

/** 
 * $ANTLR start noOpStatement
 * .//Emerson.g:195:1: noOpStatement : ';' -> ^( NOOP ) ;
 */
static EmersonParser_noOpStatement_return
noOpStatement(pEmersonParser ctx)
{   
    EmersonParser_noOpStatement_return retval;
    ANTLR3_UINT32 noOpStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal61;

    pANTLR3_BASE_TREE char_literal61_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;

    /* Initialize rule variables
     */
    noOpStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(10)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal61       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal61_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:196:9: ( ';' -> ^( NOOP ) )
        // .//Emerson.g:196:11: ';'
        {
            char_literal61 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_noOpStatement1293); 
            if  (HASEXCEPTION())
            {
                goto rulenoOpStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal61, NULL); }


             
            /* AST REWRITE
             * elements          : 
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 196:15: -> ^( NOOP )
            	{
            	    // .//Emerson.g:196:18: ^( NOOP )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOOP, (pANTLR3_UINT8)"NOOP"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenoOpStatementEx; /* Prevent compiler warnings */
    rulenoOpStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(10, noOpStatement_StartIndex); }
    return retval;
}
/* $ANTLR end noOpStatement */

/** 
 * $ANTLR start statementList
 * .//Emerson.g:200:1: statementList : ( ( LTERM )* statement )+ -> ^( SLIST ( statement )+ ) ;
 */
static EmersonParser_statementList_return
statementList(pEmersonParser ctx)
{   
    EmersonParser_statementList_return retval;
    ANTLR3_UINT32 statementList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM62;
    EmersonParser_statement_return statement63;
    #undef	RETURN_TYPE_statement63
    #define	RETURN_TYPE_statement63 EmersonParser_statement_return

    pANTLR3_BASE_TREE LTERM62_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    statementList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(11)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM62       = NULL;
    statement63.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM62_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:201:2: ( ( ( LTERM )* statement )+ -> ^( SLIST ( statement )+ ) )
        // .//Emerson.g:201:4: ( ( LTERM )* statement )+
        {
            // .//Emerson.g:201:4: ( ( LTERM )* statement )+
            {
                int cnt30=0;

                for (;;)
                {
                    int alt30=2;
            	alt30 = cdfa30.predict(ctx, RECOGNIZER, ISTREAM, &cdfa30);
            	if  (HASEXCEPTION())
            	{
            	    goto rulestatementListEx;
            	}
            	if (HASFAILED())
            	{
            	    return retval;
            	}
            	switch (alt30) 
            	{
            	    case 1:
            	        // .//Emerson.g:201:5: ( LTERM )* statement
            	        {

            	            // .//Emerson.g:201:5: ( LTERM )*

            	            for (;;)
            	            {
            	                int alt29=2;
            	                {
            	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                    */
            	                    int LA29_0 = LA(1);
            	                    if ( (LA29_0 == LTERM) ) 
            	                    {
            	                        {
            	                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                            */
            	                            int LA29_2 = LA(2);
            	                            if ( (synpred41_Emerson(ctx)) ) 
            	                            {
            	                                alt29=1;
            	                            }

            	                        }
            	                    }

            	                }
            	                switch (alt29) 
            	                {
            	            	case 1:
            	            	    // .//Emerson.g:0:0: LTERM
            	            	    {
            	            	        LTERM62 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementList1335); 
            	            	        if  (HASEXCEPTION())
            	            	        {
            	            	            goto rulestatementListEx;
            	            	        }
            	            	        if (HASFAILED())
            	            	        {
            	            	            return retval;
            	            	        } 
            	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM62, NULL); }


            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop29;	/* break out of the loop */
            	            	    break;
            	                }
            	            }
            	            loop29: ; /* Jump out to here if this rule does not match */

            	            FOLLOWPUSH(FOLLOW_statement_in_statementList1338);
            	            statement63=statement(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulestatementListEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement63.tree, NULL); }

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt30 >= 1 )
            		{
            		    goto loop30;
            		}
            		if (BACKTRACKING>0)
            		{
            		    FAILEDFLAG = ANTLR3_TRUE; 
            		    return retval;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto rulestatementListEx;
            	}
            	cnt30++;
                }
                loop30: ;	/* Jump to here if this rule does not match */
            }

             
            /* AST REWRITE
             * elements          : statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 201:24: -> ^( SLIST ( statement )+ )
            	{
            	    // .//Emerson.g:201:27: ^( SLIST ( statement )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SLIST, (pANTLR3_UINT8)"SLIST"), root_1));

            	        if ((stream_statement == NULL || !stream_statement->hasNext(stream_statement))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_statement->hasNext(stream_statement))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        	}
            	        	stream_statement->reset(stream_statement);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(11, statementList_StartIndex); }
    return retval;
}
/* $ANTLR end statementList */

/** 
 * $ANTLR start variableStatement
 * .//Emerson.g:204:1: variableStatement : 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) ;
 */
static EmersonParser_variableStatement_return
variableStatement(pEmersonParser ctx)
{   
    EmersonParser_variableStatement_return retval;
    ANTLR3_UINT32 variableStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal64;
    pANTLR3_COMMON_TOKEN    LTERM65;
    pANTLR3_COMMON_TOKEN    LTERM67;
    pANTLR3_COMMON_TOKEN    char_literal68;
    EmersonParser_variableDeclarationList_return variableDeclarationList66;
    #undef	RETURN_TYPE_variableDeclarationList66
    #define	RETURN_TYPE_variableDeclarationList66 EmersonParser_variableDeclarationList_return

    pANTLR3_BASE_TREE string_literal64_tree;
    pANTLR3_BASE_TREE LTERM65_tree;
    pANTLR3_BASE_TREE LTERM67_tree;
    pANTLR3_BASE_TREE char_literal68_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationList;
    /* Initialize rule variables
     */
    variableStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(12)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal64       = NULL;
    LTERM65       = NULL;
    LTERM67       = NULL;
    char_literal68       = NULL;
    variableDeclarationList66.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal64_tree   = NULL;
    LTERM65_tree   = NULL;
    LTERM67_tree   = NULL;
    char_literal68_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_variableDeclarationList   = NULL;
    #define CREATE_stream_variableDeclarationList  if (stream_variableDeclarationList == NULL) {stream_variableDeclarationList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:205:2: ( 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) )
        // .//Emerson.g:205:4: 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' )
        {
            string_literal64 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_variableStatement1361); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, string_literal64, NULL); }


            // .//Emerson.g:205:10: ( LTERM )*

            for (;;)
            {
                int alt31=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA31_0 = LA(1);
                    if ( (LA31_0 == LTERM) ) 
                    {
                        alt31=1;
                    }

                }
                switch (alt31) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM65 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1363); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM65, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop31;	/* break out of the loop */
            	    break;
                }
            }
            loop31: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_variableDeclarationList_in_variableStatement1366);
            variableDeclarationList66=variableDeclarationList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationList; stream_variableDeclarationList->add(stream_variableDeclarationList, variableDeclarationList66.tree, NULL); }

            // .//Emerson.g:205:41: ( LTERM | ';' )
            {
                int alt32=2;

                {
                    int LA32_0 = LA(1);
                    if ( (LA32_0 == LTERM) ) 
                    {
                        alt32=1;
                    }
                    else if ( (LA32_0 == 143) ) 
                    {
                        alt32=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 32;
                        EXCEPTION->state        = 0;


                        goto rulevariableStatementEx;
                    }
                }
                switch (alt32) 
                {
            	case 1:
            	    // .//Emerson.g:205:42: LTERM
            	    {
            	        LTERM67 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1369); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM67, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:205:50: ';'
            	    {
            	        char_literal68 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_variableStatement1373); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal68, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : variableDeclarationList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 205:55: -> ^( VARLIST variableDeclarationList )
            	{
            	    // .//Emerson.g:205:58: ^( VARLIST variableDeclarationList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationList == NULL ? NULL : stream_variableDeclarationList->nextTree(stream_variableDeclarationList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableStatementEx; /* Prevent compiler warnings */
    rulevariableStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_variableDeclarationList != NULL) stream_variableDeclarationList->free(stream_variableDeclarationList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(12, variableStatement_StartIndex); }
    return retval;
}
/* $ANTLR end variableStatement */

/** 
 * $ANTLR start variableDeclarationList
 * .//Emerson.g:208:1: variableDeclarationList : variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ ;
 */
static EmersonParser_variableDeclarationList_return
variableDeclarationList(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationList_return retval;
    ANTLR3_UINT32 variableDeclarationList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM70;
    pANTLR3_COMMON_TOKEN    char_literal71;
    pANTLR3_COMMON_TOKEN    LTERM72;
    EmersonParser_variableDeclaration_return variableDeclaration69;
    #undef	RETURN_TYPE_variableDeclaration69
    #define	RETURN_TYPE_variableDeclaration69 EmersonParser_variableDeclaration_return

    EmersonParser_variableDeclaration_return variableDeclaration73;
    #undef	RETURN_TYPE_variableDeclaration73
    #define	RETURN_TYPE_variableDeclaration73 EmersonParser_variableDeclaration_return

    pANTLR3_BASE_TREE LTERM70_tree;
    pANTLR3_BASE_TREE char_literal71_tree;
    pANTLR3_BASE_TREE LTERM72_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclaration;
    /* Initialize rule variables
     */
    variableDeclarationList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(13)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM70       = NULL;
    char_literal71       = NULL;
    LTERM72       = NULL;
    variableDeclaration69.tree = NULL;

    variableDeclaration73.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM70_tree   = NULL;
    char_literal71_tree   = NULL;
    LTERM72_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_variableDeclaration   = NULL;
    #define CREATE_stream_variableDeclaration  if (stream_variableDeclaration == NULL) {stream_variableDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclaration"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:209:2: ( variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ )
        // .//Emerson.g:209:4: variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1395);
            variableDeclaration69=variableDeclaration(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration69.tree, NULL); }

            // .//Emerson.g:209:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*

            for (;;)
            {
                int alt35=2;
                alt35 = cdfa35.predict(ctx, RECOGNIZER, ISTREAM, &cdfa35);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt35) 
                {
            	case 1:
            	    // .//Emerson.g:209:25: ( LTERM )* ',' ( LTERM )* variableDeclaration
            	    {

            	        // .//Emerson.g:209:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt33=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA33_0 = LA(1);
            	                if ( (LA33_0 == LTERM) ) 
            	                {
            	                    alt33=1;
            	                }

            	            }
            	            switch (alt33) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM70 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1398); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM70, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop33;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop33: ; /* Jump out to here if this rule does not match */

            	        char_literal71 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_variableDeclarationList1401); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal71, NULL); }


            	        // .//Emerson.g:209:36: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt34=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA34_0 = LA(1);
            	                if ( (LA34_0 == LTERM) ) 
            	                {
            	                    alt34=1;
            	                }

            	            }
            	            switch (alt34) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM72 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1403); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM72, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop34;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop34: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1406);
            	        variableDeclaration73=variableDeclaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration73.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop35;	/* break out of the loop */
            	    break;
                }
            }
            loop35: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclaration
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 209:65: -> ( variableDeclaration )+
            	{
            	    if ((stream_variableDeclaration == NULL || !stream_variableDeclaration->hasNext(stream_variableDeclaration))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclaration->hasNext(stream_variableDeclaration))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclaration == NULL ? NULL : stream_variableDeclaration->nextTree(stream_variableDeclaration));

            	    	}
            	    	stream_variableDeclaration->reset(stream_variableDeclaration);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListEx; /* Prevent compiler warnings */
    rulevariableDeclarationListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_variableDeclaration != NULL) stream_variableDeclaration->free(stream_variableDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(13, variableDeclarationList_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationList */

/** 
 * $ANTLR start variableDeclarationListNoIn
 * .//Emerson.g:212:1: variableDeclarationListNoIn : variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ ;
 */
static EmersonParser_variableDeclarationListNoIn_return
variableDeclarationListNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationListNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationListNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM75;
    pANTLR3_COMMON_TOKEN    char_literal76;
    pANTLR3_COMMON_TOKEN    LTERM77;
    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn74;
    #undef	RETURN_TYPE_variableDeclarationNoIn74
    #define	RETURN_TYPE_variableDeclarationNoIn74 EmersonParser_variableDeclarationNoIn_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn78;
    #undef	RETURN_TYPE_variableDeclarationNoIn78
    #define	RETURN_TYPE_variableDeclarationNoIn78 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE LTERM75_tree;
    pANTLR3_BASE_TREE char_literal76_tree;
    pANTLR3_BASE_TREE LTERM77_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    variableDeclarationListNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(14)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM75       = NULL;
    char_literal76       = NULL;
    LTERM77       = NULL;
    variableDeclarationNoIn74.tree = NULL;

    variableDeclarationNoIn78.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM75_tree   = NULL;
    char_literal76_tree   = NULL;
    LTERM77_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:213:2: ( variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ )
        // .//Emerson.g:213:4: variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1425);
            variableDeclarationNoIn74=variableDeclarationNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn74.tree, NULL); }

            // .//Emerson.g:213:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*

            for (;;)
            {
                int alt38=2;
                alt38 = cdfa38.predict(ctx, RECOGNIZER, ISTREAM, &cdfa38);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt38) 
                {
            	case 1:
            	    // .//Emerson.g:213:29: ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn
            	    {

            	        // .//Emerson.g:213:29: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt36=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA36_0 = LA(1);
            	                if ( (LA36_0 == LTERM) ) 
            	                {
            	                    alt36=1;
            	                }

            	            }
            	            switch (alt36) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM75 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1428); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM75, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop36;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop36: ; /* Jump out to here if this rule does not match */

            	        char_literal76 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_variableDeclarationListNoIn1431); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal76, NULL); }


            	        // .//Emerson.g:213:40: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt37=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA37_0 = LA(1);
            	                if ( (LA37_0 == LTERM) ) 
            	                {
            	                    alt37=1;
            	                }

            	            }
            	            switch (alt37) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM77 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1433); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM77, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop37;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop37: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1436);
            	        variableDeclarationNoIn78=variableDeclarationNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn78.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop38;	/* break out of the loop */
            	    break;
                }
            }
            loop38: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclarationNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 213:73: -> ( variableDeclarationNoIn )+
            	{
            	    if ((stream_variableDeclarationNoIn == NULL || !stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

            	    	}
            	    	stream_variableDeclarationNoIn->reset(stream_variableDeclarationNoIn);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationListNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(14, variableDeclarationListNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationListNoIn */

/** 
 * $ANTLR start variableDeclaration
 * .//Emerson.g:216:1: variableDeclaration : Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) ;
 */
static EmersonParser_variableDeclaration_return
variableDeclaration(pEmersonParser ctx)
{   
    EmersonParser_variableDeclaration_return retval;
    ANTLR3_UINT32 variableDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier79;
    pANTLR3_COMMON_TOKEN    LTERM80;
    EmersonParser_initialiser_return initialiser81;
    #undef	RETURN_TYPE_initialiser81
    #define	RETURN_TYPE_initialiser81 EmersonParser_initialiser_return

    pANTLR3_BASE_TREE Identifier79_tree;
    pANTLR3_BASE_TREE LTERM80_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiser;
    /* Initialize rule variables
     */
    variableDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(15)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier79       = NULL;
    LTERM80       = NULL;
    initialiser81.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier79_tree   = NULL;
    LTERM80_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiser   = NULL;
    #define CREATE_stream_initialiser  if (stream_initialiser == NULL) {stream_initialiser = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiser"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:217:2: ( Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) )
        // .//Emerson.g:217:4: Identifier ( LTERM )* ( initialiser )?
        {
            Identifier79 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclaration1455); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier79, NULL); }


            // .//Emerson.g:217:15: ( LTERM )*

            for (;;)
            {
                int alt39=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA39_0 = LA(1);
                    if ( (LA39_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA39_2 = LA(2);
                            if ( (synpred51_Emerson(ctx)) ) 
                            {
                                alt39=1;
                            }

                        }
                    }

                }
                switch (alt39) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM80 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclaration1457); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM80, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop39;	/* break out of the loop */
            	    break;
                }
            }
            loop39: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:217:22: ( initialiser )?
            {
                int alt40=2;
                {
                    int LA40_0 = LA(1);
                    if ( (LA40_0 == 145) ) 
                    {
                        alt40=1;
                    }
                }
                switch (alt40) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiser
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiser_in_variableDeclaration1460);
            	        initialiser81=initialiser(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiser; stream_initialiser->add(stream_initialiser, initialiser81.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : initialiser, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 217:35: -> ^( VAR Identifier ( initialiser )? )
            	{
            	    // .//Emerson.g:217:38: ^( VAR Identifier ( initialiser )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:217:55: ( initialiser )?
            	        {
            	        	if ( (stream_initialiser != NULL && stream_initialiser->hasNext(stream_initialiser))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiser == NULL ? NULL : stream_initialiser->nextTree(stream_initialiser));

            	        	}
            	        	if ( stream_initialiser != NULL) stream_initialiser->reset(stream_initialiser);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationEx; /* Prevent compiler warnings */
    rulevariableDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiser != NULL) stream_initialiser->free(stream_initialiser);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(15, variableDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclaration */

/** 
 * $ANTLR start variableDeclarationNoIn
 * .//Emerson.g:220:1: variableDeclarationNoIn : Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) ;
 */
static EmersonParser_variableDeclarationNoIn_return
variableDeclarationNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier82;
    pANTLR3_COMMON_TOKEN    LTERM83;
    EmersonParser_initialiserNoIn_return initialiserNoIn84;
    #undef	RETURN_TYPE_initialiserNoIn84
    #define	RETURN_TYPE_initialiserNoIn84 EmersonParser_initialiserNoIn_return

    pANTLR3_BASE_TREE Identifier82_tree;
    pANTLR3_BASE_TREE LTERM83_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiserNoIn;
    /* Initialize rule variables
     */
    variableDeclarationNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(16)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier82       = NULL;
    LTERM83       = NULL;
    initialiserNoIn84.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier82_tree   = NULL;
    LTERM83_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiserNoIn   = NULL;
    #define CREATE_stream_initialiserNoIn  if (stream_initialiserNoIn == NULL) {stream_initialiserNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiserNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:221:2: ( Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) )
        // .//Emerson.g:221:4: Identifier ( LTERM )* ( initialiserNoIn )?
        {
            Identifier82 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclarationNoIn1484); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier82, NULL); }


            // .//Emerson.g:221:15: ( LTERM )*

            for (;;)
            {
                int alt41=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA41_0 = LA(1);
                    if ( (LA41_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA41_2 = LA(2);
                            if ( (synpred53_Emerson(ctx)) ) 
                            {
                                alt41=1;
                            }

                        }
                    }

                }
                switch (alt41) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM83 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationNoIn1486); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM83, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop41;	/* break out of the loop */
            	    break;
                }
            }
            loop41: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:221:22: ( initialiserNoIn )?
            {
                int alt42=2;
                {
                    int LA42_0 = LA(1);
                    if ( (LA42_0 == 145) ) 
                    {
                        alt42=1;
                    }
                }
                switch (alt42) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiserNoIn
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1489);
            	        initialiserNoIn84=initialiserNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiserNoIn; stream_initialiserNoIn->add(stream_initialiserNoIn, initialiserNoIn84.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : initialiserNoIn, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 221:39: -> ^( VAR Identifier ( initialiserNoIn )? )
            	{
            	    // .//Emerson.g:221:43: ^( VAR Identifier ( initialiserNoIn )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:221:60: ( initialiserNoIn )?
            	        {
            	        	if ( (stream_initialiserNoIn != NULL && stream_initialiserNoIn->hasNext(stream_initialiserNoIn))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiserNoIn == NULL ? NULL : stream_initialiserNoIn->nextTree(stream_initialiserNoIn));

            	        	}
            	        	if ( stream_initialiserNoIn != NULL) stream_initialiserNoIn->reset(stream_initialiserNoIn);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiserNoIn != NULL) stream_initialiserNoIn->free(stream_initialiserNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(16, variableDeclarationNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationNoIn */

/** 
 * $ANTLR start initialiser
 * .//Emerson.g:224:1: initialiser : '=' ( LTERM )* expression -> expression ;
 */
static EmersonParser_initialiser_return
initialiser(pEmersonParser ctx)
{   
    EmersonParser_initialiser_return retval;
    ANTLR3_UINT32 initialiser_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal85;
    pANTLR3_COMMON_TOKEN    LTERM86;
    EmersonParser_expression_return expression87;
    #undef	RETURN_TYPE_expression87
    #define	RETURN_TYPE_expression87 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal85_tree;
    pANTLR3_BASE_TREE LTERM86_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    initialiser_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(17)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal85       = NULL;
    LTERM86       = NULL;
    expression87.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal85_tree   = NULL;
    LTERM86_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:225:2: ( '=' ( LTERM )* expression -> expression )
        // .//Emerson.g:225:4: '=' ( LTERM )* expression
        {
            char_literal85 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_initialiser1514); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal85, NULL); }


            // .//Emerson.g:225:8: ( LTERM )*

            for (;;)
            {
                int alt43=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA43_0 = LA(1);
                    if ( (LA43_0 == LTERM) ) 
                    {
                        alt43=1;
                    }

                }
                switch (alt43) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM86 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiser1516); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM86, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop43;	/* break out of the loop */
            	    break;
                }
            }
            loop43: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_initialiser1519);
            expression87=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression87.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 225:26: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserEx; /* Prevent compiler warnings */
    ruleinitialiserEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(17, initialiser_StartIndex); }
    return retval;
}
/* $ANTLR end initialiser */

/** 
 * $ANTLR start initialiserNoIn
 * .//Emerson.g:228:1: initialiserNoIn : '=' ( LTERM )* expressionNoIn -> expressionNoIn ;
 */
static EmersonParser_initialiserNoIn_return
initialiserNoIn(pEmersonParser ctx)
{   
    EmersonParser_initialiserNoIn_return retval;
    ANTLR3_UINT32 initialiserNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal88;
    pANTLR3_COMMON_TOKEN    LTERM89;
    EmersonParser_expressionNoIn_return expressionNoIn90;
    #undef	RETURN_TYPE_expressionNoIn90
    #define	RETURN_TYPE_expressionNoIn90 EmersonParser_expressionNoIn_return

    pANTLR3_BASE_TREE char_literal88_tree;
    pANTLR3_BASE_TREE LTERM89_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expressionNoIn;
    /* Initialize rule variables
     */
    initialiserNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(18)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal88       = NULL;
    LTERM89       = NULL;
    expressionNoIn90.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal88_tree   = NULL;
    LTERM89_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_expressionNoIn   = NULL;
    #define CREATE_stream_expressionNoIn  if (stream_expressionNoIn == NULL) {stream_expressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:229:2: ( '=' ( LTERM )* expressionNoIn -> expressionNoIn )
        // .//Emerson.g:229:4: '=' ( LTERM )* expressionNoIn
        {
            char_literal88 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_initialiserNoIn1536); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal88, NULL); }


            // .//Emerson.g:229:8: ( LTERM )*

            for (;;)
            {
                int alt44=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA44_0 = LA(1);
                    if ( (LA44_0 == LTERM) ) 
                    {
                        alt44=1;
                    }

                }
                switch (alt44) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM89 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiserNoIn1538); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM89, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop44;	/* break out of the loop */
            	    break;
                }
            }
            loop44: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expressionNoIn_in_initialiserNoIn1541);
            expressionNoIn90=expressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expressionNoIn; stream_expressionNoIn->add(stream_expressionNoIn, expressionNoIn90.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 229:30: -> expressionNoIn
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expressionNoIn == NULL ? NULL : stream_expressionNoIn->nextTree(stream_expressionNoIn));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserNoInEx; /* Prevent compiler warnings */
    ruleinitialiserNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_expressionNoIn != NULL) stream_expressionNoIn->free(stream_expressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(18, initialiserNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end initialiserNoIn */

/** 
 * $ANTLR start emptyStatement
 * .//Emerson.g:232:1: emptyStatement : ( LTERM )* ';' ;
 */
static EmersonParser_emptyStatement_return
emptyStatement(pEmersonParser ctx)
{   
    EmersonParser_emptyStatement_return retval;
    ANTLR3_UINT32 emptyStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM91;
    pANTLR3_COMMON_TOKEN    char_literal92;

    pANTLR3_BASE_TREE LTERM91_tree;
    pANTLR3_BASE_TREE char_literal92_tree;

    /* Initialize rule variables
     */
    emptyStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(19)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM91       = NULL;
    char_literal92       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    LTERM91_tree   = NULL;
    char_literal92_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:233:9: ( ( LTERM )* ';' )
        // .//Emerson.g:233:11: ( LTERM )* ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // .//Emerson.g:233:11: ( LTERM )*

            for (;;)
            {
                int alt45=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA45_0 = LA(1);
                    if ( (LA45_0 == LTERM) ) 
                    {
                        alt45=1;
                    }

                }
                switch (alt45) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM91 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_emptyStatement1564); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleemptyStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) {
            	        LTERM91_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, LTERM91));
            	        ADAPTOR->addChild(ADAPTOR, root_0, LTERM91_tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop45;	/* break out of the loop */
            	    break;
                }
            }
            loop45: ; /* Jump out to here if this rule does not match */

            char_literal92 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_emptyStatement1567); 
            if  (HASEXCEPTION())
            {
                goto ruleemptyStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal92_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal92));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal92_tree);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleemptyStatementEx; /* Prevent compiler warnings */
    ruleemptyStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(19, emptyStatement_StartIndex); }
    return retval;
}
/* $ANTLR end emptyStatement */

/** 
 * $ANTLR start expressionStatement
 * .//Emerson.g:236:1: expressionStatement : expression ( LTERM | ';' ) -> expression ;
 */
static EmersonParser_expressionStatement_return
expressionStatement(pEmersonParser ctx)
{   
    EmersonParser_expressionStatement_return retval;
    ANTLR3_UINT32 expressionStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM94;
    pANTLR3_COMMON_TOKEN    char_literal95;
    EmersonParser_expression_return expression93;
    #undef	RETURN_TYPE_expression93
    #define	RETURN_TYPE_expression93 EmersonParser_expression_return

    pANTLR3_BASE_TREE LTERM94_tree;
    pANTLR3_BASE_TREE char_literal95_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    expressionStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(20)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM94       = NULL;
    char_literal95       = NULL;
    expression93.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM94_tree   = NULL;
    char_literal95_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:237:2: ( expression ( LTERM | ';' ) -> expression )
        // .//Emerson.g:237:4: expression ( LTERM | ';' )
        {
            FOLLOWPUSH(FOLLOW_expression_in_expressionStatement1579);
            expression93=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression93.tree, NULL); }

            // .//Emerson.g:237:15: ( LTERM | ';' )
            {
                int alt46=2;

                {
                    int LA46_0 = LA(1);
                    if ( (LA46_0 == LTERM) ) 
                    {
                        alt46=1;
                    }
                    else if ( (LA46_0 == 143) ) 
                    {
                        alt46=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 46;
                        EXCEPTION->state        = 0;


                        goto ruleexpressionStatementEx;
                    }
                }
                switch (alt46) 
                {
            	case 1:
            	    // .//Emerson.g:237:16: LTERM
            	    {
            	        LTERM94 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionStatement1582); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM94, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:237:24: ';'
            	    {
            	        char_literal95 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_expressionStatement1586); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal95, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 237:29: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionStatementEx; /* Prevent compiler warnings */
    ruleexpressionStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(20, expressionStatement_StartIndex); }
    return retval;
}
/* $ANTLR end expressionStatement */

/** 
 * $ANTLR start ifStatement
 * .//Emerson.g:241:1: ifStatement : 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) ;
 */
static EmersonParser_ifStatement_return
ifStatement(pEmersonParser ctx)
{   
    EmersonParser_ifStatement_return retval;
    ANTLR3_UINT32 ifStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal96;
    pANTLR3_COMMON_TOKEN    LTERM97;
    pANTLR3_COMMON_TOKEN    char_literal98;
    pANTLR3_COMMON_TOKEN    LTERM99;
    pANTLR3_COMMON_TOKEN    LTERM101;
    pANTLR3_COMMON_TOKEN    char_literal102;
    pANTLR3_COMMON_TOKEN    LTERM103;
    pANTLR3_COMMON_TOKEN    LTERM104;
    pANTLR3_COMMON_TOKEN    string_literal105;
    pANTLR3_COMMON_TOKEN    LTERM106;
    EmersonParser_statement_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_statement_return

    EmersonParser_statement_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_statement_return

    EmersonParser_expression_return expression100;
    #undef	RETURN_TYPE_expression100
    #define	RETURN_TYPE_expression100 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal96_tree;
    pANTLR3_BASE_TREE LTERM97_tree;
    pANTLR3_BASE_TREE char_literal98_tree;
    pANTLR3_BASE_TREE LTERM99_tree;
    pANTLR3_BASE_TREE LTERM101_tree;
    pANTLR3_BASE_TREE char_literal102_tree;
    pANTLR3_BASE_TREE LTERM103_tree;
    pANTLR3_BASE_TREE LTERM104_tree;
    pANTLR3_BASE_TREE string_literal105_tree;
    pANTLR3_BASE_TREE LTERM106_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    ifStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(21)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal96       = NULL;
    LTERM97       = NULL;
    char_literal98       = NULL;
    LTERM99       = NULL;
    LTERM101       = NULL;
    char_literal102       = NULL;
    LTERM103       = NULL;
    LTERM104       = NULL;
    string_literal105       = NULL;
    LTERM106       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    expression100.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal96_tree   = NULL;
    LTERM97_tree   = NULL;
    char_literal98_tree   = NULL;
    LTERM99_tree   = NULL;
    LTERM101_tree   = NULL;
    char_literal102_tree   = NULL;
    LTERM103_tree   = NULL;
    LTERM104_tree   = NULL;
    string_literal105_tree   = NULL;
    LTERM106_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:242:5: ( 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) )
        // .//Emerson.g:242:7: 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
        {
            string_literal96 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_ifStatement1606); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, string_literal96, NULL); }


            // .//Emerson.g:242:12: ( LTERM )*

            for (;;)
            {
                int alt47=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA47_0 = LA(1);
                    if ( (LA47_0 == LTERM) ) 
                    {
                        alt47=1;
                    }

                }
                switch (alt47) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM97 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1608); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM97, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop47;	/* break out of the loop */
            	    break;
                }
            }
            loop47: ; /* Jump out to here if this rule does not match */

            char_literal98 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_ifStatement1611); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal98, NULL); }


            // .//Emerson.g:242:23: ( LTERM )*

            for (;;)
            {
                int alt48=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA48_0 = LA(1);
                    if ( (LA48_0 == LTERM) ) 
                    {
                        alt48=1;
                    }

                }
                switch (alt48) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM99 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1613); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM99, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop48;	/* break out of the loop */
            	    break;
                }
            }
            loop48: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_ifStatement1616);
            expression100=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression100.tree, NULL); }

            // .//Emerson.g:242:41: ( LTERM )*

            for (;;)
            {
                int alt49=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA49_0 = LA(1);
                    if ( (LA49_0 == LTERM) ) 
                    {
                        alt49=1;
                    }

                }
                switch (alt49) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM101 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1618); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM101, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop49;	/* break out of the loop */
            	    break;
                }
            }
            loop49: ; /* Jump out to here if this rule does not match */

            char_literal102 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_ifStatement1621); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal102, NULL); }


            // .//Emerson.g:242:52: ( LTERM )*

            for (;;)
            {
                int alt50=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA50_0 = LA(1);
                    if ( (LA50_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA50_2 = LA(2);
                            if ( (synpred62_Emerson(ctx)) ) 
                            {
                                alt50=1;
                            }

                        }
                    }

                }
                switch (alt50) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM103 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1623); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM103, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop50;	/* break out of the loop */
            	    break;
                }
            }
            loop50: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_ifStatement1628);
            s1=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s1.tree, NULL); }

            // .//Emerson.g:242:72: ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
            {
                int alt53=2;
                {
                    int LA53_0 = LA(1);
                    if ( (LA53_0 == LTERM) ) 
                    {
                        {
                            int LA53_1 = LA(2);
                            if ( (synpred65_Emerson(ctx)) ) 
                            {
                                alt53=1;
                            }
                        }
                    }
                    else if ( (LA53_0 == 147) ) 
                    {
                        {
                            int LA53_2 = LA(2);
                            if ( (synpred65_Emerson(ctx)) ) 
                            {
                                alt53=1;
                            }
                        }
                    }
                }
                switch (alt53) 
                {
            	case 1:
            	    // .//Emerson.g:242:73: ( LTERM )* 'else' ( LTERM )* s2= statement
            	    {

            	        // .//Emerson.g:242:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt51=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA51_0 = LA(1);
            	                if ( (LA51_0 == LTERM) ) 
            	                {
            	                    alt51=1;
            	                }

            	            }
            	            switch (alt51) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM104 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1631); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM104, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop51;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop51: ; /* Jump out to here if this rule does not match */

            	        string_literal105 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_ifStatement1634); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, string_literal105, NULL); }


            	        // .//Emerson.g:242:87: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt52=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA52_0 = LA(1);
            	                if ( (LA52_0 == LTERM) ) 
            	                {
            	                    {
            	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                        */
            	                        int LA52_2 = LA(2);
            	                        if ( (synpred64_Emerson(ctx)) ) 
            	                        {
            	                            alt52=1;
            	                        }

            	                    }
            	                }

            	            }
            	            switch (alt52) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM106 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1636); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM106, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop52;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop52: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1641);
            	        s2=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s2.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : s1, s2, expression
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 242:109: -> ^( IF expression $s1 ( $s2)? )
            	{
            	    // .//Emerson.g:242:112: ^( IF expression $s1 ( $s2)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IF, (pANTLR3_UINT8)"IF"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//Emerson.g:242:132: ( $s2)?
            	        {
            	        	if ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if ( stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(21, ifStatement_StartIndex); }
    return retval;
}
/* $ANTLR end ifStatement */

/** 
 * $ANTLR start iterationStatement
 * .//Emerson.g:245:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
 */
static EmersonParser_iterationStatement_return
iterationStatement(pEmersonParser ctx)
{   
    EmersonParser_iterationStatement_return retval;
    ANTLR3_UINT32 iterationStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_doWhileStatement_return doWhileStatement107;
    #undef	RETURN_TYPE_doWhileStatement107
    #define	RETURN_TYPE_doWhileStatement107 EmersonParser_doWhileStatement_return

    EmersonParser_whileStatement_return whileStatement108;
    #undef	RETURN_TYPE_whileStatement108
    #define	RETURN_TYPE_whileStatement108 EmersonParser_whileStatement_return

    EmersonParser_forStatement_return forStatement109;
    #undef	RETURN_TYPE_forStatement109
    #define	RETURN_TYPE_forStatement109 EmersonParser_forStatement_return

    EmersonParser_forInStatement_return forInStatement110;
    #undef	RETURN_TYPE_forInStatement110
    #define	RETURN_TYPE_forInStatement110 EmersonParser_forInStatement_return


    /* Initialize rule variables
     */
    iterationStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(22)) )
    {
    	retval.start = 0;

        return retval; 
    }
    doWhileStatement107.tree = NULL;

    whileStatement108.tree = NULL;

    forStatement109.tree = NULL;

    forInStatement110.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:246:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
            
            ANTLR3_UINT32 alt54;

            alt54=4;

            switch ( LA(1) ) 
            {
            case 148:
            	{
            		alt54=1;
            	}
                break;
            case 149:
            	{
            		alt54=2;
            	}
                break;
            case 150:
            	{

            		{
            		    int LA54_3 = LA(2);
            		    if ( (synpred68_Emerson(ctx)) ) 
            		    {
            		        alt54=3;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt54=4;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 54;
            		        EXCEPTION->state        = 3;


            		        goto ruleiterationStatementEx;
            		    }
            		}
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 54;
                EXCEPTION->state        = 0;


                goto ruleiterationStatementEx;
            }

            switch (alt54) 
            {
        	case 1:
        	    // .//Emerson.g:246:4: doWhileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_doWhileStatement_in_iterationStatement1673);
        	        doWhileStatement107=doWhileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, doWhileStatement107.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:247:4: whileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_whileStatement_in_iterationStatement1678);
        	        whileStatement108=whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, whileStatement108.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:248:4: forStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forStatement_in_iterationStatement1683);
        	        forStatement109=forStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forStatement109.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:249:4: forInStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forInStatement_in_iterationStatement1688);
        	        forInStatement110=forInStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forInStatement110.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleiterationStatementEx; /* Prevent compiler warnings */
    ruleiterationStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(22, iterationStatement_StartIndex); }
    return retval;
}
/* $ANTLR end iterationStatement */

/** 
 * $ANTLR start doWhileStatement
 * .//Emerson.g:252:1: doWhileStatement : 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) ;
 */
static EmersonParser_doWhileStatement_return
doWhileStatement(pEmersonParser ctx)
{   
    EmersonParser_doWhileStatement_return retval;
    ANTLR3_UINT32 doWhileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal111;
    pANTLR3_COMMON_TOKEN    LTERM112;
    pANTLR3_COMMON_TOKEN    LTERM114;
    pANTLR3_COMMON_TOKEN    string_literal115;
    pANTLR3_COMMON_TOKEN    LTERM116;
    pANTLR3_COMMON_TOKEN    char_literal117;
    pANTLR3_COMMON_TOKEN    char_literal119;
    pANTLR3_COMMON_TOKEN    LTERM120;
    pANTLR3_COMMON_TOKEN    char_literal121;
    EmersonParser_statement_return statement113;
    #undef	RETURN_TYPE_statement113
    #define	RETURN_TYPE_statement113 EmersonParser_statement_return

    EmersonParser_expression_return expression118;
    #undef	RETURN_TYPE_expression118
    #define	RETURN_TYPE_expression118 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal111_tree;
    pANTLR3_BASE_TREE LTERM112_tree;
    pANTLR3_BASE_TREE LTERM114_tree;
    pANTLR3_BASE_TREE string_literal115_tree;
    pANTLR3_BASE_TREE LTERM116_tree;
    pANTLR3_BASE_TREE char_literal117_tree;
    pANTLR3_BASE_TREE char_literal119_tree;
    pANTLR3_BASE_TREE LTERM120_tree;
    pANTLR3_BASE_TREE char_literal121_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_148;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_149;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    doWhileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(23)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal111       = NULL;
    LTERM112       = NULL;
    LTERM114       = NULL;
    string_literal115       = NULL;
    LTERM116       = NULL;
    char_literal117       = NULL;
    char_literal119       = NULL;
    LTERM120       = NULL;
    char_literal121       = NULL;
    statement113.tree = NULL;

    expression118.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal111_tree   = NULL;
    LTERM112_tree   = NULL;
    LTERM114_tree   = NULL;
    string_literal115_tree   = NULL;
    LTERM116_tree   = NULL;
    char_literal117_tree   = NULL;
    char_literal119_tree   = NULL;
    LTERM120_tree   = NULL;
    char_literal121_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_148   = NULL;
    #define CREATE_stream_148  if (stream_148 == NULL) {stream_148 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 148"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_149   = NULL;
    #define CREATE_stream_149  if (stream_149 == NULL) {stream_149 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 149"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:253:2: ( 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) )
        // .//Emerson.g:253:4: 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' )
        {
            string_literal111 = (pANTLR3_COMMON_TOKEN) MATCHT(148, &FOLLOW_148_in_doWhileStatement1700); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_148; stream_148->add(stream_148, string_literal111, NULL); }


            // .//Emerson.g:253:9: ( LTERM )*

            for (;;)
            {
                int alt55=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA55_0 = LA(1);
                    if ( (LA55_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA55_2 = LA(2);
                            if ( (synpred69_Emerson(ctx)) ) 
                            {
                                alt55=1;
                            }

                        }
                    }

                }
                switch (alt55) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM112 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1702); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM112, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop55;	/* break out of the loop */
            	    break;
                }
            }
            loop55: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_doWhileStatement1705);
            statement113=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement113.tree, NULL); }

            // .//Emerson.g:253:26: ( LTERM )*

            for (;;)
            {
                int alt56=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA56_0 = LA(1);
                    if ( (LA56_0 == LTERM) ) 
                    {
                        alt56=1;
                    }

                }
                switch (alt56) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM114 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1707); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM114, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop56;	/* break out of the loop */
            	    break;
                }
            }
            loop56: ; /* Jump out to here if this rule does not match */

            string_literal115 = (pANTLR3_COMMON_TOKEN) MATCHT(149, &FOLLOW_149_in_doWhileStatement1710); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_149; stream_149->add(stream_149, string_literal115, NULL); }


            // .//Emerson.g:253:41: ( LTERM )*

            for (;;)
            {
                int alt57=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA57_0 = LA(1);
                    if ( (LA57_0 == LTERM) ) 
                    {
                        alt57=1;
                    }

                }
                switch (alt57) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM116 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1712); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM116, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop57;	/* break out of the loop */
            	    break;
                }
            }
            loop57: ; /* Jump out to here if this rule does not match */

            char_literal117 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_doWhileStatement1715); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal117, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_doWhileStatement1717);
            expression118=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression118.tree, NULL); }
            char_literal119 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_doWhileStatement1719); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal119, NULL); }


            // .//Emerson.g:253:67: ( LTERM | ';' )
            {
                int alt58=2;

                {
                    int LA58_0 = LA(1);
                    if ( (LA58_0 == LTERM) ) 
                    {
                        alt58=1;
                    }
                    else if ( (LA58_0 == 143) ) 
                    {
                        alt58=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 58;
                        EXCEPTION->state        = 0;


                        goto ruledoWhileStatementEx;
                    }
                }
                switch (alt58) 
                {
            	case 1:
            	    // .//Emerson.g:253:68: LTERM
            	    {
            	        LTERM120 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1722); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM120, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:253:76: ';'
            	    {
            	        char_literal121 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_doWhileStatement1726); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal121, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 253:81: -> ^( DO statement expression )
            	{
            	    // .//Emerson.g:253:84: ^( DO statement expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DO, (pANTLR3_UINT8)"DO"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledoWhileStatementEx; /* Prevent compiler warnings */
    ruledoWhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_148 != NULL) stream_148->free(stream_148);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_149 != NULL) stream_149->free(stream_149);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(23, doWhileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end doWhileStatement */

/** 
 * $ANTLR start whileStatement
 * .//Emerson.g:256:1: whileStatement : 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) ;
 */
static EmersonParser_whileStatement_return
whileStatement(pEmersonParser ctx)
{   
    EmersonParser_whileStatement_return retval;
    ANTLR3_UINT32 whileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal122;
    pANTLR3_COMMON_TOKEN    LTERM123;
    pANTLR3_COMMON_TOKEN    char_literal124;
    pANTLR3_COMMON_TOKEN    LTERM125;
    pANTLR3_COMMON_TOKEN    LTERM127;
    pANTLR3_COMMON_TOKEN    char_literal128;
    pANTLR3_COMMON_TOKEN    LTERM129;
    EmersonParser_expression_return expression126;
    #undef	RETURN_TYPE_expression126
    #define	RETURN_TYPE_expression126 EmersonParser_expression_return

    EmersonParser_statement_return statement130;
    #undef	RETURN_TYPE_statement130
    #define	RETURN_TYPE_statement130 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal122_tree;
    pANTLR3_BASE_TREE LTERM123_tree;
    pANTLR3_BASE_TREE char_literal124_tree;
    pANTLR3_BASE_TREE LTERM125_tree;
    pANTLR3_BASE_TREE LTERM127_tree;
    pANTLR3_BASE_TREE char_literal128_tree;
    pANTLR3_BASE_TREE LTERM129_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_149;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    whileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(24)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal122       = NULL;
    LTERM123       = NULL;
    char_literal124       = NULL;
    LTERM125       = NULL;
    LTERM127       = NULL;
    char_literal128       = NULL;
    LTERM129       = NULL;
    expression126.tree = NULL;

    statement130.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal122_tree   = NULL;
    LTERM123_tree   = NULL;
    char_literal124_tree   = NULL;
    LTERM125_tree   = NULL;
    LTERM127_tree   = NULL;
    char_literal128_tree   = NULL;
    LTERM129_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_149   = NULL;
    #define CREATE_stream_149  if (stream_149 == NULL) {stream_149 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 149"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:257:2: ( 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) )
        // .//Emerson.g:257:4: 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal122 = (pANTLR3_COMMON_TOKEN) MATCHT(149, &FOLLOW_149_in_whileStatement1752); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_149; stream_149->add(stream_149, string_literal122, NULL); }


            // .//Emerson.g:257:12: ( LTERM )*

            for (;;)
            {
                int alt59=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA59_0 = LA(1);
                    if ( (LA59_0 == LTERM) ) 
                    {
                        alt59=1;
                    }

                }
                switch (alt59) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM123 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1754); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM123, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop59;	/* break out of the loop */
            	    break;
                }
            }
            loop59: ; /* Jump out to here if this rule does not match */

            char_literal124 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_whileStatement1757); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal124, NULL); }


            // .//Emerson.g:257:23: ( LTERM )*

            for (;;)
            {
                int alt60=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA60_0 = LA(1);
                    if ( (LA60_0 == LTERM) ) 
                    {
                        alt60=1;
                    }

                }
                switch (alt60) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM125 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1759); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM125, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop60;	/* break out of the loop */
            	    break;
                }
            }
            loop60: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1762);
            expression126=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression126.tree, NULL); }

            // .//Emerson.g:257:41: ( LTERM )*

            for (;;)
            {
                int alt61=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA61_0 = LA(1);
                    if ( (LA61_0 == LTERM) ) 
                    {
                        alt61=1;
                    }

                }
                switch (alt61) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM127 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1764); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM127, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop61;	/* break out of the loop */
            	    break;
                }
            }
            loop61: ; /* Jump out to here if this rule does not match */

            char_literal128 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_whileStatement1767); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal128, NULL); }


            // .//Emerson.g:257:52: ( LTERM )*

            for (;;)
            {
                int alt62=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA62_0 = LA(1);
                    if ( (LA62_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA62_2 = LA(2);
                            if ( (synpred76_Emerson(ctx)) ) 
                            {
                                alt62=1;
                            }

                        }
                    }

                }
                switch (alt62) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM129 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1769); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM129, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop62;	/* break out of the loop */
            	    break;
                }
            }
            loop62: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_whileStatement1772);
            statement130=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement130.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 257:69: -> ^( WHILE expression statement )
            	{
            	    // .//Emerson.g:257:72: ^( WHILE expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHILE, (pANTLR3_UINT8)"WHILE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_149 != NULL) stream_149->free(stream_149);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(24, whileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end whileStatement */

/** 
 * $ANTLR start forStatement
 * .//Emerson.g:260:1: forStatement : 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) ;
 */
static EmersonParser_forStatement_return
forStatement(pEmersonParser ctx)
{   
    EmersonParser_forStatement_return retval;
    ANTLR3_UINT32 forStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal131;
    pANTLR3_COMMON_TOKEN    LTERM132;
    pANTLR3_COMMON_TOKEN    char_literal133;
    pANTLR3_COMMON_TOKEN    LTERM134;
    pANTLR3_COMMON_TOKEN    LTERM135;
    pANTLR3_COMMON_TOKEN    char_literal136;
    pANTLR3_COMMON_TOKEN    LTERM137;
    pANTLR3_COMMON_TOKEN    LTERM138;
    pANTLR3_COMMON_TOKEN    char_literal139;
    pANTLR3_COMMON_TOKEN    LTERM140;
    pANTLR3_COMMON_TOKEN    LTERM141;
    pANTLR3_COMMON_TOKEN    char_literal142;
    pANTLR3_COMMON_TOKEN    LTERM143;
    EmersonParser_forStatementInitialiserPart_return init;
    #undef	RETURN_TYPE_init
    #define	RETURN_TYPE_init EmersonParser_forStatementInitialiserPart_return

    EmersonParser_expression_return cond;
    #undef	RETURN_TYPE_cond
    #define	RETURN_TYPE_cond EmersonParser_expression_return

    EmersonParser_expression_return iter;
    #undef	RETURN_TYPE_iter
    #define	RETURN_TYPE_iter EmersonParser_expression_return

    EmersonParser_statement_return statement144;
    #undef	RETURN_TYPE_statement144
    #define	RETURN_TYPE_statement144 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal131_tree;
    pANTLR3_BASE_TREE LTERM132_tree;
    pANTLR3_BASE_TREE char_literal133_tree;
    pANTLR3_BASE_TREE LTERM134_tree;
    pANTLR3_BASE_TREE LTERM135_tree;
    pANTLR3_BASE_TREE char_literal136_tree;
    pANTLR3_BASE_TREE LTERM137_tree;
    pANTLR3_BASE_TREE LTERM138_tree;
    pANTLR3_BASE_TREE char_literal139_tree;
    pANTLR3_BASE_TREE LTERM140_tree;
    pANTLR3_BASE_TREE LTERM141_tree;
    pANTLR3_BASE_TREE char_literal142_tree;
    pANTLR3_BASE_TREE LTERM143_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_150;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forStatementInitialiserPart;
    /* Initialize rule variables
     */
    forStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(25)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal131       = NULL;
    LTERM132       = NULL;
    char_literal133       = NULL;
    LTERM134       = NULL;
    LTERM135       = NULL;
    char_literal136       = NULL;
    LTERM137       = NULL;
    LTERM138       = NULL;
    char_literal139       = NULL;
    LTERM140       = NULL;
    LTERM141       = NULL;
    char_literal142       = NULL;
    LTERM143       = NULL;
    init.tree = NULL;

    cond.tree = NULL;

    iter.tree = NULL;

    statement144.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal131_tree   = NULL;
    LTERM132_tree   = NULL;
    char_literal133_tree   = NULL;
    LTERM134_tree   = NULL;
    LTERM135_tree   = NULL;
    char_literal136_tree   = NULL;
    LTERM137_tree   = NULL;
    LTERM138_tree   = NULL;
    char_literal139_tree   = NULL;
    LTERM140_tree   = NULL;
    LTERM141_tree   = NULL;
    char_literal142_tree   = NULL;
    LTERM143_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_150   = NULL;
    #define CREATE_stream_150  if (stream_150 == NULL) {stream_150 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 150"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forStatementInitialiserPart   = NULL;
    #define CREATE_stream_forStatementInitialiserPart  if (stream_forStatementInitialiserPart == NULL) {stream_forStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:261:2: ( 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) )
        // .//Emerson.g:261:4: 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal131 = (pANTLR3_COMMON_TOKEN) MATCHT(150, &FOLLOW_150_in_forStatement1795); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_150; stream_150->add(stream_150, string_literal131, NULL); }


            // .//Emerson.g:261:10: ( LTERM )*

            for (;;)
            {
                int alt63=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA63_0 = LA(1);
                    if ( (LA63_0 == LTERM) ) 
                    {
                        alt63=1;
                    }

                }
                switch (alt63) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM132 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1797); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM132, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop63;	/* break out of the loop */
            	    break;
                }
            }
            loop63: ; /* Jump out to here if this rule does not match */

            char_literal133 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_forStatement1800); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal133, NULL); }


            // .//Emerson.g:261:21: ( ( LTERM )* init= forStatementInitialiserPart )?
            {
                int alt65=2;
                alt65 = cdfa65.predict(ctx, RECOGNIZER, ISTREAM, &cdfa65);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt65) 
                {
            	case 1:
            	    // .//Emerson.g:261:22: ( LTERM )* init= forStatementInitialiserPart
            	    {

            	        // .//Emerson.g:261:22: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt64=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA64_0 = LA(1);
            	                if ( (LA64_0 == LTERM) ) 
            	                {
            	                    alt64=1;
            	                }

            	            }
            	            switch (alt64) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM134 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1803); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM134, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop64;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop64: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_forStatementInitialiserPart_in_forStatement1808);
            	        init=forStatementInitialiserPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_forStatementInitialiserPart; stream_forStatementInitialiserPart->add(stream_forStatementInitialiserPart, init.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:261:64: ( LTERM )*

            for (;;)
            {
                int alt66=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA66_0 = LA(1);
                    if ( (LA66_0 == LTERM) ) 
                    {
                        alt66=1;
                    }

                }
                switch (alt66) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM135 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1812); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM135, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop66;	/* break out of the loop */
            	    break;
                }
            }
            loop66: ; /* Jump out to here if this rule does not match */

            char_literal136 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_forStatement1815); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal136, NULL); }


            // .//Emerson.g:261:75: ( ( LTERM )* cond= expression )?
            {
                int alt68=2;
                alt68 = cdfa68.predict(ctx, RECOGNIZER, ISTREAM, &cdfa68);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt68) 
                {
            	case 1:
            	    // .//Emerson.g:261:76: ( LTERM )* cond= expression
            	    {

            	        // .//Emerson.g:261:76: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt67=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA67_0 = LA(1);
            	                if ( (LA67_0 == LTERM) ) 
            	                {
            	                    alt67=1;
            	                }

            	            }
            	            switch (alt67) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM137 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1818); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM137, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop67;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop67: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1823);
            	        cond=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, cond.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:261:101: ( LTERM )*

            for (;;)
            {
                int alt69=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA69_0 = LA(1);
                    if ( (LA69_0 == LTERM) ) 
                    {
                        alt69=1;
                    }

                }
                switch (alt69) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM138 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1827); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM138, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop69;	/* break out of the loop */
            	    break;
                }
            }
            loop69: ; /* Jump out to here if this rule does not match */

            char_literal139 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_forStatement1830); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal139, NULL); }


            // .//Emerson.g:261:112: ( ( LTERM )* iter= expression )?
            {
                int alt71=2;
                alt71 = cdfa71.predict(ctx, RECOGNIZER, ISTREAM, &cdfa71);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt71) 
                {
            	case 1:
            	    // .//Emerson.g:261:113: ( LTERM )* iter= expression
            	    {

            	        // .//Emerson.g:261:113: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt70=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA70_0 = LA(1);
            	                if ( (LA70_0 == LTERM) ) 
            	                {
            	                    alt70=1;
            	                }

            	            }
            	            switch (alt70) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM140 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1833); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM140, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop70;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop70: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1838);
            	        iter=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, iter.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:261:138: ( LTERM )*

            for (;;)
            {
                int alt72=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA72_0 = LA(1);
                    if ( (LA72_0 == LTERM) ) 
                    {
                        alt72=1;
                    }

                }
                switch (alt72) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM141 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1842); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM141, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop72;	/* break out of the loop */
            	    break;
                }
            }
            loop72: ; /* Jump out to here if this rule does not match */

            char_literal142 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_forStatement1845); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal142, NULL); }


            // .//Emerson.g:261:149: ( LTERM )*

            for (;;)
            {
                int alt73=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA73_0 = LA(1);
                    if ( (LA73_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA73_2 = LA(2);
                            if ( (synpred87_Emerson(ctx)) ) 
                            {
                                alt73=1;
                            }

                        }
                    }

                }
                switch (alt73) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM143 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1847); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM143, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop73;	/* break out of the loop */
            	    break;
                }
            }
            loop73: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forStatement1850);
            statement144=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement144.tree, NULL); }

             
            /* AST REWRITE
             * elements          : init, iter, statement, cond
             * token labels      : 
             * rule labels       : retval, init, iter, cond
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_init;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_iter;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cond;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_init=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token init", init.tree != NULL ? init.tree : NULL);
            	stream_iter=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token iter", iter.tree != NULL ? iter.tree : NULL);
            	stream_cond=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token cond", cond.tree != NULL ? cond.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 261:166: -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	{
            	    // .//Emerson.g:261:170: ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR"), root_1));

            	        // .//Emerson.g:261:176: ( ^( FORINIT $init) )?
            	        {
            	        	if ( (stream_init != NULL && stream_init->hasNext(stream_init))  )
            	        	{
            	        		// .//Emerson.g:261:176: ^( FORINIT $init)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORINIT, (pANTLR3_UINT8)"FORINIT"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_init == NULL ? NULL : stream_init->nextTree(stream_init));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_init != NULL) stream_init->reset(stream_init);

            	        }
            	        // .//Emerson.g:261:196: ( ^( FORCOND $cond) )?
            	        {
            	        	if ( (stream_cond != NULL && stream_cond->hasNext(stream_cond))  )
            	        	{
            	        		// .//Emerson.g:261:196: ^( FORCOND $cond)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORCOND, (pANTLR3_UINT8)"FORCOND"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_cond == NULL ? NULL : stream_cond->nextTree(stream_cond));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_cond != NULL) stream_cond->reset(stream_cond);

            	        }
            	        // .//Emerson.g:261:215: ( ^( FORITER $iter) )?
            	        {
            	        	if ( (stream_iter != NULL && stream_iter->hasNext(stream_iter))  )
            	        	{
            	        		// .//Emerson.g:261:215: ^( FORITER $iter)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORITER, (pANTLR3_UINT8)"FORITER"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_iter == NULL ? NULL : stream_iter->nextTree(stream_iter));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_iter != NULL) stream_iter->reset(stream_iter);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_init != NULL) stream_init->free(stream_init);
            	if (stream_iter != NULL) stream_iter->free(stream_iter);
            	if (stream_cond != NULL) stream_cond->free(stream_cond);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementEx; /* Prevent compiler warnings */
    ruleforStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_150 != NULL) stream_150->free(stream_150);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forStatementInitialiserPart != NULL) stream_forStatementInitialiserPart->free(stream_forStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(25, forStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forStatement */

/** 
 * $ANTLR start forStatementInitialiserPart
 * .//Emerson.g:264:1: forStatementInitialiserPart : ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) );
 */
static EmersonParser_forStatementInitialiserPart_return
forStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal146;
    pANTLR3_COMMON_TOKEN    LTERM147;
    EmersonParser_expressionNoIn_return expressionNoIn145;
    #undef	RETURN_TYPE_expressionNoIn145
    #define	RETURN_TYPE_expressionNoIn145 EmersonParser_expressionNoIn_return

    EmersonParser_variableDeclarationListNoIn_return variableDeclarationListNoIn148;
    #undef	RETURN_TYPE_variableDeclarationListNoIn148
    #define	RETURN_TYPE_variableDeclarationListNoIn148 EmersonParser_variableDeclarationListNoIn_return

    pANTLR3_BASE_TREE string_literal146_tree;
    pANTLR3_BASE_TREE LTERM147_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationListNoIn;
    /* Initialize rule variables
     */
    forStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(26)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal146       = NULL;
    LTERM147       = NULL;
    expressionNoIn145.tree = NULL;

    variableDeclarationListNoIn148.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal146_tree   = NULL;
    LTERM147_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_variableDeclarationListNoIn   = NULL;
    #define CREATE_stream_variableDeclarationListNoIn  if (stream_variableDeclarationListNoIn == NULL) {stream_variableDeclarationListNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationListNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:265:2: ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) )
            
            ANTLR3_UINT32 alt75;

            alt75=2;


            {
                int LA75_0 = LA(1);
                if ( (((LA75_0 >= Identifier) && (LA75_0 <= StringLiteral)) || ((LA75_0 >= 137) && (LA75_0 <= 138)) || LA75_0 == 141 || ((LA75_0 >= 164) && (LA75_0 <= 165)) || LA75_0 == 189 || ((LA75_0 >= 194) && (LA75_0 <= 195)) || ((LA75_0 >= 199) && (LA75_0 <= 210))) ) 
                {
                    alt75=1;
                }
                else if ( (LA75_0 == 144) ) 
                {
                    alt75=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 75;
                    EXCEPTION->state        = 0;


                    goto ruleforStatementInitialiserPartEx;
                }
            }
            switch (alt75) 
            {
        	case 1:
        	    // .//Emerson.g:265:4: expressionNoIn
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionNoIn_in_forStatementInitialiserPart1899);
        	        expressionNoIn145=expressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionNoIn145.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:266:4: 'var' ( LTERM )* variableDeclarationListNoIn
        	    {
        	        string_literal146 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_forStatementInitialiserPart1904); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, string_literal146, NULL); }


        	        // .//Emerson.g:266:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt74=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA74_0 = LA(1);
        	                if ( (LA74_0 == LTERM) ) 
        	                {
        	                    alt74=1;
        	                }

        	            }
        	            switch (alt74) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM147 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatementInitialiserPart1906); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM147, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop74;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop74: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1909);
        	        variableDeclarationListNoIn148=variableDeclarationListNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationListNoIn; stream_variableDeclarationListNoIn->add(stream_variableDeclarationListNoIn, variableDeclarationListNoIn148.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationListNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 266:45: -> ^( VARLIST variableDeclarationListNoIn )
        	        	{
        	        	    // .//Emerson.g:266:48: ^( VARLIST variableDeclarationListNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationListNoIn == NULL ? NULL : stream_variableDeclarationListNoIn->nextTree(stream_variableDeclarationListNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_variableDeclarationListNoIn != NULL) stream_variableDeclarationListNoIn->free(stream_variableDeclarationListNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(26, forStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forStatementInitialiserPart */

/** 
 * $ANTLR start forInStatement
 * .//Emerson.g:269:1: forInStatement : 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) ;
 */
static EmersonParser_forInStatement_return
forInStatement(pEmersonParser ctx)
{   
    EmersonParser_forInStatement_return retval;
    ANTLR3_UINT32 forInStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal149;
    pANTLR3_COMMON_TOKEN    LTERM150;
    pANTLR3_COMMON_TOKEN    char_literal151;
    pANTLR3_COMMON_TOKEN    LTERM152;
    pANTLR3_COMMON_TOKEN    LTERM154;
    pANTLR3_COMMON_TOKEN    string_literal155;
    pANTLR3_COMMON_TOKEN    LTERM156;
    pANTLR3_COMMON_TOKEN    LTERM158;
    pANTLR3_COMMON_TOKEN    char_literal159;
    pANTLR3_COMMON_TOKEN    LTERM160;
    EmersonParser_forInStatementInitialiserPart_return forInStatementInitialiserPart153;
    #undef	RETURN_TYPE_forInStatementInitialiserPart153
    #define	RETURN_TYPE_forInStatementInitialiserPart153 EmersonParser_forInStatementInitialiserPart_return

    EmersonParser_expression_return expression157;
    #undef	RETURN_TYPE_expression157
    #define	RETURN_TYPE_expression157 EmersonParser_expression_return

    EmersonParser_statement_return statement161;
    #undef	RETURN_TYPE_statement161
    #define	RETURN_TYPE_statement161 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal149_tree;
    pANTLR3_BASE_TREE LTERM150_tree;
    pANTLR3_BASE_TREE char_literal151_tree;
    pANTLR3_BASE_TREE LTERM152_tree;
    pANTLR3_BASE_TREE LTERM154_tree;
    pANTLR3_BASE_TREE string_literal155_tree;
    pANTLR3_BASE_TREE LTERM156_tree;
    pANTLR3_BASE_TREE LTERM158_tree;
    pANTLR3_BASE_TREE char_literal159_tree;
    pANTLR3_BASE_TREE LTERM160_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_150;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_151;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forInStatementInitialiserPart;
    /* Initialize rule variables
     */
    forInStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(27)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal149       = NULL;
    LTERM150       = NULL;
    char_literal151       = NULL;
    LTERM152       = NULL;
    LTERM154       = NULL;
    string_literal155       = NULL;
    LTERM156       = NULL;
    LTERM158       = NULL;
    char_literal159       = NULL;
    LTERM160       = NULL;
    forInStatementInitialiserPart153.tree = NULL;

    expression157.tree = NULL;

    statement161.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal149_tree   = NULL;
    LTERM150_tree   = NULL;
    char_literal151_tree   = NULL;
    LTERM152_tree   = NULL;
    LTERM154_tree   = NULL;
    string_literal155_tree   = NULL;
    LTERM156_tree   = NULL;
    LTERM158_tree   = NULL;
    char_literal159_tree   = NULL;
    LTERM160_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_150   = NULL;
    #define CREATE_stream_150  if (stream_150 == NULL) {stream_150 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 150"); } 
    stream_151   = NULL;
    #define CREATE_stream_151  if (stream_151 == NULL) {stream_151 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 151"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forInStatementInitialiserPart   = NULL;
    #define CREATE_stream_forInStatementInitialiserPart  if (stream_forInStatementInitialiserPart == NULL) {stream_forInStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forInStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:270:2: ( 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) )
        // .//Emerson.g:270:4: 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal149 = (pANTLR3_COMMON_TOKEN) MATCHT(150, &FOLLOW_150_in_forInStatement1929); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_150; stream_150->add(stream_150, string_literal149, NULL); }


            // .//Emerson.g:270:10: ( LTERM )*

            for (;;)
            {
                int alt76=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA76_0 = LA(1);
                    if ( (LA76_0 == LTERM) ) 
                    {
                        alt76=1;
                    }

                }
                switch (alt76) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM150 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1931); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM150, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop76;	/* break out of the loop */
            	    break;
                }
            }
            loop76: ; /* Jump out to here if this rule does not match */

            char_literal151 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_forInStatement1934); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal151, NULL); }


            // .//Emerson.g:270:21: ( LTERM )*

            for (;;)
            {
                int alt77=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA77_0 = LA(1);
                    if ( (LA77_0 == LTERM) ) 
                    {
                        alt77=1;
                    }

                }
                switch (alt77) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM152 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1936); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM152, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop77;	/* break out of the loop */
            	    break;
                }
            }
            loop77: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_forInStatementInitialiserPart_in_forInStatement1939);
            forInStatementInitialiserPart153=forInStatementInitialiserPart(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_forInStatementInitialiserPart; stream_forInStatementInitialiserPart->add(stream_forInStatementInitialiserPart, forInStatementInitialiserPart153.tree, NULL); }

            // .//Emerson.g:270:58: ( LTERM )*

            for (;;)
            {
                int alt78=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA78_0 = LA(1);
                    if ( (LA78_0 == LTERM) ) 
                    {
                        alt78=1;
                    }

                }
                switch (alt78) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM154 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1941); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM154, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop78;	/* break out of the loop */
            	    break;
                }
            }
            loop78: ; /* Jump out to here if this rule does not match */

            string_literal155 = (pANTLR3_COMMON_TOKEN) MATCHT(151, &FOLLOW_151_in_forInStatement1944); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_151; stream_151->add(stream_151, string_literal155, NULL); }


            // .//Emerson.g:270:70: ( LTERM )*

            for (;;)
            {
                int alt79=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA79_0 = LA(1);
                    if ( (LA79_0 == LTERM) ) 
                    {
                        alt79=1;
                    }

                }
                switch (alt79) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM156 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1946); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM156, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop79;	/* break out of the loop */
            	    break;
                }
            }
            loop79: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_forInStatement1949);
            expression157=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression157.tree, NULL); }

            // .//Emerson.g:270:88: ( LTERM )*

            for (;;)
            {
                int alt80=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA80_0 = LA(1);
                    if ( (LA80_0 == LTERM) ) 
                    {
                        alt80=1;
                    }

                }
                switch (alt80) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM158 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1951); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM158, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop80;	/* break out of the loop */
            	    break;
                }
            }
            loop80: ; /* Jump out to here if this rule does not match */

            char_literal159 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_forInStatement1954); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal159, NULL); }


            // .//Emerson.g:270:99: ( LTERM )*

            for (;;)
            {
                int alt81=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA81_0 = LA(1);
                    if ( (LA81_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA81_2 = LA(2);
                            if ( (synpred95_Emerson(ctx)) ) 
                            {
                                alt81=1;
                            }

                        }
                    }

                }
                switch (alt81) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM160 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1956); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM160, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop81;	/* break out of the loop */
            	    break;
                }
            }
            loop81: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forInStatement1959);
            statement161=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement161.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, expression, forInStatementInitialiserPart
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 270:116: -> ^( FORIN forInStatementInitialiserPart expression statement )
            	{
            	    // .//Emerson.g:270:119: ^( FORIN forInStatementInitialiserPart expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORIN, (pANTLR3_UINT8)"FORIN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_forInStatementInitialiserPart == NULL ? NULL : stream_forInStatementInitialiserPart->nextTree(stream_forInStatementInitialiserPart));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementEx; /* Prevent compiler warnings */
    ruleforInStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_150 != NULL) stream_150->free(stream_150);
        if (stream_151 != NULL) stream_151->free(stream_151);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forInStatementInitialiserPart != NULL) stream_forInStatementInitialiserPart->free(stream_forInStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(27, forInStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatement */

/** 
 * $ANTLR start forInStatementInitialiserPart
 * .//Emerson.g:273:1: forInStatementInitialiserPart : ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) );
 */
static EmersonParser_forInStatementInitialiserPart_return
forInStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forInStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forInStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal163;
    pANTLR3_COMMON_TOKEN    LTERM164;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression162;
    #undef	RETURN_TYPE_leftHandSideExpression162
    #define	RETURN_TYPE_leftHandSideExpression162 EmersonParser_leftHandSideExpression_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn165;
    #undef	RETURN_TYPE_variableDeclarationNoIn165
    #define	RETURN_TYPE_variableDeclarationNoIn165 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE string_literal163_tree;
    pANTLR3_BASE_TREE LTERM164_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    forInStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(28)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal163       = NULL;
    LTERM164       = NULL;
    leftHandSideExpression162.tree = NULL;

    variableDeclarationNoIn165.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal163_tree   = NULL;
    LTERM164_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:274:2: ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) )
            
            ANTLR3_UINT32 alt83;

            alt83=2;


            {
                int LA83_0 = LA(1);
                if ( (((LA83_0 >= Identifier) && (LA83_0 <= StringLiteral)) || ((LA83_0 >= 137) && (LA83_0 <= 138)) || LA83_0 == 141 || ((LA83_0 >= 164) && (LA83_0 <= 165)) || LA83_0 == 189 || ((LA83_0 >= 206) && (LA83_0 <= 210))) ) 
                {
                    alt83=1;
                }
                else if ( (LA83_0 == 144) ) 
                {
                    alt83=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 83;
                    EXCEPTION->state        = 0;


                    goto ruleforInStatementInitialiserPartEx;
                }
            }
            switch (alt83) 
            {
        	case 1:
        	    // .//Emerson.g:274:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1983);
        	        leftHandSideExpression162=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression162.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 274:27: -> leftHandSideExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:275:4: 'var' ( LTERM )* variableDeclarationNoIn
        	    {
        	        string_literal163 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_forInStatementInitialiserPart1992); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, string_literal163, NULL); }


        	        // .//Emerson.g:275:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt82=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA82_0 = LA(1);
        	                if ( (LA82_0 == LTERM) ) 
        	                {
        	                    alt82=1;
        	                }

        	            }
        	            switch (alt82) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM164 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatementInitialiserPart1994); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforInStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM164, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop82;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop82: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1997);
        	        variableDeclarationNoIn165=variableDeclarationNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn165.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 275:41: -> ^( VAR variableDeclarationNoIn )
        	        	{
        	        	    // .//Emerson.g:275:44: ^( VAR variableDeclarationNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforInStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(28, forInStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatementInitialiserPart */

/** 
 * $ANTLR start continueStatement
 * .//Emerson.g:278:1: continueStatement : 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) ;
 */
static EmersonParser_continueStatement_return
continueStatement(pEmersonParser ctx)
{   
    EmersonParser_continueStatement_return retval;
    ANTLR3_UINT32 continueStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal166;
    pANTLR3_COMMON_TOKEN    Identifier167;
    pANTLR3_COMMON_TOKEN    LTERM168;
    pANTLR3_COMMON_TOKEN    char_literal169;

    pANTLR3_BASE_TREE string_literal166_tree;
    pANTLR3_BASE_TREE Identifier167_tree;
    pANTLR3_BASE_TREE LTERM168_tree;
    pANTLR3_BASE_TREE char_literal169_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_152;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    continueStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(29)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal166       = NULL;
    Identifier167       = NULL;
    LTERM168       = NULL;
    char_literal169       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal166_tree   = NULL;
    Identifier167_tree   = NULL;
    LTERM168_tree   = NULL;
    char_literal169_tree   = NULL;

    stream_152   = NULL;
    #define CREATE_stream_152  if (stream_152 == NULL) {stream_152 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 152"); } 
    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:279:2: ( 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) )
        // .//Emerson.g:279:4: 'continue' ( Identifier )? ( LTERM | ';' )
        {
            string_literal166 = (pANTLR3_COMMON_TOKEN) MATCHT(152, &FOLLOW_152_in_continueStatement2016); 
            if  (HASEXCEPTION())
            {
                goto rulecontinueStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_152; stream_152->add(stream_152, string_literal166, NULL); }


            // .//Emerson.g:279:15: ( Identifier )?
            {
                int alt84=2;
                {
                    int LA84_0 = LA(1);
                    if ( (LA84_0 == Identifier) ) 
                    {
                        alt84=1;
                    }
                }
                switch (alt84) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier167 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_continueStatement2018); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier167, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:279:27: ( LTERM | ';' )
            {
                int alt85=2;

                {
                    int LA85_0 = LA(1);
                    if ( (LA85_0 == LTERM) ) 
                    {
                        alt85=1;
                    }
                    else if ( (LA85_0 == 143) ) 
                    {
                        alt85=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 85;
                        EXCEPTION->state        = 0;


                        goto rulecontinueStatementEx;
                    }
                }
                switch (alt85) 
                {
            	case 1:
            	    // .//Emerson.g:279:28: LTERM
            	    {
            	        LTERM168 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_continueStatement2022); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM168, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:279:36: ';'
            	    {
            	        char_literal169 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_continueStatement2026); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal169, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 279:42: -> ^( CONTINUE ( Identifier )? )
            	{
            	    // .//Emerson.g:279:45: ^( CONTINUE ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTINUE, (pANTLR3_UINT8)"CONTINUE"), root_1));

            	        // .//Emerson.g:279:56: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontinueStatementEx; /* Prevent compiler warnings */
    rulecontinueStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_152 != NULL) stream_152->free(stream_152);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(29, continueStatement_StartIndex); }
    return retval;
}
/* $ANTLR end continueStatement */

/** 
 * $ANTLR start breakStatement
 * .//Emerson.g:282:1: breakStatement : 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) ;
 */
static EmersonParser_breakStatement_return
breakStatement(pEmersonParser ctx)
{   
    EmersonParser_breakStatement_return retval;
    ANTLR3_UINT32 breakStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal170;
    pANTLR3_COMMON_TOKEN    Identifier171;
    pANTLR3_COMMON_TOKEN    LTERM172;
    pANTLR3_COMMON_TOKEN    char_literal173;

    pANTLR3_BASE_TREE string_literal170_tree;
    pANTLR3_BASE_TREE Identifier171_tree;
    pANTLR3_BASE_TREE LTERM172_tree;
    pANTLR3_BASE_TREE char_literal173_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_153;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    breakStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(30)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal170       = NULL;
    Identifier171       = NULL;
    LTERM172       = NULL;
    char_literal173       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal170_tree   = NULL;
    Identifier171_tree   = NULL;
    LTERM172_tree   = NULL;
    char_literal173_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_153   = NULL;
    #define CREATE_stream_153  if (stream_153 == NULL) {stream_153 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 153"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:283:2: ( 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) )
        // .//Emerson.g:283:4: 'break' ( Identifier )? ( LTERM | ';' )
        {
            string_literal170 = (pANTLR3_COMMON_TOKEN) MATCHT(153, &FOLLOW_153_in_breakStatement2048); 
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_153; stream_153->add(stream_153, string_literal170, NULL); }


            // .//Emerson.g:283:12: ( Identifier )?
            {
                int alt86=2;
                {
                    int LA86_0 = LA(1);
                    if ( (LA86_0 == Identifier) ) 
                    {
                        alt86=1;
                    }
                }
                switch (alt86) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier171 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_breakStatement2050); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier171, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:283:24: ( LTERM | ';' )
            {
                int alt87=2;

                {
                    int LA87_0 = LA(1);
                    if ( (LA87_0 == LTERM) ) 
                    {
                        alt87=1;
                    }
                    else if ( (LA87_0 == 143) ) 
                    {
                        alt87=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 87;
                        EXCEPTION->state        = 0;


                        goto rulebreakStatementEx;
                    }
                }
                switch (alt87) 
                {
            	case 1:
            	    // .//Emerson.g:283:25: LTERM
            	    {
            	        LTERM172 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_breakStatement2054); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM172, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:283:33: ';'
            	    {
            	        char_literal173 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_breakStatement2058); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal173, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 283:38: -> ^( BREAK ( Identifier )? )
            	{
            	    // .//Emerson.g:283:41: ^( BREAK ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BREAK, (pANTLR3_UINT8)"BREAK"), root_1));

            	        // .//Emerson.g:283:49: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_153 != NULL) stream_153->free(stream_153);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(30, breakStatement_StartIndex); }
    return retval;
}
/* $ANTLR end breakStatement */

/** 
 * $ANTLR start returnStatement
 * .//Emerson.g:286:1: returnStatement : 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) ;
 */
static EmersonParser_returnStatement_return
returnStatement(pEmersonParser ctx)
{   
    EmersonParser_returnStatement_return retval;
    ANTLR3_UINT32 returnStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal174;
    pANTLR3_COMMON_TOKEN    LTERM176;
    pANTLR3_COMMON_TOKEN    char_literal177;
    EmersonParser_expression_return expression175;
    #undef	RETURN_TYPE_expression175
    #define	RETURN_TYPE_expression175 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal174_tree;
    pANTLR3_BASE_TREE LTERM176_tree;
    pANTLR3_BASE_TREE char_literal177_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_154;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    returnStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(31)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal174       = NULL;
    LTERM176       = NULL;
    char_literal177       = NULL;
    expression175.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal174_tree   = NULL;
    LTERM176_tree   = NULL;
    char_literal177_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_154   = NULL;
    #define CREATE_stream_154  if (stream_154 == NULL) {stream_154 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 154"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:287:2: ( 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) )
        // .//Emerson.g:287:4: 'return' ( expression )? ( LTERM | ';' )
        {
            string_literal174 = (pANTLR3_COMMON_TOKEN) MATCHT(154, &FOLLOW_154_in_returnStatement2079); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_154; stream_154->add(stream_154, string_literal174, NULL); }


            // .//Emerson.g:287:13: ( expression )?
            {
                int alt88=2;
                {
                    int LA88_0 = LA(1);
                    if ( (((LA88_0 >= Identifier) && (LA88_0 <= StringLiteral)) || ((LA88_0 >= 137) && (LA88_0 <= 138)) || LA88_0 == 141 || ((LA88_0 >= 164) && (LA88_0 <= 165)) || LA88_0 == 189 || ((LA88_0 >= 194) && (LA88_0 <= 195)) || ((LA88_0 >= 199) && (LA88_0 <= 210))) ) 
                    {
                        alt88=1;
                    }
                }
                switch (alt88) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement2081);
            	        expression175=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression175.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:287:25: ( LTERM | ';' )
            {
                int alt89=2;

                {
                    int LA89_0 = LA(1);
                    if ( (LA89_0 == LTERM) ) 
                    {
                        alt89=1;
                    }
                    else if ( (LA89_0 == 143) ) 
                    {
                        alt89=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 89;
                        EXCEPTION->state        = 0;


                        goto rulereturnStatementEx;
                    }
                }
                switch (alt89) 
                {
            	case 1:
            	    // .//Emerson.g:287:26: LTERM
            	    {
            	        LTERM176 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_returnStatement2085); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM176, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:287:34: ';'
            	    {
            	        char_literal177 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_returnStatement2089); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal177, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 287:39: -> ^( RETURN ( expression )? )
            	{
            	    // .//Emerson.g:287:42: ^( RETURN ( expression )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RETURN, (pANTLR3_UINT8)"RETURN"), root_1));

            	        // .//Emerson.g:287:51: ( expression )?
            	        {
            	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        	}
            	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_154 != NULL) stream_154->free(stream_154);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(31, returnStatement_StartIndex); }
    return retval;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start withStatement
 * .//Emerson.g:290:1: withStatement : 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) ;
 */
static EmersonParser_withStatement_return
withStatement(pEmersonParser ctx)
{   
    EmersonParser_withStatement_return retval;
    ANTLR3_UINT32 withStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal178;
    pANTLR3_COMMON_TOKEN    LTERM179;
    pANTLR3_COMMON_TOKEN    char_literal180;
    pANTLR3_COMMON_TOKEN    LTERM181;
    pANTLR3_COMMON_TOKEN    LTERM183;
    pANTLR3_COMMON_TOKEN    char_literal184;
    pANTLR3_COMMON_TOKEN    LTERM185;
    EmersonParser_expression_return expression182;
    #undef	RETURN_TYPE_expression182
    #define	RETURN_TYPE_expression182 EmersonParser_expression_return

    EmersonParser_statement_return statement186;
    #undef	RETURN_TYPE_statement186
    #define	RETURN_TYPE_statement186 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal178_tree;
    pANTLR3_BASE_TREE LTERM179_tree;
    pANTLR3_BASE_TREE char_literal180_tree;
    pANTLR3_BASE_TREE LTERM181_tree;
    pANTLR3_BASE_TREE LTERM183_tree;
    pANTLR3_BASE_TREE char_literal184_tree;
    pANTLR3_BASE_TREE LTERM185_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    withStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(32)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal178       = NULL;
    LTERM179       = NULL;
    char_literal180       = NULL;
    LTERM181       = NULL;
    LTERM183       = NULL;
    char_literal184       = NULL;
    LTERM185       = NULL;
    expression182.tree = NULL;

    statement186.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal178_tree   = NULL;
    LTERM179_tree   = NULL;
    char_literal180_tree   = NULL;
    LTERM181_tree   = NULL;
    LTERM183_tree   = NULL;
    char_literal184_tree   = NULL;
    LTERM185_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:291:2: ( 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) )
        // .//Emerson.g:291:4: 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal178 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_withStatement2111); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, string_literal178, NULL); }


            // .//Emerson.g:291:11: ( LTERM )*

            for (;;)
            {
                int alt90=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA90_0 = LA(1);
                    if ( (LA90_0 == LTERM) ) 
                    {
                        alt90=1;
                    }

                }
                switch (alt90) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM179 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2113); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM179, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop90;	/* break out of the loop */
            	    break;
                }
            }
            loop90: ; /* Jump out to here if this rule does not match */

            char_literal180 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_withStatement2116); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal180, NULL); }


            // .//Emerson.g:291:22: ( LTERM )*

            for (;;)
            {
                int alt91=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA91_0 = LA(1);
                    if ( (LA91_0 == LTERM) ) 
                    {
                        alt91=1;
                    }

                }
                switch (alt91) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM181 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2118); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM181, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop91;	/* break out of the loop */
            	    break;
                }
            }
            loop91: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_withStatement2121);
            expression182=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression182.tree, NULL); }

            // .//Emerson.g:291:40: ( LTERM )*

            for (;;)
            {
                int alt92=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA92_0 = LA(1);
                    if ( (LA92_0 == LTERM) ) 
                    {
                        alt92=1;
                    }

                }
                switch (alt92) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM183 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2123); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM183, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop92;	/* break out of the loop */
            	    break;
                }
            }
            loop92: ; /* Jump out to here if this rule does not match */

            char_literal184 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_withStatement2126); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal184, NULL); }


            // .//Emerson.g:291:51: ( LTERM )*

            for (;;)
            {
                int alt93=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA93_0 = LA(1);
                    if ( (LA93_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA93_2 = LA(2);
                            if ( (synpred107_Emerson(ctx)) ) 
                            {
                                alt93=1;
                            }

                        }
                    }

                }
                switch (alt93) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM185 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement2128); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM185, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop93;	/* break out of the loop */
            	    break;
                }
            }
            loop93: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_withStatement2131);
            statement186=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement186.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 291:68: -> ^( WITH expression statement )
            	{
            	    // .//Emerson.g:291:71: ^( WITH expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WITH, (pANTLR3_UINT8)"WITH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithStatementEx; /* Prevent compiler warnings */
    rulewithStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(32, withStatement_StartIndex); }
    return retval;
}
/* $ANTLR end withStatement */

/** 
 * $ANTLR start switchStatement
 * .//Emerson.g:295:1: switchStatement : 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) ;
 */
static EmersonParser_switchStatement_return
switchStatement(pEmersonParser ctx)
{   
    EmersonParser_switchStatement_return retval;
    ANTLR3_UINT32 switchStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal187;
    pANTLR3_COMMON_TOKEN    LTERM188;
    pANTLR3_COMMON_TOKEN    char_literal189;
    pANTLR3_COMMON_TOKEN    LTERM190;
    pANTLR3_COMMON_TOKEN    LTERM192;
    pANTLR3_COMMON_TOKEN    char_literal193;
    pANTLR3_COMMON_TOKEN    LTERM194;
    EmersonParser_expression_return expression191;
    #undef	RETURN_TYPE_expression191
    #define	RETURN_TYPE_expression191 EmersonParser_expression_return

    EmersonParser_caseBlock_return caseBlock195;
    #undef	RETURN_TYPE_caseBlock195
    #define	RETURN_TYPE_caseBlock195 EmersonParser_caseBlock_return

    pANTLR3_BASE_TREE string_literal187_tree;
    pANTLR3_BASE_TREE LTERM188_tree;
    pANTLR3_BASE_TREE char_literal189_tree;
    pANTLR3_BASE_TREE LTERM190_tree;
    pANTLR3_BASE_TREE LTERM192_tree;
    pANTLR3_BASE_TREE char_literal193_tree;
    pANTLR3_BASE_TREE LTERM194_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_156;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseBlock;
    /* Initialize rule variables
     */
    switchStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(33)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal187       = NULL;
    LTERM188       = NULL;
    char_literal189       = NULL;
    LTERM190       = NULL;
    LTERM192       = NULL;
    char_literal193       = NULL;
    LTERM194       = NULL;
    expression191.tree = NULL;

    caseBlock195.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal187_tree   = NULL;
    LTERM188_tree   = NULL;
    char_literal189_tree   = NULL;
    LTERM190_tree   = NULL;
    LTERM192_tree   = NULL;
    char_literal193_tree   = NULL;
    LTERM194_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_156   = NULL;
    #define CREATE_stream_156  if (stream_156 == NULL) {stream_156 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 156"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_caseBlock   = NULL;
    #define CREATE_stream_caseBlock  if (stream_caseBlock == NULL) {stream_caseBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:296:2: ( 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) )
        // .//Emerson.g:296:4: 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock
        {
            string_literal187 = (pANTLR3_COMMON_TOKEN) MATCHT(156, &FOLLOW_156_in_switchStatement2154); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_156; stream_156->add(stream_156, string_literal187, NULL); }


            // .//Emerson.g:296:13: ( LTERM )*

            for (;;)
            {
                int alt94=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA94_0 = LA(1);
                    if ( (LA94_0 == LTERM) ) 
                    {
                        alt94=1;
                    }

                }
                switch (alt94) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM188 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2156); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM188, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop94;	/* break out of the loop */
            	    break;
                }
            }
            loop94: ; /* Jump out to here if this rule does not match */

            char_literal189 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_switchStatement2159); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal189, NULL); }


            // .//Emerson.g:296:24: ( LTERM )*

            for (;;)
            {
                int alt95=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA95_0 = LA(1);
                    if ( (LA95_0 == LTERM) ) 
                    {
                        alt95=1;
                    }

                }
                switch (alt95) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM190 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2161); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM190, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop95;	/* break out of the loop */
            	    break;
                }
            }
            loop95: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_switchStatement2164);
            expression191=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression191.tree, NULL); }

            // .//Emerson.g:296:42: ( LTERM )*

            for (;;)
            {
                int alt96=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA96_0 = LA(1);
                    if ( (LA96_0 == LTERM) ) 
                    {
                        alt96=1;
                    }

                }
                switch (alt96) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM192 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2166); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM192, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop96;	/* break out of the loop */
            	    break;
                }
            }
            loop96: ; /* Jump out to here if this rule does not match */

            char_literal193 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_switchStatement2169); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal193, NULL); }


            // .//Emerson.g:296:53: ( LTERM )*

            for (;;)
            {
                int alt97=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA97_0 = LA(1);
                    if ( (LA97_0 == LTERM) ) 
                    {
                        alt97=1;
                    }

                }
                switch (alt97) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM194 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement2171); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM194, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop97;	/* break out of the loop */
            	    break;
                }
            }
            loop97: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_caseBlock_in_switchStatement2174);
            caseBlock195=caseBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_caseBlock; stream_caseBlock->add(stream_caseBlock, caseBlock195.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, caseBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 296:70: -> ^( SWITCH expression caseBlock )
            	{
            	    // .//Emerson.g:296:73: ^( SWITCH expression caseBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SWITCH, (pANTLR3_UINT8)"SWITCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_caseBlock == NULL ? NULL : stream_caseBlock->nextTree(stream_caseBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitchStatementEx; /* Prevent compiler warnings */
    ruleswitchStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_156 != NULL) stream_156->free(stream_156);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_caseBlock != NULL) stream_caseBlock->free(stream_caseBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(33, switchStatement_StartIndex); }
    return retval;
}
/* $ANTLR end switchStatement */

/** 
 * $ANTLR start caseBlock
 * .//Emerson.g:300:1: caseBlock : ( '{' ( LTERM )* (case1= caseClause )? ( LTERM )* '}' -> ^( CASE_BLOCK ( $case1)? ) | '{' ( LTERM )* def= defaultClause ( LTERM )* '}' -> ^( CASE_BLOCK $def) );
 */
static EmersonParser_caseBlock_return
caseBlock(pEmersonParser ctx)
{   
    EmersonParser_caseBlock_return retval;
    ANTLR3_UINT32 caseBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal196;
    pANTLR3_COMMON_TOKEN    LTERM197;
    pANTLR3_COMMON_TOKEN    LTERM198;
    pANTLR3_COMMON_TOKEN    char_literal199;
    pANTLR3_COMMON_TOKEN    char_literal200;
    pANTLR3_COMMON_TOKEN    LTERM201;
    pANTLR3_COMMON_TOKEN    LTERM202;
    pANTLR3_COMMON_TOKEN    char_literal203;
    EmersonParser_caseClause_return case1;
    #undef	RETURN_TYPE_case1
    #define	RETURN_TYPE_case1 EmersonParser_caseClause_return

    EmersonParser_defaultClause_return def;
    #undef	RETURN_TYPE_def
    #define	RETURN_TYPE_def EmersonParser_defaultClause_return

    pANTLR3_BASE_TREE char_literal196_tree;
    pANTLR3_BASE_TREE LTERM197_tree;
    pANTLR3_BASE_TREE LTERM198_tree;
    pANTLR3_BASE_TREE char_literal199_tree;
    pANTLR3_BASE_TREE char_literal200_tree;
    pANTLR3_BASE_TREE LTERM201_tree;
    pANTLR3_BASE_TREE LTERM202_tree;
    pANTLR3_BASE_TREE char_literal203_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_defaultClause;
    /* Initialize rule variables
     */
    caseBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(34)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal196       = NULL;
    LTERM197       = NULL;
    LTERM198       = NULL;
    char_literal199       = NULL;
    char_literal200       = NULL;
    LTERM201       = NULL;
    LTERM202       = NULL;
    char_literal203       = NULL;
    case1.tree = NULL;

    def.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal196_tree   = NULL;
    LTERM197_tree   = NULL;
    LTERM198_tree   = NULL;
    char_literal199_tree   = NULL;
    char_literal200_tree   = NULL;
    LTERM201_tree   = NULL;
    LTERM202_tree   = NULL;
    char_literal203_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_caseClause   = NULL;
    #define CREATE_stream_caseClause  if (stream_caseClause == NULL) {stream_caseClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClause"); }
    stream_defaultClause   = NULL;
    #define CREATE_stream_defaultClause  if (stream_defaultClause == NULL) {stream_defaultClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule defaultClause"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:301:9: ( '{' ( LTERM )* (case1= caseClause )? ( LTERM )* '}' -> ^( CASE_BLOCK ( $case1)? ) | '{' ( LTERM )* def= defaultClause ( LTERM )* '}' -> ^( CASE_BLOCK $def) )
            
            ANTLR3_UINT32 alt103;

            alt103=2;

            alt103 = cdfa103.predict(ctx, RECOGNIZER, ISTREAM, &cdfa103);
            if  (HASEXCEPTION())
            {
                goto rulecaseBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt103) 
            {
        	case 1:
        	    // .//Emerson.g:301:12: '{' ( LTERM )* (case1= caseClause )? ( LTERM )* '}'
        	    {
        	        char_literal196 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_caseBlock2205); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal196, NULL); }


        	        // .//Emerson.g:301:16: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt98=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA98_0 = LA(1);
        	                if ( (LA98_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA98_2 = LA(2);
        	                        if ( (synpred112_Emerson(ctx)) ) 
        	                        {
        	                            alt98=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt98) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM197 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2207); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM197, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop98;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop98: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:301:28: (case1= caseClause )?
        	        {
        	            int alt99=2;
        	            {
        	                int LA99_0 = LA(1);
        	                if ( (LA99_0 == 157) ) 
        	                {
        	                    alt99=1;
        	                }
        	            }
        	            switch (alt99) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: case1= caseClause
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock2212);
        	        	        case1=caseClause(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, case1.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:301:41: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt100=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA100_0 = LA(1);
        	                if ( (LA100_0 == LTERM) ) 
        	                {
        	                    alt100=1;
        	                }

        	            }
        	            switch (alt100) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM198 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2215); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM198, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop100;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop100: ; /* Jump out to here if this rule does not match */

        	        char_literal199 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_caseBlock2218); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal199, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : case1
        	         * token labels      : 
        	         * rule labels       : retval, case1
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case1;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_case1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token case1", case1.tree != NULL ? case1.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 301:52: -> ^( CASE_BLOCK ( $case1)? )
        	        	{
        	        	    // .//Emerson.g:301:55: ^( CASE_BLOCK ( $case1)? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE_BLOCK, (pANTLR3_UINT8)"CASE_BLOCK"), root_1));

        	        	        // .//Emerson.g:301:68: ( $case1)?
        	        	        {
        	        	        	if ( (stream_case1 != NULL && stream_case1->hasNext(stream_case1))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_case1 == NULL ? NULL : stream_case1->nextTree(stream_case1));

        	        	        	}
        	        	        	if ( stream_case1 != NULL) stream_case1->reset(stream_case1);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_case1 != NULL) stream_case1->free(stream_case1);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:302:12: '{' ( LTERM )* def= defaultClause ( LTERM )* '}'
        	    {
        	        char_literal200 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_caseBlock2241); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal200, NULL); }


        	        // .//Emerson.g:302:16: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt101=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA101_0 = LA(1);
        	                if ( (LA101_0 == LTERM) ) 
        	                {
        	                    alt101=1;
        	                }

        	            }
        	            switch (alt101) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM201 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2243); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM201, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop101;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop101: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseBlock2248);
        	        def=defaultClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_defaultClause; stream_defaultClause->add(stream_defaultClause, def.tree, NULL); }

        	        // .//Emerson.g:302:41: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt102=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA102_0 = LA(1);
        	                if ( (LA102_0 == LTERM) ) 
        	                {
        	                    alt102=1;
        	                }

        	            }
        	            switch (alt102) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM202 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock2250); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM202, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop102;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop102: ; /* Jump out to here if this rule does not match */

        	        char_literal203 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_caseBlock2253); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal203, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : def
        	         * token labels      : 
        	         * rule labels       : retval, def
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_def;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_def=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token def", def.tree != NULL ? def.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 302:52: -> ^( CASE_BLOCK $def)
        	        	{
        	        	    // .//Emerson.g:302:55: ^( CASE_BLOCK $def)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE_BLOCK, (pANTLR3_UINT8)"CASE_BLOCK"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_def == NULL ? NULL : stream_def->nextTree(stream_def));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_def != NULL) stream_def->free(stream_def);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseBlockEx; /* Prevent compiler warnings */
    rulecaseBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_caseClause != NULL) stream_caseClause->free(stream_caseClause);
        if (stream_defaultClause != NULL) stream_defaultClause->free(stream_defaultClause);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(34, caseBlock_StartIndex); }
    return retval;
}
/* $ANTLR end caseBlock */

/** 
 * $ANTLR start caseClause
 * .//Emerson.g:307:1: caseClause : ( 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* defaultClause -> ^( CASE $e1 ( statementList )? defaultClause ) | 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClause )? -> ^( CASE $e1 ( statementList )? ( caseClause )? ) );
 */
static EmersonParser_caseClause_return
caseClause(pEmersonParser ctx)
{   
    EmersonParser_caseClause_return retval;
    ANTLR3_UINT32 caseClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal204;
    pANTLR3_COMMON_TOKEN    LTERM205;
    pANTLR3_COMMON_TOKEN    LTERM206;
    pANTLR3_COMMON_TOKEN    char_literal207;
    pANTLR3_COMMON_TOKEN    LTERM208;
    pANTLR3_COMMON_TOKEN    LTERM210;
    pANTLR3_COMMON_TOKEN    string_literal212;
    pANTLR3_COMMON_TOKEN    LTERM213;
    pANTLR3_COMMON_TOKEN    LTERM214;
    pANTLR3_COMMON_TOKEN    char_literal215;
    pANTLR3_COMMON_TOKEN    LTERM216;
    pANTLR3_COMMON_TOKEN    LTERM218;
    EmersonParser_ternaryExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_ternaryExpression_return

    EmersonParser_statementList_return statementList209;
    #undef	RETURN_TYPE_statementList209
    #define	RETURN_TYPE_statementList209 EmersonParser_statementList_return

    EmersonParser_defaultClause_return defaultClause211;
    #undef	RETURN_TYPE_defaultClause211
    #define	RETURN_TYPE_defaultClause211 EmersonParser_defaultClause_return

    EmersonParser_statementList_return statementList217;
    #undef	RETURN_TYPE_statementList217
    #define	RETURN_TYPE_statementList217 EmersonParser_statementList_return

    EmersonParser_caseClause_return caseClause219;
    #undef	RETURN_TYPE_caseClause219
    #define	RETURN_TYPE_caseClause219 EmersonParser_caseClause_return

    pANTLR3_BASE_TREE string_literal204_tree;
    pANTLR3_BASE_TREE LTERM205_tree;
    pANTLR3_BASE_TREE LTERM206_tree;
    pANTLR3_BASE_TREE char_literal207_tree;
    pANTLR3_BASE_TREE LTERM208_tree;
    pANTLR3_BASE_TREE LTERM210_tree;
    pANTLR3_BASE_TREE string_literal212_tree;
    pANTLR3_BASE_TREE LTERM213_tree;
    pANTLR3_BASE_TREE LTERM214_tree;
    pANTLR3_BASE_TREE char_literal215_tree;
    pANTLR3_BASE_TREE LTERM216_tree;
    pANTLR3_BASE_TREE LTERM218_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ternaryExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_defaultClause;
    /* Initialize rule variables
     */
    caseClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(35)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal204       = NULL;
    LTERM205       = NULL;
    LTERM206       = NULL;
    char_literal207       = NULL;
    LTERM208       = NULL;
    LTERM210       = NULL;
    string_literal212       = NULL;
    LTERM213       = NULL;
    LTERM214       = NULL;
    char_literal215       = NULL;
    LTERM216       = NULL;
    LTERM218       = NULL;
    e1.tree = NULL;

    statementList209.tree = NULL;

    defaultClause211.tree = NULL;

    statementList217.tree = NULL;

    caseClause219.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal204_tree   = NULL;
    LTERM205_tree   = NULL;
    LTERM206_tree   = NULL;
    char_literal207_tree   = NULL;
    LTERM208_tree   = NULL;
    LTERM210_tree   = NULL;
    string_literal212_tree   = NULL;
    LTERM213_tree   = NULL;
    LTERM214_tree   = NULL;
    char_literal215_tree   = NULL;
    LTERM216_tree   = NULL;
    LTERM218_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }
    stream_caseClause   = NULL;
    #define CREATE_stream_caseClause  if (stream_caseClause == NULL) {stream_caseClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClause"); }
    stream_ternaryExpression   = NULL;
    #define CREATE_stream_ternaryExpression  if (stream_ternaryExpression == NULL) {stream_ternaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ternaryExpression"); }
    stream_defaultClause   = NULL;
    #define CREATE_stream_defaultClause  if (stream_defaultClause == NULL) {stream_defaultClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule defaultClause"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:308:2: ( 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* defaultClause -> ^( CASE $e1 ( statementList )? defaultClause ) | 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClause )? -> ^( CASE $e1 ( statementList )? ( caseClause )? ) )
            
            ANTLR3_UINT32 alt115;

            alt115=2;


            {
                int LA115_0 = LA(1);
                if ( (LA115_0 == 157) ) 
                {

                    {
                        int LA115_1 = LA(2);
                        if ( (synpred123_Emerson(ctx)) ) 
                        {
                            alt115=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt115=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 115;
                            EXCEPTION->state        = 1;


                            goto rulecaseClauseEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 115;
                    EXCEPTION->state        = 0;


                    goto rulecaseClauseEx;
                }
            }
            switch (alt115) 
            {
        	case 1:
        	    // .//Emerson.g:308:3: 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* defaultClause
        	    {
        	        string_literal204 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_caseClause2297); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, string_literal204, NULL); }


        	        // .//Emerson.g:308:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt104=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA104_0 = LA(1);
        	                if ( (LA104_0 == LTERM) ) 
        	                {
        	                    alt104=1;
        	                }

        	            }
        	            switch (alt104) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM205 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2299); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM205, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop104;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop104: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_caseClause2304);
        	        e1=ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpression; stream_ternaryExpression->add(stream_ternaryExpression, e1.tree, NULL); }

        	        // .//Emerson.g:308:38: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt105=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA105_0 = LA(1);
        	                if ( (LA105_0 == LTERM) ) 
        	                {
        	                    alt105=1;
        	                }

        	            }
        	            switch (alt105) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM206 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2306); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM206, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop105;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop105: ; /* Jump out to here if this rule does not match */

        	        char_literal207 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_caseClause2309); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal207, NULL); }


        	        // .//Emerson.g:308:49: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt106=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA106_0 = LA(1);
        	                if ( (LA106_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA106_1 = LA(2);
        	                        if ( (synpred120_Emerson(ctx)) ) 
        	                        {
        	                            alt106=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt106) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM208 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2311); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM208, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop106;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop106: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:308:56: ( statementList )?
        	        {
        	            int alt107=2;
        	            alt107 = cdfa107.predict(ctx, RECOGNIZER, ISTREAM, &cdfa107);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecaseClauseEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt107) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: statementList
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2314);
        	        	        statementList209=statementList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList209.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:308:71: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt108=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA108_0 = LA(1);
        	                if ( (LA108_0 == LTERM) ) 
        	                {
        	                    alt108=1;
        	                }

        	            }
        	            switch (alt108) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM210 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2317); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM210, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop108;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop108: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseClause2320);
        	        defaultClause211=defaultClause(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_defaultClause; stream_defaultClause->add(stream_defaultClause, defaultClause211.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : e1, defaultClause, statementList
        	         * token labels      : 
        	         * rule labels       : retval, e1
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 308:92: -> ^( CASE $e1 ( statementList )? defaultClause )
        	        	{
        	        	    // .//Emerson.g:308:95: ^( CASE $e1 ( statementList )? defaultClause )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        // .//Emerson.g:308:107: ( statementList )?
        	        	        {
        	        	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

        	        	        	}
        	        	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

        	        	        }
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_defaultClause == NULL ? NULL : stream_defaultClause->nextTree(stream_defaultClause));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:309:11: 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClause )?
        	    {
        	        string_literal212 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_caseClause2347); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, string_literal212, NULL); }


        	        // .//Emerson.g:309:18: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt109=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA109_0 = LA(1);
        	                if ( (LA109_0 == LTERM) ) 
        	                {
        	                    alt109=1;
        	                }

        	            }
        	            switch (alt109) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM213 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2349); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM213, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop109;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop109: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_caseClause2354);
        	        e1=ternaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpression; stream_ternaryExpression->add(stream_ternaryExpression, e1.tree, NULL); }

        	        // .//Emerson.g:309:46: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt110=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA110_0 = LA(1);
        	                if ( (LA110_0 == LTERM) ) 
        	                {
        	                    alt110=1;
        	                }

        	            }
        	            switch (alt110) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM214 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2356); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM214, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop110;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop110: ; /* Jump out to here if this rule does not match */

        	        char_literal215 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_caseClause2359); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecaseClauseEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal215, NULL); }


        	        // .//Emerson.g:309:57: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt111=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA111_0 = LA(1);
        	                if ( (LA111_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA111_1 = LA(2);
        	                        if ( (synpred126_Emerson(ctx)) ) 
        	                        {
        	                            alt111=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt111) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM216 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2361); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM216, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop111;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop111: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:309:64: ( statementList )?
        	        {
        	            int alt112=2;
        	            alt112 = cdfa112.predict(ctx, RECOGNIZER, ISTREAM, &cdfa112);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulecaseClauseEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt112) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: statementList
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause2364);
        	        	        statementList217=statementList(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList217.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:309:79: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt113=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA113_0 = LA(1);
        	                if ( (LA113_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA113_2 = LA(2);
        	                        if ( (synpred128_Emerson(ctx)) ) 
        	                        {
        	                            alt113=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt113) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM218 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause2367); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM218, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop113;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop113: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:309:86: ( caseClause )?
        	        {
        	            int alt114=2;
        	            {
        	                int LA114_0 = LA(1);
        	                if ( (LA114_0 == 157) ) 
        	                {
        	                    alt114=1;
        	                }
        	            }
        	            switch (alt114) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: caseClause
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseClause2370);
        	        	        caseClause219=caseClause(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecaseClauseEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, caseClause219.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : caseClause, statementList, e1
        	         * token labels      : 
        	         * rule labels       : retval, e1
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 309:98: -> ^( CASE $e1 ( statementList )? ( caseClause )? )
        	        	{
        	        	    // .//Emerson.g:309:101: ^( CASE $e1 ( statementList )? ( caseClause )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        // .//Emerson.g:309:113: ( statementList )?
        	        	        {
        	        	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

        	        	        	}
        	        	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

        	        	        }
        	        	        // .//Emerson.g:309:128: ( caseClause )?
        	        	        {
        	        	        	if ( (stream_caseClause != NULL && stream_caseClause->hasNext(stream_caseClause))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_caseClause == NULL ? NULL : stream_caseClause->nextTree(stream_caseClause));

        	        	        	}
        	        	        	if ( stream_caseClause != NULL) stream_caseClause->reset(stream_caseClause);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseEx; /* Prevent compiler warnings */
    rulecaseClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_157 != NULL) stream_157->free(stream_157);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
        if (stream_caseClause != NULL) stream_caseClause->free(stream_caseClause);
        if (stream_ternaryExpression != NULL) stream_ternaryExpression->free(stream_ternaryExpression);
        if (stream_defaultClause != NULL) stream_defaultClause->free(stream_defaultClause);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(35, caseClause_StartIndex); }
    return retval;
}
/* $ANTLR end caseClause */

/** 
 * $ANTLR start defaultClause
 * .//Emerson.g:312:1: defaultClause : 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )? -> ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? ) ;
 */
static EmersonParser_defaultClause_return
defaultClause(pEmersonParser ctx)
{   
    EmersonParser_defaultClause_return retval;
    ANTLR3_UINT32 defaultClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal220;
    pANTLR3_COMMON_TOKEN    LTERM221;
    pANTLR3_COMMON_TOKEN    char_literal222;
    pANTLR3_COMMON_TOKEN    LTERM223;
    pANTLR3_COMMON_TOKEN    LTERM225;
    EmersonParser_statementList_return statementList224;
    #undef	RETURN_TYPE_statementList224
    #define	RETURN_TYPE_statementList224 EmersonParser_statementList_return

    EmersonParser_caseClauseSeenDefault_return caseClauseSeenDefault226;
    #undef	RETURN_TYPE_caseClauseSeenDefault226
    #define	RETURN_TYPE_caseClauseSeenDefault226 EmersonParser_caseClauseSeenDefault_return

    pANTLR3_BASE_TREE string_literal220_tree;
    pANTLR3_BASE_TREE LTERM221_tree;
    pANTLR3_BASE_TREE char_literal222_tree;
    pANTLR3_BASE_TREE LTERM223_tree;
    pANTLR3_BASE_TREE LTERM225_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClauseSeenDefault;
    /* Initialize rule variables
     */
    defaultClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(36)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal220       = NULL;
    LTERM221       = NULL;
    char_literal222       = NULL;
    LTERM223       = NULL;
    LTERM225       = NULL;
    statementList224.tree = NULL;

    caseClauseSeenDefault226.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal220_tree   = NULL;
    LTERM221_tree   = NULL;
    char_literal222_tree   = NULL;
    LTERM223_tree   = NULL;
    LTERM225_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }
    stream_caseClauseSeenDefault   = NULL;
    #define CREATE_stream_caseClauseSeenDefault  if (stream_caseClauseSeenDefault == NULL) {stream_caseClauseSeenDefault = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClauseSeenDefault"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:313:2: ( 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )? -> ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? ) )
        // .//Emerson.g:313:4: 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )?
        {
            string_literal220 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_defaultClause2399); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, string_literal220, NULL); }


            // .//Emerson.g:313:14: ( LTERM )*

            for (;;)
            {
                int alt116=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA116_0 = LA(1);
                    if ( (LA116_0 == LTERM) ) 
                    {
                        alt116=1;
                    }

                }
                switch (alt116) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM221 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2401); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM221, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop116;	/* break out of the loop */
            	    break;
                }
            }
            loop116: ; /* Jump out to here if this rule does not match */

            char_literal222 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_defaultClause2404); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal222, NULL); }


            // .//Emerson.g:313:25: ( LTERM )*

            for (;;)
            {
                int alt117=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA117_0 = LA(1);
                    if ( (LA117_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA117_1 = LA(2);
                            if ( (synpred131_Emerson(ctx)) ) 
                            {
                                alt117=1;
                            }

                        }
                    }

                }
                switch (alt117) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM223 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2406); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM223, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop117;	/* break out of the loop */
            	    break;
                }
            }
            loop117: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:313:32: ( statementList )?
            {
                int alt118=2;
                alt118 = cdfa118.predict(ctx, RECOGNIZER, ISTREAM, &cdfa118);
                if  (HASEXCEPTION())
                {
                    goto ruledefaultClauseEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt118) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_defaultClause2409);
            	        statementList224=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList224.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:313:47: ( LTERM )*

            for (;;)
            {
                int alt119=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA119_0 = LA(1);
                    if ( (LA119_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA119_2 = LA(2);
                            if ( (synpred133_Emerson(ctx)) ) 
                            {
                                alt119=1;
                            }

                        }
                    }

                }
                switch (alt119) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM225 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause2412); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM225, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop119;	/* break out of the loop */
            	    break;
                }
            }
            loop119: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:313:54: ( caseClauseSeenDefault )?
            {
                int alt120=2;
                {
                    int LA120_0 = LA(1);
                    if ( (LA120_0 == 157) ) 
                    {
                        alt120=1;
                    }
                }
                switch (alt120) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: caseClauseSeenDefault
            	    {
            	        FOLLOWPUSH(FOLLOW_caseClauseSeenDefault_in_defaultClause2415);
            	        caseClauseSeenDefault226=caseClauseSeenDefault(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClauseSeenDefault; stream_caseClauseSeenDefault->add(stream_caseClauseSeenDefault, caseClauseSeenDefault226.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : statementList, caseClauseSeenDefault
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 313:77: -> ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? )
            	{
            	    // .//Emerson.g:313:80: ^( DEFAULT ( statementList )? ( caseClauseSeenDefault )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DEFAULT, (pANTLR3_UINT8)"DEFAULT"), root_1));

            	        // .//Emerson.g:313:90: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }
            	        // .//Emerson.g:313:105: ( caseClauseSeenDefault )?
            	        {
            	        	if ( (stream_caseClauseSeenDefault != NULL && stream_caseClauseSeenDefault->hasNext(stream_caseClauseSeenDefault))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_caseClauseSeenDefault == NULL ? NULL : stream_caseClauseSeenDefault->nextTree(stream_caseClauseSeenDefault));

            	        	}
            	        	if ( stream_caseClauseSeenDefault != NULL) stream_caseClauseSeenDefault->reset(stream_caseClauseSeenDefault);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledefaultClauseEx; /* Prevent compiler warnings */
    ruledefaultClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
        if (stream_caseClauseSeenDefault != NULL) stream_caseClauseSeenDefault->free(stream_caseClauseSeenDefault);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(36, defaultClause_StartIndex); }
    return retval;
}
/* $ANTLR end defaultClause */

/** 
 * $ANTLR start caseClauseSeenDefault
 * .//Emerson.g:317:1: caseClauseSeenDefault : 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )? -> ^( CASE $e1 ( statementList )? ( caseClauseSeenDefault )? ) ;
 */
static EmersonParser_caseClauseSeenDefault_return
caseClauseSeenDefault(pEmersonParser ctx)
{   
    EmersonParser_caseClauseSeenDefault_return retval;
    ANTLR3_UINT32 caseClauseSeenDefault_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal227;
    pANTLR3_COMMON_TOKEN    LTERM228;
    pANTLR3_COMMON_TOKEN    LTERM229;
    pANTLR3_COMMON_TOKEN    char_literal230;
    pANTLR3_COMMON_TOKEN    LTERM231;
    pANTLR3_COMMON_TOKEN    LTERM233;
    EmersonParser_ternaryExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_ternaryExpression_return

    EmersonParser_statementList_return statementList232;
    #undef	RETURN_TYPE_statementList232
    #define	RETURN_TYPE_statementList232 EmersonParser_statementList_return

    EmersonParser_caseClauseSeenDefault_return caseClauseSeenDefault234;
    #undef	RETURN_TYPE_caseClauseSeenDefault234
    #define	RETURN_TYPE_caseClauseSeenDefault234 EmersonParser_caseClauseSeenDefault_return

    pANTLR3_BASE_TREE string_literal227_tree;
    pANTLR3_BASE_TREE LTERM228_tree;
    pANTLR3_BASE_TREE LTERM229_tree;
    pANTLR3_BASE_TREE char_literal230_tree;
    pANTLR3_BASE_TREE LTERM231_tree;
    pANTLR3_BASE_TREE LTERM233_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClauseSeenDefault;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ternaryExpression;
    /* Initialize rule variables
     */
    caseClauseSeenDefault_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(37)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal227       = NULL;
    LTERM228       = NULL;
    LTERM229       = NULL;
    char_literal230       = NULL;
    LTERM231       = NULL;
    LTERM233       = NULL;
    e1.tree = NULL;

    statementList232.tree = NULL;

    caseClauseSeenDefault234.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal227_tree   = NULL;
    LTERM228_tree   = NULL;
    LTERM229_tree   = NULL;
    char_literal230_tree   = NULL;
    LTERM231_tree   = NULL;
    LTERM233_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }
    stream_caseClauseSeenDefault   = NULL;
    #define CREATE_stream_caseClauseSeenDefault  if (stream_caseClauseSeenDefault == NULL) {stream_caseClauseSeenDefault = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClauseSeenDefault"); }
    stream_ternaryExpression   = NULL;
    #define CREATE_stream_ternaryExpression  if (stream_ternaryExpression == NULL) {stream_ternaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ternaryExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:318:9: ( 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )? -> ^( CASE $e1 ( statementList )? ( caseClauseSeenDefault )? ) )
        // .//Emerson.g:318:11: 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* ( caseClauseSeenDefault )?
        {
            string_literal227 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_caseClauseSeenDefault2455); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, string_literal227, NULL); }


            // .//Emerson.g:318:18: ( LTERM )*

            for (;;)
            {
                int alt121=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA121_0 = LA(1);
                    if ( (LA121_0 == LTERM) ) 
                    {
                        alt121=1;
                    }

                }
                switch (alt121) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM228 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClauseSeenDefault2457); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM228, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop121;	/* break out of the loop */
            	    break;
                }
            }
            loop121: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_ternaryExpression_in_caseClauseSeenDefault2462);
            e1=ternaryExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpression; stream_ternaryExpression->add(stream_ternaryExpression, e1.tree, NULL); }

            // .//Emerson.g:318:46: ( LTERM )*

            for (;;)
            {
                int alt122=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA122_0 = LA(1);
                    if ( (LA122_0 == LTERM) ) 
                    {
                        alt122=1;
                    }

                }
                switch (alt122) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM229 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClauseSeenDefault2464); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM229, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop122;	/* break out of the loop */
            	    break;
                }
            }
            loop122: ; /* Jump out to here if this rule does not match */

            char_literal230 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_caseClauseSeenDefault2467); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseSeenDefaultEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal230, NULL); }


            // .//Emerson.g:318:57: ( LTERM )*

            for (;;)
            {
                int alt123=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA123_0 = LA(1);
                    if ( (LA123_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA123_1 = LA(2);
                            if ( (synpred137_Emerson(ctx)) ) 
                            {
                                alt123=1;
                            }

                        }
                    }

                }
                switch (alt123) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM231 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClauseSeenDefault2469); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM231, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop123;	/* break out of the loop */
            	    break;
                }
            }
            loop123: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:318:64: ( statementList )?
            {
                int alt124=2;
                alt124 = cdfa124.predict(ctx, RECOGNIZER, ISTREAM, &cdfa124);
                if  (HASEXCEPTION())
                {
                    goto rulecaseClauseSeenDefaultEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt124) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_caseClauseSeenDefault2472);
            	        statementList232=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList232.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:318:79: ( LTERM )*

            for (;;)
            {
                int alt125=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA125_0 = LA(1);
                    if ( (LA125_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA125_2 = LA(2);
                            if ( (synpred139_Emerson(ctx)) ) 
                            {
                                alt125=1;
                            }

                        }
                    }

                }
                switch (alt125) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM233 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClauseSeenDefault2475); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM233, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop125;	/* break out of the loop */
            	    break;
                }
            }
            loop125: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:318:86: ( caseClauseSeenDefault )?
            {
                int alt126=2;
                {
                    int LA126_0 = LA(1);
                    if ( (LA126_0 == 157) ) 
                    {
                        alt126=1;
                    }
                }
                switch (alt126) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: caseClauseSeenDefault
            	    {
            	        FOLLOWPUSH(FOLLOW_caseClauseSeenDefault_in_caseClauseSeenDefault2478);
            	        caseClauseSeenDefault234=caseClauseSeenDefault(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseSeenDefaultEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClauseSeenDefault; stream_caseClauseSeenDefault->add(stream_caseClauseSeenDefault, caseClauseSeenDefault234.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : caseClauseSeenDefault, e1, statementList
             * token labels      : 
             * rule labels       : retval, e1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 318:109: -> ^( CASE $e1 ( statementList )? ( caseClauseSeenDefault )? )
            	{
            	    // .//Emerson.g:318:112: ^( CASE $e1 ( statementList )? ( caseClauseSeenDefault )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
            	        // .//Emerson.g:318:124: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }
            	        // .//Emerson.g:318:139: ( caseClauseSeenDefault )?
            	        {
            	        	if ( (stream_caseClauseSeenDefault != NULL && stream_caseClauseSeenDefault->hasNext(stream_caseClauseSeenDefault))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_caseClauseSeenDefault == NULL ? NULL : stream_caseClauseSeenDefault->nextTree(stream_caseClauseSeenDefault));

            	        	}
            	        	if ( stream_caseClauseSeenDefault != NULL) stream_caseClauseSeenDefault->reset(stream_caseClauseSeenDefault);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_e1 != NULL) stream_e1->free(stream_e1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseSeenDefaultEx; /* Prevent compiler warnings */
    rulecaseClauseSeenDefaultEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_157 != NULL) stream_157->free(stream_157);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
        if (stream_caseClauseSeenDefault != NULL) stream_caseClauseSeenDefault->free(stream_caseClauseSeenDefault);
        if (stream_ternaryExpression != NULL) stream_ternaryExpression->free(stream_ternaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(37, caseClauseSeenDefault_StartIndex); }
    return retval;
}
/* $ANTLR end caseClauseSeenDefault */

/** 
 * $ANTLR start throwStatement
 * .//Emerson.g:324:1: throwStatement : 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) ;
 */
static EmersonParser_throwStatement_return
throwStatement(pEmersonParser ctx)
{   
    EmersonParser_throwStatement_return retval;
    ANTLR3_UINT32 throwStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal235;
    pANTLR3_COMMON_TOKEN    LTERM237;
    pANTLR3_COMMON_TOKEN    char_literal238;
    EmersonParser_expression_return expression236;
    #undef	RETURN_TYPE_expression236
    #define	RETURN_TYPE_expression236 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal235_tree;
    pANTLR3_BASE_TREE LTERM237_tree;
    pANTLR3_BASE_TREE char_literal238_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    throwStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(38)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal235       = NULL;
    LTERM237       = NULL;
    char_literal238       = NULL;
    expression236.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal235_tree   = NULL;
    LTERM237_tree   = NULL;
    char_literal238_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:325:2: ( 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) )
        // .//Emerson.g:325:4: 'throw' expression ( LTERM | ';' )
        {
            string_literal235 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_throwStatement2540); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, string_literal235, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_throwStatement2542);
            expression236=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression236.tree, NULL); }

            // .//Emerson.g:325:23: ( LTERM | ';' )
            {
                int alt127=2;

                {
                    int LA127_0 = LA(1);
                    if ( (LA127_0 == LTERM) ) 
                    {
                        alt127=1;
                    }
                    else if ( (LA127_0 == 143) ) 
                    {
                        alt127=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 127;
                        EXCEPTION->state        = 0;


                        goto rulethrowStatementEx;
                    }
                }
                switch (alt127) 
                {
            	case 1:
            	    // .//Emerson.g:325:24: LTERM
            	    {
            	        LTERM237 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_throwStatement2545); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM237, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:325:32: ';'
            	    {
            	        char_literal238 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_throwStatement2549); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, char_literal238, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 325:37: -> ^( THROW expression )
            	{
            	    // .//Emerson.g:325:40: ^( THROW expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, THROW, (pANTLR3_UINT8)"THROW"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulethrowStatementEx; /* Prevent compiler warnings */
    rulethrowStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(38, throwStatement_StartIndex); }
    return retval;
}
/* $ANTLR end throwStatement */

/** 
 * $ANTLR start tryStatement
 * .//Emerson.g:329:1: tryStatement : 'try' ( LTERM )* statementBlock ( LTERM )* catchFinallyBlock -> ^( TRY statementBlock catchFinallyBlock ) ;
 */
static EmersonParser_tryStatement_return
tryStatement(pEmersonParser ctx)
{   
    EmersonParser_tryStatement_return retval;
    ANTLR3_UINT32 tryStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal239;
    pANTLR3_COMMON_TOKEN    LTERM240;
    pANTLR3_COMMON_TOKEN    LTERM242;
    EmersonParser_statementBlock_return statementBlock241;
    #undef	RETURN_TYPE_statementBlock241
    #define	RETURN_TYPE_statementBlock241 EmersonParser_statementBlock_return

    EmersonParser_catchFinallyBlock_return catchFinallyBlock243;
    #undef	RETURN_TYPE_catchFinallyBlock243
    #define	RETURN_TYPE_catchFinallyBlock243 EmersonParser_catchFinallyBlock_return

    pANTLR3_BASE_TREE string_literal239_tree;
    pANTLR3_BASE_TREE LTERM240_tree;
    pANTLR3_BASE_TREE LTERM242_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_161;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_catchFinallyBlock;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    tryStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(39)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal239       = NULL;
    LTERM240       = NULL;
    LTERM242       = NULL;
    statementBlock241.tree = NULL;

    catchFinallyBlock243.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal239_tree   = NULL;
    LTERM240_tree   = NULL;
    LTERM242_tree   = NULL;

    stream_161   = NULL;
    #define CREATE_stream_161  if (stream_161 == NULL) {stream_161 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 161"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_catchFinallyBlock   = NULL;
    #define CREATE_stream_catchFinallyBlock  if (stream_catchFinallyBlock == NULL) {stream_catchFinallyBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule catchFinallyBlock"); }
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:330:9: ( 'try' ( LTERM )* statementBlock ( LTERM )* catchFinallyBlock -> ^( TRY statementBlock catchFinallyBlock ) )
        // .//Emerson.g:330:11: 'try' ( LTERM )* statementBlock ( LTERM )* catchFinallyBlock
        {
            string_literal239 = (pANTLR3_COMMON_TOKEN) MATCHT(161, &FOLLOW_161_in_tryStatement2577); 
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_161; stream_161->add(stream_161, string_literal239, NULL); }


            // .//Emerson.g:330:17: ( LTERM )*

            for (;;)
            {
                int alt128=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA128_0 = LA(1);
                    if ( (LA128_0 == LTERM) ) 
                    {
                        alt128=1;
                    }

                }
                switch (alt128) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM240 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2579); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM240, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop128;	/* break out of the loop */
            	    break;
                }
            }
            loop128: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_tryStatement2582);
            statementBlock241=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock241.tree, NULL); }

            // .//Emerson.g:330:39: ( LTERM )*

            for (;;)
            {
                int alt129=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA129_0 = LA(1);
                    if ( (LA129_0 == LTERM) ) 
                    {
                        alt129=1;
                    }

                }
                switch (alt129) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM242 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2584); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM242, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop129;	/* break out of the loop */
            	    break;
                }
            }
            loop129: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_catchFinallyBlock_in_tryStatement2587);
            catchFinallyBlock243=catchFinallyBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletryStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_catchFinallyBlock; stream_catchFinallyBlock->add(stream_catchFinallyBlock, catchFinallyBlock243.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock, catchFinallyBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 330:64: -> ^( TRY statementBlock catchFinallyBlock )
            	{
            	    // .//Emerson.g:330:67: ^( TRY statementBlock catchFinallyBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRY, (pANTLR3_UINT8)"TRY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_catchFinallyBlock == NULL ? NULL : stream_catchFinallyBlock->nextTree(stream_catchFinallyBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletryStatementEx; /* Prevent compiler warnings */
    ruletryStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_161 != NULL) stream_161->free(stream_161);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_catchFinallyBlock != NULL) stream_catchFinallyBlock->free(stream_catchFinallyBlock);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(39, tryStatement_StartIndex); }
    return retval;
}
/* $ANTLR end tryStatement */

/** 
 * $ANTLR start catchFinallyBlock
 * .//Emerson.g:333:1: catchFinallyBlock : ( catchBlock ( LTERM )* ( finallyBlock )? -> catchBlock ( finallyBlock )? | finallyBlock -> finallyBlock );
 */
static EmersonParser_catchFinallyBlock_return
catchFinallyBlock(pEmersonParser ctx)
{   
    EmersonParser_catchFinallyBlock_return retval;
    ANTLR3_UINT32 catchFinallyBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM245;
    EmersonParser_catchBlock_return catchBlock244;
    #undef	RETURN_TYPE_catchBlock244
    #define	RETURN_TYPE_catchBlock244 EmersonParser_catchBlock_return

    EmersonParser_finallyBlock_return finallyBlock246;
    #undef	RETURN_TYPE_finallyBlock246
    #define	RETURN_TYPE_finallyBlock246 EmersonParser_finallyBlock_return

    EmersonParser_finallyBlock_return finallyBlock247;
    #undef	RETURN_TYPE_finallyBlock247
    #define	RETURN_TYPE_finallyBlock247 EmersonParser_finallyBlock_return

    pANTLR3_BASE_TREE LTERM245_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_catchBlock;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_finallyBlock;
    /* Initialize rule variables
     */
    catchFinallyBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(40)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM245       = NULL;
    catchBlock244.tree = NULL;

    finallyBlock246.tree = NULL;

    finallyBlock247.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM245_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_catchBlock   = NULL;
    #define CREATE_stream_catchBlock  if (stream_catchBlock == NULL) {stream_catchBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule catchBlock"); }
    stream_finallyBlock   = NULL;
    #define CREATE_stream_finallyBlock  if (stream_finallyBlock == NULL) {stream_finallyBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule finallyBlock"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:334:9: ( catchBlock ( LTERM )* ( finallyBlock )? -> catchBlock ( finallyBlock )? | finallyBlock -> finallyBlock )
            
            ANTLR3_UINT32 alt132;

            alt132=2;


            {
                int LA132_0 = LA(1);
                if ( (LA132_0 == 162) ) 
                {
                    alt132=1;
                }
                else if ( (LA132_0 == 163) ) 
                {
                    alt132=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 132;
                    EXCEPTION->state        = 0;


                    goto rulecatchFinallyBlockEx;
                }
            }
            switch (alt132) 
            {
        	case 1:
        	    // .//Emerson.g:334:11: catchBlock ( LTERM )* ( finallyBlock )?
        	    {
        	        FOLLOWPUSH(FOLLOW_catchBlock_in_catchFinallyBlock2622);
        	        catchBlock244=catchBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_catchBlock; stream_catchBlock->add(stream_catchBlock, catchBlock244.tree, NULL); }

        	        // .//Emerson.g:334:22: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt130=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA130_0 = LA(1);
        	                if ( (LA130_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA130_2 = LA(2);
        	                        if ( (synpred144_Emerson(ctx)) ) 
        	                        {
        	                            alt130=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt130) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM245 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchFinallyBlock2624); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecatchFinallyBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM245, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop130;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop130: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:334:29: ( finallyBlock )?
        	        {
        	            int alt131=2;
        	            {
        	                int LA131_0 = LA(1);
        	                if ( (LA131_0 == 163) ) 
        	                {
        	                    alt131=1;
        	                }
        	            }
        	            switch (alt131) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: finallyBlock
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock2627);
        	        	        finallyBlock246=finallyBlock(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecatchFinallyBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyBlock; stream_finallyBlock->add(stream_finallyBlock, finallyBlock246.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : finallyBlock, catchBlock
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 334:44: -> catchBlock ( finallyBlock )?
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_catchBlock == NULL ? NULL : stream_catchBlock->nextTree(stream_catchBlock));
        	        	    // .//Emerson.g:334:58: ( finallyBlock )?
        	        	    {
        	        	    	if ( (stream_finallyBlock != NULL && stream_finallyBlock->hasNext(stream_finallyBlock))  )
        	        	    	{
        	        	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_finallyBlock == NULL ? NULL : stream_finallyBlock->nextTree(stream_finallyBlock));

        	        	    	}
        	        	    	if ( stream_finallyBlock != NULL) stream_finallyBlock->reset(stream_finallyBlock);

        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:335:11: finallyBlock
        	    {
        	        FOLLOWPUSH(FOLLOW_finallyBlock_in_catchFinallyBlock2648);
        	        finallyBlock247=finallyBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecatchFinallyBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyBlock; stream_finallyBlock->add(stream_finallyBlock, finallyBlock247.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : finallyBlock
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 335:44: -> finallyBlock
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_finallyBlock == NULL ? NULL : stream_finallyBlock->nextTree(stream_finallyBlock));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchFinallyBlockEx; /* Prevent compiler warnings */
    rulecatchFinallyBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_catchBlock != NULL) stream_catchBlock->free(stream_catchBlock);
        if (stream_finallyBlock != NULL) stream_finallyBlock->free(stream_finallyBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(40, catchFinallyBlock_StartIndex); }
    return retval;
}
/* $ANTLR end catchFinallyBlock */

/** 
 * $ANTLR start catchBlock
 * .//Emerson.g:338:1: catchBlock : 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) ;
 */
static EmersonParser_catchBlock_return
catchBlock(pEmersonParser ctx)
{   
    EmersonParser_catchBlock_return retval;
    ANTLR3_UINT32 catchBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal248;
    pANTLR3_COMMON_TOKEN    LTERM249;
    pANTLR3_COMMON_TOKEN    char_literal250;
    pANTLR3_COMMON_TOKEN    LTERM251;
    pANTLR3_COMMON_TOKEN    Identifier252;
    pANTLR3_COMMON_TOKEN    LTERM253;
    pANTLR3_COMMON_TOKEN    char_literal254;
    pANTLR3_COMMON_TOKEN    LTERM255;
    EmersonParser_statementBlock_return statementBlock256;
    #undef	RETURN_TYPE_statementBlock256
    #define	RETURN_TYPE_statementBlock256 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal248_tree;
    pANTLR3_BASE_TREE LTERM249_tree;
    pANTLR3_BASE_TREE char_literal250_tree;
    pANTLR3_BASE_TREE LTERM251_tree;
    pANTLR3_BASE_TREE Identifier252_tree;
    pANTLR3_BASE_TREE LTERM253_tree;
    pANTLR3_BASE_TREE char_literal254_tree;
    pANTLR3_BASE_TREE LTERM255_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_162;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    catchBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(41)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal248       = NULL;
    LTERM249       = NULL;
    char_literal250       = NULL;
    LTERM251       = NULL;
    Identifier252       = NULL;
    LTERM253       = NULL;
    char_literal254       = NULL;
    LTERM255       = NULL;
    statementBlock256.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal248_tree   = NULL;
    LTERM249_tree   = NULL;
    char_literal250_tree   = NULL;
    LTERM251_tree   = NULL;
    Identifier252_tree   = NULL;
    LTERM253_tree   = NULL;
    char_literal254_tree   = NULL;
    LTERM255_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_162   = NULL;
    #define CREATE_stream_162  if (stream_162 == NULL) {stream_162 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 162"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:339:9: ( 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) )
        // .//Emerson.g:339:11: 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock
        {
            string_literal248 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_catchBlock2697); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, string_literal248, NULL); }


            // .//Emerson.g:339:19: ( LTERM )*

            for (;;)
            {
                int alt133=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA133_0 = LA(1);
                    if ( (LA133_0 == LTERM) ) 
                    {
                        alt133=1;
                    }

                }
                switch (alt133) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM249 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2699); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM249, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop133;	/* break out of the loop */
            	    break;
                }
            }
            loop133: ; /* Jump out to here if this rule does not match */

            char_literal250 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_catchBlock2702); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal250, NULL); }


            // .//Emerson.g:339:30: ( LTERM )*

            for (;;)
            {
                int alt134=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA134_0 = LA(1);
                    if ( (LA134_0 == LTERM) ) 
                    {
                        alt134=1;
                    }

                }
                switch (alt134) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM251 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2704); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM251, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop134;	/* break out of the loop */
            	    break;
                }
            }
            loop134: ; /* Jump out to here if this rule does not match */

            Identifier252 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_catchBlock2707); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier252, NULL); }


            // .//Emerson.g:339:48: ( LTERM )*

            for (;;)
            {
                int alt135=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA135_0 = LA(1);
                    if ( (LA135_0 == LTERM) ) 
                    {
                        alt135=1;
                    }

                }
                switch (alt135) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM253 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2709); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM253, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop135;	/* break out of the loop */
            	    break;
                }
            }
            loop135: ; /* Jump out to here if this rule does not match */

            char_literal254 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_catchBlock2712); 
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal254, NULL); }


            // .//Emerson.g:339:59: ( LTERM )*

            for (;;)
            {
                int alt136=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA136_0 = LA(1);
                    if ( (LA136_0 == LTERM) ) 
                    {
                        alt136=1;
                    }

                }
                switch (alt136) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM255 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchBlock2714); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM255, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop136;	/* break out of the loop */
            	    break;
                }
            }
            loop136: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_catchBlock2717);
            statementBlock256=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock256.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 339:81: -> ^( CATCH Identifier statementBlock )
            	{
            	    // .//Emerson.g:339:84: ^( CATCH Identifier statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CATCH, (pANTLR3_UINT8)"CATCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchBlockEx; /* Prevent compiler warnings */
    rulecatchBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_162 != NULL) stream_162->free(stream_162);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(41, catchBlock_StartIndex); }
    return retval;
}
/* $ANTLR end catchBlock */

/** 
 * $ANTLR start finallyBlock
 * .//Emerson.g:342:1: finallyBlock : 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) ;
 */
static EmersonParser_finallyBlock_return
finallyBlock(pEmersonParser ctx)
{   
    EmersonParser_finallyBlock_return retval;
    ANTLR3_UINT32 finallyBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal257;
    pANTLR3_COMMON_TOKEN    LTERM258;
    EmersonParser_statementBlock_return statementBlock259;
    #undef	RETURN_TYPE_statementBlock259
    #define	RETURN_TYPE_statementBlock259 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal257_tree;
    pANTLR3_BASE_TREE LTERM258_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_163;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    finallyBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(42)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal257       = NULL;
    LTERM258       = NULL;
    statementBlock259.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal257_tree   = NULL;
    LTERM258_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_163   = NULL;
    #define CREATE_stream_163  if (stream_163 == NULL) {stream_163 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 163"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:343:9: ( 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) )
        // .//Emerson.g:343:11: 'finally' ( LTERM )* statementBlock
        {
            string_literal257 = (pANTLR3_COMMON_TOKEN) MATCHT(163, &FOLLOW_163_in_finallyBlock2753); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_163; stream_163->add(stream_163, string_literal257, NULL); }


            // .//Emerson.g:343:21: ( LTERM )*

            for (;;)
            {
                int alt137=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA137_0 = LA(1);
                    if ( (LA137_0 == LTERM) ) 
                    {
                        alt137=1;
                    }

                }
                switch (alt137) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM258 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_finallyBlock2755); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefinallyBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM258, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop137;	/* break out of the loop */
            	    break;
                }
            }
            loop137: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyBlock2759);
            statementBlock259=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock259.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 343:45: -> ^( FINALLY statementBlock )
            	{
            	    // .//Emerson.g:343:48: ^( FINALLY statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FINALLY, (pANTLR3_UINT8)"FINALLY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyBlockEx; /* Prevent compiler warnings */
    rulefinallyBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_163 != NULL) stream_163->free(stream_163);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(42, finallyBlock_StartIndex); }
    return retval;
}
/* $ANTLR end finallyBlock */

/** 
 * $ANTLR start memAndCallExpression
 * .//Emerson.g:348:1: memAndCallExpression : ( callExpression -> callExpression | memberExpression -> memberExpression );
 */
static EmersonParser_memAndCallExpression_return
memAndCallExpression(pEmersonParser ctx)
{   
    EmersonParser_memAndCallExpression_return retval;
    ANTLR3_UINT32 memAndCallExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_callExpression_return callExpression260;
    #undef	RETURN_TYPE_callExpression260
    #define	RETURN_TYPE_callExpression260 EmersonParser_callExpression_return

    EmersonParser_memberExpression_return memberExpression261;
    #undef	RETURN_TYPE_memberExpression261
    #define	RETURN_TYPE_memberExpression261 EmersonParser_memberExpression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_callExpression;
    /* Initialize rule variables
     */
    memAndCallExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(43)) )
    {
    	retval.start = 0;

        return retval; 
    }
    callExpression260.tree = NULL;

    memberExpression261.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_callExpression   = NULL;
    #define CREATE_stream_callExpression  if (stream_callExpression == NULL) {stream_callExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule callExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:349:9: ( callExpression -> callExpression | memberExpression -> memberExpression )
            
            ANTLR3_UINT32 alt138;

            alt138=2;

            alt138 = cdfa138.predict(ctx, RECOGNIZER, ISTREAM, &cdfa138);
            if  (HASEXCEPTION())
            {
                goto rulememAndCallExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt138) 
            {
        	case 1:
        	    // .//Emerson.g:349:11: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_memAndCallExpression2803);
        	        callExpression260=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_callExpression; stream_callExpression->add(stream_callExpression, callExpression260.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : callExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 349:26: -> callExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_callExpression == NULL ? NULL : stream_callExpression->nextTree(stream_callExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:350:11: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_memAndCallExpression2819);
        	        memberExpression261=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememAndCallExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression261.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : memberExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 350:28: -> memberExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememAndCallExpressionEx; /* Prevent compiler warnings */
    rulememAndCallExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_callExpression != NULL) stream_callExpression->free(stream_callExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(43, memAndCallExpression_StartIndex); }
    return retval;
}
/* $ANTLR end memAndCallExpression */

/** 
 * $ANTLR start expression
 * .//Emerson.g:356:1: expression : assignmentExpression -> ^( EXPR assignmentExpression ) ;
 */
static EmersonParser_expression_return
expression(pEmersonParser ctx)
{   
    EmersonParser_expression_return retval;
    ANTLR3_UINT32 expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_assignmentExpression_return assignmentExpression262;
    #undef	RETURN_TYPE_assignmentExpression262
    #define	RETURN_TYPE_assignmentExpression262 EmersonParser_assignmentExpression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(44)) )
    {
    	retval.start = 0;

        return retval; 
    }
    assignmentExpression262.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:357:9: ( assignmentExpression -> ^( EXPR assignmentExpression ) )
        // .//Emerson.g:357:11: assignmentExpression
        {
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression2859);
            assignmentExpression262=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression262.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 357:33: -> ^( EXPR assignmentExpression )
            	{
            	    // .//Emerson.g:357:36: ^( EXPR assignmentExpression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR, (pANTLR3_UINT8)"EXPR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(44, expression_StartIndex); }
    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start expressionNoIn
 * .//Emerson.g:360:1: expressionNoIn : assignmentExpressionNoIn -> ^( EXPR_NO_IN assignmentExpressionNoIn ) ;
 */
static EmersonParser_expressionNoIn_return
expressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_expressionNoIn_return retval;
    ANTLR3_UINT32 expressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn263;
    #undef	RETURN_TYPE_assignmentExpressionNoIn263
    #define	RETURN_TYPE_assignmentExpressionNoIn263 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    /* Initialize rule variables
     */
    expressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(45)) )
    {
    	retval.start = 0;

        return retval; 
    }
    assignmentExpressionNoIn263.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:361:9: ( assignmentExpressionNoIn -> ^( EXPR_NO_IN assignmentExpressionNoIn ) )
        // .//Emerson.g:361:11: assignmentExpressionNoIn
        {
            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2893);
            assignmentExpressionNoIn263=assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn263.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 361:36: -> ^( EXPR_NO_IN assignmentExpressionNoIn )
            	{
            	    // .//Emerson.g:361:39: ^( EXPR_NO_IN assignmentExpressionNoIn )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR_NO_IN, (pANTLR3_UINT8)"EXPR_NO_IN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionNoInEx; /* Prevent compiler warnings */
    ruleexpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(45, expressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end expressionNoIn */

/** 
 * $ANTLR start assignmentExpression
 * .//Emerson.g:365:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static EmersonParser_assignmentExpression_return
assignmentExpression(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpression_return retval;
    ANTLR3_UINT32 assignmentExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM266;
    pANTLR3_COMMON_TOKEN    LTERM268;
    EmersonParser_conditionalExpression_return conditionalExpression264;
    #undef	RETURN_TYPE_conditionalExpression264
    #define	RETURN_TYPE_conditionalExpression264 EmersonParser_conditionalExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression265;
    #undef	RETURN_TYPE_leftHandSideExpression265
    #define	RETURN_TYPE_leftHandSideExpression265 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator267;
    #undef	RETURN_TYPE_assignmentOperator267
    #define	RETURN_TYPE_assignmentOperator267 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpression_return assignmentExpression269;
    #undef	RETURN_TYPE_assignmentExpression269
    #define	RETURN_TYPE_assignmentExpression269 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM266_tree;
    pANTLR3_BASE_TREE LTERM268_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    assignmentExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(46)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM266       = NULL;
    LTERM268       = NULL;
    conditionalExpression264.tree = NULL;

    leftHandSideExpression265.tree = NULL;

    assignmentOperator267.tree = NULL;

    assignmentExpression269.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM266_tree   = NULL;
    LTERM268_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:366:9: ( conditionalExpression | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt141;

            alt141=2;

            alt141 = cdfa141.predict(ctx, RECOGNIZER, ISTREAM, &cdfa141);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt141) 
            {
        	case 1:
        	    // .//Emerson.g:366:11: conditionalExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpression2927);
        	        conditionalExpression264=conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, conditionalExpression264.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:367:11: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression2939);
        	        leftHandSideExpression265=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression265.tree, NULL); }

        	        // .//Emerson.g:367:34: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt139=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA139_0 = LA(1);
        	                if ( (LA139_0 == LTERM) ) 
        	                {
        	                    alt139=1;
        	                }

        	            }
        	            switch (alt139) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM266 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2941); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM266, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop139;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop139: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpression2944);
        	        assignmentOperator267=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator267.tree, NULL); }

        	        // .//Emerson.g:367:60: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt140=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA140_0 = LA(1);
        	                if ( (LA140_0 == LTERM) ) 
        	                {
        	                    alt140=1;
        	                }

        	            }
        	            switch (alt140) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM268 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2946); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM268, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop140;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop140: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpression2949);
        	        assignmentExpression269=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression269.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression, leftHandSideExpression, assignmentOperator
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 367:88: -> ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	{
        	        	    // .//Emerson.g:367:92: ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionEx; /* Prevent compiler warnings */
    ruleassignmentExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(46, assignmentExpression_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpression */

/** 
 * $ANTLR start assignmentExpressionNoIn
 * .//Emerson.g:370:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static EmersonParser_assignmentExpressionNoIn_return
assignmentExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpressionNoIn_return retval;
    ANTLR3_UINT32 assignmentExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM272;
    pANTLR3_COMMON_TOKEN    LTERM274;
    EmersonParser_conditionalExpressionNoIn_return conditionalExpressionNoIn270;
    #undef	RETURN_TYPE_conditionalExpressionNoIn270
    #define	RETURN_TYPE_conditionalExpressionNoIn270 EmersonParser_conditionalExpressionNoIn_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression271;
    #undef	RETURN_TYPE_leftHandSideExpression271
    #define	RETURN_TYPE_leftHandSideExpression271 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator273;
    #undef	RETURN_TYPE_assignmentOperator273
    #define	RETURN_TYPE_assignmentOperator273 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn275;
    #undef	RETURN_TYPE_assignmentExpressionNoIn275
    #define	RETURN_TYPE_assignmentExpressionNoIn275 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM272_tree;
    pANTLR3_BASE_TREE LTERM274_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    assignmentExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(47)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM272       = NULL;
    LTERM274       = NULL;
    conditionalExpressionNoIn270.tree = NULL;

    leftHandSideExpression271.tree = NULL;

    assignmentOperator273.tree = NULL;

    assignmentExpressionNoIn275.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM272_tree   = NULL;
    LTERM274_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:371:9: ( conditionalExpressionNoIn | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) )
            
            ANTLR3_UINT32 alt144;

            alt144=2;

            alt144 = cdfa144.predict(ctx, RECOGNIZER, ISTREAM, &cdfa144);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt144) 
            {
        	case 1:
        	    // .//Emerson.g:371:11: conditionalExpressionNoIn
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2994);
        	        conditionalExpressionNoIn270=conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, conditionalExpressionNoIn270.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:372:11: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn3006);
        	        leftHandSideExpression271=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression271.tree, NULL); }

        	        // .//Emerson.g:372:34: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt142=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA142_0 = LA(1);
        	                if ( (LA142_0 == LTERM) ) 
        	                {
        	                    alt142=1;
        	                }

        	            }
        	            switch (alt142) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM272 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn3008); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM272, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop142;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop142: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpressionNoIn3011);
        	        assignmentOperator273=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator273.tree, NULL); }

        	        // .//Emerson.g:372:60: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt143=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA143_0 = LA(1);
        	                if ( (LA143_0 == LTERM) ) 
        	                {
        	                    alt143=1;
        	                }

        	            }
        	            switch (alt143) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM274 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn3013); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM274, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop143;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop143: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn3016);
        	        assignmentExpressionNoIn275=assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn275.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression, assignmentExpressionNoIn, assignmentOperator
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 372:92: -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	{
        	        	    // .//Emerson.g:372:96: ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionNoInEx; /* Prevent compiler warnings */
    ruleassignmentExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(47, assignmentExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpressionNoIn */

/** 
 * $ANTLR start leftHandSideExpression
 * .//Emerson.g:377:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static EmersonParser_leftHandSideExpression_return
leftHandSideExpression(pEmersonParser ctx)
{   
    EmersonParser_leftHandSideExpression_return retval;
    ANTLR3_UINT32 leftHandSideExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_callExpression_return callExpression276;
    #undef	RETURN_TYPE_callExpression276
    #define	RETURN_TYPE_callExpression276 EmersonParser_callExpression_return

    EmersonParser_newExpression_return newExpression277;
    #undef	RETURN_TYPE_newExpression277
    #define	RETURN_TYPE_newExpression277 EmersonParser_newExpression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_callExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    leftHandSideExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(48)) )
    {
    	retval.start = 0;

        return retval; 
    }
    callExpression276.tree = NULL;

    newExpression277.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_callExpression   = NULL;
    #define CREATE_stream_callExpression  if (stream_callExpression == NULL) {stream_callExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule callExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:378:2: ( callExpression -> callExpression | newExpression -> newExpression )
            
            ANTLR3_UINT32 alt145;

            alt145=2;

            alt145 = cdfa145.predict(ctx, RECOGNIZER, ISTREAM, &cdfa145);
            if  (HASEXCEPTION())
            {
                goto ruleleftHandSideExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt145) 
            {
        	case 1:
        	    // .//Emerson.g:378:4: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_leftHandSideExpression3064);
        	        callExpression276=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_callExpression; stream_callExpression->add(stream_callExpression, callExpression276.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : callExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 378:19: -> callExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_callExpression == NULL ? NULL : stream_callExpression->nextTree(stream_callExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:379:4: newExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_newExpression_in_leftHandSideExpression3073);
        	        newExpression277=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression277.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 379:18: -> newExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleleftHandSideExpressionEx; /* Prevent compiler warnings */
    ruleleftHandSideExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_callExpression != NULL) stream_callExpression->free(stream_callExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(48, leftHandSideExpression_StartIndex); }
    return retval;
}
/* $ANTLR end leftHandSideExpression */

/** 
 * $ANTLR start newExpression
 * .//Emerson.g:382:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static EmersonParser_newExpression_return
newExpression(pEmersonParser ctx)
{   
    EmersonParser_newExpression_return retval;
    ANTLR3_UINT32 newExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal279;
    pANTLR3_COMMON_TOKEN    LTERM280;
    EmersonParser_memberExpression_return memberExpression278;
    #undef	RETURN_TYPE_memberExpression278
    #define	RETURN_TYPE_memberExpression278 EmersonParser_memberExpression_return

    EmersonParser_newExpression_return newExpression281;
    #undef	RETURN_TYPE_newExpression281
    #define	RETURN_TYPE_newExpression281 EmersonParser_newExpression_return

    pANTLR3_BASE_TREE string_literal279_tree;
    pANTLR3_BASE_TREE LTERM280_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_164;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    newExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(49)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal279       = NULL;
    LTERM280       = NULL;
    memberExpression278.tree = NULL;

    newExpression281.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal279_tree   = NULL;
    LTERM280_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_164   = NULL;
    #define CREATE_stream_164  if (stream_164 == NULL) {stream_164 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 164"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:383:2: ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) )
            
            ANTLR3_UINT32 alt147;

            alt147=2;

            alt147 = cdfa147.predict(ctx, RECOGNIZER, ISTREAM, &cdfa147);
            if  (HASEXCEPTION())
            {
                goto rulenewExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt147) 
            {
        	case 1:
        	    // .//Emerson.g:383:4: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_newExpression3089);
        	        memberExpression278=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression278.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : memberExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 383:21: -> memberExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:384:4: 'new' ( LTERM )* newExpression
        	    {
        	        string_literal279 = (pANTLR3_COMMON_TOKEN) MATCHT(164, &FOLLOW_164_in_newExpression3098); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_164; stream_164->add(stream_164, string_literal279, NULL); }


        	        // .//Emerson.g:384:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt146=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA146_0 = LA(1);
        	                if ( (LA146_0 == LTERM) ) 
        	                {
        	                    alt146=1;
        	                }

        	            }
        	            switch (alt146) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM280 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_newExpression3100); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenewExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM280, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop146;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop146: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_newExpression_in_newExpression3103);
        	        newExpression281=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression281.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 384:31: -> ^( NEW newExpression )
        	        	{
        	        	    // .//Emerson.g:384:34: ^( NEW newExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenewExpressionEx; /* Prevent compiler warnings */
    rulenewExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_164 != NULL) stream_164->free(stream_164);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(49, newExpression_StartIndex); }
    return retval;
}
/* $ANTLR end newExpression */

/** 
 * $ANTLR start indexSuffix1
 * .//Emerson.g:388:1: indexSuffix1 : '[' ( LTERM )* expression ( LTERM )* ']' -> expression ;
 */
static EmersonParser_indexSuffix1_return
indexSuffix1(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix1_return retval;
    ANTLR3_UINT32 indexSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal282;
    pANTLR3_COMMON_TOKEN    LTERM283;
    pANTLR3_COMMON_TOKEN    LTERM285;
    pANTLR3_COMMON_TOKEN    char_literal286;
    EmersonParser_expression_return expression284;
    #undef	RETURN_TYPE_expression284
    #define	RETURN_TYPE_expression284 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal282_tree;
    pANTLR3_BASE_TREE LTERM283_tree;
    pANTLR3_BASE_TREE LTERM285_tree;
    pANTLR3_BASE_TREE char_literal286_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_166;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_165;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(50)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal282       = NULL;
    LTERM283       = NULL;
    LTERM285       = NULL;
    char_literal286       = NULL;
    expression284.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal282_tree   = NULL;
    LTERM283_tree   = NULL;
    LTERM285_tree   = NULL;
    char_literal286_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_166   = NULL;
    #define CREATE_stream_166  if (stream_166 == NULL) {stream_166 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 166"); } 
    stream_165   = NULL;
    #define CREATE_stream_165  if (stream_165 == NULL) {stream_165 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 165"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:389:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> expression )
        // .//Emerson.g:389:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal282 = (pANTLR3_COMMON_TOKEN) MATCHT(165, &FOLLOW_165_in_indexSuffix13125); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_165; stream_165->add(stream_165, char_literal282, NULL); }


            // .//Emerson.g:389:8: ( LTERM )*

            for (;;)
            {
                int alt148=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA148_0 = LA(1);
                    if ( (LA148_0 == LTERM) ) 
                    {
                        alt148=1;
                    }

                }
                switch (alt148) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM283 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix13127); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM283, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop148;	/* break out of the loop */
            	    break;
                }
            }
            loop148: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix13130);
            expression284=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression284.tree, NULL); }

            // .//Emerson.g:389:26: ( LTERM )*

            for (;;)
            {
                int alt149=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA149_0 = LA(1);
                    if ( (LA149_0 == LTERM) ) 
                    {
                        alt149=1;
                    }

                }
                switch (alt149) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM285 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix13132); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM285, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop149;	/* break out of the loop */
            	    break;
                }
            }
            loop149: ; /* Jump out to here if this rule does not match */

            char_literal286 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_indexSuffix13135); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, char_literal286, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 389:37: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffix1Ex; /* Prevent compiler warnings */
    ruleindexSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_166 != NULL) stream_166->free(stream_166);
        if (stream_165 != NULL) stream_165->free(stream_165);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(50, indexSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix1 */

/** 
 * $ANTLR start propertyReferenceSuffix1
 * .//Emerson.g:393:1: propertyReferenceSuffix1 : '.' ( LTERM )* Identifier -> Identifier ;
 */
static EmersonParser_propertyReferenceSuffix1_return
propertyReferenceSuffix1(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix1_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal287;
    pANTLR3_COMMON_TOKEN    LTERM288;
    pANTLR3_COMMON_TOKEN    Identifier289;

    pANTLR3_BASE_TREE char_literal287_tree;
    pANTLR3_BASE_TREE LTERM288_tree;
    pANTLR3_BASE_TREE Identifier289_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_167;

    /* Initialize rule variables
     */
    propertyReferenceSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(51)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal287       = NULL;
    LTERM288       = NULL;
    Identifier289       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal287_tree   = NULL;
    LTERM288_tree   = NULL;
    Identifier289_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_167   = NULL;
    #define CREATE_stream_167  if (stream_167 == NULL) {stream_167 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 167"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:394:2: ( '.' ( LTERM )* Identifier -> Identifier )
        // .//Emerson.g:394:4: '.' ( LTERM )* Identifier
        {
            char_literal287 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_propertyReferenceSuffix13152); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, char_literal287, NULL); }


            // .//Emerson.g:394:8: ( LTERM )*

            for (;;)
            {
                int alt150=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA150_0 = LA(1);
                    if ( (LA150_0 == LTERM) ) 
                    {
                        alt150=1;
                    }

                }
                switch (alt150) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM288 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix13154); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM288, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop150;	/* break out of the loop */
            	    break;
                }
            }
            loop150: ; /* Jump out to here if this rule does not match */

            Identifier289 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix13157); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier289, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 394:26: -> Identifier
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffix1Ex; /* Prevent compiler warnings */
    rulepropertyReferenceSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_167 != NULL) stream_167->free(stream_167);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(51, propertyReferenceSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix1 */

/** 
 * $ANTLR start memberExpression
 * .//Emerson.g:398:1: memberExpression : ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* );
 */
static EmersonParser_memberExpression_return
memberExpression(pEmersonParser ctx)
{   
    EmersonParser_memberExpression_return retval;
    ANTLR3_UINT32 memberExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM291;
    pANTLR3_COMMON_TOKEN    LTERM293;
    pANTLR3_COMMON_TOKEN    LTERM296;
    pANTLR3_COMMON_TOKEN    LTERM298;
    pANTLR3_COMMON_TOKEN    string_literal300;
    pANTLR3_COMMON_TOKEN    LTERM301;
    pANTLR3_COMMON_TOKEN    LTERM302;
    pANTLR3_COMMON_TOKEN    LTERM304;
    pANTLR3_COMMON_TOKEN    LTERM306;
    EmersonParser_memberExpression_return expr;
    #undef	RETURN_TYPE_expr
    #define	RETURN_TYPE_expr EmersonParser_memberExpression_return

    EmersonParser_primaryExpression_return primaryExpression290;
    #undef	RETURN_TYPE_primaryExpression290
    #define	RETURN_TYPE_primaryExpression290 EmersonParser_primaryExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1292;
    #undef	RETURN_TYPE_propertyReferenceSuffix1292
    #define	RETURN_TYPE_propertyReferenceSuffix1292 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1294;
    #undef	RETURN_TYPE_indexSuffix1294
    #define	RETURN_TYPE_indexSuffix1294 EmersonParser_indexSuffix1_return

    EmersonParser_functionExpression_return functionExpression295;
    #undef	RETURN_TYPE_functionExpression295
    #define	RETURN_TYPE_functionExpression295 EmersonParser_functionExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1297;
    #undef	RETURN_TYPE_propertyReferenceSuffix1297
    #define	RETURN_TYPE_propertyReferenceSuffix1297 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1299;
    #undef	RETURN_TYPE_indexSuffix1299
    #define	RETURN_TYPE_indexSuffix1299 EmersonParser_indexSuffix1_return

    EmersonParser_arguments_return arguments303;
    #undef	RETURN_TYPE_arguments303
    #define	RETURN_TYPE_arguments303 EmersonParser_arguments_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1305;
    #undef	RETURN_TYPE_propertyReferenceSuffix1305
    #define	RETURN_TYPE_propertyReferenceSuffix1305 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1307;
    #undef	RETURN_TYPE_indexSuffix1307
    #define	RETURN_TYPE_indexSuffix1307 EmersonParser_indexSuffix1_return

    pANTLR3_BASE_TREE LTERM291_tree;
    pANTLR3_BASE_TREE LTERM293_tree;
    pANTLR3_BASE_TREE LTERM296_tree;
    pANTLR3_BASE_TREE LTERM298_tree;
    pANTLR3_BASE_TREE string_literal300_tree;
    pANTLR3_BASE_TREE LTERM301_tree;
    pANTLR3_BASE_TREE LTERM302_tree;
    pANTLR3_BASE_TREE LTERM304_tree;
    pANTLR3_BASE_TREE LTERM306_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_164;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primaryExpression;
    /* Initialize rule variables
     */
    memberExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(52)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM291       = NULL;
    LTERM293       = NULL;
    LTERM296       = NULL;
    LTERM298       = NULL;
    string_literal300       = NULL;
    LTERM301       = NULL;
    LTERM302       = NULL;
    LTERM304       = NULL;
    LTERM306       = NULL;
    expr.tree = NULL;

    primaryExpression290.tree = NULL;

    propertyReferenceSuffix1292.tree = NULL;

    indexSuffix1294.tree = NULL;

    functionExpression295.tree = NULL;

    propertyReferenceSuffix1297.tree = NULL;

    indexSuffix1299.tree = NULL;

    arguments303.tree = NULL;

    propertyReferenceSuffix1305.tree = NULL;

    indexSuffix1307.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM291_tree   = NULL;
    LTERM293_tree   = NULL;
    LTERM296_tree   = NULL;
    LTERM298_tree   = NULL;
    string_literal300_tree   = NULL;
    LTERM301_tree   = NULL;
    LTERM302_tree   = NULL;
    LTERM304_tree   = NULL;
    LTERM306_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_164   = NULL;
    #define CREATE_stream_164  if (stream_164 == NULL) {stream_164 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 164"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_functionExpression   = NULL;
    #define CREATE_stream_functionExpression  if (stream_functionExpression == NULL) {stream_functionExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }
    stream_primaryExpression   = NULL;
    #define CREATE_stream_primaryExpression  if (stream_primaryExpression == NULL) {stream_primaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primaryExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:399:2: ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* )
            
            ANTLR3_UINT32 alt162;

            alt162=3;

            switch ( LA(1) ) 
            {
            case Identifier:
            case NumericLiteral:
            case StringLiteral:
            case 138:
            case 141:
            case 165:
            case 189:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            	{
            		alt162=1;
            	}
                break;
            case 137:
            	{
            		alt162=2;
            	}
                break;
            case 164:
            	{
            		alt162=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 162;
                EXCEPTION->state        = 0;


                goto rulememberExpressionEx;
            }

            switch (alt162) 
            {
        	case 1:
        	    // .//Emerson.g:399:4: ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:399:4: ( primaryExpression -> primaryExpression )
        	        // .//Emerson.g:399:5: primaryExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_primaryExpression_in_memberExpression3174);
        	            primaryExpression290=primaryExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_primaryExpression; stream_primaryExpression->add(stream_primaryExpression, primaryExpression290.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : primaryExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 399:23: -> primaryExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_primaryExpression == NULL ? NULL : stream_primaryExpression->nextTree(stream_primaryExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:399:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt153=3;
        	            alt153 = cdfa153.predict(ctx, RECOGNIZER, ISTREAM, &cdfa153);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt153) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:399:47: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:399:47: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt151=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA151_0 = LA(1);
        	        	                if ( (LA151_0 == LTERM) ) 
        	        	                {
        	        	                    alt151=1;
        	        	                }

        	        	            }
        	        	            switch (alt151) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM291 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3183); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM291, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop151;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop151: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3186);
        	        	        propertyReferenceSuffix1292=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1292.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, propertyReferenceSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 399:79: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:399:82: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:399:136: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:399:136: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt152=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA152_0 = LA(1);
        	        	                if ( (LA152_0 == LTERM) ) 
        	        	                {
        	        	                    alt152=1;
        	        	                }

        	        	            }
        	        	            switch (alt152) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM293 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3203); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM293, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop152;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop152: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3206);
        	        	        indexSuffix1294=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1294.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, indexSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 399:156: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:399:159: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop153;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop153: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:400:4: ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:400:4: ( functionExpression -> functionExpression )
        	        // .//Emerson.g:400:5: functionExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_functionExpression_in_memberExpression3225);
        	            functionExpression295=functionExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_functionExpression; stream_functionExpression->add(stream_functionExpression, functionExpression295.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : functionExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 400:24: -> functionExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionExpression == NULL ? NULL : stream_functionExpression->nextTree(stream_functionExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:400:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt156=3;
        	            alt156 = cdfa156.predict(ctx, RECOGNIZER, ISTREAM, &cdfa156);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt156) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:400:48: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:400:48: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt154=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA154_0 = LA(1);
        	        	                if ( (LA154_0 == LTERM) ) 
        	        	                {
        	        	                    alt154=1;
        	        	                }

        	        	            }
        	        	            switch (alt154) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM296 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3233); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM296, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop154;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop154: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3236);
        	        	        propertyReferenceSuffix1297=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1297.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : propertyReferenceSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 400:80: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:400:83: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:400:136: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:400:136: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt155=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA155_0 = LA(1);
        	        	                if ( (LA155_0 == LTERM) ) 
        	        	                {
        	        	                    alt155=1;
        	        	                }

        	        	            }
        	        	            switch (alt155) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM298 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3252); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM298, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop155;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop155: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3255);
        	        	        indexSuffix1299=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1299.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : indexSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 400:156: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:400:159: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop156;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop156: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:401:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:401:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) )
        	        // .//Emerson.g:401:5: 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments
        	        {
        	            string_literal300 = (pANTLR3_COMMON_TOKEN) MATCHT(164, &FOLLOW_164_in_memberExpression3274); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            } 
        	            if ( BACKTRACKING==0 ) { CREATE_stream_164; stream_164->add(stream_164, string_literal300, NULL); }


        	            // .//Emerson.g:401:11: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt157=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA157_0 = LA(1);
        	                    if ( (LA157_0 == LTERM) ) 
        	                    {
        	                        alt157=1;
        	                    }

        	                }
        	                switch (alt157) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM301 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3276); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM301, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop157;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop157: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression3281);
        	            expr=memberExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, expr.tree, NULL); }

        	            // .//Emerson.g:401:40: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt158=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA158_0 = LA(1);
        	                    if ( (LA158_0 == LTERM) ) 
        	                    {
        	                        alt158=1;
        	                    }

        	                }
        	                switch (alt158) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM302 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3283); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM302, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop158;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop158: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_arguments_in_memberExpression3286);
        	            arguments303=arguments(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments303.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : expr, arguments
        	             * token labels      : 
        	             * rule labels       : retval, expr
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	            	stream_expr=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr", expr.tree != NULL ? expr.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 401:57: -> ^( NEW $expr arguments )
        	            	{
        	            	    // .//Emerson.g:401:60: ^( NEW $expr arguments )
        	            	    {
        	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));
        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	            	    }

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	            	if (stream_expr != NULL) stream_expr->free(stream_expr);


        	            }
        	        }


        	        // .//Emerson.g:401:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt161=3;
        	            alt161 = cdfa161.predict(ctx, RECOGNIZER, ISTREAM, &cdfa161);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt161) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:401:85: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:401:85: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt159=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA159_0 = LA(1);
        	        	                if ( (LA159_0 == LTERM) ) 
        	        	                {
        	        	                    alt159=1;
        	        	                }

        	        	            }
        	        	            switch (alt159) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM304 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3301); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM304, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop159;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop159: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression3304);
        	        	        propertyReferenceSuffix1305=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1305.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 401:117: -> ^( DOT $memberExpression)
        	        	        	{
        	        	        	    // .//Emerson.g:401:120: ^( DOT $memberExpression)
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:401:147: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:401:147: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt160=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA160_0 = LA(1);
        	        	                if ( (LA160_0 == LTERM) ) 
        	        	                {
        	        	                    alt160=1;
        	        	                }

        	        	            }
        	        	            switch (alt160) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM306 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression3317); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM306, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop160;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop160: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression3320);
        	        	        indexSuffix1307=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1307.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : indexSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 401:167: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:401:170: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop161;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop161: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionEx; /* Prevent compiler warnings */
    rulememberExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_164 != NULL) stream_164->free(stream_164);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_functionExpression != NULL) stream_functionExpression->free(stream_functionExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
        if (stream_primaryExpression != NULL) stream_primaryExpression->free(stream_primaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(52, memberExpression_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpression */

/** 
 * $ANTLR start memberExpressionSuffix
 * .//Emerson.g:406:1: memberExpressionSuffix : ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_memberExpressionSuffix_return
memberExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_memberExpressionSuffix_return retval;
    ANTLR3_UINT32 memberExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_indexSuffix_return indexSuffix308;
    #undef	RETURN_TYPE_indexSuffix308
    #define	RETURN_TYPE_indexSuffix308 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix309;
    #undef	RETURN_TYPE_propertyReferenceSuffix309
    #define	RETURN_TYPE_propertyReferenceSuffix309 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    memberExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(53)) )
    {
    	retval.start = 0;

        return retval; 
    }
    indexSuffix308.tree = NULL;

    propertyReferenceSuffix309.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:407:2: ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt163;

            alt163=2;


            {
                int LA163_0 = LA(1);
                if ( (LA163_0 == 165) ) 
                {
                    alt163=1;
                }
                else if ( (LA163_0 == 167) ) 
                {
                    alt163=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 163;
                    EXCEPTION->state        = 0;


                    goto rulememberExpressionSuffixEx;
                }
            }
            switch (alt163) 
            {
        	case 1:
        	    // .//Emerson.g:407:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_memberExpressionSuffix3357);
        	        indexSuffix308=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix308.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 407:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:408:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix3367);
        	        propertyReferenceSuffix309=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix309.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 408:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionSuffixEx; /* Prevent compiler warnings */
    rulememberExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(53, memberExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpressionSuffix */

/** 
 * $ANTLR start callExpression
 * .//Emerson.g:411:1: callExpression : ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* ;
 */
static EmersonParser_callExpression_return
callExpression(pEmersonParser ctx)
{   
    EmersonParser_callExpression_return retval;
    ANTLR3_UINT32 callExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM311;
    pANTLR3_COMMON_TOKEN    LTERM313;
    pANTLR3_COMMON_TOKEN    LTERM315;
    pANTLR3_COMMON_TOKEN    LTERM317;
    EmersonParser_memberExpression_return memberExpression310;
    #undef	RETURN_TYPE_memberExpression310
    #define	RETURN_TYPE_memberExpression310 EmersonParser_memberExpression_return

    EmersonParser_arguments_return arguments312;
    #undef	RETURN_TYPE_arguments312
    #define	RETURN_TYPE_arguments312 EmersonParser_arguments_return

    EmersonParser_arguments_return arguments314;
    #undef	RETURN_TYPE_arguments314
    #define	RETURN_TYPE_arguments314 EmersonParser_arguments_return

    EmersonParser_indexSuffix1_return indexSuffix1316;
    #undef	RETURN_TYPE_indexSuffix1316
    #define	RETURN_TYPE_indexSuffix1316 EmersonParser_indexSuffix1_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1318;
    #undef	RETURN_TYPE_propertyReferenceSuffix1318
    #define	RETURN_TYPE_propertyReferenceSuffix1318 EmersonParser_propertyReferenceSuffix1_return

    pANTLR3_BASE_TREE LTERM311_tree;
    pANTLR3_BASE_TREE LTERM313_tree;
    pANTLR3_BASE_TREE LTERM315_tree;
    pANTLR3_BASE_TREE LTERM317_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    /* Initialize rule variables
     */
    callExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(54)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM311       = NULL;
    LTERM313       = NULL;
    LTERM315       = NULL;
    LTERM317       = NULL;
    memberExpression310.tree = NULL;

    arguments312.tree = NULL;

    arguments314.tree = NULL;

    indexSuffix1316.tree = NULL;

    propertyReferenceSuffix1318.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM311_tree   = NULL;
    LTERM313_tree   = NULL;
    LTERM315_tree   = NULL;
    LTERM317_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:412:5: ( ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* )
        // .//Emerson.g:412:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
        {
            // .//Emerson.g:412:7: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) )
            // .//Emerson.g:412:8: memberExpression ( LTERM )* arguments
            {
                FOLLOWPUSH(FOLLOW_memberExpression_in_callExpression3387);
                memberExpression310=memberExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression310.tree, NULL); }

                // .//Emerson.g:412:25: ( LTERM )*

                for (;;)
                {
                    int alt164=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA164_0 = LA(1);
                        if ( (LA164_0 == LTERM) ) 
                        {
                            alt164=1;
                        }

                    }
                    switch (alt164) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM311 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3389); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecallExpressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM311, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop164;	/* break out of the loop */
                	    break;
                    }
                }
                loop164: ; /* Jump out to here if this rule does not match */

                FOLLOWPUSH(FOLLOW_arguments_in_callExpression3392);
                arguments312=arguments(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments312.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : memberExpression, arguments
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 412:42: -> ^( CALL memberExpression arguments )
                	{
                	    // .//Emerson.g:412:45: ^( CALL memberExpression arguments )
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:412:81: ( ( LTERM )* arguments -> ^( CALL $callExpression arguments ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*

            for (;;)
            {
                int alt168=4;
                alt168 = cdfa168.predict(ctx, RECOGNIZER, ISTREAM, &cdfa168);
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt168) 
                {
            	case 1:
            	    // .//Emerson.g:412:82: ( LTERM )* arguments
            	    {

            	        // .//Emerson.g:412:82: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt165=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA165_0 = LA(1);
            	                if ( (LA165_0 == LTERM) ) 
            	                {
            	                    alt165=1;
            	                }

            	            }
            	            switch (alt165) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM313 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3406); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM313, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop165;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop165: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression3409);
            	        arguments314=arguments(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments314.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : arguments, callExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 412:99: -> ^( CALL $callExpression arguments )
            	        	{
            	        	    // .//Emerson.g:412:102: ^( CALL $callExpression arguments )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:412:138: ( LTERM )* indexSuffix1
            	    {

            	        // .//Emerson.g:412:138: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt166=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA166_0 = LA(1);
            	                if ( (LA166_0 == LTERM) ) 
            	                {
            	                    alt166=1;
            	                }

            	            }
            	            switch (alt166) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM315 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3424); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM315, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop166;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop166: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_callExpression3427);
            	        indexSuffix1316=indexSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1316.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : indexSuffix1, callExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 412:158: -> ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	{
            	        	    // .//Emerson.g:412:161: ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 3:
            	    // .//Emerson.g:412:207: ( LTERM )* propertyReferenceSuffix1
            	    {

            	        // .//Emerson.g:412:207: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt167=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA167_0 = LA(1);
            	                if ( (LA167_0 == LTERM) ) 
            	                {
            	                    alt167=1;
            	                }

            	            }
            	            switch (alt167) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM317 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression3442); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM317, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop167;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop167: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_callExpression3445);
            	        propertyReferenceSuffix1318=propertyReferenceSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1318.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : callExpression, propertyReferenceSuffix1
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 412:239: -> ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	{
            	        	    // .//Emerson.g:412:242: ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop168;	/* break out of the loop */
            	    break;
                }
            }
            loop168: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionEx; /* Prevent compiler warnings */
    rulecallExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(54, callExpression_StartIndex); }
    return retval;
}
/* $ANTLR end callExpression */

/** 
 * $ANTLR start callExpressionSuffix
 * .//Emerson.g:415:1: callExpressionSuffix : ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_callExpressionSuffix_return
callExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_callExpressionSuffix_return retval;
    ANTLR3_UINT32 callExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_arguments_return arguments319;
    #undef	RETURN_TYPE_arguments319
    #define	RETURN_TYPE_arguments319 EmersonParser_arguments_return

    EmersonParser_indexSuffix_return indexSuffix320;
    #undef	RETURN_TYPE_indexSuffix320
    #define	RETURN_TYPE_indexSuffix320 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix321;
    #undef	RETURN_TYPE_propertyReferenceSuffix321
    #define	RETURN_TYPE_propertyReferenceSuffix321 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    callExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(55)) )
    {
    	retval.start = 0;

        return retval; 
    }
    arguments319.tree = NULL;

    indexSuffix320.tree = NULL;

    propertyReferenceSuffix321.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:416:2: ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt169;

            alt169=3;

            switch ( LA(1) ) 
            {
            case 138:
            	{
            		alt169=1;
            	}
                break;
            case 165:
            	{
            		alt169=2;
            	}
                break;
            case 167:
            	{
            		alt169=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 169;
                EXCEPTION->state        = 0;


                goto rulecallExpressionSuffixEx;
            }

            switch (alt169) 
            {
        	case 1:
        	    // .//Emerson.g:416:4: arguments
        	    {
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpressionSuffix3472);
        	        arguments319=arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments319.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : arguments
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 416:14: -> arguments
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:417:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_callExpressionSuffix3481);
        	        indexSuffix320=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix320.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 417:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:418:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix3490);
        	        propertyReferenceSuffix321=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix321.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 418:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionSuffixEx; /* Prevent compiler warnings */
    rulecallExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(55, callExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end callExpressionSuffix */

/** 
 * $ANTLR start arguments
 * .//Emerson.g:421:1: arguments : ( '(' ( LTERM )* ( expression )? ( LTERM )* ')' -> ^( ARGLIST ( expression )? ) | '(' ( LTERM )* expression ( ',' ( LTERM )* expression )* ( LTERM )* ')' -> ^( ARGLIST expression ( expression )* ) );
 */
static EmersonParser_arguments_return
arguments(pEmersonParser ctx)
{   
    EmersonParser_arguments_return retval;
    ANTLR3_UINT32 arguments_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal322;
    pANTLR3_COMMON_TOKEN    LTERM323;
    pANTLR3_COMMON_TOKEN    LTERM325;
    pANTLR3_COMMON_TOKEN    char_literal326;
    pANTLR3_COMMON_TOKEN    char_literal327;
    pANTLR3_COMMON_TOKEN    LTERM328;
    pANTLR3_COMMON_TOKEN    char_literal330;
    pANTLR3_COMMON_TOKEN    LTERM331;
    pANTLR3_COMMON_TOKEN    LTERM333;
    pANTLR3_COMMON_TOKEN    char_literal334;
    EmersonParser_expression_return expression324;
    #undef	RETURN_TYPE_expression324
    #define	RETURN_TYPE_expression324 EmersonParser_expression_return

    EmersonParser_expression_return expression329;
    #undef	RETURN_TYPE_expression329
    #define	RETURN_TYPE_expression329 EmersonParser_expression_return

    EmersonParser_expression_return expression332;
    #undef	RETURN_TYPE_expression332
    #define	RETURN_TYPE_expression332 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal322_tree;
    pANTLR3_BASE_TREE LTERM323_tree;
    pANTLR3_BASE_TREE LTERM325_tree;
    pANTLR3_BASE_TREE char_literal326_tree;
    pANTLR3_BASE_TREE char_literal327_tree;
    pANTLR3_BASE_TREE LTERM328_tree;
    pANTLR3_BASE_TREE char_literal330_tree;
    pANTLR3_BASE_TREE LTERM331_tree;
    pANTLR3_BASE_TREE LTERM333_tree;
    pANTLR3_BASE_TREE char_literal334_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    arguments_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(56)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal322       = NULL;
    LTERM323       = NULL;
    LTERM325       = NULL;
    char_literal326       = NULL;
    char_literal327       = NULL;
    LTERM328       = NULL;
    char_literal330       = NULL;
    LTERM331       = NULL;
    LTERM333       = NULL;
    char_literal334       = NULL;
    expression324.tree = NULL;

    expression329.tree = NULL;

    expression332.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal322_tree   = NULL;
    LTERM323_tree   = NULL;
    LTERM325_tree   = NULL;
    char_literal326_tree   = NULL;
    char_literal327_tree   = NULL;
    LTERM328_tree   = NULL;
    char_literal330_tree   = NULL;
    LTERM331_tree   = NULL;
    LTERM333_tree   = NULL;
    char_literal334_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:422:9: ( '(' ( LTERM )* ( expression )? ( LTERM )* ')' -> ^( ARGLIST ( expression )? ) | '(' ( LTERM )* expression ( ',' ( LTERM )* expression )* ( LTERM )* ')' -> ^( ARGLIST expression ( expression )* ) )
            
            ANTLR3_UINT32 alt177;

            alt177=2;


            {
                int LA177_0 = LA(1);
                if ( (LA177_0 == 138) ) 
                {

                    {
                        int LA177_1 = LA(2);
                        if ( (synpred194_Emerson(ctx)) ) 
                        {
                            alt177=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt177=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 177;
                            EXCEPTION->state        = 1;


                            goto ruleargumentsEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 177;
                    EXCEPTION->state        = 0;


                    goto ruleargumentsEx;
                }
            }
            switch (alt177) 
            {
        	case 1:
        	    // .//Emerson.g:422:11: '(' ( LTERM )* ( expression )? ( LTERM )* ')'
        	    {
        	        char_literal322 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_arguments3512); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal322, NULL); }


        	        // .//Emerson.g:422:15: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt170=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA170_0 = LA(1);
        	                if ( (LA170_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA170_2 = LA(2);
        	                        if ( (synpred191_Emerson(ctx)) ) 
        	                        {
        	                            alt170=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt170) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM323 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3514); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM323, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop170;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop170: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:422:22: ( expression )?
        	        {
        	            int alt171=2;
        	            {
        	                int LA171_0 = LA(1);
        	                if ( (((LA171_0 >= Identifier) && (LA171_0 <= StringLiteral)) || ((LA171_0 >= 137) && (LA171_0 <= 138)) || LA171_0 == 141 || ((LA171_0 >= 164) && (LA171_0 <= 165)) || LA171_0 == 189 || ((LA171_0 >= 194) && (LA171_0 <= 195)) || ((LA171_0 >= 199) && (LA171_0 <= 210))) ) 
        	                {
        	                    alt171=1;
        	                }
        	            }
        	            switch (alt171) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:422:23: expression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expression_in_arguments3518);
        	        	        expression324=expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression324.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:422:36: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt172=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA172_0 = LA(1);
        	                if ( (LA172_0 == LTERM) ) 
        	                {
        	                    alt172=1;
        	                }

        	            }
        	            switch (alt172) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM325 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3522); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM325, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop172;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop172: ; /* Jump out to here if this rule does not match */

        	        char_literal326 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_arguments3525); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal326, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 422:47: -> ^( ARGLIST ( expression )? )
        	        	{
        	        	    // .//Emerson.g:422:50: ^( ARGLIST ( expression )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGLIST, (pANTLR3_UINT8)"ARGLIST"), root_1));

        	        	        // .//Emerson.g:422:60: ( expression )?
        	        	        {
        	        	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        	}
        	        	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:423:4: '(' ( LTERM )* expression ( ',' ( LTERM )* expression )* ( LTERM )* ')'
        	    {
        	        char_literal327 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_arguments3539); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal327, NULL); }


        	        // .//Emerson.g:423:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt173=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA173_0 = LA(1);
        	                if ( (LA173_0 == LTERM) ) 
        	                {
        	                    alt173=1;
        	                }

        	            }
        	            switch (alt173) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM328 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3541); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM328, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop173;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop173: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_arguments3544);
        	        expression329=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression329.tree, NULL); }

        	        // .//Emerson.g:423:26: ( ',' ( LTERM )* expression )*

        	        for (;;)
        	        {
        	            int alt175=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA175_0 = LA(1);
        	                if ( (LA175_0 == 140) ) 
        	                {
        	                    alt175=1;
        	                }

        	            }
        	            switch (alt175) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:423:27: ',' ( LTERM )* expression
        	        	    {
        	        	        char_literal330 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_arguments3547); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal330, NULL); }


        	        	        // .//Emerson.g:423:31: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt174=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA174_0 = LA(1);
        	        	                if ( (LA174_0 == LTERM) ) 
        	        	                {
        	        	                    alt174=1;
        	        	                }

        	        	            }
        	        	            switch (alt174) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM331 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3549); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleargumentsEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM331, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop174;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop174: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_expression_in_arguments3552);
        	        	        expression332=expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression332.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop175;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop175: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:423:51: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt176=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA176_0 = LA(1);
        	                if ( (LA176_0 == LTERM) ) 
        	                {
        	                    alt176=1;
        	                }

        	            }
        	            switch (alt176) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM333 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments3556); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleargumentsEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM333, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop176;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop176: ; /* Jump out to here if this rule does not match */

        	        char_literal334 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_arguments3559); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleargumentsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal334, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression, expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 423:62: -> ^( ARGLIST expression ( expression )* )
        	        	{
        	        	    // .//Emerson.g:423:65: ^( ARGLIST expression ( expression )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGLIST, (pANTLR3_UINT8)"ARGLIST"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
        	        	        // .//Emerson.g:423:86: ( expression )*
        	        	        {
        	        	        	while ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        	}
        	        	        	if (stream_expression != NULL) stream_expression->reset(stream_expression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleargumentsEx; /* Prevent compiler warnings */
    ruleargumentsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(56, arguments_StartIndex); }
    return retval;
}
/* $ANTLR end arguments */

/** 
 * $ANTLR start indexSuffix
 * .//Emerson.g:428:1: indexSuffix : '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) ;
 */
static EmersonParser_indexSuffix_return
indexSuffix(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix_return retval;
    ANTLR3_UINT32 indexSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal335;
    pANTLR3_COMMON_TOKEN    LTERM336;
    pANTLR3_COMMON_TOKEN    LTERM338;
    pANTLR3_COMMON_TOKEN    char_literal339;
    EmersonParser_expression_return expression337;
    #undef	RETURN_TYPE_expression337
    #define	RETURN_TYPE_expression337 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal335_tree;
    pANTLR3_BASE_TREE LTERM336_tree;
    pANTLR3_BASE_TREE LTERM338_tree;
    pANTLR3_BASE_TREE char_literal339_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_166;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_165;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(57)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal335       = NULL;
    LTERM336       = NULL;
    LTERM338       = NULL;
    char_literal339       = NULL;
    expression337.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal335_tree   = NULL;
    LTERM336_tree   = NULL;
    LTERM338_tree   = NULL;
    char_literal339_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_166   = NULL;
    #define CREATE_stream_166  if (stream_166 == NULL) {stream_166 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 166"); } 
    stream_165   = NULL;
    #define CREATE_stream_165  if (stream_165 == NULL) {stream_165 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 165"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:429:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) )
        // .//Emerson.g:429:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal335 = (pANTLR3_COMMON_TOKEN) MATCHT(165, &FOLLOW_165_in_indexSuffix3593); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_165; stream_165->add(stream_165, char_literal335, NULL); }


            // .//Emerson.g:429:8: ( LTERM )*

            for (;;)
            {
                int alt178=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA178_0 = LA(1);
                    if ( (LA178_0 == LTERM) ) 
                    {
                        alt178=1;
                    }

                }
                switch (alt178) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM336 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3595); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM336, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop178;	/* break out of the loop */
            	    break;
                }
            }
            loop178: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix3598);
            expression337=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression337.tree, NULL); }

            // .//Emerson.g:429:26: ( LTERM )*

            for (;;)
            {
                int alt179=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA179_0 = LA(1);
                    if ( (LA179_0 == LTERM) ) 
                    {
                        alt179=1;
                    }

                }
                switch (alt179) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM338 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix3600); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM338, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop179;	/* break out of the loop */
            	    break;
                }
            }
            loop179: ; /* Jump out to here if this rule does not match */

            char_literal339 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_indexSuffix3603); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, char_literal339, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 429:37: -> ^( ARRAY_INDEX expression )
            	{
            	    // .//Emerson.g:429:40: ^( ARRAY_INDEX expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffixEx; /* Prevent compiler warnings */
    ruleindexSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_166 != NULL) stream_166->free(stream_166);
        if (stream_165 != NULL) stream_165->free(stream_165);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(57, indexSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix */

/** 
 * $ANTLR start propertyReferenceSuffix
 * .//Emerson.g:432:1: propertyReferenceSuffix : '.' ( LTERM )* Identifier -> ^( DOT Identifier ) ;
 */
static EmersonParser_propertyReferenceSuffix_return
propertyReferenceSuffix(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal340;
    pANTLR3_COMMON_TOKEN    LTERM341;
    pANTLR3_COMMON_TOKEN    Identifier342;

    pANTLR3_BASE_TREE char_literal340_tree;
    pANTLR3_BASE_TREE LTERM341_tree;
    pANTLR3_BASE_TREE Identifier342_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_167;

    /* Initialize rule variables
     */
    propertyReferenceSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(58)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal340       = NULL;
    LTERM341       = NULL;
    Identifier342       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal340_tree   = NULL;
    LTERM341_tree   = NULL;
    Identifier342_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_167   = NULL;
    #define CREATE_stream_167  if (stream_167 == NULL) {stream_167 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 167"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:433:2: ( '.' ( LTERM )* Identifier -> ^( DOT Identifier ) )
        // .//Emerson.g:433:4: '.' ( LTERM )* Identifier
        {
            char_literal340 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_propertyReferenceSuffix3624); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, char_literal340, NULL); }


            // .//Emerson.g:433:8: ( LTERM )*

            for (;;)
            {
                int alt180=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA180_0 = LA(1);
                    if ( (LA180_0 == LTERM) ) 
                    {
                        alt180=1;
                    }

                }
                switch (alt180) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM341 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix3626); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM341, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop180;	/* break out of the loop */
            	    break;
                }
            }
            loop180: ; /* Jump out to here if this rule does not match */

            Identifier342 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix3629); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier342, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 433:26: -> ^( DOT Identifier )
            	{
            	    // .//Emerson.g:433:29: ^( DOT Identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffixEx; /* Prevent compiler warnings */
    rulepropertyReferenceSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_167 != NULL) stream_167->free(stream_167);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(58, propertyReferenceSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix */

/** 
 * $ANTLR start assignmentOperator
 * .//Emerson.g:437:1: assignmentOperator : ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) );
 */
static EmersonParser_assignmentOperator_return
assignmentOperator(pEmersonParser ctx)
{   
    EmersonParser_assignmentOperator_return retval;
    ANTLR3_UINT32 assignmentOperator_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal343;
    pANTLR3_COMMON_TOKEN    string_literal344;
    pANTLR3_COMMON_TOKEN    string_literal345;
    pANTLR3_COMMON_TOKEN    string_literal346;
    pANTLR3_COMMON_TOKEN    string_literal347;
    pANTLR3_COMMON_TOKEN    string_literal348;
    pANTLR3_COMMON_TOKEN    string_literal349;
    pANTLR3_COMMON_TOKEN    string_literal350;
    pANTLR3_COMMON_TOKEN    string_literal351;

    pANTLR3_BASE_TREE char_literal343_tree;
    pANTLR3_BASE_TREE string_literal344_tree;
    pANTLR3_BASE_TREE string_literal345_tree;
    pANTLR3_BASE_TREE string_literal346_tree;
    pANTLR3_BASE_TREE string_literal347_tree;
    pANTLR3_BASE_TREE string_literal348_tree;
    pANTLR3_BASE_TREE string_literal349_tree;
    pANTLR3_BASE_TREE string_literal350_tree;
    pANTLR3_BASE_TREE string_literal351_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_170;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_171;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_174;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_175;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_172;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_173;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_169;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_168;

    /* Initialize rule variables
     */
    assignmentOperator_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(59)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal343       = NULL;
    string_literal344       = NULL;
    string_literal345       = NULL;
    string_literal346       = NULL;
    string_literal347       = NULL;
    string_literal348       = NULL;
    string_literal349       = NULL;
    string_literal350       = NULL;
    string_literal351       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal343_tree   = NULL;
    string_literal344_tree   = NULL;
    string_literal345_tree   = NULL;
    string_literal346_tree   = NULL;
    string_literal347_tree   = NULL;
    string_literal348_tree   = NULL;
    string_literal349_tree   = NULL;
    string_literal350_tree   = NULL;
    string_literal351_tree   = NULL;

    stream_170   = NULL;
    #define CREATE_stream_170  if (stream_170 == NULL) {stream_170 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 170"); } 
    stream_171   = NULL;
    #define CREATE_stream_171  if (stream_171 == NULL) {stream_171 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 171"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_174   = NULL;
    #define CREATE_stream_174  if (stream_174 == NULL) {stream_174 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 174"); } 
    stream_175   = NULL;
    #define CREATE_stream_175  if (stream_175 == NULL) {stream_175 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 175"); } 
    stream_172   = NULL;
    #define CREATE_stream_172  if (stream_172 == NULL) {stream_172 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 172"); } 
    stream_173   = NULL;
    #define CREATE_stream_173  if (stream_173 == NULL) {stream_173 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 173"); } 
    stream_169   = NULL;
    #define CREATE_stream_169  if (stream_169 == NULL) {stream_169 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 169"); } 
    stream_168   = NULL;
    #define CREATE_stream_168  if (stream_168 == NULL) {stream_168 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 168"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:438:2: ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) )
            
            ANTLR3_UINT32 alt181;

            alt181=9;

            switch ( LA(1) ) 
            {
            case 145:
            	{
            		alt181=1;
            	}
                break;
            case 168:
            	{
            		alt181=2;
            	}
                break;
            case 169:
            	{
            		alt181=3;
            	}
                break;
            case 170:
            	{
            		alt181=4;
            	}
                break;
            case 171:
            	{
            		alt181=5;
            	}
                break;
            case 172:
            	{
            		alt181=6;
            	}
                break;
            case 173:
            	{
            		alt181=7;
            	}
                break;
            case 174:
            	{
            		alt181=8;
            	}
                break;
            case 175:
            	{
            		alt181=9;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 181;
                EXCEPTION->state        = 0;


                goto ruleassignmentOperatorEx;
            }

            switch (alt181) 
            {
        	case 1:
        	    // .//Emerson.g:438:4: '='
        	    {
        	        char_literal343 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_assignmentOperator3657); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, char_literal343, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 438:8: -> ^( ASSIGN )
        	        	{
        	        	    // .//Emerson.g:438:11: ^( ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN, (pANTLR3_UINT8)"ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:438:22: '*='
        	    {
        	        string_literal344 = (pANTLR3_COMMON_TOKEN) MATCHT(168, &FOLLOW_168_in_assignmentOperator3666); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_168; stream_168->add(stream_168, string_literal344, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 438:27: -> ^( MULT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:438:30: ^( MULT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT_ASSIGN, (pANTLR3_UINT8)"MULT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:438:46: '/='
        	    {
        	        string_literal345 = (pANTLR3_COMMON_TOKEN) MATCHT(169, &FOLLOW_169_in_assignmentOperator3675); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_169; stream_169->add(stream_169, string_literal345, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 438:51: -> ^( DIV_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:438:54: ^( DIV_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV_ASSIGN, (pANTLR3_UINT8)"DIV_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:438:70: '%='
        	    {
        	        string_literal346 = (pANTLR3_COMMON_TOKEN) MATCHT(170, &FOLLOW_170_in_assignmentOperator3685); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_170; stream_170->add(stream_170, string_literal346, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 438:75: -> ^( MOD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:438:78: ^( MOD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD_ASSIGN, (pANTLR3_UINT8)"MOD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:438:93: '+='
        	    {
        	        string_literal347 = (pANTLR3_COMMON_TOKEN) MATCHT(171, &FOLLOW_171_in_assignmentOperator3694); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_171; stream_171->add(stream_171, string_literal347, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 438:98: -> ^( ADD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:438:101: ^( ADD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD_ASSIGN, (pANTLR3_UINT8)"ADD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:438:116: '-='
        	    {
        	        string_literal348 = (pANTLR3_COMMON_TOKEN) MATCHT(172, &FOLLOW_172_in_assignmentOperator3703); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_172; stream_172->add(stream_172, string_literal348, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 438:121: -> ^( SUB_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:438:124: ^( SUB_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB_ASSIGN, (pANTLR3_UINT8)"SUB_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:438:140: '&='
        	    {
        	        string_literal349 = (pANTLR3_COMMON_TOKEN) MATCHT(173, &FOLLOW_173_in_assignmentOperator3713); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_173; stream_173->add(stream_173, string_literal349, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 438:144: -> ^( AND_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:438:147: ^( AND_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND_ASSIGN, (pANTLR3_UINT8)"AND_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:438:162: '^='
        	    {
        	        string_literal350 = (pANTLR3_COMMON_TOKEN) MATCHT(174, &FOLLOW_174_in_assignmentOperator3721); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_174; stream_174->add(stream_174, string_literal350, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 438:166: -> ^( EXP_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:438:169: ^( EXP_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP_ASSIGN, (pANTLR3_UINT8)"EXP_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:438:185: '|='
        	    {
        	        string_literal351 = (pANTLR3_COMMON_TOKEN) MATCHT(175, &FOLLOW_175_in_assignmentOperator3730); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_175; stream_175->add(stream_175, string_literal351, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 438:190: -> ^( OR_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:438:193: ^( OR_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR_ASSIGN, (pANTLR3_UINT8)"OR_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentOperatorEx; /* Prevent compiler warnings */
    ruleassignmentOperatorEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_170 != NULL) stream_170->free(stream_170);
        if (stream_171 != NULL) stream_171->free(stream_171);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_174 != NULL) stream_174->free(stream_174);
        if (stream_175 != NULL) stream_175->free(stream_175);
        if (stream_172 != NULL) stream_172->free(stream_172);
        if (stream_173 != NULL) stream_173->free(stream_173);
        if (stream_169 != NULL) stream_169->free(stream_169);
        if (stream_168 != NULL) stream_168->free(stream_168);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(59, assignmentOperator_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentOperator */

/** 
 * $ANTLR start conditionalExpression
 * .//Emerson.g:442:1: conditionalExpression : msgRecvConstruct -> msgRecvConstruct ;
 */
static EmersonParser_conditionalExpression_return
conditionalExpression(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpression_return retval;
    ANTLR3_UINT32 conditionalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_msgRecvConstruct_return msgRecvConstruct352;
    #undef	RETURN_TYPE_msgRecvConstruct352
    #define	RETURN_TYPE_msgRecvConstruct352 EmersonParser_msgRecvConstruct_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_msgRecvConstruct;
    /* Initialize rule variables
     */
    conditionalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(60)) )
    {
    	retval.start = 0;

        return retval; 
    }
    msgRecvConstruct352.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_msgRecvConstruct   = NULL;
    #define CREATE_stream_msgRecvConstruct  if (stream_msgRecvConstruct == NULL) {stream_msgRecvConstruct = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule msgRecvConstruct"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:443:9: ( msgRecvConstruct -> msgRecvConstruct )
        // .//Emerson.g:443:11: msgRecvConstruct
        {
            FOLLOWPUSH(FOLLOW_msgRecvConstruct_in_conditionalExpression3763);
            msgRecvConstruct352=msgRecvConstruct(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconditionalExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_msgRecvConstruct; stream_msgRecvConstruct->add(stream_msgRecvConstruct, msgRecvConstruct352.tree, NULL); }

             
            /* AST REWRITE
             * elements          : msgRecvConstruct
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 443:28: -> msgRecvConstruct
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_msgRecvConstruct == NULL ? NULL : stream_msgRecvConstruct->nextTree(stream_msgRecvConstruct));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionEx; /* Prevent compiler warnings */
    ruleconditionalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_msgRecvConstruct != NULL) stream_msgRecvConstruct->free(stream_msgRecvConstruct);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(60, conditionalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpression */

/** 
 * $ANTLR start msgRecvConstruct
 * .//Emerson.g:446:1: msgRecvConstruct : ( msgConstruct -> msgConstruct ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct -> ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3) )? ( ( LTERM )* '<<' ( LTERM )* e4= msgConstruct -> ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4) )? ;
 */
static EmersonParser_msgRecvConstruct_return
msgRecvConstruct(pEmersonParser ctx)
{   
    EmersonParser_msgRecvConstruct_return retval;
    ANTLR3_UINT32 msgRecvConstruct_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM354;
    pANTLR3_COMMON_TOKEN    string_literal355;
    pANTLR3_COMMON_TOKEN    LTERM356;
    pANTLR3_COMMON_TOKEN    string_literal357;
    pANTLR3_COMMON_TOKEN    LTERM358;
    pANTLR3_COMMON_TOKEN    string_literal359;
    pANTLR3_COMMON_TOKEN    LTERM360;
    EmersonParser_msgConstruct_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_msgConstruct_return

    EmersonParser_msgConstruct_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_msgConstruct_return

    EmersonParser_msgConstruct_return e4;
    #undef	RETURN_TYPE_e4
    #define	RETURN_TYPE_e4 EmersonParser_msgConstruct_return

    EmersonParser_msgConstruct_return msgConstruct353;
    #undef	RETURN_TYPE_msgConstruct353
    #define	RETURN_TYPE_msgConstruct353 EmersonParser_msgConstruct_return

    pANTLR3_BASE_TREE LTERM354_tree;
    pANTLR3_BASE_TREE string_literal355_tree;
    pANTLR3_BASE_TREE LTERM356_tree;
    pANTLR3_BASE_TREE string_literal357_tree;
    pANTLR3_BASE_TREE LTERM358_tree;
    pANTLR3_BASE_TREE string_literal359_tree;
    pANTLR3_BASE_TREE LTERM360_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_176;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_msgConstruct;
    /* Initialize rule variables
     */
    msgRecvConstruct_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(61)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM354       = NULL;
    string_literal355       = NULL;
    LTERM356       = NULL;
    string_literal357       = NULL;
    LTERM358       = NULL;
    string_literal359       = NULL;
    LTERM360       = NULL;
    e2.tree = NULL;

    e3.tree = NULL;

    e4.tree = NULL;

    msgConstruct353.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM354_tree   = NULL;
    string_literal355_tree   = NULL;
    LTERM356_tree   = NULL;
    string_literal357_tree   = NULL;
    LTERM358_tree   = NULL;
    string_literal359_tree   = NULL;
    LTERM360_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_176   = NULL;
    #define CREATE_stream_176  if (stream_176 == NULL) {stream_176 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 176"); } 
    stream_msgConstruct   = NULL;
    #define CREATE_stream_msgConstruct  if (stream_msgConstruct == NULL) {stream_msgConstruct = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule msgConstruct"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:447:9: ( ( msgConstruct -> msgConstruct ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct -> ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3) )? ( ( LTERM )* '<<' ( LTERM )* e4= msgConstruct -> ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4) )? )
        // .//Emerson.g:447:11: ( msgConstruct -> msgConstruct ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct -> ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3) )? ( ( LTERM )* '<<' ( LTERM )* e4= msgConstruct -> ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4) )?
        {
            // .//Emerson.g:447:11: ( msgConstruct -> msgConstruct )
            // .//Emerson.g:447:12: msgConstruct
            {
                FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct3801);
                msgConstruct353=msgConstruct(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgRecvConstructEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_msgConstruct; stream_msgConstruct->add(stream_msgConstruct, msgConstruct353.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : msgConstruct
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 447:25: -> msgConstruct
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_msgConstruct == NULL ? NULL : stream_msgConstruct->nextTree(stream_msgConstruct));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:448:11: ( ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct -> ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3) )?
            {
                int alt184=2;
                {
                    int LA184_0 = LA(1);
                    if ( (LA184_0 == LTERM) ) 
                    {
                        {
                            int LA184_1 = LA(2);
                            if ( (synpred212_Emerson(ctx)) ) 
                            {
                                alt184=1;
                            }
                        }
                    }
                    else if ( (LA184_0 == 176) ) 
                    {
                        {
                            int LA184_2 = LA(2);
                            if ( (synpred212_Emerson(ctx)) ) 
                            {
                                alt184=1;
                            }
                        }
                    }
                }
                switch (alt184) 
                {
            	case 1:
            	    // .//Emerson.g:448:13: ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct
            	    {

            	        // .//Emerson.g:448:13: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt182=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA182_0 = LA(1);
            	                if ( (LA182_0 == LTERM) ) 
            	                {
            	                    alt182=1;
            	                }

            	            }
            	            switch (alt182) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM354 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstruct3820); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM354, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop182;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop182: ; /* Jump out to here if this rule does not match */

            	        string_literal355 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_msgRecvConstruct3823); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, string_literal355, NULL); }


            	        // .//Emerson.g:448:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt183=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA183_0 = LA(1);
            	                if ( (LA183_0 == LTERM) ) 
            	                {
            	                    alt183=1;
            	                }

            	            }
            	            switch (alt183) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM356 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstruct3825); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM356, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop183;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop183: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct3830);
            	        e2=msgConstruct(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstruct; stream_msgConstruct->add(stream_msgConstruct, e2.tree, NULL); }
            	        string_literal357 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_msgRecvConstruct3832); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, string_literal357, NULL); }

            	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct3836);
            	        e3=msgConstruct(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstruct; stream_msgConstruct->add(stream_msgConstruct, e3.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e3, msgRecvConstruct, e2
            	         * token labels      : 
            	         * rule labels       : e3, retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 448:69: -> ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3)
            	        	{
            	        	    // .//Emerson.g:448:72: ^( MESSAGE_RECV_AND_SENDER $msgRecvConstruct $e2 $e3)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV_AND_SENDER, (pANTLR3_UINT8)"MESSAGE_RECV_AND_SENDER"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

                }
            }

            // .//Emerson.g:449:11: ( ( LTERM )* '<<' ( LTERM )* e4= msgConstruct -> ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4) )?
            {
                int alt187=2;
                {
                    int LA187_0 = LA(1);
                    if ( (LA187_0 == LTERM) ) 
                    {
                        {
                            int LA187_1 = LA(2);
                            if ( (synpred215_Emerson(ctx)) ) 
                            {
                                alt187=1;
                            }
                        }
                    }
                    else if ( (LA187_0 == 176) ) 
                    {
                        {
                            int LA187_2 = LA(2);
                            if ( (synpred215_Emerson(ctx)) ) 
                            {
                                alt187=1;
                            }
                        }
                    }
                }
                switch (alt187) 
                {
            	case 1:
            	    // .//Emerson.g:449:13: ( LTERM )* '<<' ( LTERM )* e4= msgConstruct
            	    {

            	        // .//Emerson.g:449:13: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt185=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA185_0 = LA(1);
            	                if ( (LA185_0 == LTERM) ) 
            	                {
            	                    alt185=1;
            	                }

            	            }
            	            switch (alt185) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM358 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstruct3867); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM358, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop185;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop185: ; /* Jump out to here if this rule does not match */

            	        string_literal359 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_msgRecvConstruct3870); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, string_literal359, NULL); }


            	        // .//Emerson.g:449:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt186=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA186_0 = LA(1);
            	                if ( (LA186_0 == LTERM) ) 
            	                {
            	                    alt186=1;
            	                }

            	            }
            	            switch (alt186) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM360 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstruct3872); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM360, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop186;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop186: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_msgConstruct_in_msgRecvConstruct3877);
            	        e4=msgConstruct(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstruct; stream_msgConstruct->add(stream_msgConstruct, e4.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : msgRecvConstruct, e4
            	         * token labels      : 
            	         * rule labels       : e4, retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e4;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_e4=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e4", e4.tree != NULL ? e4.tree : NULL);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 449:48: -> ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4)
            	        	{
            	        	    // .//Emerson.g:449:51: ^( MESSAGE_RECV_NO_SENDER $msgRecvConstruct $e4)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV_NO_SENDER, (pANTLR3_UINT8)"MESSAGE_RECV_NO_SENDER"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e4 == NULL ? NULL : stream_e4->nextTree(stream_e4));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_e4 != NULL) stream_e4->free(stream_e4);
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvConstructEx; /* Prevent compiler warnings */
    rulemsgRecvConstructEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_176 != NULL) stream_176->free(stream_176);
        if (stream_msgConstruct != NULL) stream_msgConstruct->free(stream_msgConstruct);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(61, msgRecvConstruct_StartIndex); }
    return retval;
}
/* $ANTLR end msgRecvConstruct */

/** 
 * $ANTLR start msgConstruct
 * .//Emerson.g:453:1: msgConstruct : ( msgSenderConstruct -> msgSenderConstruct ) ( ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct -> ^( SEND_CONSTRUCT $msgConstruct $e2) )* ;
 */
static EmersonParser_msgConstruct_return
msgConstruct(pEmersonParser ctx)
{   
    EmersonParser_msgConstruct_return retval;
    ANTLR3_UINT32 msgConstruct_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM362;
    pANTLR3_COMMON_TOKEN    string_literal363;
    pANTLR3_COMMON_TOKEN    LTERM364;
    EmersonParser_msgSenderConstruct_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_msgSenderConstruct_return

    EmersonParser_msgSenderConstruct_return msgSenderConstruct361;
    #undef	RETURN_TYPE_msgSenderConstruct361
    #define	RETURN_TYPE_msgSenderConstruct361 EmersonParser_msgSenderConstruct_return

    pANTLR3_BASE_TREE LTERM362_tree;
    pANTLR3_BASE_TREE string_literal363_tree;
    pANTLR3_BASE_TREE LTERM364_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_177;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_msgSenderConstruct;
    /* Initialize rule variables
     */
    msgConstruct_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(62)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM362       = NULL;
    string_literal363       = NULL;
    LTERM364       = NULL;
    e2.tree = NULL;

    msgSenderConstruct361.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM362_tree   = NULL;
    string_literal363_tree   = NULL;
    LTERM364_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_177   = NULL;
    #define CREATE_stream_177  if (stream_177 == NULL) {stream_177 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 177"); } 
    stream_msgSenderConstruct   = NULL;
    #define CREATE_stream_msgSenderConstruct  if (stream_msgSenderConstruct == NULL) {stream_msgSenderConstruct = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule msgSenderConstruct"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:454:9: ( ( msgSenderConstruct -> msgSenderConstruct ) ( ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct -> ^( SEND_CONSTRUCT $msgConstruct $e2) )* )
        // .//Emerson.g:454:11: ( msgSenderConstruct -> msgSenderConstruct ) ( ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct -> ^( SEND_CONSTRUCT $msgConstruct $e2) )*
        {
            // .//Emerson.g:454:11: ( msgSenderConstruct -> msgSenderConstruct )
            // .//Emerson.g:454:12: msgSenderConstruct
            {
                FOLLOWPUSH(FOLLOW_msgSenderConstruct_in_msgConstruct3919);
                msgSenderConstruct361=msgSenderConstruct(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgConstructEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_msgSenderConstruct; stream_msgSenderConstruct->add(stream_msgSenderConstruct, msgSenderConstruct361.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : msgSenderConstruct
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 454:31: -> msgSenderConstruct
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_msgSenderConstruct == NULL ? NULL : stream_msgSenderConstruct->nextTree(stream_msgSenderConstruct));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:455:11: ( ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct -> ^( SEND_CONSTRUCT $msgConstruct $e2) )*

            for (;;)
            {
                int alt190=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA190_0 = LA(1);
                    if ( (LA190_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA190_1 = LA(2);
                            if ( (synpred218_Emerson(ctx)) ) 
                            {
                                alt190=1;
                            }

                        }
                    }
                    else if ( (LA190_0 == 177) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA190_3 = LA(2);
                            if ( (synpred218_Emerson(ctx)) ) 
                            {
                                alt190=1;
                            }

                        }
                    }

                }
                switch (alt190) 
                {
            	case 1:
            	    // .//Emerson.g:455:12: ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct
            	    {

            	        // .//Emerson.g:455:12: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt188=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA188_0 = LA(1);
            	                if ( (LA188_0 == LTERM) ) 
            	                {
            	                    alt188=1;
            	                }

            	            }
            	            switch (alt188) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM362 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgConstruct3937); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM362, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop188;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop188: ; /* Jump out to here if this rule does not match */

            	        string_literal363 = (pANTLR3_COMMON_TOKEN) MATCHT(177, &FOLLOW_177_in_msgConstruct3940); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_177; stream_177->add(stream_177, string_literal363, NULL); }


            	        // .//Emerson.g:455:24: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt189=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA189_0 = LA(1);
            	                if ( (LA189_0 == LTERM) ) 
            	                {
            	                    alt189=1;
            	                }

            	            }
            	            switch (alt189) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM364 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgConstruct3942); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM364, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop189;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop189: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_msgSenderConstruct_in_msgConstruct3947);
            	        e2=msgSenderConstruct(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgSenderConstruct; stream_msgSenderConstruct->add(stream_msgSenderConstruct, e2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e2, msgConstruct
            	         * token labels      : 
            	         * rule labels       : retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 455:53: -> ^( SEND_CONSTRUCT $msgConstruct $e2)
            	        	{
            	        	    // .//Emerson.g:455:56: ^( SEND_CONSTRUCT $msgConstruct $e2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SEND_CONSTRUCT, (pANTLR3_UINT8)"SEND_CONSTRUCT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop190;	/* break out of the loop */
            	    break;
                }
            }
            loop190: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgConstructEx; /* Prevent compiler warnings */
    rulemsgConstructEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_177 != NULL) stream_177->free(stream_177);
        if (stream_msgSenderConstruct != NULL) stream_msgSenderConstruct->free(stream_msgSenderConstruct);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(62, msgConstruct_StartIndex); }
    return retval;
}
/* $ANTLR end msgConstruct */

/** 
 * $ANTLR start msgSenderConstruct
 * .//Emerson.g:458:1: msgSenderConstruct : ( ternaryExpression -> ternaryExpression ) ( ( LTERM )* '#' ( LTERM )* e2= ternaryExpression -> ^( SENDER_CONSTRUCT $msgSenderConstruct $e2) )* ;
 */
static EmersonParser_msgSenderConstruct_return
msgSenderConstruct(pEmersonParser ctx)
{   
    EmersonParser_msgSenderConstruct_return retval;
    ANTLR3_UINT32 msgSenderConstruct_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM366;
    pANTLR3_COMMON_TOKEN    char_literal367;
    pANTLR3_COMMON_TOKEN    LTERM368;
    EmersonParser_ternaryExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_ternaryExpression_return

    EmersonParser_ternaryExpression_return ternaryExpression365;
    #undef	RETURN_TYPE_ternaryExpression365
    #define	RETURN_TYPE_ternaryExpression365 EmersonParser_ternaryExpression_return

    pANTLR3_BASE_TREE LTERM366_tree;
    pANTLR3_BASE_TREE char_literal367_tree;
    pANTLR3_BASE_TREE LTERM368_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_178;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ternaryExpression;
    /* Initialize rule variables
     */
    msgSenderConstruct_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(63)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM366       = NULL;
    char_literal367       = NULL;
    LTERM368       = NULL;
    e2.tree = NULL;

    ternaryExpression365.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM366_tree   = NULL;
    char_literal367_tree   = NULL;
    LTERM368_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_178   = NULL;
    #define CREATE_stream_178  if (stream_178 == NULL) {stream_178 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 178"); } 
    stream_ternaryExpression   = NULL;
    #define CREATE_stream_ternaryExpression  if (stream_ternaryExpression == NULL) {stream_ternaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ternaryExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:459:9: ( ( ternaryExpression -> ternaryExpression ) ( ( LTERM )* '#' ( LTERM )* e2= ternaryExpression -> ^( SENDER_CONSTRUCT $msgSenderConstruct $e2) )* )
        // .//Emerson.g:459:11: ( ternaryExpression -> ternaryExpression ) ( ( LTERM )* '#' ( LTERM )* e2= ternaryExpression -> ^( SENDER_CONSTRUCT $msgSenderConstruct $e2) )*
        {
            // .//Emerson.g:459:11: ( ternaryExpression -> ternaryExpression )
            // .//Emerson.g:459:12: ternaryExpression
            {
                FOLLOWPUSH(FOLLOW_ternaryExpression_in_msgSenderConstruct3987);
                ternaryExpression365=ternaryExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSenderConstructEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpression; stream_ternaryExpression->add(stream_ternaryExpression, ternaryExpression365.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : ternaryExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 459:30: -> ternaryExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ternaryExpression == NULL ? NULL : stream_ternaryExpression->nextTree(stream_ternaryExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:460:11: ( ( LTERM )* '#' ( LTERM )* e2= ternaryExpression -> ^( SENDER_CONSTRUCT $msgSenderConstruct $e2) )*

            for (;;)
            {
                int alt193=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA193_0 = LA(1);
                    if ( (LA193_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA193_1 = LA(2);
                            if ( (synpred221_Emerson(ctx)) ) 
                            {
                                alt193=1;
                            }

                        }
                    }
                    else if ( (LA193_0 == 178) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA193_3 = LA(2);
                            if ( (synpred221_Emerson(ctx)) ) 
                            {
                                alt193=1;
                            }

                        }
                    }

                }
                switch (alt193) 
                {
            	case 1:
            	    // .//Emerson.g:460:12: ( LTERM )* '#' ( LTERM )* e2= ternaryExpression
            	    {

            	        // .//Emerson.g:460:12: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt191=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA191_0 = LA(1);
            	                if ( (LA191_0 == LTERM) ) 
            	                {
            	                    alt191=1;
            	                }

            	            }
            	            switch (alt191) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM366 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSenderConstruct4005); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgSenderConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM366, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop191;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop191: ; /* Jump out to here if this rule does not match */

            	        char_literal367 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_msgSenderConstruct4008); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSenderConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, char_literal367, NULL); }


            	        // .//Emerson.g:460:23: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt192=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA192_0 = LA(1);
            	                if ( (LA192_0 == LTERM) ) 
            	                {
            	                    alt192=1;
            	                }

            	            }
            	            switch (alt192) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM368 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSenderConstruct4010); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgSenderConstructEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM368, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop192;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop192: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_ternaryExpression_in_msgSenderConstruct4015);
            	        e2=ternaryExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSenderConstructEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpression; stream_ternaryExpression->add(stream_ternaryExpression, e2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : msgSenderConstruct, e2
            	         * token labels      : 
            	         * rule labels       : retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 460:51: -> ^( SENDER_CONSTRUCT $msgSenderConstruct $e2)
            	        	{
            	        	    // .//Emerson.g:460:54: ^( SENDER_CONSTRUCT $msgSenderConstruct $e2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SENDER_CONSTRUCT, (pANTLR3_UINT8)"SENDER_CONSTRUCT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop193;	/* break out of the loop */
            	    break;
                }
            }
            loop193: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSenderConstructEx; /* Prevent compiler warnings */
    rulemsgSenderConstructEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_178 != NULL) stream_178->free(stream_178);
        if (stream_ternaryExpression != NULL) stream_ternaryExpression->free(stream_ternaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(63, msgSenderConstruct_StartIndex); }
    return retval;
}
/* $ANTLR end msgSenderConstruct */

/** 
 * $ANTLR start ternaryExpression
 * .//Emerson.g:464:1: ternaryExpression : ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $ternaryExpression $expr1 $expr2) )* ;
 */
static EmersonParser_ternaryExpression_return
ternaryExpression(pEmersonParser ctx)
{   
    EmersonParser_ternaryExpression_return retval;
    ANTLR3_UINT32 ternaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM370;
    pANTLR3_COMMON_TOKEN    char_literal371;
    pANTLR3_COMMON_TOKEN    LTERM372;
    pANTLR3_COMMON_TOKEN    LTERM373;
    pANTLR3_COMMON_TOKEN    char_literal374;
    pANTLR3_COMMON_TOKEN    LTERM375;
    EmersonParser_assignmentExpression_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpression_return

    EmersonParser_logicalORExpression_return logicalORExpression369;
    #undef	RETURN_TYPE_logicalORExpression369
    #define	RETURN_TYPE_logicalORExpression369 EmersonParser_logicalORExpression_return

    pANTLR3_BASE_TREE LTERM370_tree;
    pANTLR3_BASE_TREE char_literal371_tree;
    pANTLR3_BASE_TREE LTERM372_tree;
    pANTLR3_BASE_TREE LTERM373_tree;
    pANTLR3_BASE_TREE char_literal374_tree;
    pANTLR3_BASE_TREE LTERM375_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_179;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpression;
    /* Initialize rule variables
     */
    ternaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(64)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM370       = NULL;
    char_literal371       = NULL;
    LTERM372       = NULL;
    LTERM373       = NULL;
    char_literal374       = NULL;
    LTERM375       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpression369.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM370_tree   = NULL;
    char_literal371_tree   = NULL;
    LTERM372_tree   = NULL;
    LTERM373_tree   = NULL;
    char_literal374_tree   = NULL;
    LTERM375_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_179   = NULL;
    #define CREATE_stream_179  if (stream_179 == NULL) {stream_179 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 179"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }
    stream_logicalORExpression   = NULL;
    #define CREATE_stream_logicalORExpression  if (stream_logicalORExpression == NULL) {stream_logicalORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:465:9: ( ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $ternaryExpression $expr1 $expr2) )* )
        // .//Emerson.g:465:11: ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $ternaryExpression $expr1 $expr2) )*
        {
            // .//Emerson.g:465:11: ( logicalORExpression -> logicalORExpression )
            // .//Emerson.g:465:12: logicalORExpression
            {
                FOLLOWPUSH(FOLLOW_logicalORExpression_in_ternaryExpression4056);
                logicalORExpression369=logicalORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleternaryExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpression; stream_logicalORExpression->add(stream_logicalORExpression, logicalORExpression369.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 465:32: -> logicalORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpression == NULL ? NULL : stream_logicalORExpression->nextTree(stream_logicalORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:465:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $ternaryExpression $expr1 $expr2) )*

            for (;;)
            {
                int alt198=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA198_0 = LA(1);
                    if ( (LA198_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA198_1 = LA(2);
                            if ( (synpred226_Emerson(ctx)) ) 
                            {
                                alt198=1;
                            }

                        }
                    }
                    else if ( (LA198_0 == 179) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA198_3 = LA(2);
                            if ( (synpred226_Emerson(ctx)) ) 
                            {
                                alt198=1;
                            }

                        }
                    }

                }
                switch (alt198) 
                {
            	case 1:
            	    // .//Emerson.g:465:57: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression
            	    {

            	        // .//Emerson.g:465:57: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt194=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA194_0 = LA(1);
            	                if ( (LA194_0 == LTERM) ) 
            	                {
            	                    alt194=1;
            	                }

            	            }
            	            switch (alt194) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM370 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpression4064); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM370, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop194;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop194: ; /* Jump out to here if this rule does not match */

            	        char_literal371 = (pANTLR3_COMMON_TOKEN) MATCHT(179, &FOLLOW_179_in_ternaryExpression4067); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_179; stream_179->add(stream_179, char_literal371, NULL); }


            	        // .//Emerson.g:465:68: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt195=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA195_0 = LA(1);
            	                if ( (LA195_0 == LTERM) ) 
            	                {
            	                    alt195=1;
            	                }

            	            }
            	            switch (alt195) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM372 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpression4069); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM372, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop195;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop195: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_ternaryExpression4074);
            	        expr1=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr1.tree, NULL); }

            	        // .//Emerson.g:465:102: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt196=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA196_0 = LA(1);
            	                if ( (LA196_0 == LTERM) ) 
            	                {
            	                    alt196=1;
            	                }

            	            }
            	            switch (alt196) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM373 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpression4076); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM373, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop196;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop196: ; /* Jump out to here if this rule does not match */

            	        char_literal374 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_ternaryExpression4079); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal374, NULL); }


            	        // .//Emerson.g:465:113: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt197=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA197_0 = LA(1);
            	                if ( (LA197_0 == LTERM) ) 
            	                {
            	                    alt197=1;
            	                }

            	            }
            	            switch (alt197) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM375 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpression4081); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM375, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop197;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop197: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_ternaryExpression4086);
            	        expr2=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : expr2, expr1, ternaryExpression
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 465:147: -> ^( TERNARYOP $ternaryExpression $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:465:150: ^( TERNARYOP $ternaryExpression $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP, (pANTLR3_UINT8)"TERNARYOP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop198;	/* break out of the loop */
            	    break;
                }
            }
            loop198: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleternaryExpressionEx; /* Prevent compiler warnings */
    ruleternaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_179 != NULL) stream_179->free(stream_179);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
        if (stream_logicalORExpression != NULL) stream_logicalORExpression->free(stream_logicalORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(64, ternaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end ternaryExpression */

/** 
 * $ANTLR start conditionalExpressionNoIn
 * .//Emerson.g:469:1: conditionalExpressionNoIn : msgRecvConstructNoIn ;
 */
static EmersonParser_conditionalExpressionNoIn_return
conditionalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpressionNoIn_return retval;
    ANTLR3_UINT32 conditionalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_msgRecvConstructNoIn_return msgRecvConstructNoIn376;
    #undef	RETURN_TYPE_msgRecvConstructNoIn376
    #define	RETURN_TYPE_msgRecvConstructNoIn376 EmersonParser_msgRecvConstructNoIn_return


    /* Initialize rule variables
     */
    conditionalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(65)) )
    {
    	retval.start = 0;

        return retval; 
    }
    msgRecvConstructNoIn376.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // .//Emerson.g:470:9: ( msgRecvConstructNoIn )
        // .//Emerson.g:470:11: msgRecvConstructNoIn
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_msgRecvConstructNoIn_in_conditionalExpressionNoIn4129);
            msgRecvConstructNoIn376=msgRecvConstructNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconditionalExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, msgRecvConstructNoIn376.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionNoInEx; /* Prevent compiler warnings */
    ruleconditionalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(65, conditionalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpressionNoIn */

/** 
 * $ANTLR start msgRecvConstructNoIn
 * .//Emerson.g:474:1: msgRecvConstructNoIn : ( msgConstructNoIn -> msgConstructNoIn ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn -> ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3) )? (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )? ;
 */
static EmersonParser_msgRecvConstructNoIn_return
msgRecvConstructNoIn(pEmersonParser ctx)
{   
    EmersonParser_msgRecvConstructNoIn_return retval;
    ANTLR3_UINT32 msgRecvConstructNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM378;
    pANTLR3_COMMON_TOKEN    string_literal379;
    pANTLR3_COMMON_TOKEN    LTERM380;
    pANTLR3_COMMON_TOKEN    string_literal381;
    pANTLR3_COMMON_TOKEN    LTERM382;
    pANTLR3_COMMON_TOKEN    string_literal383;
    pANTLR3_COMMON_TOKEN    LTERM384;
    EmersonParser_msgConstructNoIn_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_msgConstructNoIn_return

    EmersonParser_msgConstructNoIn_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_msgConstructNoIn_return

    EmersonParser_msgConstructNoIn_return e4;
    #undef	RETURN_TYPE_e4
    #define	RETURN_TYPE_e4 EmersonParser_msgConstructNoIn_return

    EmersonParser_msgConstructNoIn_return e5;
    #undef	RETURN_TYPE_e5
    #define	RETURN_TYPE_e5 EmersonParser_msgConstructNoIn_return

    EmersonParser_msgConstructNoIn_return msgConstructNoIn377;
    #undef	RETURN_TYPE_msgConstructNoIn377
    #define	RETURN_TYPE_msgConstructNoIn377 EmersonParser_msgConstructNoIn_return

    pANTLR3_BASE_TREE LTERM378_tree;
    pANTLR3_BASE_TREE string_literal379_tree;
    pANTLR3_BASE_TREE LTERM380_tree;
    pANTLR3_BASE_TREE string_literal381_tree;
    pANTLR3_BASE_TREE LTERM382_tree;
    pANTLR3_BASE_TREE string_literal383_tree;
    pANTLR3_BASE_TREE LTERM384_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_176;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_msgConstructNoIn;
    /* Initialize rule variables
     */
    msgRecvConstructNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(66)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM378       = NULL;
    string_literal379       = NULL;
    LTERM380       = NULL;
    string_literal381       = NULL;
    LTERM382       = NULL;
    string_literal383       = NULL;
    LTERM384       = NULL;
    e2.tree = NULL;

    e3.tree = NULL;

    e4.tree = NULL;

    e5.tree = NULL;

    msgConstructNoIn377.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM378_tree   = NULL;
    string_literal379_tree   = NULL;
    LTERM380_tree   = NULL;
    string_literal381_tree   = NULL;
    LTERM382_tree   = NULL;
    string_literal383_tree   = NULL;
    LTERM384_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_176   = NULL;
    #define CREATE_stream_176  if (stream_176 == NULL) {stream_176 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 176"); } 
    stream_msgConstructNoIn   = NULL;
    #define CREATE_stream_msgConstructNoIn  if (stream_msgConstructNoIn == NULL) {stream_msgConstructNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule msgConstructNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:475:9: ( ( msgConstructNoIn -> msgConstructNoIn ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn -> ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3) )? (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )? )
        // .//Emerson.g:475:11: ( msgConstructNoIn -> msgConstructNoIn ) ( ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn -> ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3) )? (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )?
        {
            // .//Emerson.g:475:11: ( msgConstructNoIn -> msgConstructNoIn )
            // .//Emerson.g:475:12: msgConstructNoIn
            {
                FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4156);
                msgConstructNoIn377=msgConstructNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgRecvConstructNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_msgConstructNoIn; stream_msgConstructNoIn->add(stream_msgConstructNoIn, msgConstructNoIn377.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : msgConstructNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 475:29: -> msgConstructNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_msgConstructNoIn == NULL ? NULL : stream_msgConstructNoIn->nextTree(stream_msgConstructNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:476:11: ( ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn -> ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3) )?
            {
                int alt201=2;
                {
                    int LA201_0 = LA(1);
                    if ( (LA201_0 == LTERM) ) 
                    {
                        {
                            int LA201_1 = LA(2);
                            if ( (synpred229_Emerson(ctx)) ) 
                            {
                                alt201=1;
                            }
                        }
                    }
                    else if ( (LA201_0 == 176) ) 
                    {
                        {
                            int LA201_2 = LA(2);
                            if ( (synpred229_Emerson(ctx)) ) 
                            {
                                alt201=1;
                            }
                        }
                    }
                }
                switch (alt201) 
                {
            	case 1:
            	    // .//Emerson.g:476:13: ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn
            	    {

            	        // .//Emerson.g:476:13: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt199=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA199_0 = LA(1);
            	                if ( (LA199_0 == LTERM) ) 
            	                {
            	                    alt199=1;
            	                }

            	            }
            	            switch (alt199) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM378 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstructNoIn4175); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM378, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop199;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop199: ; /* Jump out to here if this rule does not match */

            	        string_literal379 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_msgRecvConstructNoIn4178); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, string_literal379, NULL); }


            	        // .//Emerson.g:476:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt200=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA200_0 = LA(1);
            	                if ( (LA200_0 == LTERM) ) 
            	                {
            	                    alt200=1;
            	                }

            	            }
            	            switch (alt200) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM380 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstructNoIn4180); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM380, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop200;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop200: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4185);
            	        e2=msgConstructNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstructNoIn; stream_msgConstructNoIn->add(stream_msgConstructNoIn, e2.tree, NULL); }
            	        string_literal381 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_msgRecvConstructNoIn4187); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, string_literal381, NULL); }

            	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4191);
            	        e3=msgConstructNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstructNoIn; stream_msgConstructNoIn->add(stream_msgConstructNoIn, e3.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e2, msgRecvConstructNoIn, e3
            	         * token labels      : 
            	         * rule labels       : e3, retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 476:77: -> ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3)
            	        	{
            	        	    // .//Emerson.g:476:80: ^( MESSAGE_RECV_AND_SENDER_NO_IN $msgRecvConstructNoIn $e2 $e3)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV_AND_SENDER_NO_IN, (pANTLR3_UINT8)"MESSAGE_RECV_AND_SENDER_NO_IN"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

                }
            }

            // .//Emerson.g:477:11: (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5) )?
            {
                int alt204=2;
                alt204 = cdfa204.predict(ctx, RECOGNIZER, ISTREAM, &cdfa204);
                if  (HASEXCEPTION())
                {
                    goto rulemsgRecvConstructNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt204) 
                {
            	case 1:
            	    // .//Emerson.g:477:13: e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn
            	    {
            	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4224);
            	        e4=msgConstructNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstructNoIn; stream_msgConstructNoIn->add(stream_msgConstructNoIn, e4.tree, NULL); }

            	        // .//Emerson.g:477:33: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt202=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA202_0 = LA(1);
            	                if ( (LA202_0 == LTERM) ) 
            	                {
            	                    alt202=1;
            	                }

            	            }
            	            switch (alt202) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM382 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstructNoIn4226); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM382, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop202;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop202: ; /* Jump out to here if this rule does not match */

            	        string_literal383 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_msgRecvConstructNoIn4229); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, string_literal383, NULL); }


            	        // .//Emerson.g:477:45: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt203=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA203_0 = LA(1);
            	                if ( (LA203_0 == LTERM) ) 
            	                {
            	                    alt203=1;
            	                }

            	            }
            	            switch (alt203) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM384 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvConstructNoIn4231); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgRecvConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM384, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop203;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop203: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_msgRecvConstructNoIn4236);
            	        e5=msgConstructNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgRecvConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgConstructNoIn; stream_msgConstructNoIn->add(stream_msgConstructNoIn, e5.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e5, e4, msgRecvConstructNoIn
            	         * token labels      : 
            	         * rule labels       : e4, retval, e5
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e4;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e5;

            	        	stream_e4=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e4", e4.tree != NULL ? e4.tree : NULL);
            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e5=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e5", e5.tree != NULL ? e5.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 477:72: -> ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5)
            	        	{
            	        	    // .//Emerson.g:477:75: ^( MESSAGE_RECV_NO_SENDER_NO_IN $msgRecvConstructNoIn $e4 $e5)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV_NO_SENDER_NO_IN, (pANTLR3_UINT8)"MESSAGE_RECV_NO_SENDER_NO_IN"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e4 == NULL ? NULL : stream_e4->nextTree(stream_e4));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e5 == NULL ? NULL : stream_e5->nextTree(stream_e5));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_e4 != NULL) stream_e4->free(stream_e4);
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e5 != NULL) stream_e5->free(stream_e5);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvConstructNoInEx; /* Prevent compiler warnings */
    rulemsgRecvConstructNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_176 != NULL) stream_176->free(stream_176);
        if (stream_msgConstructNoIn != NULL) stream_msgConstructNoIn->free(stream_msgConstructNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(66, msgRecvConstructNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end msgRecvConstructNoIn */

/** 
 * $ANTLR start msgConstructNoIn
 * .//Emerson.g:481:1: msgConstructNoIn : ( msgSenderConstructNoIn -> msgSenderConstructNoIn ) ( ( LTERM )* '>>' e2= msgSenderConstructNoIn -> ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2) )* ;
 */
static EmersonParser_msgConstructNoIn_return
msgConstructNoIn(pEmersonParser ctx)
{   
    EmersonParser_msgConstructNoIn_return retval;
    ANTLR3_UINT32 msgConstructNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM386;
    pANTLR3_COMMON_TOKEN    string_literal387;
    EmersonParser_msgSenderConstructNoIn_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_msgSenderConstructNoIn_return

    EmersonParser_msgSenderConstructNoIn_return msgSenderConstructNoIn385;
    #undef	RETURN_TYPE_msgSenderConstructNoIn385
    #define	RETURN_TYPE_msgSenderConstructNoIn385 EmersonParser_msgSenderConstructNoIn_return

    pANTLR3_BASE_TREE LTERM386_tree;
    pANTLR3_BASE_TREE string_literal387_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_177;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_msgSenderConstructNoIn;
    /* Initialize rule variables
     */
    msgConstructNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(67)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM386       = NULL;
    string_literal387       = NULL;
    e2.tree = NULL;

    msgSenderConstructNoIn385.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM386_tree   = NULL;
    string_literal387_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_177   = NULL;
    #define CREATE_stream_177  if (stream_177 == NULL) {stream_177 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 177"); } 
    stream_msgSenderConstructNoIn   = NULL;
    #define CREATE_stream_msgSenderConstructNoIn  if (stream_msgSenderConstructNoIn == NULL) {stream_msgSenderConstructNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule msgSenderConstructNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:482:9: ( ( msgSenderConstructNoIn -> msgSenderConstructNoIn ) ( ( LTERM )* '>>' e2= msgSenderConstructNoIn -> ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2) )* )
        // .//Emerson.g:482:11: ( msgSenderConstructNoIn -> msgSenderConstructNoIn ) ( ( LTERM )* '>>' e2= msgSenderConstructNoIn -> ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2) )*
        {
            // .//Emerson.g:482:11: ( msgSenderConstructNoIn -> msgSenderConstructNoIn )
            // .//Emerson.g:482:12: msgSenderConstructNoIn
            {
                FOLLOWPUSH(FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4289);
                msgSenderConstructNoIn385=msgSenderConstructNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgConstructNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_msgSenderConstructNoIn; stream_msgSenderConstructNoIn->add(stream_msgSenderConstructNoIn, msgSenderConstructNoIn385.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : msgSenderConstructNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 482:35: -> msgSenderConstructNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_msgSenderConstructNoIn == NULL ? NULL : stream_msgSenderConstructNoIn->nextTree(stream_msgSenderConstructNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:483:11: ( ( LTERM )* '>>' e2= msgSenderConstructNoIn -> ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2) )*

            for (;;)
            {
                int alt206=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA206_0 = LA(1);
                    if ( (LA206_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA206_1 = LA(2);
                            if ( (synpred234_Emerson(ctx)) ) 
                            {
                                alt206=1;
                            }

                        }
                    }
                    else if ( (LA206_0 == 177) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA206_3 = LA(2);
                            if ( (synpred234_Emerson(ctx)) ) 
                            {
                                alt206=1;
                            }

                        }
                    }

                }
                switch (alt206) 
                {
            	case 1:
            	    // .//Emerson.g:483:12: ( LTERM )* '>>' e2= msgSenderConstructNoIn
            	    {

            	        // .//Emerson.g:483:12: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt205=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA205_0 = LA(1);
            	                if ( (LA205_0 == LTERM) ) 
            	                {
            	                    alt205=1;
            	                }

            	            }
            	            switch (alt205) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM386 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgConstructNoIn4307); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM386, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop205;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop205: ; /* Jump out to here if this rule does not match */

            	        string_literal387 = (pANTLR3_COMMON_TOKEN) MATCHT(177, &FOLLOW_177_in_msgConstructNoIn4310); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_177; stream_177->add(stream_177, string_literal387, NULL); }

            	        FOLLOWPUSH(FOLLOW_msgSenderConstructNoIn_in_msgConstructNoIn4314);
            	        e2=msgSenderConstructNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_msgSenderConstructNoIn; stream_msgSenderConstructNoIn->add(stream_msgSenderConstructNoIn, e2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e2, msgConstructNoIn
            	         * token labels      : 
            	         * rule labels       : retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 483:50: -> ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2)
            	        	{
            	        	    // .//Emerson.g:483:52: ^( SEND_CONSTRUCT_NO_IN $msgConstructNoIn $e2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SEND_CONSTRUCT_NO_IN, (pANTLR3_UINT8)"SEND_CONSTRUCT_NO_IN"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop206;	/* break out of the loop */
            	    break;
                }
            }
            loop206: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgConstructNoInEx; /* Prevent compiler warnings */
    rulemsgConstructNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_177 != NULL) stream_177->free(stream_177);
        if (stream_msgSenderConstructNoIn != NULL) stream_msgSenderConstructNoIn->free(stream_msgSenderConstructNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(67, msgConstructNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end msgConstructNoIn */

/** 
 * $ANTLR start msgSenderConstructNoIn
 * .//Emerson.g:486:1: msgSenderConstructNoIn : ( ternaryExpressionNoIn -> ternaryExpressionNoIn ) ( ( LTERM )* '#' e2= ternaryExpressionNoIn -> ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2) )* ;
 */
static EmersonParser_msgSenderConstructNoIn_return
msgSenderConstructNoIn(pEmersonParser ctx)
{   
    EmersonParser_msgSenderConstructNoIn_return retval;
    ANTLR3_UINT32 msgSenderConstructNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM389;
    pANTLR3_COMMON_TOKEN    char_literal390;
    EmersonParser_ternaryExpressionNoIn_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_ternaryExpressionNoIn_return

    EmersonParser_ternaryExpressionNoIn_return ternaryExpressionNoIn388;
    #undef	RETURN_TYPE_ternaryExpressionNoIn388
    #define	RETURN_TYPE_ternaryExpressionNoIn388 EmersonParser_ternaryExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM389_tree;
    pANTLR3_BASE_TREE char_literal390_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_178;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ternaryExpressionNoIn;
    /* Initialize rule variables
     */
    msgSenderConstructNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(68)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM389       = NULL;
    char_literal390       = NULL;
    e2.tree = NULL;

    ternaryExpressionNoIn388.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM389_tree   = NULL;
    char_literal390_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_178   = NULL;
    #define CREATE_stream_178  if (stream_178 == NULL) {stream_178 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 178"); } 
    stream_ternaryExpressionNoIn   = NULL;
    #define CREATE_stream_ternaryExpressionNoIn  if (stream_ternaryExpressionNoIn == NULL) {stream_ternaryExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ternaryExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:487:9: ( ( ternaryExpressionNoIn -> ternaryExpressionNoIn ) ( ( LTERM )* '#' e2= ternaryExpressionNoIn -> ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2) )* )
        // .//Emerson.g:487:11: ( ternaryExpressionNoIn -> ternaryExpressionNoIn ) ( ( LTERM )* '#' e2= ternaryExpressionNoIn -> ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2) )*
        {
            // .//Emerson.g:487:11: ( ternaryExpressionNoIn -> ternaryExpressionNoIn )
            // .//Emerson.g:487:12: ternaryExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4362);
                ternaryExpressionNoIn388=ternaryExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSenderConstructNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpressionNoIn; stream_ternaryExpressionNoIn->add(stream_ternaryExpressionNoIn, ternaryExpressionNoIn388.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : ternaryExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 487:34: -> ternaryExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ternaryExpressionNoIn == NULL ? NULL : stream_ternaryExpressionNoIn->nextTree(stream_ternaryExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:488:11: ( ( LTERM )* '#' e2= ternaryExpressionNoIn -> ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2) )*

            for (;;)
            {
                int alt208=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA208_0 = LA(1);
                    if ( (LA208_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA208_1 = LA(2);
                            if ( (synpred236_Emerson(ctx)) ) 
                            {
                                alt208=1;
                            }

                        }
                    }
                    else if ( (LA208_0 == 178) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA208_3 = LA(2);
                            if ( (synpred236_Emerson(ctx)) ) 
                            {
                                alt208=1;
                            }

                        }
                    }

                }
                switch (alt208) 
                {
            	case 1:
            	    // .//Emerson.g:488:12: ( LTERM )* '#' e2= ternaryExpressionNoIn
            	    {

            	        // .//Emerson.g:488:12: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt207=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA207_0 = LA(1);
            	                if ( (LA207_0 == LTERM) ) 
            	                {
            	                    alt207=1;
            	                }

            	            }
            	            switch (alt207) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM389 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSenderConstructNoIn4380); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemsgSenderConstructNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM389, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop207;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop207: ; /* Jump out to here if this rule does not match */

            	        char_literal390 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_msgSenderConstructNoIn4383); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSenderConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, char_literal390, NULL); }

            	        FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_msgSenderConstructNoIn4387);
            	        e2=ternaryExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSenderConstructNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_ternaryExpressionNoIn; stream_ternaryExpressionNoIn->add(stream_ternaryExpressionNoIn, e2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : e2, msgSenderConstructNoIn
            	         * token labels      : 
            	         * rule labels       : retval, e2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 488:48: -> ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2)
            	        	{
            	        	    // .//Emerson.g:488:50: ^( SENDER_CONSTRUCT_NO_IN $msgSenderConstructNoIn $e2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SENDER_CONSTRUCT_NO_IN, (pANTLR3_UINT8)"SENDER_CONSTRUCT_NO_IN"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop208;	/* break out of the loop */
            	    break;
                }
            }
            loop208: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSenderConstructNoInEx; /* Prevent compiler warnings */
    rulemsgSenderConstructNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_178 != NULL) stream_178->free(stream_178);
        if (stream_ternaryExpressionNoIn != NULL) stream_ternaryExpressionNoIn->free(stream_ternaryExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(68, msgSenderConstructNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end msgSenderConstructNoIn */

/** 
 * $ANTLR start ternaryExpressionNoIn
 * .//Emerson.g:493:1: ternaryExpressionNoIn : ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2) )* ;
 */
static EmersonParser_ternaryExpressionNoIn_return
ternaryExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_ternaryExpressionNoIn_return retval;
    ANTLR3_UINT32 ternaryExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM392;
    pANTLR3_COMMON_TOKEN    char_literal393;
    pANTLR3_COMMON_TOKEN    LTERM394;
    pANTLR3_COMMON_TOKEN    LTERM395;
    pANTLR3_COMMON_TOKEN    char_literal396;
    pANTLR3_COMMON_TOKEN    LTERM397;
    EmersonParser_assignmentExpressionNoIn_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_assignmentExpressionNoIn_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_logicalORExpressionNoIn_return logicalORExpressionNoIn391;
    #undef	RETURN_TYPE_logicalORExpressionNoIn391
    #define	RETURN_TYPE_logicalORExpressionNoIn391 EmersonParser_logicalORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM392_tree;
    pANTLR3_BASE_TREE char_literal393_tree;
    pANTLR3_BASE_TREE LTERM394_tree;
    pANTLR3_BASE_TREE LTERM395_tree;
    pANTLR3_BASE_TREE char_literal396_tree;
    pANTLR3_BASE_TREE LTERM397_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_179;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpressionNoIn;
    /* Initialize rule variables
     */
    ternaryExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(69)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM392       = NULL;
    char_literal393       = NULL;
    LTERM394       = NULL;
    LTERM395       = NULL;
    char_literal396       = NULL;
    LTERM397       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpressionNoIn391.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM392_tree   = NULL;
    char_literal393_tree   = NULL;
    LTERM394_tree   = NULL;
    LTERM395_tree   = NULL;
    char_literal396_tree   = NULL;
    LTERM397_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_179   = NULL;
    #define CREATE_stream_179  if (stream_179 == NULL) {stream_179 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 179"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_logicalORExpressionNoIn   = NULL;
    #define CREATE_stream_logicalORExpressionNoIn  if (stream_logicalORExpressionNoIn == NULL) {stream_logicalORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:494:9: ( ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2) )* )
        // .//Emerson.g:494:11: ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2) )*
        {
            // .//Emerson.g:494:11: ( logicalORExpressionNoIn -> logicalORExpressionNoIn )
            // .//Emerson.g:494:12: logicalORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_ternaryExpressionNoIn4453);
                logicalORExpressionNoIn391=logicalORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleternaryExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpressionNoIn; stream_logicalORExpressionNoIn->add(stream_logicalORExpressionNoIn, logicalORExpressionNoIn391.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 494:36: -> logicalORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpressionNoIn == NULL ? NULL : stream_logicalORExpressionNoIn->nextTree(stream_logicalORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:494:64: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2) )*

            for (;;)
            {
                int alt213=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA213_0 = LA(1);
                    if ( (LA213_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA213_1 = LA(2);
                            if ( (synpred241_Emerson(ctx)) ) 
                            {
                                alt213=1;
                            }

                        }
                    }
                    else if ( (LA213_0 == 179) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA213_3 = LA(2);
                            if ( (synpred241_Emerson(ctx)) ) 
                            {
                                alt213=1;
                            }

                        }
                    }

                }
                switch (alt213) 
                {
            	case 1:
            	    // .//Emerson.g:494:65: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn
            	    {

            	        // .//Emerson.g:494:65: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt209=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA209_0 = LA(1);
            	                if ( (LA209_0 == LTERM) ) 
            	                {
            	                    alt209=1;
            	                }

            	            }
            	            switch (alt209) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM392 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpressionNoIn4461); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM392, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop209;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop209: ; /* Jump out to here if this rule does not match */

            	        char_literal393 = (pANTLR3_COMMON_TOKEN) MATCHT(179, &FOLLOW_179_in_ternaryExpressionNoIn4464); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_179; stream_179->add(stream_179, char_literal393, NULL); }


            	        // .//Emerson.g:494:76: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt210=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA210_0 = LA(1);
            	                if ( (LA210_0 == LTERM) ) 
            	                {
            	                    alt210=1;
            	                }

            	            }
            	            switch (alt210) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM394 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpressionNoIn4466); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM394, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop210;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop210: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4471);
            	        expr1=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr1.tree, NULL); }

            	        // .//Emerson.g:494:114: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt211=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA211_0 = LA(1);
            	                if ( (LA211_0 == LTERM) ) 
            	                {
            	                    alt211=1;
            	                }

            	            }
            	            switch (alt211) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM395 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpressionNoIn4473); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM395, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop211;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop211: ; /* Jump out to here if this rule does not match */

            	        char_literal396 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_ternaryExpressionNoIn4476); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal396, NULL); }


            	        // .//Emerson.g:494:125: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt212=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA212_0 = LA(1);
            	                if ( (LA212_0 == LTERM) ) 
            	                {
            	                    alt212=1;
            	                }

            	            }
            	            switch (alt212) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM397 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ternaryExpressionNoIn4478); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleternaryExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM397, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop212;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop212: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_ternaryExpressionNoIn4483);
            	        expr2=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleternaryExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : expr2, ternaryExpressionNoIn, expr1
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 494:163: -> ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:494:166: ^( TERNARYOP_NO_IN $ternaryExpressionNoIn $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP_NO_IN, (pANTLR3_UINT8)"TERNARYOP_NO_IN"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop213;	/* break out of the loop */
            	    break;
                }
            }
            loop213: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleternaryExpressionNoInEx; /* Prevent compiler warnings */
    ruleternaryExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_179 != NULL) stream_179->free(stream_179);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_logicalORExpressionNoIn != NULL) stream_logicalORExpressionNoIn->free(stream_logicalORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(69, ternaryExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end ternaryExpressionNoIn */

/** 
 * $ANTLR start logicalORExpression
 * .//Emerson.g:498:1: logicalORExpression : ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* ;
 */
static EmersonParser_logicalORExpression_return
logicalORExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpression_return retval;
    ANTLR3_UINT32 logicalORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM399;
    pANTLR3_COMMON_TOKEN    string_literal400;
    pANTLR3_COMMON_TOKEN    LTERM401;
    EmersonParser_logicalANDExpression_return logicalANDExpression398;
    #undef	RETURN_TYPE_logicalANDExpression398
    #define	RETURN_TYPE_logicalANDExpression398 EmersonParser_logicalANDExpression_return

    EmersonParser_logicalANDExpression_return logicalANDExpression402;
    #undef	RETURN_TYPE_logicalANDExpression402
    #define	RETURN_TYPE_logicalANDExpression402 EmersonParser_logicalANDExpression_return

    pANTLR3_BASE_TREE LTERM399_tree;
    pANTLR3_BASE_TREE string_literal400_tree;
    pANTLR3_BASE_TREE LTERM401_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_180;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpression;
    /* Initialize rule variables
     */
    logicalORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(70)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM399       = NULL;
    string_literal400       = NULL;
    LTERM401       = NULL;
    logicalANDExpression398.tree = NULL;

    logicalANDExpression402.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM399_tree   = NULL;
    string_literal400_tree   = NULL;
    LTERM401_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_180   = NULL;
    #define CREATE_stream_180  if (stream_180 == NULL) {stream_180 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 180"); } 
    stream_logicalANDExpression   = NULL;
    #define CREATE_stream_logicalANDExpression  if (stream_logicalANDExpression == NULL) {stream_logicalANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:499:2: ( ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* )
        // .//Emerson.g:499:4: ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
        {
            // .//Emerson.g:499:4: ( logicalANDExpression -> logicalANDExpression )
            // .//Emerson.g:499:5: logicalANDExpression
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression4536);
                logicalANDExpression398=logicalANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression398.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 499:26: -> logicalANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:499:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*

            for (;;)
            {
                int alt216=2;
                alt216 = cdfa216.predict(ctx, RECOGNIZER, ISTREAM, &cdfa216);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt216) 
                {
            	case 1:
            	    // .//Emerson.g:499:51: ( LTERM )* '||' ( LTERM )* logicalANDExpression
            	    {

            	        // .//Emerson.g:499:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt214=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA214_0 = LA(1);
            	                if ( (LA214_0 == LTERM) ) 
            	                {
            	                    alt214=1;
            	                }

            	            }
            	            switch (alt214) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM399 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression4543); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM399, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop214;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop214: ; /* Jump out to here if this rule does not match */

            	        string_literal400 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_logicalORExpression4546); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, string_literal400, NULL); }


            	        // .//Emerson.g:499:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt215=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA215_0 = LA(1);
            	                if ( (LA215_0 == LTERM) ) 
            	                {
            	                    alt215=1;
            	                }

            	            }
            	            switch (alt215) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM401 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression4548); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM401, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop215;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop215: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression4551);
            	        logicalANDExpression402=logicalANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression402.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpression, logicalORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 499:91: -> ^( OR $logicalORExpression logicalANDExpression )
            	        	{
            	        	    // .//Emerson.g:499:94: ^( OR $logicalORExpression logicalANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop216;	/* break out of the loop */
            	    break;
                }
            }
            loop216: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionEx; /* Prevent compiler warnings */
    rulelogicalORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_180 != NULL) stream_180->free(stream_180);
        if (stream_logicalANDExpression != NULL) stream_logicalANDExpression->free(stream_logicalANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(70, logicalORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpression */

/** 
 * $ANTLR start logicalANDExpression
 * .//Emerson.g:502:1: logicalANDExpression : ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* ;
 */
static EmersonParser_logicalANDExpression_return
logicalANDExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpression_return retval;
    ANTLR3_UINT32 logicalANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM404;
    pANTLR3_COMMON_TOKEN    string_literal405;
    pANTLR3_COMMON_TOKEN    LTERM406;
    EmersonParser_bitwiseORExpression_return bitwiseORExpression403;
    #undef	RETURN_TYPE_bitwiseORExpression403
    #define	RETURN_TYPE_bitwiseORExpression403 EmersonParser_bitwiseORExpression_return

    EmersonParser_bitwiseORExpression_return bitwiseORExpression407;
    #undef	RETURN_TYPE_bitwiseORExpression407
    #define	RETURN_TYPE_bitwiseORExpression407 EmersonParser_bitwiseORExpression_return

    pANTLR3_BASE_TREE LTERM404_tree;
    pANTLR3_BASE_TREE string_literal405_tree;
    pANTLR3_BASE_TREE LTERM406_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_181;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpression;
    /* Initialize rule variables
     */
    logicalANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(71)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM404       = NULL;
    string_literal405       = NULL;
    LTERM406       = NULL;
    bitwiseORExpression403.tree = NULL;

    bitwiseORExpression407.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM404_tree   = NULL;
    string_literal405_tree   = NULL;
    LTERM406_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_181   = NULL;
    #define CREATE_stream_181  if (stream_181 == NULL) {stream_181 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 181"); } 
    stream_bitwiseORExpression   = NULL;
    #define CREATE_stream_bitwiseORExpression  if (stream_bitwiseORExpression == NULL) {stream_bitwiseORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:503:2: ( ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* )
        // .//Emerson.g:503:4: ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
        {
            // .//Emerson.g:503:4: ( bitwiseORExpression -> bitwiseORExpression )
            // .//Emerson.g:503:5: bitwiseORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression4578);
                bitwiseORExpression403=bitwiseORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression403.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 503:25: -> bitwiseORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:503:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*

            for (;;)
            {
                int alt219=2;
                alt219 = cdfa219.predict(ctx, RECOGNIZER, ISTREAM, &cdfa219);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt219) 
                {
            	case 1:
            	    // .//Emerson.g:503:49: ( LTERM )* '&&' ( LTERM )* bitwiseORExpression
            	    {

            	        // .//Emerson.g:503:49: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt217=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA217_0 = LA(1);
            	                if ( (LA217_0 == LTERM) ) 
            	                {
            	                    alt217=1;
            	                }

            	            }
            	            switch (alt217) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM404 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression4585); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM404, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop217;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop217: ; /* Jump out to here if this rule does not match */

            	        string_literal405 = (pANTLR3_COMMON_TOKEN) MATCHT(181, &FOLLOW_181_in_logicalANDExpression4588); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_181; stream_181->add(stream_181, string_literal405, NULL); }


            	        // .//Emerson.g:503:61: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt218=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA218_0 = LA(1);
            	                if ( (LA218_0 == LTERM) ) 
            	                {
            	                    alt218=1;
            	                }

            	            }
            	            switch (alt218) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM406 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression4590); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM406, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop218;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop218: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression4593);
            	        bitwiseORExpression407=bitwiseORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression407.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpression, bitwiseORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 503:89: -> ^( AND $logicalANDExpression bitwiseORExpression )
            	        	{
            	        	    // .//Emerson.g:503:92: ^( AND $logicalANDExpression bitwiseORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop219;	/* break out of the loop */
            	    break;
                }
            }
            loop219: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_181 != NULL) stream_181->free(stream_181);
        if (stream_bitwiseORExpression != NULL) stream_bitwiseORExpression->free(stream_bitwiseORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(71, logicalANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpression */

/** 
 * $ANTLR start logicalORExpressionNoIn
 * .//Emerson.g:506:1: logicalORExpressionNoIn : ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* ;
 */
static EmersonParser_logicalORExpressionNoIn_return
logicalORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM409;
    pANTLR3_COMMON_TOKEN    string_literal410;
    pANTLR3_COMMON_TOKEN    LTERM411;
    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn408;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn408
    #define	RETURN_TYPE_logicalANDExpressionNoIn408 EmersonParser_logicalANDExpressionNoIn_return

    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn412;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn412
    #define	RETURN_TYPE_logicalANDExpressionNoIn412 EmersonParser_logicalANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM409_tree;
    pANTLR3_BASE_TREE string_literal410_tree;
    pANTLR3_BASE_TREE LTERM411_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_180;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpressionNoIn;
    /* Initialize rule variables
     */
    logicalORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(72)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM409       = NULL;
    string_literal410       = NULL;
    LTERM411       = NULL;
    logicalANDExpressionNoIn408.tree = NULL;

    logicalANDExpressionNoIn412.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM409_tree   = NULL;
    string_literal410_tree   = NULL;
    LTERM411_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_180   = NULL;
    #define CREATE_stream_180  if (stream_180 == NULL) {stream_180 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 180"); } 
    stream_logicalANDExpressionNoIn   = NULL;
    #define CREATE_stream_logicalANDExpressionNoIn  if (stream_logicalANDExpressionNoIn == NULL) {stream_logicalANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:507:2: ( ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* )
        // .//Emerson.g:507:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
        {
            // .//Emerson.g:507:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn )
            // .//Emerson.g:507:5: logicalANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4621);
                logicalANDExpressionNoIn408=logicalANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn408.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 507:30: -> logicalANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:507:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*

            for (;;)
            {
                int alt222=2;
                alt222 = cdfa222.predict(ctx, RECOGNIZER, ISTREAM, &cdfa222);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt222) 
                {
            	case 1:
            	    // .//Emerson.g:507:59: ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn
            	    {

            	        // .//Emerson.g:507:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt220=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA220_0 = LA(1);
            	                if ( (LA220_0 == LTERM) ) 
            	                {
            	                    alt220=1;
            	                }

            	            }
            	            switch (alt220) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM409 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn4628); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM409, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop220;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop220: ; /* Jump out to here if this rule does not match */

            	        string_literal410 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_logicalORExpressionNoIn4631); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, string_literal410, NULL); }


            	        // .//Emerson.g:507:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt221=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA221_0 = LA(1);
            	                if ( (LA221_0 == LTERM) ) 
            	                {
            	                    alt221=1;
            	                }

            	            }
            	            switch (alt221) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM411 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn4633); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM411, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop221;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop221: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn4636);
            	        logicalANDExpressionNoIn412=logicalANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn412.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpressionNoIn, logicalORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 507:103: -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:507:106: ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop222;	/* break out of the loop */
            	    break;
                }
            }
            loop222: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_180 != NULL) stream_180->free(stream_180);
        if (stream_logicalANDExpressionNoIn != NULL) stream_logicalANDExpressionNoIn->free(stream_logicalANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(72, logicalORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpressionNoIn
 * .//Emerson.g:511:1: logicalANDExpressionNoIn : ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* ;
 */
static EmersonParser_logicalANDExpressionNoIn_return
logicalANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM414;
    pANTLR3_COMMON_TOKEN    string_literal415;
    pANTLR3_COMMON_TOKEN    LTERM416;
    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn413;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn413
    #define	RETURN_TYPE_bitwiseORExpressionNoIn413 EmersonParser_bitwiseORExpressionNoIn_return

    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn417;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn417
    #define	RETURN_TYPE_bitwiseORExpressionNoIn417 EmersonParser_bitwiseORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM414_tree;
    pANTLR3_BASE_TREE string_literal415_tree;
    pANTLR3_BASE_TREE LTERM416_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_181;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpressionNoIn;
    /* Initialize rule variables
     */
    logicalANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(73)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM414       = NULL;
    string_literal415       = NULL;
    LTERM416       = NULL;
    bitwiseORExpressionNoIn413.tree = NULL;

    bitwiseORExpressionNoIn417.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM414_tree   = NULL;
    string_literal415_tree   = NULL;
    LTERM416_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_181   = NULL;
    #define CREATE_stream_181  if (stream_181 == NULL) {stream_181 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 181"); } 
    stream_bitwiseORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseORExpressionNoIn  if (stream_bitwiseORExpressionNoIn == NULL) {stream_bitwiseORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:512:2: ( ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* )
        // .//Emerson.g:512:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
        {
            // .//Emerson.g:512:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn )
            // .//Emerson.g:512:5: bitwiseORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4665);
                bitwiseORExpressionNoIn413=bitwiseORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn413.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 512:29: -> bitwiseORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:512:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*

            for (;;)
            {
                int alt225=2;
                alt225 = cdfa225.predict(ctx, RECOGNIZER, ISTREAM, &cdfa225);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt225) 
                {
            	case 1:
            	    // .//Emerson.g:512:58: ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn
            	    {

            	        // .//Emerson.g:512:58: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt223=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA223_0 = LA(1);
            	                if ( (LA223_0 == LTERM) ) 
            	                {
            	                    alt223=1;
            	                }

            	            }
            	            switch (alt223) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM414 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn4673); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM414, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop223;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop223: ; /* Jump out to here if this rule does not match */

            	        string_literal415 = (pANTLR3_COMMON_TOKEN) MATCHT(181, &FOLLOW_181_in_logicalANDExpressionNoIn4676); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_181; stream_181->add(stream_181, string_literal415, NULL); }


            	        // .//Emerson.g:512:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt224=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA224_0 = LA(1);
            	                if ( (LA224_0 == LTERM) ) 
            	                {
            	                    alt224=1;
            	                }

            	            }
            	            switch (alt224) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM416 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn4678); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM416, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop224;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop224: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn4681);
            	        bitwiseORExpressionNoIn417=bitwiseORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn417.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpressionNoIn, logicalANDExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 512:101: -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:512:104: ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop225;	/* break out of the loop */
            	    break;
                }
            }
            loop225: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_181 != NULL) stream_181->free(stream_181);
        if (stream_bitwiseORExpressionNoIn != NULL) stream_bitwiseORExpressionNoIn->free(stream_bitwiseORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(73, logicalANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpressionNoIn */

/** 
 * $ANTLR start bitwiseORExpression
 * .//Emerson.g:515:1: bitwiseORExpression : ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* ;
 */
static EmersonParser_bitwiseORExpression_return
bitwiseORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpression_return retval;
    ANTLR3_UINT32 bitwiseORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM419;
    pANTLR3_COMMON_TOKEN    char_literal420;
    pANTLR3_COMMON_TOKEN    LTERM421;
    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression418;
    #undef	RETURN_TYPE_bitwiseXORExpression418
    #define	RETURN_TYPE_bitwiseXORExpression418 EmersonParser_bitwiseXORExpression_return

    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression422;
    #undef	RETURN_TYPE_bitwiseXORExpression422
    #define	RETURN_TYPE_bitwiseXORExpression422 EmersonParser_bitwiseXORExpression_return

    pANTLR3_BASE_TREE LTERM419_tree;
    pANTLR3_BASE_TREE char_literal420_tree;
    pANTLR3_BASE_TREE LTERM421_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpression;
    /* Initialize rule variables
     */
    bitwiseORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(74)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM419       = NULL;
    char_literal420       = NULL;
    LTERM421       = NULL;
    bitwiseXORExpression418.tree = NULL;

    bitwiseXORExpression422.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM419_tree   = NULL;
    char_literal420_tree   = NULL;
    LTERM421_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_bitwiseXORExpression   = NULL;
    #define CREATE_stream_bitwiseXORExpression  if (stream_bitwiseXORExpression == NULL) {stream_bitwiseXORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:516:2: ( ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* )
        // .//Emerson.g:516:4: ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
        {
            // .//Emerson.g:516:4: ( bitwiseXORExpression -> bitwiseXORExpression )
            // .//Emerson.g:516:5: bitwiseXORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4708);
                bitwiseXORExpression418=bitwiseXORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression418.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 516:26: -> bitwiseXORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:516:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*

            for (;;)
            {
                int alt228=2;
                alt228 = cdfa228.predict(ctx, RECOGNIZER, ISTREAM, &cdfa228);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt228) 
                {
            	case 1:
            	    // .//Emerson.g:516:52: ( LTERM )* '|' ( LTERM )* bitwiseXORExpression
            	    {

            	        // .//Emerson.g:516:52: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt226=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA226_0 = LA(1);
            	                if ( (LA226_0 == LTERM) ) 
            	                {
            	                    alt226=1;
            	                }

            	            }
            	            switch (alt226) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM419 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression4716); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM419, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop226;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop226: ; /* Jump out to here if this rule does not match */

            	        char_literal420 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_bitwiseORExpression4719); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, char_literal420, NULL); }


            	        // .//Emerson.g:516:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt227=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA227_0 = LA(1);
            	                if ( (LA227_0 == LTERM) ) 
            	                {
            	                    alt227=1;
            	                }

            	            }
            	            switch (alt227) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM421 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression4721); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM421, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop227;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop227: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression4724);
            	        bitwiseXORExpression422=bitwiseXORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression422.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseXORExpression, bitwiseORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 516:91: -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	{
            	        	    // .//Emerson.g:516:94: ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop228;	/* break out of the loop */
            	    break;
                }
            }
            loop228: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_bitwiseXORExpression != NULL) stream_bitwiseXORExpression->free(stream_bitwiseXORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(74, bitwiseORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpression */

/** 
 * $ANTLR start bitwiseORExpressionNoIn
 * .//Emerson.g:519:1: bitwiseORExpressionNoIn : ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseORExpressionNoIn_return
bitwiseORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM424;
    pANTLR3_COMMON_TOKEN    char_literal425;
    pANTLR3_COMMON_TOKEN    LTERM426;
    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn423;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn423
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn423 EmersonParser_bitwiseXORExpressionNoIn_return

    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn427;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn427
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn427 EmersonParser_bitwiseXORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM424_tree;
    pANTLR3_BASE_TREE char_literal425_tree;
    pANTLR3_BASE_TREE LTERM426_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(75)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM424       = NULL;
    char_literal425       = NULL;
    LTERM426       = NULL;
    bitwiseXORExpressionNoIn423.tree = NULL;

    bitwiseXORExpressionNoIn427.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM424_tree   = NULL;
    char_literal425_tree   = NULL;
    LTERM426_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 
    stream_bitwiseXORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseXORExpressionNoIn  if (stream_bitwiseXORExpressionNoIn == NULL) {stream_bitwiseXORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:520:2: ( ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* )
        // .//Emerson.g:520:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
        {
            // .//Emerson.g:520:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn )
            // .//Emerson.g:520:5: bitwiseXORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4751);
                bitwiseXORExpressionNoIn423=bitwiseXORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn423.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 520:30: -> bitwiseXORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:520:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*

            for (;;)
            {
                int alt231=2;
                alt231 = cdfa231.predict(ctx, RECOGNIZER, ISTREAM, &cdfa231);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt231) 
                {
            	case 1:
            	    // .//Emerson.g:520:60: ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn
            	    {

            	        // .//Emerson.g:520:60: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt229=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA229_0 = LA(1);
            	                if ( (LA229_0 == LTERM) ) 
            	                {
            	                    alt229=1;
            	                }

            	            }
            	            switch (alt229) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM424 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn4759); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM424, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop229;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop229: ; /* Jump out to here if this rule does not match */

            	        char_literal425 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_bitwiseORExpressionNoIn4762); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, char_literal425, NULL); }


            	        // .//Emerson.g:520:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt230=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA230_0 = LA(1);
            	                if ( (LA230_0 == LTERM) ) 
            	                {
            	                    alt230=1;
            	                }

            	            }
            	            switch (alt230) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM426 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn4764); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM426, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop230;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop230: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn4767);
            	        bitwiseXORExpressionNoIn427=bitwiseXORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn427.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpressionNoIn, bitwiseXORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 520:103: -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:520:106: ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop231;	/* break out of the loop */
            	    break;
                }
            }
            loop231: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_182 != NULL) stream_182->free(stream_182);
        if (stream_bitwiseXORExpressionNoIn != NULL) stream_bitwiseXORExpressionNoIn->free(stream_bitwiseXORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(75, bitwiseORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpressionNoIn */

/** 
 * $ANTLR start bitwiseXORExpression
 * .//Emerson.g:523:1: bitwiseXORExpression : ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* ;
 */
static EmersonParser_bitwiseXORExpression_return
bitwiseXORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpression_return retval;
    ANTLR3_UINT32 bitwiseXORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM429;
    pANTLR3_COMMON_TOKEN    char_literal430;
    pANTLR3_COMMON_TOKEN    LTERM431;
    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression428;
    #undef	RETURN_TYPE_bitwiseANDExpression428
    #define	RETURN_TYPE_bitwiseANDExpression428 EmersonParser_bitwiseANDExpression_return

    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression432;
    #undef	RETURN_TYPE_bitwiseANDExpression432
    #define	RETURN_TYPE_bitwiseANDExpression432 EmersonParser_bitwiseANDExpression_return

    pANTLR3_BASE_TREE LTERM429_tree;
    pANTLR3_BASE_TREE char_literal430_tree;
    pANTLR3_BASE_TREE LTERM431_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpression;
    /* Initialize rule variables
     */
    bitwiseXORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(76)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM429       = NULL;
    char_literal430       = NULL;
    LTERM431       = NULL;
    bitwiseANDExpression428.tree = NULL;

    bitwiseANDExpression432.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM429_tree   = NULL;
    char_literal430_tree   = NULL;
    LTERM431_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_bitwiseANDExpression   = NULL;
    #define CREATE_stream_bitwiseANDExpression  if (stream_bitwiseANDExpression == NULL) {stream_bitwiseANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:524:1: ( ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* )
        // .//Emerson.g:524:3: ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
        {
            // .//Emerson.g:524:3: ( bitwiseANDExpression -> bitwiseANDExpression )
            // .//Emerson.g:524:4: bitwiseANDExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4793);
                bitwiseANDExpression428=bitwiseANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression428.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 524:25: -> bitwiseANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:524:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*

            for (;;)
            {
                int alt234=2;
                alt234 = cdfa234.predict(ctx, RECOGNIZER, ISTREAM, &cdfa234);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt234) 
                {
            	case 1:
            	    // .//Emerson.g:524:51: ( LTERM )* '^' ( LTERM )* bitwiseANDExpression
            	    {

            	        // .//Emerson.g:524:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt232=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA232_0 = LA(1);
            	                if ( (LA232_0 == LTERM) ) 
            	                {
            	                    alt232=1;
            	                }

            	            }
            	            switch (alt232) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM429 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression4801); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM429, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop232;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop232: ; /* Jump out to here if this rule does not match */

            	        char_literal430 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_bitwiseXORExpression4804); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, char_literal430, NULL); }


            	        // .//Emerson.g:524:62: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt233=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA233_0 = LA(1);
            	                if ( (LA233_0 == LTERM) ) 
            	                {
            	                    alt233=1;
            	                }

            	            }
            	            switch (alt233) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM431 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression4806); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM431, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop233;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop233: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression4809);
            	        bitwiseANDExpression432=bitwiseANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression432.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseXORExpression, bitwiseANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 524:90: -> ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	{
            	        	    // .//Emerson.g:524:93: ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop234;	/* break out of the loop */
            	    break;
                }
            }
            loop234: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_bitwiseANDExpression != NULL) stream_bitwiseANDExpression->free(stream_bitwiseANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(76, bitwiseXORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpression */

/** 
 * $ANTLR start bitwiseXORExpressionNoIn
 * .//Emerson.g:527:1: bitwiseXORExpressionNoIn : ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseXORExpressionNoIn_return
bitwiseXORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseXORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM434;
    pANTLR3_COMMON_TOKEN    char_literal435;
    pANTLR3_COMMON_TOKEN    LTERM436;
    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn433;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn433
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn433 EmersonParser_bitwiseANDExpressionNoIn_return

    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn437;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn437
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn437 EmersonParser_bitwiseANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM434_tree;
    pANTLR3_BASE_TREE char_literal435_tree;
    pANTLR3_BASE_TREE LTERM436_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseXORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(77)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM434       = NULL;
    char_literal435       = NULL;
    LTERM436       = NULL;
    bitwiseANDExpressionNoIn433.tree = NULL;

    bitwiseANDExpressionNoIn437.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM434_tree   = NULL;
    char_literal435_tree   = NULL;
    LTERM436_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_bitwiseANDExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseANDExpressionNoIn  if (stream_bitwiseANDExpressionNoIn == NULL) {stream_bitwiseANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:528:2: ( ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* )
        // .//Emerson.g:528:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
        {
            // .//Emerson.g:528:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn )
            // .//Emerson.g:528:5: bitwiseANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4836);
                bitwiseANDExpressionNoIn433=bitwiseANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn433.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 528:30: -> bitwiseANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:528:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*

            for (;;)
            {
                int alt237=2;
                alt237 = cdfa237.predict(ctx, RECOGNIZER, ISTREAM, &cdfa237);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt237) 
                {
            	case 1:
            	    // .//Emerson.g:528:59: ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn
            	    {

            	        // .//Emerson.g:528:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt235=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA235_0 = LA(1);
            	                if ( (LA235_0 == LTERM) ) 
            	                {
            	                    alt235=1;
            	                }

            	            }
            	            switch (alt235) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM434 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4843); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM434, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop235;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop235: ; /* Jump out to here if this rule does not match */

            	        char_literal435 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_bitwiseXORExpressionNoIn4846); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, char_literal435, NULL); }


            	        // .//Emerson.g:528:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt236=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA236_0 = LA(1);
            	                if ( (LA236_0 == LTERM) ) 
            	                {
            	                    alt236=1;
            	                }

            	            }
            	            switch (alt236) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM436 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn4848); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM436, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop236;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop236: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn4851);
            	        bitwiseANDExpressionNoIn437=bitwiseANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn437.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpressionNoIn, bitwiseXORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 528:102: -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:528:105: ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop237;	/* break out of the loop */
            	    break;
                }
            }
            loop237: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_bitwiseANDExpressionNoIn != NULL) stream_bitwiseANDExpressionNoIn->free(stream_bitwiseANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(77, bitwiseXORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpressionNoIn */

/** 
 * $ANTLR start bitwiseANDExpression
 * .//Emerson.g:531:1: bitwiseANDExpression : ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* ;
 */
static EmersonParser_bitwiseANDExpression_return
bitwiseANDExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpression_return retval;
    ANTLR3_UINT32 bitwiseANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM439;
    pANTLR3_COMMON_TOKEN    char_literal440;
    pANTLR3_COMMON_TOKEN    LTERM441;
    EmersonParser_equalityExpression_return equalityExpression438;
    #undef	RETURN_TYPE_equalityExpression438
    #define	RETURN_TYPE_equalityExpression438 EmersonParser_equalityExpression_return

    EmersonParser_equalityExpression_return equalityExpression442;
    #undef	RETURN_TYPE_equalityExpression442
    #define	RETURN_TYPE_equalityExpression442 EmersonParser_equalityExpression_return

    pANTLR3_BASE_TREE LTERM439_tree;
    pANTLR3_BASE_TREE char_literal440_tree;
    pANTLR3_BASE_TREE LTERM441_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpression;
    /* Initialize rule variables
     */
    bitwiseANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(78)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM439       = NULL;
    char_literal440       = NULL;
    LTERM441       = NULL;
    equalityExpression438.tree = NULL;

    equalityExpression442.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM439_tree   = NULL;
    char_literal440_tree   = NULL;
    LTERM441_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_equalityExpression   = NULL;
    #define CREATE_stream_equalityExpression  if (stream_equalityExpression == NULL) {stream_equalityExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:532:2: ( ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* )
        // .//Emerson.g:532:4: ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
        {
            // .//Emerson.g:532:4: ( equalityExpression -> equalityExpression )
            // .//Emerson.g:532:5: equalityExpression
            {
                FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression4879);
                equalityExpression438=equalityExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression438.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 532:24: -> equalityExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:532:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*

            for (;;)
            {
                int alt240=2;
                alt240 = cdfa240.predict(ctx, RECOGNIZER, ISTREAM, &cdfa240);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt240) 
                {
            	case 1:
            	    // .//Emerson.g:532:48: ( LTERM )* '&' ( LTERM )* equalityExpression
            	    {

            	        // .//Emerson.g:532:48: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt238=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA238_0 = LA(1);
            	                if ( (LA238_0 == LTERM) ) 
            	                {
            	                    alt238=1;
            	                }

            	            }
            	            switch (alt238) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM439 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression4887); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM439, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop238;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop238: ; /* Jump out to here if this rule does not match */

            	        char_literal440 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_bitwiseANDExpression4890); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, char_literal440, NULL); }


            	        // .//Emerson.g:532:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt239=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA239_0 = LA(1);
            	                if ( (LA239_0 == LTERM) ) 
            	                {
            	                    alt239=1;
            	                }

            	            }
            	            switch (alt239) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM441 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression4892); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM441, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop239;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop239: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression4895);
            	        equalityExpression442=equalityExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression442.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityExpression, bitwiseANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 532:85: -> ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	{
            	        	    // .//Emerson.g:532:88: ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop240;	/* break out of the loop */
            	    break;
                }
            }
            loop240: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_equalityExpression != NULL) stream_equalityExpression->free(stream_equalityExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(78, bitwiseANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpression */

/** 
 * $ANTLR start bitwiseANDExpressionNoIn
 * .//Emerson.g:535:1: bitwiseANDExpressionNoIn : ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseANDExpressionNoIn_return
bitwiseANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM444;
    pANTLR3_COMMON_TOKEN    char_literal445;
    pANTLR3_COMMON_TOKEN    LTERM446;
    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn443;
    #undef	RETURN_TYPE_equalityExpressionNoIn443
    #define	RETURN_TYPE_equalityExpressionNoIn443 EmersonParser_equalityExpressionNoIn_return

    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn447;
    #undef	RETURN_TYPE_equalityExpressionNoIn447
    #define	RETURN_TYPE_equalityExpressionNoIn447 EmersonParser_equalityExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM444_tree;
    pANTLR3_BASE_TREE char_literal445_tree;
    pANTLR3_BASE_TREE LTERM446_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(79)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM444       = NULL;
    char_literal445       = NULL;
    LTERM446       = NULL;
    equalityExpressionNoIn443.tree = NULL;

    equalityExpressionNoIn447.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM444_tree   = NULL;
    char_literal445_tree   = NULL;
    LTERM446_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_equalityExpressionNoIn   = NULL;
    #define CREATE_stream_equalityExpressionNoIn  if (stream_equalityExpressionNoIn == NULL) {stream_equalityExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:536:2: ( ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* )
        // .//Emerson.g:536:4: ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
        {
            // .//Emerson.g:536:4: ( equalityExpressionNoIn -> equalityExpressionNoIn )
            // .//Emerson.g:536:5: equalityExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4923);
                equalityExpressionNoIn443=equalityExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn443.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 536:28: -> equalityExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:536:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*

            for (;;)
            {
                int alt243=2;
                alt243 = cdfa243.predict(ctx, RECOGNIZER, ISTREAM, &cdfa243);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt243) 
                {
            	case 1:
            	    // .//Emerson.g:536:56: ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn
            	    {

            	        // .//Emerson.g:536:56: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt241=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA241_0 = LA(1);
            	                if ( (LA241_0 == LTERM) ) 
            	                {
            	                    alt241=1;
            	                }

            	            }
            	            switch (alt241) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM444 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4931); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM444, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop241;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop241: ; /* Jump out to here if this rule does not match */

            	        char_literal445 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_bitwiseANDExpressionNoIn4934); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, char_literal445, NULL); }


            	        // .//Emerson.g:536:67: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt242=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA242_0 = LA(1);
            	                if ( (LA242_0 == LTERM) ) 
            	                {
            	                    alt242=1;
            	                }

            	            }
            	            switch (alt242) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM446 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn4936); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM446, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop242;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop242: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn4939);
            	        equalityExpressionNoIn447=equalityExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn447.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpressionNoIn, equalityExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 536:97: -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:536:100: ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop243;	/* break out of the loop */
            	    break;
                }
            }
            loop243: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_equalityExpressionNoIn != NULL) stream_equalityExpressionNoIn->free(stream_equalityExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(79, bitwiseANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpressionNoIn */

/** 
 * $ANTLR start equalityExpression
 * .//Emerson.g:539:1: equalityExpression : ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* ;
 */
static EmersonParser_equalityExpression_return
equalityExpression(pEmersonParser ctx)
{   
    EmersonParser_equalityExpression_return retval;
    ANTLR3_UINT32 equalityExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM449;
    pANTLR3_COMMON_TOKEN    LTERM451;
    EmersonParser_relationalExpression_return relationalExpression448;
    #undef	RETURN_TYPE_relationalExpression448
    #define	RETURN_TYPE_relationalExpression448 EmersonParser_relationalExpression_return

    EmersonParser_equalityOps_return equalityOps450;
    #undef	RETURN_TYPE_equalityOps450
    #define	RETURN_TYPE_equalityOps450 EmersonParser_equalityOps_return

    EmersonParser_relationalExpression_return relationalExpression452;
    #undef	RETURN_TYPE_relationalExpression452
    #define	RETURN_TYPE_relationalExpression452 EmersonParser_relationalExpression_return

    pANTLR3_BASE_TREE LTERM449_tree;
    pANTLR3_BASE_TREE LTERM451_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    /* Initialize rule variables
     */
    equalityExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(80)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM449       = NULL;
    LTERM451       = NULL;
    relationalExpression448.tree = NULL;

    equalityOps450.tree = NULL;

    relationalExpression452.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM449_tree   = NULL;
    LTERM451_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalExpression   = NULL;
    #define CREATE_stream_relationalExpression  if (stream_relationalExpression == NULL) {stream_relationalExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpression"); }
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:540:2: ( ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* )
        // .//Emerson.g:540:4: ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
        {
            // .//Emerson.g:540:4: ( relationalExpression -> relationalExpression )
            // .//Emerson.g:540:5: relationalExpression
            {
                FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression4966);
                relationalExpression448=relationalExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression448.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 540:26: -> relationalExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:540:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*

            for (;;)
            {
                int alt246=2;
                alt246 = cdfa246.predict(ctx, RECOGNIZER, ISTREAM, &cdfa246);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt246) 
                {
            	case 1:
            	    // .//Emerson.g:540:51: ( LTERM )* equalityOps ( LTERM )* relationalExpression
            	    {

            	        // .//Emerson.g:540:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt244=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA244_0 = LA(1);
            	                if ( (LA244_0 == LTERM) ) 
            	                {
            	                    alt244=1;
            	                }

            	            }
            	            switch (alt244) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM449 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression4973); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM449, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop244;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop244: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpression4976);
            	        equalityOps450=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps450.tree, NULL); }

            	        // .//Emerson.g:540:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt245=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA245_0 = LA(1);
            	                if ( (LA245_0 == LTERM) ) 
            	                {
            	                    alt245=1;
            	                }

            	            }
            	            switch (alt245) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM451 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression4978); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM451, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop245;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop245: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression4981);
            	        relationalExpression452=relationalExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression452.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityOps, relationalExpression, equalityExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 540:98: -> ^( equalityOps $equalityExpression relationalExpression )
            	        	{
            	        	    // .//Emerson.g:540:101: ^( equalityOps $equalityExpression relationalExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop246;	/* break out of the loop */
            	    break;
                }
            }
            loop246: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionEx; /* Prevent compiler warnings */
    ruleequalityExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalExpression != NULL) stream_relationalExpression->free(stream_relationalExpression);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(80, equalityExpression_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpression */

/** 
 * $ANTLR start equalityOps
 * .//Emerson.g:544:1: equalityOps : ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) );
 */
static EmersonParser_equalityOps_return
equalityOps(pEmersonParser ctx)
{   
    EmersonParser_equalityOps_return retval;
    ANTLR3_UINT32 equalityOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal453;
    pANTLR3_COMMON_TOKEN    string_literal454;
    pANTLR3_COMMON_TOKEN    string_literal455;
    pANTLR3_COMMON_TOKEN    string_literal456;

    pANTLR3_BASE_TREE string_literal453_tree;
    pANTLR3_BASE_TREE string_literal454_tree;
    pANTLR3_BASE_TREE string_literal455_tree;
    pANTLR3_BASE_TREE string_literal456_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_185;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_186;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_188;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_187;

    /* Initialize rule variables
     */
    equalityOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(81)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal453       = NULL;
    string_literal454       = NULL;
    string_literal455       = NULL;
    string_literal456       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal453_tree   = NULL;
    string_literal454_tree   = NULL;
    string_literal455_tree   = NULL;
    string_literal456_tree   = NULL;

    stream_185   = NULL;
    #define CREATE_stream_185  if (stream_185 == NULL) {stream_185 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 185"); } 
    stream_186   = NULL;
    #define CREATE_stream_186  if (stream_186 == NULL) {stream_186 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 186"); } 
    stream_188   = NULL;
    #define CREATE_stream_188  if (stream_188 == NULL) {stream_188 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 188"); } 
    stream_187   = NULL;
    #define CREATE_stream_187  if (stream_187 == NULL) {stream_187 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 187"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:545:1: ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) )
            
            ANTLR3_UINT32 alt247;

            alt247=4;

            switch ( LA(1) ) 
            {
            case 185:
            	{
            		alt247=1;
            	}
                break;
            case 186:
            	{
            		alt247=2;
            	}
                break;
            case 187:
            	{
            		alt247=3;
            	}
                break;
            case 188:
            	{
            		alt247=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 247;
                EXCEPTION->state        = 0;


                goto ruleequalityOpsEx;
            }

            switch (alt247) 
            {
        	case 1:
        	    // .//Emerson.g:545:4: '=='
        	    {
        	        string_literal453 = (pANTLR3_COMMON_TOKEN) MATCHT(185, &FOLLOW_185_in_equalityOps5007); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_185; stream_185->add(stream_185, string_literal453, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 545:9: -> ^( EQUALS )
        	        	{
        	        	    // .//Emerson.g:545:12: ^( EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EQUALS, (pANTLR3_UINT8)"EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:546:3: '!='
        	    {
        	        string_literal454 = (pANTLR3_COMMON_TOKEN) MATCHT(186, &FOLLOW_186_in_equalityOps5017); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_186; stream_186->add(stream_186, string_literal454, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 546:8: -> ^( NOT_EQUALS )
        	        	{
        	        	    // .//Emerson.g:546:11: ^( NOT_EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_EQUALS, (pANTLR3_UINT8)"NOT_EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:547:3: '==='
        	    {
        	        string_literal455 = (pANTLR3_COMMON_TOKEN) MATCHT(187, &FOLLOW_187_in_equalityOps5027); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_187; stream_187->add(stream_187, string_literal455, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 547:9: -> ^( IDENT )
        	        	{
        	        	    // .//Emerson.g:547:12: ^( IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IDENT, (pANTLR3_UINT8)"IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:548:3: '!=='
        	    {
        	        string_literal456 = (pANTLR3_COMMON_TOKEN) MATCHT(188, &FOLLOW_188_in_equalityOps5037); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_188; stream_188->add(stream_188, string_literal456, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 548:9: -> ^( NOT_IDENT )
        	        	{
        	        	    // .//Emerson.g:548:12: ^( NOT_IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_IDENT, (pANTLR3_UINT8)"NOT_IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityOpsEx; /* Prevent compiler warnings */
    ruleequalityOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_185 != NULL) stream_185->free(stream_185);
        if (stream_186 != NULL) stream_186->free(stream_186);
        if (stream_188 != NULL) stream_188->free(stream_188);
        if (stream_187 != NULL) stream_187->free(stream_187);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(81, equalityOps_StartIndex); }
    return retval;
}
/* $ANTLR end equalityOps */

/** 
 * $ANTLR start equalityExpressionNoIn
 * .//Emerson.g:551:1: equalityExpressionNoIn : ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* ;
 */
static EmersonParser_equalityExpressionNoIn_return
equalityExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_equalityExpressionNoIn_return retval;
    ANTLR3_UINT32 equalityExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM458;
    pANTLR3_COMMON_TOKEN    LTERM460;
    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn457;
    #undef	RETURN_TYPE_relationalExpressionNoIn457
    #define	RETURN_TYPE_relationalExpressionNoIn457 EmersonParser_relationalExpressionNoIn_return

    EmersonParser_equalityOps_return equalityOps459;
    #undef	RETURN_TYPE_equalityOps459
    #define	RETURN_TYPE_equalityOps459 EmersonParser_equalityOps_return

    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn461;
    #undef	RETURN_TYPE_relationalExpressionNoIn461
    #define	RETURN_TYPE_relationalExpressionNoIn461 EmersonParser_relationalExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM458_tree;
    pANTLR3_BASE_TREE LTERM460_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpressionNoIn;
    /* Initialize rule variables
     */
    equalityExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(82)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM458       = NULL;
    LTERM460       = NULL;
    relationalExpressionNoIn457.tree = NULL;

    equalityOps459.tree = NULL;

    relationalExpressionNoIn461.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM458_tree   = NULL;
    LTERM460_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }
    stream_relationalExpressionNoIn   = NULL;
    #define CREATE_stream_relationalExpressionNoIn  if (stream_relationalExpressionNoIn == NULL) {stream_relationalExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:552:9: ( ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* )
        // .//Emerson.g:552:11: ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
        {
            // .//Emerson.g:552:11: ( relationalExpressionNoIn -> relationalExpressionNoIn )
            // .//Emerson.g:552:12: relationalExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5061);
                relationalExpressionNoIn457=relationalExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn457.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 552:37: -> relationalExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:552:65: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*

            for (;;)
            {
                int alt250=2;
                alt250 = cdfa250.predict(ctx, RECOGNIZER, ISTREAM, &cdfa250);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt250) 
                {
            	case 1:
            	    // .//Emerson.g:552:66: ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn
            	    {

            	        // .//Emerson.g:552:66: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt248=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA248_0 = LA(1);
            	                if ( (LA248_0 == LTERM) ) 
            	                {
            	                    alt248=1;
            	                }

            	            }
            	            switch (alt248) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM458 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn5068); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM458, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop248;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop248: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpressionNoIn5071);
            	        equalityOps459=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps459.tree, NULL); }

            	        // .//Emerson.g:552:85: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt249=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA249_0 = LA(1);
            	                if ( (LA249_0 == LTERM) ) 
            	                {
            	                    alt249=1;
            	                }

            	            }
            	            switch (alt249) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM460 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn5073); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM460, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop249;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop249: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn5076);
            	        relationalExpressionNoIn461=relationalExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn461.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpressionNoIn, equalityExpressionNoIn, equalityOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 552:117: -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:552:120: ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop250;	/* break out of the loop */
            	    break;
                }
            }
            loop250: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionNoInEx; /* Prevent compiler warnings */
    ruleequalityExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
        if (stream_relationalExpressionNoIn != NULL) stream_relationalExpressionNoIn->free(stream_relationalExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(82, equalityExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpressionNoIn */

/** 
 * $ANTLR start relationalOps
 * .//Emerson.g:556:1: relationalOps : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) );
 */
static EmersonParser_relationalOps_return
relationalOps(pEmersonParser ctx)
{   
    EmersonParser_relationalOps_return retval;
    ANTLR3_UINT32 relationalOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal462;
    pANTLR3_COMMON_TOKEN    char_literal463;
    pANTLR3_COMMON_TOKEN    string_literal464;
    pANTLR3_COMMON_TOKEN    string_literal465;
    pANTLR3_COMMON_TOKEN    string_literal466;
    pANTLR3_COMMON_TOKEN    string_literal467;

    pANTLR3_BASE_TREE char_literal462_tree;
    pANTLR3_BASE_TREE char_literal463_tree;
    pANTLR3_BASE_TREE string_literal464_tree;
    pANTLR3_BASE_TREE string_literal465_tree;
    pANTLR3_BASE_TREE string_literal466_tree;
    pANTLR3_BASE_TREE string_literal467_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_151;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_189;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_192;

    /* Initialize rule variables
     */
    relationalOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(83)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal462       = NULL;
    char_literal463       = NULL;
    string_literal464       = NULL;
    string_literal465       = NULL;
    string_literal466       = NULL;
    string_literal467       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal462_tree   = NULL;
    char_literal463_tree   = NULL;
    string_literal464_tree   = NULL;
    string_literal465_tree   = NULL;
    string_literal466_tree   = NULL;
    string_literal467_tree   = NULL;

    stream_151   = NULL;
    #define CREATE_stream_151  if (stream_151 == NULL) {stream_151 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 151"); } 
    stream_189   = NULL;
    #define CREATE_stream_189  if (stream_189 == NULL) {stream_189 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 189"); } 
    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 
    stream_192   = NULL;
    #define CREATE_stream_192  if (stream_192 == NULL) {stream_192 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 192"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:557:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) )
            
            ANTLR3_UINT32 alt251;

            alt251=6;

            switch ( LA(1) ) 
            {
            case 189:
            	{
            		alt251=1;
            	}
                break;
            case 190:
            	{
            		alt251=2;
            	}
                break;
            case 191:
            	{
            		alt251=3;
            	}
                break;
            case 192:
            	{
            		alt251=4;
            	}
                break;
            case 193:
            	{
            		alt251=5;
            	}
                break;
            case 151:
            	{
            		alt251=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 251;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsEx;
            }

            switch (alt251) 
            {
        	case 1:
        	    // .//Emerson.g:557:3: '<'
        	    {
        	        char_literal462 = (pANTLR3_COMMON_TOKEN) MATCHT(189, &FOLLOW_189_in_relationalOps5108); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_189; stream_189->add(stream_189, char_literal462, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 557:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:557:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:558:3: '>'
        	    {
        	        char_literal463 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_relationalOps5119); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, char_literal463, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 558:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:558:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:559:3: '<='
        	    {
        	        string_literal464 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_relationalOps5130); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, string_literal464, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 559:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:559:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:560:3: '>='
        	    {
        	        string_literal465 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_relationalOps5140); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, string_literal465, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 560:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:560:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:561:3: 'instanceof'
        	    {
        	        string_literal466 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_relationalOps5150); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, string_literal466, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 561:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:561:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:562:3: 'in'
        	    {
        	        string_literal467 = (pANTLR3_COMMON_TOKEN) MATCHT(151, &FOLLOW_151_in_relationalOps5160); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_151; stream_151->add(stream_151, string_literal467, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 562:16: -> ^( IN )
        	        	{
        	        	    // .//Emerson.g:562:19: ^( IN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IN, (pANTLR3_UINT8)"IN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsEx; /* Prevent compiler warnings */
    rulerelationalOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_151 != NULL) stream_151->free(stream_151);
        if (stream_189 != NULL) stream_189->free(stream_189);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_190 != NULL) stream_190->free(stream_190);
        if (stream_193 != NULL) stream_193->free(stream_193);
        if (stream_192 != NULL) stream_192->free(stream_192);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(83, relationalOps_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOps */

/** 
 * $ANTLR start relationalExpression
 * .//Emerson.g:566:1: relationalExpression : ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )* ;
 */
static EmersonParser_relationalExpression_return
relationalExpression(pEmersonParser ctx)
{   
    EmersonParser_relationalExpression_return retval;
    ANTLR3_UINT32 relationalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM469;
    pANTLR3_COMMON_TOKEN    LTERM471;
    EmersonParser_additiveExpression_return additiveExpression468;
    #undef	RETURN_TYPE_additiveExpression468
    #define	RETURN_TYPE_additiveExpression468 EmersonParser_additiveExpression_return

    EmersonParser_relationalOps_return relationalOps470;
    #undef	RETURN_TYPE_relationalOps470
    #define	RETURN_TYPE_relationalOps470 EmersonParser_relationalOps_return

    EmersonParser_additiveExpression_return additiveExpression472;
    #undef	RETURN_TYPE_additiveExpression472
    #define	RETURN_TYPE_additiveExpression472 EmersonParser_additiveExpression_return

    pANTLR3_BASE_TREE LTERM469_tree;
    pANTLR3_BASE_TREE LTERM471_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_additiveExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOps;
    /* Initialize rule variables
     */
    relationalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(84)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM469       = NULL;
    LTERM471       = NULL;
    additiveExpression468.tree = NULL;

    relationalOps470.tree = NULL;

    additiveExpression472.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM469_tree   = NULL;
    LTERM471_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_additiveExpression   = NULL;
    #define CREATE_stream_additiveExpression  if (stream_additiveExpression == NULL) {stream_additiveExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule additiveExpression"); }
    stream_relationalOps   = NULL;
    #define CREATE_stream_relationalOps  if (stream_relationalOps == NULL) {stream_relationalOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:567:9: ( ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )* )
        // .//Emerson.g:567:11: ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )*
        {
            // .//Emerson.g:567:11: ( additiveExpression -> additiveExpression )
            // .//Emerson.g:567:12: additiveExpression
            {
                FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpression5193);
                additiveExpression468=additiveExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression468.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : additiveExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 567:31: -> additiveExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:567:54: ( ( LTERM )* relationalOps ( LTERM )* additiveExpression -> ^( relationalOps $relationalExpression additiveExpression ) )*

            for (;;)
            {
                int alt254=2;
                alt254 = cdfa254.predict(ctx, RECOGNIZER, ISTREAM, &cdfa254);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt254) 
                {
            	case 1:
            	    // .//Emerson.g:567:55: ( LTERM )* relationalOps ( LTERM )* additiveExpression
            	    {

            	        // .//Emerson.g:567:55: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt252=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA252_0 = LA(1);
            	                if ( (LA252_0 == LTERM) ) 
            	                {
            	                    alt252=1;
            	                }

            	            }
            	            switch (alt252) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM469 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression5201); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM469, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop252;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop252: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOps_in_relationalExpression5204);
            	        relationalOps470=relationalOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOps; stream_relationalOps->add(stream_relationalOps, relationalOps470.tree, NULL); }

            	        // .//Emerson.g:567:76: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt253=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA253_0 = LA(1);
            	                if ( (LA253_0 == LTERM) ) 
            	                {
            	                    alt253=1;
            	                }

            	            }
            	            switch (alt253) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM471 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression5206); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM471, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop253;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop253: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpression5209);
            	        additiveExpression472=additiveExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression472.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : additiveExpression, relationalExpression, relationalOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 567:102: -> ^( relationalOps $relationalExpression additiveExpression )
            	        	{
            	        	    // .//Emerson.g:567:105: ^( relationalOps $relationalExpression additiveExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOps == NULL ? NULL : stream_relationalOps->nextNode(stream_relationalOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop254;	/* break out of the loop */
            	    break;
                }
            }
            loop254: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionEx; /* Prevent compiler warnings */
    rulerelationalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_additiveExpression != NULL) stream_additiveExpression->free(stream_additiveExpression);
        if (stream_relationalOps != NULL) stream_relationalOps->free(stream_relationalOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(84, relationalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpression */

/** 
 * $ANTLR start relationalOpsNoIn
 * .//Emerson.g:570:1: relationalOpsNoIn : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) );
 */
static EmersonParser_relationalOpsNoIn_return
relationalOpsNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalOpsNoIn_return retval;
    ANTLR3_UINT32 relationalOpsNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal473;
    pANTLR3_COMMON_TOKEN    char_literal474;
    pANTLR3_COMMON_TOKEN    string_literal475;
    pANTLR3_COMMON_TOKEN    string_literal476;
    pANTLR3_COMMON_TOKEN    string_literal477;

    pANTLR3_BASE_TREE char_literal473_tree;
    pANTLR3_BASE_TREE char_literal474_tree;
    pANTLR3_BASE_TREE string_literal475_tree;
    pANTLR3_BASE_TREE string_literal476_tree;
    pANTLR3_BASE_TREE string_literal477_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_189;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_192;

    /* Initialize rule variables
     */
    relationalOpsNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(85)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal473       = NULL;
    char_literal474       = NULL;
    string_literal475       = NULL;
    string_literal476       = NULL;
    string_literal477       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal473_tree   = NULL;
    char_literal474_tree   = NULL;
    string_literal475_tree   = NULL;
    string_literal476_tree   = NULL;
    string_literal477_tree   = NULL;

    stream_189   = NULL;
    #define CREATE_stream_189  if (stream_189 == NULL) {stream_189 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 189"); } 
    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 
    stream_192   = NULL;
    #define CREATE_stream_192  if (stream_192 == NULL) {stream_192 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 192"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:571:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) )
            
            ANTLR3_UINT32 alt255;

            alt255=5;

            switch ( LA(1) ) 
            {
            case 189:
            	{
            		alt255=1;
            	}
                break;
            case 190:
            	{
            		alt255=2;
            	}
                break;
            case 191:
            	{
            		alt255=3;
            	}
                break;
            case 192:
            	{
            		alt255=4;
            	}
                break;
            case 193:
            	{
            		alt255=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 255;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsNoInEx;
            }

            switch (alt255) 
            {
        	case 1:
        	    // .//Emerson.g:571:3: '<'
        	    {
        	        char_literal473 = (pANTLR3_COMMON_TOKEN) MATCHT(189, &FOLLOW_189_in_relationalOpsNoIn5240); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_189; stream_189->add(stream_189, char_literal473, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 571:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:571:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:572:3: '>'
        	    {
        	        char_literal474 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_relationalOpsNoIn5251); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, char_literal474, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 572:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:572:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:573:3: '<='
        	    {
        	        string_literal475 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_relationalOpsNoIn5262); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, string_literal475, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 573:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:573:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:574:3: '>='
        	    {
        	        string_literal476 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_relationalOpsNoIn5272); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, string_literal476, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 574:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:574:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:575:3: 'instanceof'
        	    {
        	        string_literal477 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_relationalOpsNoIn5282); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, string_literal477, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 575:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:575:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsNoInEx; /* Prevent compiler warnings */
    rulerelationalOpsNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_189 != NULL) stream_189->free(stream_189);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_190 != NULL) stream_190->free(stream_190);
        if (stream_193 != NULL) stream_193->free(stream_193);
        if (stream_192 != NULL) stream_192->free(stream_192);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(85, relationalOpsNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOpsNoIn */

/** 
 * $ANTLR start addOps
 * .//Emerson.g:578:1: addOps : ( '+' -> ^( ADD_OP ) | '-' -> ^( SUB ) );
 */
static EmersonParser_addOps_return
addOps(pEmersonParser ctx)
{   
    EmersonParser_addOps_return retval;
    ANTLR3_UINT32 addOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal478;
    pANTLR3_COMMON_TOKEN    char_literal479;

    pANTLR3_BASE_TREE char_literal478_tree;
    pANTLR3_BASE_TREE char_literal479_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_195;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;

    /* Initialize rule variables
     */
    addOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(86)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal478       = NULL;
    char_literal479       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal478_tree   = NULL;
    char_literal479_tree   = NULL;

    stream_195   = NULL;
    #define CREATE_stream_195  if (stream_195 == NULL) {stream_195 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 195"); } 
    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:579:1: ( '+' -> ^( ADD_OP ) | '-' -> ^( SUB ) )
            
            ANTLR3_UINT32 alt256;

            alt256=2;


            {
                int LA256_0 = LA(1);
                if ( (LA256_0 == 194) ) 
                {
                    alt256=1;
                }
                else if ( (LA256_0 == 195) ) 
                {
                    alt256=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 256;
                    EXCEPTION->state        = 0;


                    goto ruleaddOpsEx;
                }
            }
            switch (alt256) 
            {
        	case 1:
        	    // .//Emerson.g:579:3: '+'
        	    {
        	        char_literal478 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_addOps5297); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, char_literal478, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 579:7: -> ^( ADD_OP )
        	        	{
        	        	    // .//Emerson.g:579:10: ^( ADD_OP )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD_OP, (pANTLR3_UINT8)"ADD_OP"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:580:3: '-'
        	    {
        	        char_literal479 = (pANTLR3_COMMON_TOKEN) MATCHT(195, &FOLLOW_195_in_addOps5307); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_195; stream_195->add(stream_195, char_literal479, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 580:7: -> ^( SUB )
        	        	{
        	        	    // .//Emerson.g:580:10: ^( SUB )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleaddOpsEx; /* Prevent compiler warnings */
    ruleaddOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_195 != NULL) stream_195->free(stream_195);
        if (stream_194 != NULL) stream_194->free(stream_194);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(86, addOps_StartIndex); }
    return retval;
}
/* $ANTLR end addOps */

/** 
 * $ANTLR start relationalExpressionNoIn
 * .//Emerson.g:584:1: relationalExpressionNoIn : ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )* ;
 */
static EmersonParser_relationalExpressionNoIn_return
relationalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalExpressionNoIn_return retval;
    ANTLR3_UINT32 relationalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM481;
    pANTLR3_COMMON_TOKEN    LTERM483;
    EmersonParser_additiveExpression_return additiveExpression480;
    #undef	RETURN_TYPE_additiveExpression480
    #define	RETURN_TYPE_additiveExpression480 EmersonParser_additiveExpression_return

    EmersonParser_relationalOpsNoIn_return relationalOpsNoIn482;
    #undef	RETURN_TYPE_relationalOpsNoIn482
    #define	RETURN_TYPE_relationalOpsNoIn482 EmersonParser_relationalOpsNoIn_return

    EmersonParser_additiveExpression_return additiveExpression484;
    #undef	RETURN_TYPE_additiveExpression484
    #define	RETURN_TYPE_additiveExpression484 EmersonParser_additiveExpression_return

    pANTLR3_BASE_TREE LTERM481_tree;
    pANTLR3_BASE_TREE LTERM483_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOpsNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_additiveExpression;
    /* Initialize rule variables
     */
    relationalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(87)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM481       = NULL;
    LTERM483       = NULL;
    additiveExpression480.tree = NULL;

    relationalOpsNoIn482.tree = NULL;

    additiveExpression484.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM481_tree   = NULL;
    LTERM483_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalOpsNoIn   = NULL;
    #define CREATE_stream_relationalOpsNoIn  if (stream_relationalOpsNoIn == NULL) {stream_relationalOpsNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOpsNoIn"); }
    stream_additiveExpression   = NULL;
    #define CREATE_stream_additiveExpression  if (stream_additiveExpression == NULL) {stream_additiveExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule additiveExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:585:9: ( ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )* )
        // .//Emerson.g:585:11: ( additiveExpression -> additiveExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )*
        {
            // .//Emerson.g:585:11: ( additiveExpression -> additiveExpression )
            // .//Emerson.g:585:12: additiveExpression
            {
                FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpressionNoIn5332);
                additiveExpression480=additiveExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression480.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : additiveExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 585:31: -> additiveExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:585:54: ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression ) )*

            for (;;)
            {
                int alt259=2;
                alt259 = cdfa259.predict(ctx, RECOGNIZER, ISTREAM, &cdfa259);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt259) 
                {
            	case 1:
            	    // .//Emerson.g:585:55: ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression
            	    {

            	        // .//Emerson.g:585:55: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt257=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA257_0 = LA(1);
            	                if ( (LA257_0 == LTERM) ) 
            	                {
            	                    alt257=1;
            	                }

            	            }
            	            switch (alt257) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM481 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn5340); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM481, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop257;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop257: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn5343);
            	        relationalOpsNoIn482=relationalOpsNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOpsNoIn; stream_relationalOpsNoIn->add(stream_relationalOpsNoIn, relationalOpsNoIn482.tree, NULL); }

            	        // .//Emerson.g:585:80: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt258=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA258_0 = LA(1);
            	                if ( (LA258_0 == LTERM) ) 
            	                {
            	                    alt258=1;
            	                }

            	            }
            	            switch (alt258) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM483 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn5345); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM483, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop258;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop258: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_additiveExpression_in_relationalExpressionNoIn5348);
            	        additiveExpression484=additiveExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression484.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalExpressionNoIn, additiveExpression, relationalOpsNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 585:106: -> ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression )
            	        	{
            	        	    // .//Emerson.g:585:109: ^( relationalOpsNoIn $relationalExpressionNoIn additiveExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOpsNoIn == NULL ? NULL : stream_relationalOpsNoIn->nextNode(stream_relationalOpsNoIn), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop259;	/* break out of the loop */
            	    break;
                }
            }
            loop259: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionNoInEx; /* Prevent compiler warnings */
    rulerelationalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalOpsNoIn != NULL) stream_relationalOpsNoIn->free(stream_relationalOpsNoIn);
        if (stream_additiveExpression != NULL) stream_additiveExpression->free(stream_additiveExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(87, relationalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpressionNoIn */

/** 
 * $ANTLR start additiveExpression
 * .//Emerson.g:589:1: additiveExpression : ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* ;
 */
static EmersonParser_additiveExpression_return
additiveExpression(pEmersonParser ctx)
{   
    EmersonParser_additiveExpression_return retval;
    ANTLR3_UINT32 additiveExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM486;
    pANTLR3_COMMON_TOKEN    LTERM488;
    EmersonParser_multiplicativeExpression_return multiplicativeExpression485;
    #undef	RETURN_TYPE_multiplicativeExpression485
    #define	RETURN_TYPE_multiplicativeExpression485 EmersonParser_multiplicativeExpression_return

    EmersonParser_addOps_return addOps487;
    #undef	RETURN_TYPE_addOps487
    #define	RETURN_TYPE_addOps487 EmersonParser_addOps_return

    EmersonParser_multiplicativeExpression_return multiplicativeExpression489;
    #undef	RETURN_TYPE_multiplicativeExpression489
    #define	RETURN_TYPE_multiplicativeExpression489 EmersonParser_multiplicativeExpression_return

    pANTLR3_BASE_TREE LTERM486_tree;
    pANTLR3_BASE_TREE LTERM488_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_addOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multiplicativeExpression;
    /* Initialize rule variables
     */
    additiveExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(88)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM486       = NULL;
    LTERM488       = NULL;
    multiplicativeExpression485.tree = NULL;

    addOps487.tree = NULL;

    multiplicativeExpression489.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM486_tree   = NULL;
    LTERM488_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_addOps   = NULL;
    #define CREATE_stream_addOps  if (stream_addOps == NULL) {stream_addOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule addOps"); }
    stream_multiplicativeExpression   = NULL;
    #define CREATE_stream_multiplicativeExpression  if (stream_multiplicativeExpression == NULL) {stream_multiplicativeExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multiplicativeExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:590:2: ( ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* )
        // .//Emerson.g:590:4: ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
        {
            // .//Emerson.g:590:4: ( multiplicativeExpression -> multiplicativeExpression )
            // .//Emerson.g:590:5: multiplicativeExpression
            {
                FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression5375);
                multiplicativeExpression485=multiplicativeExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression485.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : multiplicativeExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 590:30: -> multiplicativeExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:590:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*

            for (;;)
            {
                int alt262=2;
                alt262 = cdfa262.predict(ctx, RECOGNIZER, ISTREAM, &cdfa262);
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt262) 
                {
            	case 1:
            	    // .//Emerson.g:590:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
            	    {

            	        // .//Emerson.g:590:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt260=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA260_0 = LA(1);
            	                if ( (LA260_0 == LTERM) ) 
            	                {
            	                    alt260=1;
            	                }

            	            }
            	            switch (alt260) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM486 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression5382); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM486, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop260;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop260: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_addOps_in_additiveExpression5385);
            	        addOps487=addOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_addOps; stream_addOps->add(stream_addOps, addOps487.tree, NULL); }

            	        // .//Emerson.g:590:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt261=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA261_0 = LA(1);
            	                if ( (LA261_0 == LTERM) ) 
            	                {
            	                    alt261=1;
            	                }

            	            }
            	            switch (alt261) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM488 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression5387); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM488, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop261;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop261: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression5390);
            	        multiplicativeExpression489=multiplicativeExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression489.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : addOps, multiplicativeExpression, additiveExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 590:105: -> ^( addOps $additiveExpression multiplicativeExpression )
            	        	{
            	        	    // .//Emerson.g:590:108: ^( addOps $additiveExpression multiplicativeExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_addOps == NULL ? NULL : stream_addOps->nextNode(stream_addOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop262;	/* break out of the loop */
            	    break;
                }
            }
            loop262: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditiveExpressionEx; /* Prevent compiler warnings */
    ruleadditiveExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_addOps != NULL) stream_addOps->free(stream_addOps);
        if (stream_multiplicativeExpression != NULL) stream_multiplicativeExpression->free(stream_multiplicativeExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(88, additiveExpression_StartIndex); }
    return retval;
}
/* $ANTLR end additiveExpression */

/** 
 * $ANTLR start multOps
 * .//Emerson.g:593:1: multOps : ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) );
 */
static EmersonParser_multOps_return
multOps(pEmersonParser ctx)
{   
    EmersonParser_multOps_return retval;
    ANTLR3_UINT32 multOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal490;
    pANTLR3_COMMON_TOKEN    char_literal491;
    pANTLR3_COMMON_TOKEN    char_literal492;

    pANTLR3_BASE_TREE char_literal490_tree;
    pANTLR3_BASE_TREE char_literal491_tree;
    pANTLR3_BASE_TREE char_literal492_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_198;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_197;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_196;

    /* Initialize rule variables
     */
    multOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(89)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal490       = NULL;
    char_literal491       = NULL;
    char_literal492       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal490_tree   = NULL;
    char_literal491_tree   = NULL;
    char_literal492_tree   = NULL;

    stream_198   = NULL;
    #define CREATE_stream_198  if (stream_198 == NULL) {stream_198 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 198"); } 
    stream_197   = NULL;
    #define CREATE_stream_197  if (stream_197 == NULL) {stream_197 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 197"); } 
    stream_196   = NULL;
    #define CREATE_stream_196  if (stream_196 == NULL) {stream_196 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 196"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:594:1: ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) )
            
            ANTLR3_UINT32 alt263;

            alt263=3;

            switch ( LA(1) ) 
            {
            case 196:
            	{
            		alt263=1;
            	}
                break;
            case 197:
            	{
            		alt263=2;
            	}
                break;
            case 198:
            	{
            		alt263=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 263;
                EXCEPTION->state        = 0;


                goto rulemultOpsEx;
            }

            switch (alt263) 
            {
        	case 1:
        	    // .//Emerson.g:594:3: '*'
        	    {
        	        char_literal490 = (pANTLR3_COMMON_TOKEN) MATCHT(196, &FOLLOW_196_in_multOps5415); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_196; stream_196->add(stream_196, char_literal490, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 594:7: -> ^( MULT )
        	        	{
        	        	    // .//Emerson.g:594:10: ^( MULT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT, (pANTLR3_UINT8)"MULT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:595:3: '/'
        	    {
        	        char_literal491 = (pANTLR3_COMMON_TOKEN) MATCHT(197, &FOLLOW_197_in_multOps5425); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_197; stream_197->add(stream_197, char_literal491, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 595:7: -> ^( DIV )
        	        	{
        	        	    // .//Emerson.g:595:10: ^( DIV )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:596:3: '%'
        	    {
        	        char_literal492 = (pANTLR3_COMMON_TOKEN) MATCHT(198, &FOLLOW_198_in_multOps5435); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_198; stream_198->add(stream_198, char_literal492, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 596:7: -> ^( MOD )
        	        	{
        	        	    // .//Emerson.g:596:10: ^( MOD )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemultOpsEx; /* Prevent compiler warnings */
    rulemultOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_198 != NULL) stream_198->free(stream_198);
        if (stream_197 != NULL) stream_197->free(stream_197);
        if (stream_196 != NULL) stream_196->free(stream_196);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(89, multOps_StartIndex); }
    return retval;
}
/* $ANTLR end multOps */

/** 
 * $ANTLR start multiplicativeExpression
 * .//Emerson.g:599:1: multiplicativeExpression : ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* ;
 */
static EmersonParser_multiplicativeExpression_return
multiplicativeExpression(pEmersonParser ctx)
{   
    EmersonParser_multiplicativeExpression_return retval;
    ANTLR3_UINT32 multiplicativeExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM494;
    pANTLR3_COMMON_TOKEN    LTERM496;
    EmersonParser_unaryExpression_return unaryExpression493;
    #undef	RETURN_TYPE_unaryExpression493
    #define	RETURN_TYPE_unaryExpression493 EmersonParser_unaryExpression_return

    EmersonParser_multOps_return multOps495;
    #undef	RETURN_TYPE_multOps495
    #define	RETURN_TYPE_multOps495 EmersonParser_multOps_return

    EmersonParser_unaryExpression_return unaryExpression497;
    #undef	RETURN_TYPE_unaryExpression497
    #define	RETURN_TYPE_unaryExpression497 EmersonParser_unaryExpression_return

    pANTLR3_BASE_TREE LTERM494_tree;
    pANTLR3_BASE_TREE LTERM496_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    /* Initialize rule variables
     */
    multiplicativeExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(90)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM494       = NULL;
    LTERM496       = NULL;
    unaryExpression493.tree = NULL;

    multOps495.tree = NULL;

    unaryExpression497.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM494_tree   = NULL;
    LTERM496_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_multOps   = NULL;
    #define CREATE_stream_multOps  if (stream_multOps == NULL) {stream_multOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multOps"); }
    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:600:4: ( ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* )
        // .//Emerson.g:600:6: ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
        {
            // .//Emerson.g:600:6: ( unaryExpression -> unaryExpression )
            // .//Emerson.g:600:7: unaryExpression
            {
                FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression5454);
                unaryExpression493=unaryExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression493.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : unaryExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 600:24: -> unaryExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:600:44: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*

            for (;;)
            {
                int alt266=2;
                alt266 = cdfa266.predict(ctx, RECOGNIZER, ISTREAM, &cdfa266);
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt266) 
                {
            	case 1:
            	    // .//Emerson.g:600:45: ( LTERM )* multOps ( LTERM )* unaryExpression
            	    {

            	        // .//Emerson.g:600:45: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt264=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA264_0 = LA(1);
            	                if ( (LA264_0 == LTERM) ) 
            	                {
            	                    alt264=1;
            	                }

            	            }
            	            switch (alt264) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM494 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression5463); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM494, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop264;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop264: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multOps_in_multiplicativeExpression5466);
            	        multOps495=multOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multOps; stream_multOps->add(stream_multOps, multOps495.tree, NULL); }

            	        // .//Emerson.g:600:60: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt265=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA265_0 = LA(1);
            	                if ( (LA265_0 == LTERM) ) 
            	                {
            	                    alt265=1;
            	                }

            	            }
            	            switch (alt265) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM496 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression5468); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM496, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop265;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop265: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression5471);
            	        unaryExpression497=unaryExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression497.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : multOps, multiplicativeExpression, unaryExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 600:83: -> ^( multOps $multiplicativeExpression unaryExpression )
            	        	{
            	        	    // .//Emerson.g:600:86: ^( multOps $multiplicativeExpression unaryExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_multOps == NULL ? NULL : stream_multOps->nextNode(stream_multOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop266;	/* break out of the loop */
            	    break;
                }
            }
            loop266: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicativeExpressionEx; /* Prevent compiler warnings */
    rulemultiplicativeExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_multOps != NULL) stream_multOps->free(stream_multOps);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(90, multiplicativeExpression_StartIndex); }
    return retval;
}
/* $ANTLR end multiplicativeExpression */

/** 
 * $ANTLR start postfixExpression
 * .//Emerson.g:604:1: postfixExpression : ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression );
 */
static EmersonParser_postfixExpression_return
postfixExpression(pEmersonParser ctx)
{   
    EmersonParser_postfixExpression_return retval;
    ANTLR3_UINT32 postfixExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal499;
    pANTLR3_COMMON_TOKEN    string_literal501;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression498;
    #undef	RETURN_TYPE_leftHandSideExpression498
    #define	RETURN_TYPE_leftHandSideExpression498 EmersonParser_leftHandSideExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression500;
    #undef	RETURN_TYPE_leftHandSideExpression500
    #define	RETURN_TYPE_leftHandSideExpression500 EmersonParser_leftHandSideExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression502;
    #undef	RETURN_TYPE_leftHandSideExpression502
    #define	RETURN_TYPE_leftHandSideExpression502 EmersonParser_leftHandSideExpression_return

    pANTLR3_BASE_TREE string_literal499_tree;
    pANTLR3_BASE_TREE string_literal501_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_199;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_200;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    postfixExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(91)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal499       = NULL;
    string_literal501       = NULL;
    leftHandSideExpression498.tree = NULL;

    leftHandSideExpression500.tree = NULL;

    leftHandSideExpression502.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal499_tree   = NULL;
    string_literal501_tree   = NULL;

    stream_199   = NULL;
    #define CREATE_stream_199  if (stream_199 == NULL) {stream_199 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 199"); } 
    stream_200   = NULL;
    #define CREATE_stream_200  if (stream_200 == NULL) {stream_200 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 200"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:605:2: ( leftHandSideExpression '--' -> ^( MINUSMINUS leftHandSideExpression ) | leftHandSideExpression '++' -> ^( PLUSPLUS leftHandSideExpression ) | leftHandSideExpression -> leftHandSideExpression )
            
            ANTLR3_UINT32 alt267;

            alt267=3;

            alt267 = cdfa267.predict(ctx, RECOGNIZER, ISTREAM, &cdfa267);
            if  (HASEXCEPTION())
            {
                goto rulepostfixExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt267) 
            {
        	case 1:
        	    // .//Emerson.g:605:4: leftHandSideExpression '--'
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression5498);
        	        leftHandSideExpression498=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression498.tree, NULL); }
        	        string_literal499 = (pANTLR3_COMMON_TOKEN) MATCHT(199, &FOLLOW_199_in_postfixExpression5500); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_199; stream_199->add(stream_199, string_literal499, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 605:32: -> ^( MINUSMINUS leftHandSideExpression )
        	        	{
        	        	    // .//Emerson.g:605:35: ^( MINUSMINUS leftHandSideExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUSMINUS, (pANTLR3_UINT8)"MINUSMINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:606:4: leftHandSideExpression '++'
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression5514);
        	        leftHandSideExpression500=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression500.tree, NULL); }
        	        string_literal501 = (pANTLR3_COMMON_TOKEN) MATCHT(200, &FOLLOW_200_in_postfixExpression5516); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_200; stream_200->add(stream_200, string_literal501, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 606:32: -> ^( PLUSPLUS leftHandSideExpression )
        	        	{
        	        	    // .//Emerson.g:606:35: ^( PLUSPLUS leftHandSideExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUSPLUS, (pANTLR3_UINT8)"PLUSPLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:607:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression5529);
        	        leftHandSideExpression502=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepostfixExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression502.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 607:28: -> leftHandSideExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepostfixExpressionEx; /* Prevent compiler warnings */
    rulepostfixExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_199 != NULL) stream_199->free(stream_199);
        if (stream_200 != NULL) stream_200->free(stream_200);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(91, postfixExpression_StartIndex); }
    return retval;
}
/* $ANTLR end postfixExpression */

/** 
 * $ANTLR start unaryOps
 * .//Emerson.g:611:1: unaryOps : ( 'delete' -> ^( DELETE_OP ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) );
 */
static EmersonParser_unaryOps_return
unaryOps(pEmersonParser ctx)
{   
    EmersonParser_unaryOps_return retval;
    ANTLR3_UINT32 unaryOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal503;
    pANTLR3_COMMON_TOKEN    string_literal504;
    pANTLR3_COMMON_TOKEN    string_literal505;
    pANTLR3_COMMON_TOKEN    string_literal506;
    pANTLR3_COMMON_TOKEN    string_literal507;
    pANTLR3_COMMON_TOKEN    char_literal508;
    pANTLR3_COMMON_TOKEN    char_literal509;
    pANTLR3_COMMON_TOKEN    char_literal510;
    pANTLR3_COMMON_TOKEN    char_literal511;

    pANTLR3_BASE_TREE string_literal503_tree;
    pANTLR3_BASE_TREE string_literal504_tree;
    pANTLR3_BASE_TREE string_literal505_tree;
    pANTLR3_BASE_TREE string_literal506_tree;
    pANTLR3_BASE_TREE string_literal507_tree;
    pANTLR3_BASE_TREE char_literal508_tree;
    pANTLR3_BASE_TREE char_literal509_tree;
    pANTLR3_BASE_TREE char_literal510_tree;
    pANTLR3_BASE_TREE char_literal511_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_202;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_203;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_204;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_205;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_199;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_200;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_201;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_195;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;

    /* Initialize rule variables
     */
    unaryOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(92)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal503       = NULL;
    string_literal504       = NULL;
    string_literal505       = NULL;
    string_literal506       = NULL;
    string_literal507       = NULL;
    char_literal508       = NULL;
    char_literal509       = NULL;
    char_literal510       = NULL;
    char_literal511       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal503_tree   = NULL;
    string_literal504_tree   = NULL;
    string_literal505_tree   = NULL;
    string_literal506_tree   = NULL;
    string_literal507_tree   = NULL;
    char_literal508_tree   = NULL;
    char_literal509_tree   = NULL;
    char_literal510_tree   = NULL;
    char_literal511_tree   = NULL;

    stream_202   = NULL;
    #define CREATE_stream_202  if (stream_202 == NULL) {stream_202 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 202"); } 
    stream_203   = NULL;
    #define CREATE_stream_203  if (stream_203 == NULL) {stream_203 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 203"); } 
    stream_204   = NULL;
    #define CREATE_stream_204  if (stream_204 == NULL) {stream_204 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 204"); } 
    stream_205   = NULL;
    #define CREATE_stream_205  if (stream_205 == NULL) {stream_205 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 205"); } 
    stream_199   = NULL;
    #define CREATE_stream_199  if (stream_199 == NULL) {stream_199 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 199"); } 
    stream_200   = NULL;
    #define CREATE_stream_200  if (stream_200 == NULL) {stream_200 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 200"); } 
    stream_201   = NULL;
    #define CREATE_stream_201  if (stream_201 == NULL) {stream_201 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 201"); } 
    stream_195   = NULL;
    #define CREATE_stream_195  if (stream_195 == NULL) {stream_195 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 195"); } 
    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:612:1: ( 'delete' -> ^( DELETE_OP ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) )
            
            ANTLR3_UINT32 alt268;

            alt268=9;

            switch ( LA(1) ) 
            {
            case 201:
            	{
            		alt268=1;
            	}
                break;
            case 202:
            	{
            		alt268=2;
            	}
                break;
            case 203:
            	{
            		alt268=3;
            	}
                break;
            case 200:
            	{
            		alt268=4;
            	}
                break;
            case 199:
            	{
            		alt268=5;
            	}
                break;
            case 194:
            	{
            		alt268=6;
            	}
                break;
            case 195:
            	{
            		alt268=7;
            	}
                break;
            case 204:
            	{
            		alt268=8;
            	}
                break;
            case 205:
            	{
            		alt268=9;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 268;
                EXCEPTION->state        = 0;


                goto ruleunaryOpsEx;
            }

            switch (alt268) 
            {
        	case 1:
        	    // .//Emerson.g:612:2: 'delete'
        	    {
        	        string_literal503 = (pANTLR3_COMMON_TOKEN) MATCHT(201, &FOLLOW_201_in_unaryOps5543); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_201; stream_201->add(stream_201, string_literal503, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 612:11: -> ^( DELETE_OP )
        	        	{
        	        	    // .//Emerson.g:612:14: ^( DELETE_OP )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DELETE_OP, (pANTLR3_UINT8)"DELETE_OP"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:613:3: 'void'
        	    {
        	        string_literal504 = (pANTLR3_COMMON_TOKEN) MATCHT(202, &FOLLOW_202_in_unaryOps5553); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_202; stream_202->add(stream_202, string_literal504, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 613:10: -> ^( VOID )
        	        	{
        	        	    // .//Emerson.g:613:13: ^( VOID )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VOID, (pANTLR3_UINT8)"VOID"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:614:3: 'typeof'
        	    {
        	        string_literal505 = (pANTLR3_COMMON_TOKEN) MATCHT(203, &FOLLOW_203_in_unaryOps5563); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_203; stream_203->add(stream_203, string_literal505, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 614:12: -> ^( TYPEOF )
        	        	{
        	        	    // .//Emerson.g:614:15: ^( TYPEOF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TYPEOF, (pANTLR3_UINT8)"TYPEOF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:615:3: '++'
        	    {
        	        string_literal506 = (pANTLR3_COMMON_TOKEN) MATCHT(200, &FOLLOW_200_in_unaryOps5573); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_200; stream_200->add(stream_200, string_literal506, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 615:9: -> ^( PLUSPLUS )
        	        	{
        	        	    // .//Emerson.g:615:12: ^( PLUSPLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUSPLUS, (pANTLR3_UINT8)"PLUSPLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:616:3: '--'
        	    {
        	        string_literal507 = (pANTLR3_COMMON_TOKEN) MATCHT(199, &FOLLOW_199_in_unaryOps5584); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_199; stream_199->add(stream_199, string_literal507, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 616:9: -> ^( MINUSMINUS )
        	        	{
        	        	    // .//Emerson.g:616:12: ^( MINUSMINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUSMINUS, (pANTLR3_UINT8)"MINUSMINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:617:3: '+'
        	    {
        	        char_literal508 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_unaryOps5595); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, char_literal508, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 617:9: -> ^( UNARY_PLUS )
        	        	{
        	        	    // .//Emerson.g:617:12: ^( UNARY_PLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_PLUS, (pANTLR3_UINT8)"UNARY_PLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:618:3: '-'
        	    {
        	        char_literal509 = (pANTLR3_COMMON_TOKEN) MATCHT(195, &FOLLOW_195_in_unaryOps5607); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_195; stream_195->add(stream_195, char_literal509, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 618:9: -> ^( UNARY_MINUS )
        	        	{
        	        	    // .//Emerson.g:618:12: ^( UNARY_MINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_MINUS, (pANTLR3_UINT8)"UNARY_MINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:619:3: '~'
        	    {
        	        char_literal510 = (pANTLR3_COMMON_TOKEN) MATCHT(204, &FOLLOW_204_in_unaryOps5619); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_204; stream_204->add(stream_204, char_literal510, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 619:9: -> ^( COMPLEMENT )
        	        	{
        	        	    // .//Emerson.g:619:12: ^( COMPLEMENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COMPLEMENT, (pANTLR3_UINT8)"COMPLEMENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:620:3: '!'
        	    {
        	        char_literal511 = (pANTLR3_COMMON_TOKEN) MATCHT(205, &FOLLOW_205_in_unaryOps5631); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_205; stream_205->add(stream_205, char_literal511, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 620:9: -> ^( NOT )
        	        	{
        	        	    // .//Emerson.g:620:12: ^( NOT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT, (pANTLR3_UINT8)"NOT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryOpsEx; /* Prevent compiler warnings */
    ruleunaryOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_202 != NULL) stream_202->free(stream_202);
        if (stream_203 != NULL) stream_203->free(stream_203);
        if (stream_204 != NULL) stream_204->free(stream_204);
        if (stream_205 != NULL) stream_205->free(stream_205);
        if (stream_199 != NULL) stream_199->free(stream_199);
        if (stream_200 != NULL) stream_200->free(stream_200);
        if (stream_201 != NULL) stream_201->free(stream_201);
        if (stream_195 != NULL) stream_195->free(stream_195);
        if (stream_194 != NULL) stream_194->free(stream_194);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(92, unaryOps_StartIndex); }
    return retval;
}
/* $ANTLR end unaryOps */

/** 
 * $ANTLR start unaryExpression
 * .//Emerson.g:624:1: unaryExpression : ( postfixExpression -> postfixExpression | unaryOps e= unaryExpression -> ^( unaryOps $e) );
 */
static EmersonParser_unaryExpression_return
unaryExpression(pEmersonParser ctx)
{   
    EmersonParser_unaryExpression_return retval;
    ANTLR3_UINT32 unaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_unaryExpression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e EmersonParser_unaryExpression_return

    EmersonParser_postfixExpression_return postfixExpression512;
    #undef	RETURN_TYPE_postfixExpression512
    #define	RETURN_TYPE_postfixExpression512 EmersonParser_postfixExpression_return

    EmersonParser_unaryOps_return unaryOps513;
    #undef	RETURN_TYPE_unaryOps513
    #define	RETURN_TYPE_unaryOps513 EmersonParser_unaryOps_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_postfixExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryOps;
    /* Initialize rule variables
     */
    unaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(93)) )
    {
    	retval.start = 0;

        return retval; 
    }
    e.tree = NULL;

    postfixExpression512.tree = NULL;

    unaryOps513.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }
    stream_postfixExpression   = NULL;
    #define CREATE_stream_postfixExpression  if (stream_postfixExpression == NULL) {stream_postfixExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule postfixExpression"); }
    stream_unaryOps   = NULL;
    #define CREATE_stream_unaryOps  if (stream_unaryOps == NULL) {stream_unaryOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryOps"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:625:9: ( postfixExpression -> postfixExpression | unaryOps e= unaryExpression -> ^( unaryOps $e) )
            
            ANTLR3_UINT32 alt269;

            alt269=2;


            {
                int LA269_0 = LA(1);
                if ( (((LA269_0 >= Identifier) && (LA269_0 <= StringLiteral)) || ((LA269_0 >= 137) && (LA269_0 <= 138)) || LA269_0 == 141 || ((LA269_0 >= 164) && (LA269_0 <= 165)) || LA269_0 == 189 || ((LA269_0 >= 206) && (LA269_0 <= 210))) ) 
                {
                    alt269=1;
                }
                else if ( (((LA269_0 >= 194) && (LA269_0 <= 195)) || ((LA269_0 >= 199) && (LA269_0 <= 205))) ) 
                {
                    alt269=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 269;
                    EXCEPTION->state        = 0;


                    goto ruleunaryExpressionEx;
                }
            }
            switch (alt269) 
            {
        	case 1:
        	    // .//Emerson.g:625:11: postfixExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_postfixExpression_in_unaryExpression5657);
        	        postfixExpression512=postfixExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_postfixExpression; stream_postfixExpression->add(stream_postfixExpression, postfixExpression512.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : postfixExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 625:29: -> postfixExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_postfixExpression == NULL ? NULL : stream_postfixExpression->nextTree(stream_postfixExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:626:11: unaryOps e= unaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_unaryOps_in_unaryExpression5673);
        	        unaryOps513=unaryOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryOps; stream_unaryOps->add(stream_unaryOps, unaryOps513.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_unaryExpression5677);
        	        e=unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, e.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : e, unaryOps
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 626:38: -> ^( unaryOps $e)
        	        	{
        	        	    // .//Emerson.g:626:41: ^( unaryOps $e)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_unaryOps == NULL ? NULL : stream_unaryOps->nextNode(stream_unaryOps), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
        if (stream_postfixExpression != NULL) stream_postfixExpression->free(stream_postfixExpression);
        if (stream_unaryOps != NULL) stream_unaryOps->free(stream_unaryOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(93, unaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end unaryExpression */

/** 
 * $ANTLR start primaryExpression
 * .//Emerson.g:630:1: primaryExpression : ( 'this' | ( vectorLiteral )=> vectorLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );
 */
static EmersonParser_primaryExpression_return
primaryExpression(pEmersonParser ctx)
{   
    EmersonParser_primaryExpression_return retval;
    ANTLR3_UINT32 primaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal514;
    pANTLR3_COMMON_TOKEN    Identifier516;
    pANTLR3_COMMON_TOKEN    char_literal522;
    pANTLR3_COMMON_TOKEN    LTERM523;
    pANTLR3_COMMON_TOKEN    LTERM525;
    pANTLR3_COMMON_TOKEN    char_literal526;
    EmersonParser_vectorLiteral_return vectorLiteral515;
    #undef	RETURN_TYPE_vectorLiteral515
    #define	RETURN_TYPE_vectorLiteral515 EmersonParser_vectorLiteral_return

    EmersonParser_dollarExpression_return dollarExpression517;
    #undef	RETURN_TYPE_dollarExpression517
    #define	RETURN_TYPE_dollarExpression517 EmersonParser_dollarExpression_return

    EmersonParser_literal_return literal518;
    #undef	RETURN_TYPE_literal518
    #define	RETURN_TYPE_literal518 EmersonParser_literal_return

    EmersonParser_arrayLiteral_return arrayLiteral519;
    #undef	RETURN_TYPE_arrayLiteral519
    #define	RETURN_TYPE_arrayLiteral519 EmersonParser_arrayLiteral_return

    EmersonParser_objectLiteral_return objectLiteral520;
    #undef	RETURN_TYPE_objectLiteral520
    #define	RETURN_TYPE_objectLiteral520 EmersonParser_objectLiteral_return

    EmersonParser_patternLiteral_return patternLiteral521;
    #undef	RETURN_TYPE_patternLiteral521
    #define	RETURN_TYPE_patternLiteral521 EmersonParser_patternLiteral_return

    EmersonParser_expression_return expression524;
    #undef	RETURN_TYPE_expression524
    #define	RETURN_TYPE_expression524 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal514_tree;
    pANTLR3_BASE_TREE Identifier516_tree;
    pANTLR3_BASE_TREE char_literal522_tree;
    pANTLR3_BASE_TREE LTERM523_tree;
    pANTLR3_BASE_TREE LTERM525_tree;
    pANTLR3_BASE_TREE char_literal526_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    primaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(94)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal514       = NULL;
    Identifier516       = NULL;
    char_literal522       = NULL;
    LTERM523       = NULL;
    LTERM525       = NULL;
    char_literal526       = NULL;
    vectorLiteral515.tree = NULL;

    dollarExpression517.tree = NULL;

    literal518.tree = NULL;

    arrayLiteral519.tree = NULL;

    objectLiteral520.tree = NULL;

    patternLiteral521.tree = NULL;

    expression524.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal514_tree   = NULL;
    Identifier516_tree   = NULL;
    char_literal522_tree   = NULL;
    LTERM523_tree   = NULL;
    LTERM525_tree   = NULL;
    char_literal526_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:631:2: ( 'this' | ( vectorLiteral )=> vectorLiteral | Identifier | dollarExpression | literal | arrayLiteral | objectLiteral | patternLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) )
            
            ANTLR3_UINT32 alt272;

            alt272=9;

            alt272 = cdfa272.predict(ctx, RECOGNIZER, ISTREAM, &cdfa272);
            if  (HASEXCEPTION())
            {
                goto ruleprimaryExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt272) 
            {
        	case 1:
        	    // .//Emerson.g:631:4: 'this'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal514 = (pANTLR3_COMMON_TOKEN) MATCHT(206, &FOLLOW_206_in_primaryExpression5706); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        string_literal514_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal514));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal514_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:632:11: ( vectorLiteral )=> vectorLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_vectorLiteral_in_primaryExpression5724);
        	        vectorLiteral515=vectorLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, vectorLiteral515.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:633:4: Identifier
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        Identifier516 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_primaryExpression5729); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        Identifier516_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Identifier516));
        	        ADAPTOR->addChild(ADAPTOR, root_0, Identifier516_tree);
        	        }

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:634:11: dollarExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_dollarExpression_in_primaryExpression5741);
        	        dollarExpression517=dollarExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, dollarExpression517.tree);

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:635:4: literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_literal_in_primaryExpression5746);
        	        literal518=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal518.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:636:4: arrayLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_arrayLiteral_in_primaryExpression5751);
        	        arrayLiteral519=arrayLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, arrayLiteral519.tree);

        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:637:4: objectLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_objectLiteral_in_primaryExpression5756);
        	        objectLiteral520=objectLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, objectLiteral520.tree);

        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:638:11: patternLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_patternLiteral_in_primaryExpression5768);
        	        patternLiteral521=patternLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, patternLiteral521.tree);

        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:639:4: '(' ( LTERM )* expression ( LTERM )* ')'
        	    {
        	        char_literal522 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_primaryExpression5773); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, char_literal522, NULL); }


        	        // .//Emerson.g:639:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt270=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA270_0 = LA(1);
        	                if ( (LA270_0 == LTERM) ) 
        	                {
        	                    alt270=1;
        	                }

        	            }
        	            switch (alt270) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM523 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression5775); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM523, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop270;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop270: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_primaryExpression5778);
        	        expression524=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression524.tree, NULL); }

        	        // .//Emerson.g:639:26: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt271=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA271_0 = LA(1);
        	                if ( (LA271_0 == LTERM) ) 
        	                {
        	                    alt271=1;
        	                }

        	            }
        	            switch (alt271) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM525 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression5780); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM525, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop271;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop271: ; /* Jump out to here if this rule does not match */

        	        char_literal526 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_primaryExpression5783); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, char_literal526, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 639:37: -> ^( PAREN expression )
        	        	{
        	        	    // .//Emerson.g:639:40: ^( PAREN expression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PAREN, (pANTLR3_UINT8)"PAREN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryExpressionEx; /* Prevent compiler warnings */
    ruleprimaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(94, primaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end primaryExpression */

/** 
 * $ANTLR start vectorLiteral
 * .//Emerson.g:642:1: vectorLiteral : '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* '>' -> ^( VECTOR $e1 $e2 $e3) ;
 */
static EmersonParser_vectorLiteral_return
vectorLiteral(pEmersonParser ctx)
{   
    EmersonParser_vectorLiteral_return retval;
    ANTLR3_UINT32 vectorLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal527;
    pANTLR3_COMMON_TOKEN    LTERM528;
    pANTLR3_COMMON_TOKEN    LTERM529;
    pANTLR3_COMMON_TOKEN    char_literal530;
    pANTLR3_COMMON_TOKEN    LTERM531;
    pANTLR3_COMMON_TOKEN    LTERM532;
    pANTLR3_COMMON_TOKEN    char_literal533;
    pANTLR3_COMMON_TOKEN    LTERM534;
    pANTLR3_COMMON_TOKEN    LTERM535;
    pANTLR3_COMMON_TOKEN    char_literal536;
    EmersonParser_vectorLiteralField_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_vectorLiteralField_return

    EmersonParser_vectorLiteralField_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_vectorLiteralField_return

    EmersonParser_vectorLiteralField_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_vectorLiteralField_return

    pANTLR3_BASE_TREE char_literal527_tree;
    pANTLR3_BASE_TREE LTERM528_tree;
    pANTLR3_BASE_TREE LTERM529_tree;
    pANTLR3_BASE_TREE char_literal530_tree;
    pANTLR3_BASE_TREE LTERM531_tree;
    pANTLR3_BASE_TREE LTERM532_tree;
    pANTLR3_BASE_TREE char_literal533_tree;
    pANTLR3_BASE_TREE LTERM534_tree;
    pANTLR3_BASE_TREE LTERM535_tree;
    pANTLR3_BASE_TREE char_literal536_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_189;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_vectorLiteralField;
    /* Initialize rule variables
     */
    vectorLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(95)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal527       = NULL;
    LTERM528       = NULL;
    LTERM529       = NULL;
    char_literal530       = NULL;
    LTERM531       = NULL;
    LTERM532       = NULL;
    char_literal533       = NULL;
    LTERM534       = NULL;
    LTERM535       = NULL;
    char_literal536       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    e3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal527_tree   = NULL;
    LTERM528_tree   = NULL;
    LTERM529_tree   = NULL;
    char_literal530_tree   = NULL;
    LTERM531_tree   = NULL;
    LTERM532_tree   = NULL;
    char_literal533_tree   = NULL;
    LTERM534_tree   = NULL;
    LTERM535_tree   = NULL;
    char_literal536_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_189   = NULL;
    #define CREATE_stream_189  if (stream_189 == NULL) {stream_189 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 189"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 
    stream_vectorLiteralField   = NULL;
    #define CREATE_stream_vectorLiteralField  if (stream_vectorLiteralField == NULL) {stream_vectorLiteralField = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule vectorLiteralField"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:643:9: ( '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* '>' -> ^( VECTOR $e1 $e2 $e3) )
        // .//Emerson.g:643:11: '<' ( LTERM )* e1= vectorLiteralField ( LTERM )* ',' ( LTERM )* e2= vectorLiteralField ( LTERM )* ',' ( LTERM )* e3= vectorLiteralField ( LTERM )* '>'
        {
            char_literal527 = (pANTLR3_COMMON_TOKEN) MATCHT(189, &FOLLOW_189_in_vectorLiteral5811); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_189; stream_189->add(stream_189, char_literal527, NULL); }


            // .//Emerson.g:643:15: ( LTERM )*

            for (;;)
            {
                int alt273=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA273_0 = LA(1);
                    if ( (LA273_0 == LTERM) ) 
                    {
                        alt273=1;
                    }

                }
                switch (alt273) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM528 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5813); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM528, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop273;	/* break out of the loop */
            	    break;
                }
            }
            loop273: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral5818);
            e1=vectorLiteralField(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e1.tree, NULL); }

            // .//Emerson.g:643:44: ( LTERM )*

            for (;;)
            {
                int alt274=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA274_0 = LA(1);
                    if ( (LA274_0 == LTERM) ) 
                    {
                        alt274=1;
                    }

                }
                switch (alt274) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM529 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5820); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM529, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop274;	/* break out of the loop */
            	    break;
                }
            }
            loop274: ; /* Jump out to here if this rule does not match */

            char_literal530 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_vectorLiteral5823); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal530, NULL); }


            // .//Emerson.g:643:55: ( LTERM )*

            for (;;)
            {
                int alt275=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA275_0 = LA(1);
                    if ( (LA275_0 == LTERM) ) 
                    {
                        alt275=1;
                    }

                }
                switch (alt275) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM531 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5825); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM531, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop275;	/* break out of the loop */
            	    break;
                }
            }
            loop275: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral5830);
            e2=vectorLiteralField(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e2.tree, NULL); }

            // .//Emerson.g:643:84: ( LTERM )*

            for (;;)
            {
                int alt276=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA276_0 = LA(1);
                    if ( (LA276_0 == LTERM) ) 
                    {
                        alt276=1;
                    }

                }
                switch (alt276) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM532 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5832); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM532, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop276;	/* break out of the loop */
            	    break;
                }
            }
            loop276: ; /* Jump out to here if this rule does not match */

            char_literal533 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_vectorLiteral5835); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal533, NULL); }


            // .//Emerson.g:643:95: ( LTERM )*

            for (;;)
            {
                int alt277=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA277_0 = LA(1);
                    if ( (LA277_0 == LTERM) ) 
                    {
                        alt277=1;
                    }

                }
                switch (alt277) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM534 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5837); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM534, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop277;	/* break out of the loop */
            	    break;
                }
            }
            loop277: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_vectorLiteralField_in_vectorLiteral5842);
            e3=vectorLiteralField(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_vectorLiteralField; stream_vectorLiteralField->add(stream_vectorLiteralField, e3.tree, NULL); }

            // .//Emerson.g:643:124: ( LTERM )*

            for (;;)
            {
                int alt278=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA278_0 = LA(1);
                    if ( (LA278_0 == LTERM) ) 
                    {
                        alt278=1;
                    }

                }
                switch (alt278) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM535 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_vectorLiteral5844); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevectorLiteralEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM535, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop278;	/* break out of the loop */
            	    break;
                }
            }
            loop278: ; /* Jump out to here if this rule does not match */

            char_literal536 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_vectorLiteral5847); 
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, char_literal536, NULL); }


             
            /* AST REWRITE
             * elements          : e1, e3, e2
             * token labels      : 
             * rule labels       : e3, retval, e1, e2
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

            	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
            	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 643:135: -> ^( VECTOR $e1 $e2 $e3)
            	{
            	    // .//Emerson.g:643:138: ^( VECTOR $e1 $e2 $e3)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VECTOR, (pANTLR3_UINT8)"VECTOR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_e3 != NULL) stream_e3->free(stream_e3);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_e1 != NULL) stream_e1->free(stream_e1);
            	if (stream_e2 != NULL) stream_e2->free(stream_e2);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralEx; /* Prevent compiler warnings */
    rulevectorLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_189 != NULL) stream_189->free(stream_189);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_190 != NULL) stream_190->free(stream_190);
        if (stream_vectorLiteralField != NULL) stream_vectorLiteralField->free(stream_vectorLiteralField);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(95, vectorLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end vectorLiteral */

/** 
 * $ANTLR start vectorLiteralField
 * .//Emerson.g:648:1: vectorLiteralField : ( additiveExpression | NumericLiteral | callExpression | memberExpression );
 */
static EmersonParser_vectorLiteralField_return
vectorLiteralField(pEmersonParser ctx)
{   
    EmersonParser_vectorLiteralField_return retval;
    ANTLR3_UINT32 vectorLiteralField_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    NumericLiteral538;
    EmersonParser_additiveExpression_return additiveExpression537;
    #undef	RETURN_TYPE_additiveExpression537
    #define	RETURN_TYPE_additiveExpression537 EmersonParser_additiveExpression_return

    EmersonParser_callExpression_return callExpression539;
    #undef	RETURN_TYPE_callExpression539
    #define	RETURN_TYPE_callExpression539 EmersonParser_callExpression_return

    EmersonParser_memberExpression_return memberExpression540;
    #undef	RETURN_TYPE_memberExpression540
    #define	RETURN_TYPE_memberExpression540 EmersonParser_memberExpression_return

    pANTLR3_BASE_TREE NumericLiteral538_tree;

    /* Initialize rule variables
     */
    vectorLiteralField_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(96)) )
    {
    	retval.start = 0;

        return retval; 
    }
    NumericLiteral538       = NULL;
    additiveExpression537.tree = NULL;

    callExpression539.tree = NULL;

    memberExpression540.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    NumericLiteral538_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:649:9: ( additiveExpression | NumericLiteral | callExpression | memberExpression )
            
            ANTLR3_UINT32 alt279;

            alt279=4;

            alt279 = cdfa279.predict(ctx, RECOGNIZER, ISTREAM, &cdfa279);
            if  (HASEXCEPTION())
            {
                goto rulevectorLiteralFieldEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt279) 
            {
        	case 1:
        	    // .//Emerson.g:649:11: additiveExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_additiveExpression_in_vectorLiteralField5889);
        	        additiveExpression537=additiveExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, additiveExpression537.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:651:11: NumericLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        NumericLiteral538 = (pANTLR3_COMMON_TOKEN) MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_vectorLiteralField5902); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        NumericLiteral538_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NumericLiteral538));
        	        ADAPTOR->addChild(ADAPTOR, root_0, NumericLiteral538_tree);
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:652:11: callExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_callExpression_in_vectorLiteralField5914);
        	        callExpression539=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, callExpression539.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:653:11: memberExpression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_memberExpression_in_vectorLiteralField5927);
        	        memberExpression540=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevectorLiteralFieldEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, memberExpression540.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulevectorLiteralFieldEx; /* Prevent compiler warnings */
    rulevectorLiteralFieldEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(96, vectorLiteralField_StartIndex); }
    return retval;
}
/* $ANTLR end vectorLiteralField */

/** 
 * $ANTLR start dollarExpression
 * .//Emerson.g:657:1: dollarExpression : '`' ( LTERM )* Identifier ( LTERM )* '`' -> ^( DOLLAR_EXPRESSION Identifier ) ;
 */
static EmersonParser_dollarExpression_return
dollarExpression(pEmersonParser ctx)
{   
    EmersonParser_dollarExpression_return retval;
    ANTLR3_UINT32 dollarExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal541;
    pANTLR3_COMMON_TOKEN    LTERM542;
    pANTLR3_COMMON_TOKEN    Identifier543;
    pANTLR3_COMMON_TOKEN    LTERM544;
    pANTLR3_COMMON_TOKEN    char_literal545;

    pANTLR3_BASE_TREE char_literal541_tree;
    pANTLR3_BASE_TREE LTERM542_tree;
    pANTLR3_BASE_TREE Identifier543_tree;
    pANTLR3_BASE_TREE LTERM544_tree;
    pANTLR3_BASE_TREE char_literal545_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_207;

    /* Initialize rule variables
     */
    dollarExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(97)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal541       = NULL;
    LTERM542       = NULL;
    Identifier543       = NULL;
    LTERM544       = NULL;
    char_literal545       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal541_tree   = NULL;
    LTERM542_tree   = NULL;
    Identifier543_tree   = NULL;
    LTERM544_tree   = NULL;
    char_literal545_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_207   = NULL;
    #define CREATE_stream_207  if (stream_207 == NULL) {stream_207 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 207"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:658:9: ( '`' ( LTERM )* Identifier ( LTERM )* '`' -> ^( DOLLAR_EXPRESSION Identifier ) )
        // .//Emerson.g:658:11: '`' ( LTERM )* Identifier ( LTERM )* '`'
        {
            char_literal541 = (pANTLR3_COMMON_TOKEN) MATCHT(207, &FOLLOW_207_in_dollarExpression5961); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_207; stream_207->add(stream_207, char_literal541, NULL); }


            // .//Emerson.g:658:15: ( LTERM )*

            for (;;)
            {
                int alt280=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA280_0 = LA(1);
                    if ( (LA280_0 == LTERM) ) 
                    {
                        alt280=1;
                    }

                }
                switch (alt280) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM542 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_dollarExpression5963); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledollarExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM542, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop280;	/* break out of the loop */
            	    break;
                }
            }
            loop280: ; /* Jump out to here if this rule does not match */

            Identifier543 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_dollarExpression5966); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier543, NULL); }


            // .//Emerson.g:658:33: ( LTERM )*

            for (;;)
            {
                int alt281=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA281_0 = LA(1);
                    if ( (LA281_0 == LTERM) ) 
                    {
                        alt281=1;
                    }

                }
                switch (alt281) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM544 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_dollarExpression5968); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledollarExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM544, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop281;	/* break out of the loop */
            	    break;
                }
            }
            loop281: ; /* Jump out to here if this rule does not match */

            char_literal545 = (pANTLR3_COMMON_TOKEN) MATCHT(207, &FOLLOW_207_in_dollarExpression5971); 
            if  (HASEXCEPTION())
            {
                goto ruledollarExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_207; stream_207->add(stream_207, char_literal545, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 658:44: -> ^( DOLLAR_EXPRESSION Identifier )
            	{
            	    // .//Emerson.g:658:47: ^( DOLLAR_EXPRESSION Identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOLLAR_EXPRESSION, (pANTLR3_UINT8)"DOLLAR_EXPRESSION"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledollarExpressionEx; /* Prevent compiler warnings */
    ruledollarExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_207 != NULL) stream_207->free(stream_207);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(97, dollarExpression_StartIndex); }
    return retval;
}
/* $ANTLR end dollarExpression */

/** 
 * $ANTLR start arrayLiteral
 * .//Emerson.g:662:1: arrayLiteral : ( '[' ( LTERM )* ( expression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( expression )? ) | '[' ( LTERM )* e1= expression ( ',' ( LTERM )* e2= expression )* ( LTERM )* ']' -> ^( ARRAY_LITERAL expression ( expression )* ) );
 */
static EmersonParser_arrayLiteral_return
arrayLiteral(pEmersonParser ctx)
{   
    EmersonParser_arrayLiteral_return retval;
    ANTLR3_UINT32 arrayLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal546;
    pANTLR3_COMMON_TOKEN    LTERM547;
    pANTLR3_COMMON_TOKEN    LTERM549;
    pANTLR3_COMMON_TOKEN    char_literal550;
    pANTLR3_COMMON_TOKEN    char_literal551;
    pANTLR3_COMMON_TOKEN    LTERM552;
    pANTLR3_COMMON_TOKEN    char_literal553;
    pANTLR3_COMMON_TOKEN    LTERM554;
    pANTLR3_COMMON_TOKEN    LTERM555;
    pANTLR3_COMMON_TOKEN    char_literal556;
    EmersonParser_expression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_expression_return

    EmersonParser_expression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_expression_return

    EmersonParser_expression_return expression548;
    #undef	RETURN_TYPE_expression548
    #define	RETURN_TYPE_expression548 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal546_tree;
    pANTLR3_BASE_TREE LTERM547_tree;
    pANTLR3_BASE_TREE LTERM549_tree;
    pANTLR3_BASE_TREE char_literal550_tree;
    pANTLR3_BASE_TREE char_literal551_tree;
    pANTLR3_BASE_TREE LTERM552_tree;
    pANTLR3_BASE_TREE char_literal553_tree;
    pANTLR3_BASE_TREE LTERM554_tree;
    pANTLR3_BASE_TREE LTERM555_tree;
    pANTLR3_BASE_TREE char_literal556_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_166;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_165;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    arrayLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(98)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal546       = NULL;
    LTERM547       = NULL;
    LTERM549       = NULL;
    char_literal550       = NULL;
    char_literal551       = NULL;
    LTERM552       = NULL;
    char_literal553       = NULL;
    LTERM554       = NULL;
    LTERM555       = NULL;
    char_literal556       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    expression548.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal546_tree   = NULL;
    LTERM547_tree   = NULL;
    LTERM549_tree   = NULL;
    char_literal550_tree   = NULL;
    char_literal551_tree   = NULL;
    LTERM552_tree   = NULL;
    char_literal553_tree   = NULL;
    LTERM554_tree   = NULL;
    LTERM555_tree   = NULL;
    char_literal556_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_166   = NULL;
    #define CREATE_stream_166  if (stream_166 == NULL) {stream_166 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 166"); } 
    stream_165   = NULL;
    #define CREATE_stream_165  if (stream_165 == NULL) {stream_165 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 165"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:663:3: ( '[' ( LTERM )* ( expression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( expression )? ) | '[' ( LTERM )* e1= expression ( ',' ( LTERM )* e2= expression )* ( LTERM )* ']' -> ^( ARRAY_LITERAL expression ( expression )* ) )
            
            ANTLR3_UINT32 alt289;

            alt289=2;


            {
                int LA289_0 = LA(1);
                if ( (LA289_0 == 165) ) 
                {

                    {
                        int LA289_1 = LA(2);
                        if ( (synpred340_Emerson(ctx)) ) 
                        {
                            alt289=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt289=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 289;
                            EXCEPTION->state        = 1;


                            goto rulearrayLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 289;
                    EXCEPTION->state        = 0;


                    goto rulearrayLiteralEx;
                }
            }
            switch (alt289) 
            {
        	case 1:
        	    // .//Emerson.g:663:5: '[' ( LTERM )* ( expression )? ( LTERM )* ']'
        	    {
        	        char_literal546 = (pANTLR3_COMMON_TOKEN) MATCHT(165, &FOLLOW_165_in_arrayLiteral6007); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_165; stream_165->add(stream_165, char_literal546, NULL); }


        	        // .//Emerson.g:663:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt282=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA282_0 = LA(1);
        	                if ( (LA282_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA282_2 = LA(2);
        	                        if ( (synpred337_Emerson(ctx)) ) 
        	                        {
        	                            alt282=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt282) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM547 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral6009); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM547, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop282;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop282: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:663:16: ( expression )?
        	        {
        	            int alt283=2;
        	            {
        	                int LA283_0 = LA(1);
        	                if ( (((LA283_0 >= Identifier) && (LA283_0 <= StringLiteral)) || ((LA283_0 >= 137) && (LA283_0 <= 138)) || LA283_0 == 141 || ((LA283_0 >= 164) && (LA283_0 <= 165)) || LA283_0 == 189 || ((LA283_0 >= 194) && (LA283_0 <= 195)) || ((LA283_0 >= 199) && (LA283_0 <= 210))) ) 
        	                {
        	                    alt283=1;
        	                }
        	            }
        	            switch (alt283) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:663:17: expression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral6013);
        	        	        expression548=expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression548.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:663:30: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt284=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA284_0 = LA(1);
        	                if ( (LA284_0 == LTERM) ) 
        	                {
        	                    alt284=1;
        	                }

        	            }
        	            switch (alt284) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM549 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral6017); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM549, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop284;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop284: ; /* Jump out to here if this rule does not match */

        	        char_literal550 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_arrayLiteral6020); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, char_literal550, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 663:41: -> ^( ARRAY_LITERAL ( expression )? )
        	        	{
        	        	    // .//Emerson.g:663:44: ^( ARRAY_LITERAL ( expression )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        // .//Emerson.g:663:60: ( expression )?
        	        	        {
        	        	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        	}
        	        	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:664:5: '[' ( LTERM )* e1= expression ( ',' ( LTERM )* e2= expression )* ( LTERM )* ']'
        	    {
        	        char_literal551 = (pANTLR3_COMMON_TOKEN) MATCHT(165, &FOLLOW_165_in_arrayLiteral6035); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_165; stream_165->add(stream_165, char_literal551, NULL); }


        	        // .//Emerson.g:664:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt285=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA285_0 = LA(1);
        	                if ( (LA285_0 == LTERM) ) 
        	                {
        	                    alt285=1;
        	                }

        	            }
        	            switch (alt285) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM552 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral6037); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM552, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop285;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop285: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral6042);
        	        e1=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, e1.tree, NULL); }

        	        // .//Emerson.g:664:30: ( ',' ( LTERM )* e2= expression )*

        	        for (;;)
        	        {
        	            int alt287=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA287_0 = LA(1);
        	                if ( (LA287_0 == 140) ) 
        	                {
        	                    alt287=1;
        	                }

        	            }
        	            switch (alt287) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:664:31: ',' ( LTERM )* e2= expression
        	        	    {
        	        	        char_literal553 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_arrayLiteral6045); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal553, NULL); }


        	        	        // .//Emerson.g:664:35: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt286=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA286_0 = LA(1);
        	        	                if ( (LA286_0 == LTERM) ) 
        	        	                {
        	        	                    alt286=1;
        	        	                }

        	        	            }
        	        	            switch (alt286) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM554 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral6047); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulearrayLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM554, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop286;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop286: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_expression_in_arrayLiteral6052);
        	        	        e2=expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, e2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop287;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop287: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:664:58: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt288=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA288_0 = LA(1);
        	                if ( (LA288_0 == LTERM) ) 
        	                {
        	                    alt288=1;
        	                }

        	            }
        	            switch (alt288) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM555 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral6056); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM555, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop288;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop288: ; /* Jump out to here if this rule does not match */

        	        char_literal556 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_arrayLiteral6059); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, char_literal556, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression, expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 664:69: -> ^( ARRAY_LITERAL expression ( expression )* )
        	        	{
        	        	    // .//Emerson.g:664:72: ^( ARRAY_LITERAL expression ( expression )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
        	        	        // .//Emerson.g:664:99: ( expression )*
        	        	        {
        	        	        	while ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        	}
        	        	        	if (stream_expression != NULL) stream_expression->reset(stream_expression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayLiteralEx; /* Prevent compiler warnings */
    rulearrayLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_166 != NULL) stream_166->free(stream_166);
        if (stream_165 != NULL) stream_165->free(stream_165);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(98, arrayLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end arrayLiteral */

/** 
 * $ANTLR start objectLiteral
 * .//Emerson.g:668:1: objectLiteral : ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) );
 */
static EmersonParser_objectLiteral_return
objectLiteral(pEmersonParser ctx)
{   
    EmersonParser_objectLiteral_return retval;
    ANTLR3_UINT32 objectLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal557;
    pANTLR3_COMMON_TOKEN    LTERM558;
    pANTLR3_COMMON_TOKEN    LTERM560;
    pANTLR3_COMMON_TOKEN    char_literal561;
    pANTLR3_COMMON_TOKEN    char_literal562;
    pANTLR3_COMMON_TOKEN    LTERM563;
    pANTLR3_COMMON_TOKEN    char_literal564;
    pANTLR3_COMMON_TOKEN    LTERM565;
    pANTLR3_COMMON_TOKEN    LTERM566;
    pANTLR3_COMMON_TOKEN    char_literal567;
    EmersonParser_propertyNameAndValue_return p1;
    #undef	RETURN_TYPE_p1
    #define	RETURN_TYPE_p1 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return p2;
    #undef	RETURN_TYPE_p2
    #define	RETURN_TYPE_p2 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return propertyNameAndValue559;
    #undef	RETURN_TYPE_propertyNameAndValue559
    #define	RETURN_TYPE_propertyNameAndValue559 EmersonParser_propertyNameAndValue_return

    pANTLR3_BASE_TREE char_literal557_tree;
    pANTLR3_BASE_TREE LTERM558_tree;
    pANTLR3_BASE_TREE LTERM560_tree;
    pANTLR3_BASE_TREE char_literal561_tree;
    pANTLR3_BASE_TREE char_literal562_tree;
    pANTLR3_BASE_TREE LTERM563_tree;
    pANTLR3_BASE_TREE char_literal564_tree;
    pANTLR3_BASE_TREE LTERM565_tree;
    pANTLR3_BASE_TREE LTERM566_tree;
    pANTLR3_BASE_TREE char_literal567_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyNameAndValue;
    /* Initialize rule variables
     */
    objectLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(99)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal557       = NULL;
    LTERM558       = NULL;
    LTERM560       = NULL;
    char_literal561       = NULL;
    char_literal562       = NULL;
    LTERM563       = NULL;
    char_literal564       = NULL;
    LTERM565       = NULL;
    LTERM566       = NULL;
    char_literal567       = NULL;
    p1.tree = NULL;

    p2.tree = NULL;

    propertyNameAndValue559.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal557_tree   = NULL;
    LTERM558_tree   = NULL;
    LTERM560_tree   = NULL;
    char_literal561_tree   = NULL;
    char_literal562_tree   = NULL;
    LTERM563_tree   = NULL;
    char_literal564_tree   = NULL;
    LTERM565_tree   = NULL;
    LTERM566_tree   = NULL;
    char_literal567_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_propertyNameAndValue   = NULL;
    #define CREATE_stream_propertyNameAndValue  if (stream_propertyNameAndValue == NULL) {stream_propertyNameAndValue = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyNameAndValue"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:669:3: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) )
            
            ANTLR3_UINT32 alt297;

            alt297=2;


            {
                int LA297_0 = LA(1);
                if ( (LA297_0 == 141) ) 
                {

                    {
                        int LA297_1 = LA(2);
                        if ( (synpred348_Emerson(ctx)) ) 
                        {
                            alt297=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt297=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 297;
                            EXCEPTION->state        = 1;


                            goto ruleobjectLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 297;
                    EXCEPTION->state        = 0;


                    goto ruleobjectLiteralEx;
                }
            }
            switch (alt297) 
            {
        	case 1:
        	    // .//Emerson.g:669:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
        	    {
        	        char_literal557 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_objectLiteral6091); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal557, NULL); }


        	        // .//Emerson.g:669:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt290=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA290_0 = LA(1);
        	                if ( (LA290_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA290_2 = LA(2);
        	                        if ( (synpred345_Emerson(ctx)) ) 
        	                        {
        	                            alt290=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt290) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM558 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral6093); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM558, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop290;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop290: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:669:16: ( propertyNameAndValue )?
        	        {
        	            int alt291=2;
        	            {
        	                int LA291_0 = LA(1);
        	                if ( (((LA291_0 >= Identifier) && (LA291_0 <= StringLiteral))) ) 
        	                {
        	                    alt291=1;
        	                }
        	            }
        	            switch (alt291) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: propertyNameAndValue
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral6096);
        	        	        propertyNameAndValue559=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, propertyNameAndValue559.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:669:38: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt292=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA292_0 = LA(1);
        	                if ( (LA292_0 == LTERM) ) 
        	                {
        	                    alt292=1;
        	                }

        	            }
        	            switch (alt292) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM560 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral6099); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM560, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop292;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop292: ; /* Jump out to here if this rule does not match */

        	        char_literal561 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_objectLiteral6102); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal561, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 669:49: -> ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	{
        	        	    // .//Emerson.g:669:52: ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        // .//Emerson.g:669:66: ( propertyNameAndValue )?
        	        	        {
        	        	        	if ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if ( stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:670:5: '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}'
        	    {
        	        char_literal562 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_objectLiteral6117); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal562, NULL); }


        	        // .//Emerson.g:670:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt293=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA293_0 = LA(1);
        	                if ( (LA293_0 == LTERM) ) 
        	                {
        	                    alt293=1;
        	                }

        	            }
        	            switch (alt293) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM563 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral6119); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM563, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop293;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop293: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral6124);
        	        p1=propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p1.tree, NULL); }

        	        // .//Emerson.g:670:40: ( ',' ( LTERM )* p2= propertyNameAndValue )*

        	        for (;;)
        	        {
        	            int alt295=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA295_0 = LA(1);
        	                if ( (LA295_0 == 140) ) 
        	                {
        	                    alt295=1;
        	                }

        	            }
        	            switch (alt295) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:670:41: ',' ( LTERM )* p2= propertyNameAndValue
        	        	    {
        	        	        char_literal564 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_objectLiteral6127); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal564, NULL); }


        	        	        // .//Emerson.g:670:45: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt294=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA294_0 = LA(1);
        	        	                if ( (LA294_0 == LTERM) ) 
        	        	                {
        	        	                    alt294=1;
        	        	                }

        	        	            }
        	        	            switch (alt294) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM565 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral6129); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleobjectLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM565, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop294;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop294: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral6134);
        	        	        p2=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop295;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop295: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:670:78: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt296=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA296_0 = LA(1);
        	                if ( (LA296_0 == LTERM) ) 
        	                {
        	                    alt296=1;
        	                }

        	            }
        	            switch (alt296) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM566 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral6138); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM566, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop296;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop296: ; /* Jump out to here if this rule does not match */

        	        char_literal567 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_objectLiteral6145); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal567, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue, propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 670:93: -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	{
        	        	    // .//Emerson.g:670:96: ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));
        	        	        // .//Emerson.g:670:131: ( propertyNameAndValue )*
        	        	        {
        	        	        	while ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectLiteralEx; /* Prevent compiler warnings */
    ruleobjectLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->free(stream_propertyNameAndValue);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(99, objectLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end objectLiteral */

/** 
 * $ANTLR start patternLiteral
 * .//Emerson.g:674:1: patternLiteral : ( '{' ( LTERM )* ( nameValueProto )? ( LTERM )* '}' -> ^( PATTERN_LITERAL ( nameValueProto )? ) | '{' ( LTERM )* p1= nameValueProto ( ',' ( LTERM )* p2= nameValueProto )* ( LTERM )* '}' -> ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* ) );
 */
static EmersonParser_patternLiteral_return
patternLiteral(pEmersonParser ctx)
{   
    EmersonParser_patternLiteral_return retval;
    ANTLR3_UINT32 patternLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal568;
    pANTLR3_COMMON_TOKEN    LTERM569;
    pANTLR3_COMMON_TOKEN    LTERM571;
    pANTLR3_COMMON_TOKEN    char_literal572;
    pANTLR3_COMMON_TOKEN    char_literal573;
    pANTLR3_COMMON_TOKEN    LTERM574;
    pANTLR3_COMMON_TOKEN    char_literal575;
    pANTLR3_COMMON_TOKEN    LTERM576;
    pANTLR3_COMMON_TOKEN    LTERM577;
    pANTLR3_COMMON_TOKEN    char_literal578;
    EmersonParser_nameValueProto_return p1;
    #undef	RETURN_TYPE_p1
    #define	RETURN_TYPE_p1 EmersonParser_nameValueProto_return

    EmersonParser_nameValueProto_return p2;
    #undef	RETURN_TYPE_p2
    #define	RETURN_TYPE_p2 EmersonParser_nameValueProto_return

    EmersonParser_nameValueProto_return nameValueProto570;
    #undef	RETURN_TYPE_nameValueProto570
    #define	RETURN_TYPE_nameValueProto570 EmersonParser_nameValueProto_return

    pANTLR3_BASE_TREE char_literal568_tree;
    pANTLR3_BASE_TREE LTERM569_tree;
    pANTLR3_BASE_TREE LTERM571_tree;
    pANTLR3_BASE_TREE char_literal572_tree;
    pANTLR3_BASE_TREE char_literal573_tree;
    pANTLR3_BASE_TREE LTERM574_tree;
    pANTLR3_BASE_TREE char_literal575_tree;
    pANTLR3_BASE_TREE LTERM576_tree;
    pANTLR3_BASE_TREE LTERM577_tree;
    pANTLR3_BASE_TREE char_literal578_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_nameValueProto;
    /* Initialize rule variables
     */
    patternLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(100)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal568       = NULL;
    LTERM569       = NULL;
    LTERM571       = NULL;
    char_literal572       = NULL;
    char_literal573       = NULL;
    LTERM574       = NULL;
    char_literal575       = NULL;
    LTERM576       = NULL;
    LTERM577       = NULL;
    char_literal578       = NULL;
    p1.tree = NULL;

    p2.tree = NULL;

    nameValueProto570.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal568_tree   = NULL;
    LTERM569_tree   = NULL;
    LTERM571_tree   = NULL;
    char_literal572_tree   = NULL;
    char_literal573_tree   = NULL;
    LTERM574_tree   = NULL;
    char_literal575_tree   = NULL;
    LTERM576_tree   = NULL;
    LTERM577_tree   = NULL;
    char_literal578_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_nameValueProto   = NULL;
    #define CREATE_stream_nameValueProto  if (stream_nameValueProto == NULL) {stream_nameValueProto = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule nameValueProto"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:675:3: ( '{' ( LTERM )* ( nameValueProto )? ( LTERM )* '}' -> ^( PATTERN_LITERAL ( nameValueProto )? ) | '{' ( LTERM )* p1= nameValueProto ( ',' ( LTERM )* p2= nameValueProto )* ( LTERM )* '}' -> ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* ) )
            
            ANTLR3_UINT32 alt305;

            alt305=2;


            {
                int LA305_0 = LA(1);
                if ( (LA305_0 == 141) ) 
                {

                    {
                        int LA305_1 = LA(2);
                        if ( (synpred356_Emerson(ctx)) ) 
                        {
                            alt305=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt305=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 305;
                            EXCEPTION->state        = 1;


                            goto rulepatternLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 305;
                    EXCEPTION->state        = 0;


                    goto rulepatternLiteralEx;
                }
            }
            switch (alt305) 
            {
        	case 1:
        	    // .//Emerson.g:675:5: '{' ( LTERM )* ( nameValueProto )? ( LTERM )* '}'
        	    {
        	        char_literal568 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_patternLiteral6171); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal568, NULL); }


        	        // .//Emerson.g:675:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt298=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA298_0 = LA(1);
        	                if ( (LA298_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA298_2 = LA(2);
        	                        if ( (synpred353_Emerson(ctx)) ) 
        	                        {
        	                            alt298=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt298) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM569 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral6173); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM569, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop298;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop298: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:675:16: ( nameValueProto )?
        	        {
        	            int alt299=2;
        	            alt299 = cdfa299.predict(ctx, RECOGNIZER, ISTREAM, &cdfa299);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulepatternLiteralEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt299) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: nameValueProto
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral6176);
        	        	        nameValueProto570=nameValueProto(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_nameValueProto; stream_nameValueProto->add(stream_nameValueProto, nameValueProto570.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:675:32: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt300=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA300_0 = LA(1);
        	                if ( (LA300_0 == LTERM) ) 
        	                {
        	                    alt300=1;
        	                }

        	            }
        	            switch (alt300) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM571 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral6179); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM571, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop300;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop300: ; /* Jump out to here if this rule does not match */

        	        char_literal572 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_patternLiteral6182); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal572, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : nameValueProto
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 675:43: -> ^( PATTERN_LITERAL ( nameValueProto )? )
        	        	{
        	        	    // .//Emerson.g:675:46: ^( PATTERN_LITERAL ( nameValueProto )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PATTERN_LITERAL, (pANTLR3_UINT8)"PATTERN_LITERAL"), root_1));

        	        	        // .//Emerson.g:675:64: ( nameValueProto )?
        	        	        {
        	        	        	if ( (stream_nameValueProto != NULL && stream_nameValueProto->hasNext(stream_nameValueProto))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_nameValueProto == NULL ? NULL : stream_nameValueProto->nextTree(stream_nameValueProto));

        	        	        	}
        	        	        	if ( stream_nameValueProto != NULL) stream_nameValueProto->reset(stream_nameValueProto);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:676:5: '{' ( LTERM )* p1= nameValueProto ( ',' ( LTERM )* p2= nameValueProto )* ( LTERM )* '}'
        	    {
        	        char_literal573 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_patternLiteral6197); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, char_literal573, NULL); }


        	        // .//Emerson.g:676:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt301=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA301_0 = LA(1);
        	                if ( (LA301_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA301_2 = LA(2);
        	                        if ( (synpred357_Emerson(ctx)) ) 
        	                        {
        	                            alt301=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt301) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM574 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral6199); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM574, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop301;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop301: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral6205);
        	        p1=nameValueProto(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_nameValueProto; stream_nameValueProto->add(stream_nameValueProto, p1.tree, NULL); }

        	        // .//Emerson.g:676:35: ( ',' ( LTERM )* p2= nameValueProto )*

        	        for (;;)
        	        {
        	            int alt303=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA303_0 = LA(1);
        	                if ( (LA303_0 == 140) ) 
        	                {
        	                    alt303=1;
        	                }

        	            }
        	            switch (alt303) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:676:36: ',' ( LTERM )* p2= nameValueProto
        	        	    {
        	        	        char_literal575 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_patternLiteral6208); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal575, NULL); }


        	        	        // .//Emerson.g:676:40: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt302=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA302_0 = LA(1);
        	        	                if ( (LA302_0 == LTERM) ) 
        	        	                {
        	        	                    {
        	        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                        */
        	        	                        int LA302_2 = LA(2);
        	        	                        if ( (synpred358_Emerson(ctx)) ) 
        	        	                        {
        	        	                            alt302=1;
        	        	                        }

        	        	                    }
        	        	                }

        	        	            }
        	        	            switch (alt302) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM576 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral6210); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulepatternLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM576, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop302;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop302: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_patternLiteral6215);
        	        	        p2=nameValueProto(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_nameValueProto; stream_nameValueProto->add(stream_nameValueProto, p2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop303;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop303: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:676:67: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt304=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA304_0 = LA(1);
        	                if ( (LA304_0 == LTERM) ) 
        	                {
        	                    alt304=1;
        	                }

        	            }
        	            switch (alt304) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM577 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_patternLiteral6219); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulepatternLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM577, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop304;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop304: ; /* Jump out to here if this rule does not match */

        	        char_literal578 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_patternLiteral6222); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulepatternLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, char_literal578, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : nameValueProto, nameValueProto
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 676:78: -> ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* )
        	        	{
        	        	    // .//Emerson.g:676:81: ^( PATTERN_LITERAL nameValueProto ( nameValueProto )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PATTERN_LITERAL, (pANTLR3_UINT8)"PATTERN_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_nameValueProto == NULL ? NULL : stream_nameValueProto->nextTree(stream_nameValueProto));
        	        	        // .//Emerson.g:676:114: ( nameValueProto )*
        	        	        {
        	        	        	while ( (stream_nameValueProto != NULL && stream_nameValueProto->hasNext(stream_nameValueProto))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_nameValueProto == NULL ? NULL : stream_nameValueProto->nextTree(stream_nameValueProto));

        	        	        	}
        	        	        	if (stream_nameValueProto != NULL) stream_nameValueProto->reset(stream_nameValueProto);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulepatternLiteralEx; /* Prevent compiler warnings */
    rulepatternLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_nameValueProto != NULL) stream_nameValueProto->free(stream_nameValueProto);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(100, patternLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end patternLiteral */

/** 
 * $ANTLR start propertyNameAndValue
 * .//Emerson.g:679:1: propertyNameAndValue : propertyName ( LTERM )* ':' ( LTERM )* expression -> ^( NAME_VALUE propertyName expression ) ;
 */
static EmersonParser_propertyNameAndValue_return
propertyNameAndValue(pEmersonParser ctx)
{   
    EmersonParser_propertyNameAndValue_return retval;
    ANTLR3_UINT32 propertyNameAndValue_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM580;
    pANTLR3_COMMON_TOKEN    char_literal581;
    pANTLR3_COMMON_TOKEN    LTERM582;
    EmersonParser_propertyName_return propertyName579;
    #undef	RETURN_TYPE_propertyName579
    #define	RETURN_TYPE_propertyName579 EmersonParser_propertyName_return

    EmersonParser_expression_return expression583;
    #undef	RETURN_TYPE_expression583
    #define	RETURN_TYPE_expression583 EmersonParser_expression_return

    pANTLR3_BASE_TREE LTERM580_tree;
    pANTLR3_BASE_TREE char_literal581_tree;
    pANTLR3_BASE_TREE LTERM582_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyName;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    propertyNameAndValue_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(101)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM580       = NULL;
    char_literal581       = NULL;
    LTERM582       = NULL;
    propertyName579.tree = NULL;

    expression583.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM580_tree   = NULL;
    char_literal581_tree   = NULL;
    LTERM582_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_propertyName   = NULL;
    #define CREATE_stream_propertyName  if (stream_propertyName == NULL) {stream_propertyName = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyName"); }
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:680:9: ( propertyName ( LTERM )* ':' ( LTERM )* expression -> ^( NAME_VALUE propertyName expression ) )
        // .//Emerson.g:680:11: propertyName ( LTERM )* ':' ( LTERM )* expression
        {
            FOLLOWPUSH(FOLLOW_propertyName_in_propertyNameAndValue6252);
            propertyName579=propertyName(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_propertyName; stream_propertyName->add(stream_propertyName, propertyName579.tree, NULL); }

            // .//Emerson.g:680:24: ( LTERM )*

            for (;;)
            {
                int alt306=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA306_0 = LA(1);
                    if ( (LA306_0 == LTERM) ) 
                    {
                        alt306=1;
                    }

                }
                switch (alt306) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM580 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue6254); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM580, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop306;	/* break out of the loop */
            	    break;
                }
            }
            loop306: ; /* Jump out to here if this rule does not match */

            char_literal581 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_propertyNameAndValue6257); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal581, NULL); }


            // .//Emerson.g:680:35: ( LTERM )*

            for (;;)
            {
                int alt307=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA307_0 = LA(1);
                    if ( (LA307_0 == LTERM) ) 
                    {
                        alt307=1;
                    }

                }
                switch (alt307) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM582 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue6259); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM582, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop307;	/* break out of the loop */
            	    break;
                }
            }
            loop307: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_propertyNameAndValue6262);
            expression583=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression583.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, propertyName
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 680:53: -> ^( NAME_VALUE propertyName expression )
            	{
            	    // .//Emerson.g:680:56: ^( NAME_VALUE propertyName expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME_VALUE, (pANTLR3_UINT8)"NAME_VALUE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyName == NULL ? NULL : stream_propertyName->nextTree(stream_propertyName));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameAndValueEx; /* Prevent compiler warnings */
    rulepropertyNameAndValueEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_propertyName != NULL) stream_propertyName->free(stream_propertyName);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(101, propertyNameAndValue_StartIndex); }
    return retval;
}
/* $ANTLR end propertyNameAndValue */

/** 
 * $ANTLR start nameValueProto
 * .//Emerson.g:684:1: nameValueProto : ( ( propertyName ( LTERM )* ) ':' ( LTERM )* (a1= expression ( LTERM )* )? ':' ( LTERM )* (a2= expression )? -> ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? ) | ( LTERM )* ':' ( LTERM )* ':' -> ^( BLANK_NAME_VAL_PROT ) );
 */
static EmersonParser_nameValueProto_return
nameValueProto(pEmersonParser ctx)
{   
    EmersonParser_nameValueProto_return retval;
    ANTLR3_UINT32 nameValueProto_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM585;
    pANTLR3_COMMON_TOKEN    char_literal586;
    pANTLR3_COMMON_TOKEN    LTERM587;
    pANTLR3_COMMON_TOKEN    LTERM588;
    pANTLR3_COMMON_TOKEN    char_literal589;
    pANTLR3_COMMON_TOKEN    LTERM590;
    pANTLR3_COMMON_TOKEN    LTERM591;
    pANTLR3_COMMON_TOKEN    char_literal592;
    pANTLR3_COMMON_TOKEN    LTERM593;
    pANTLR3_COMMON_TOKEN    char_literal594;
    EmersonParser_expression_return a1;
    #undef	RETURN_TYPE_a1
    #define	RETURN_TYPE_a1 EmersonParser_expression_return

    EmersonParser_expression_return a2;
    #undef	RETURN_TYPE_a2
    #define	RETURN_TYPE_a2 EmersonParser_expression_return

    EmersonParser_propertyName_return propertyName584;
    #undef	RETURN_TYPE_propertyName584
    #define	RETURN_TYPE_propertyName584 EmersonParser_propertyName_return

    pANTLR3_BASE_TREE LTERM585_tree;
    pANTLR3_BASE_TREE char_literal586_tree;
    pANTLR3_BASE_TREE LTERM587_tree;
    pANTLR3_BASE_TREE LTERM588_tree;
    pANTLR3_BASE_TREE char_literal589_tree;
    pANTLR3_BASE_TREE LTERM590_tree;
    pANTLR3_BASE_TREE LTERM591_tree;
    pANTLR3_BASE_TREE char_literal592_tree;
    pANTLR3_BASE_TREE LTERM593_tree;
    pANTLR3_BASE_TREE char_literal594_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyName;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    nameValueProto_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(102)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM585       = NULL;
    char_literal586       = NULL;
    LTERM587       = NULL;
    LTERM588       = NULL;
    char_literal589       = NULL;
    LTERM590       = NULL;
    LTERM591       = NULL;
    char_literal592       = NULL;
    LTERM593       = NULL;
    char_literal594       = NULL;
    a1.tree = NULL;

    a2.tree = NULL;

    propertyName584.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM585_tree   = NULL;
    char_literal586_tree   = NULL;
    LTERM587_tree   = NULL;
    LTERM588_tree   = NULL;
    char_literal589_tree   = NULL;
    LTERM590_tree   = NULL;
    LTERM591_tree   = NULL;
    char_literal592_tree   = NULL;
    LTERM593_tree   = NULL;
    char_literal594_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_propertyName   = NULL;
    #define CREATE_stream_propertyName  if (stream_propertyName == NULL) {stream_propertyName = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyName"); }
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:685:5: ( ( propertyName ( LTERM )* ) ':' ( LTERM )* (a1= expression ( LTERM )* )? ':' ( LTERM )* (a2= expression )? -> ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? ) | ( LTERM )* ':' ( LTERM )* ':' -> ^( BLANK_NAME_VAL_PROT ) )
            
            ANTLR3_UINT32 alt316;

            alt316=2;


            {
                int LA316_0 = LA(1);
                if ( (((LA316_0 >= Identifier) && (LA316_0 <= StringLiteral))) ) 
                {
                    alt316=1;
                }
                else if ( (LA316_0 == LTERM || LA316_0 == 158) ) 
                {
                    alt316=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 316;
                    EXCEPTION->state        = 0;


                    goto rulenameValueProtoEx;
                }
            }
            switch (alt316) 
            {
        	case 1:
        	    // .//Emerson.g:685:7: ( propertyName ( LTERM )* ) ':' ( LTERM )* (a1= expression ( LTERM )* )? ':' ( LTERM )* (a2= expression )?
        	    {
        	        // .//Emerson.g:685:7: ( propertyName ( LTERM )* )
        	        // .//Emerson.g:685:8: propertyName ( LTERM )*
        	        {
        	            FOLLOWPUSH(FOLLOW_propertyName_in_nameValueProto6295);
        	            propertyName584=propertyName(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulenameValueProtoEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_propertyName; stream_propertyName->add(stream_propertyName, propertyName584.tree, NULL); }

        	            // .//Emerson.g:685:21: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt308=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA308_0 = LA(1);
        	                    if ( (LA308_0 == LTERM) ) 
        	                    {
        	                        alt308=1;
        	                    }

        	                }
        	                switch (alt308) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM585 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6297); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulenameValueProtoEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM585, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop308;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop308: ; /* Jump out to here if this rule does not match */


        	        }

        	        char_literal586 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_nameValueProto6301); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal586, NULL); }


        	        // .//Emerson.g:685:34: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt309=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA309_0 = LA(1);
        	                if ( (LA309_0 == LTERM) ) 
        	                {
        	                    alt309=1;
        	                }

        	            }
        	            switch (alt309) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM587 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6304); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM587, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop309;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop309: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:685:41: (a1= expression ( LTERM )* )?
        	        {
        	            int alt311=2;
        	            {
        	                int LA311_0 = LA(1);
        	                if ( (((LA311_0 >= Identifier) && (LA311_0 <= StringLiteral)) || ((LA311_0 >= 137) && (LA311_0 <= 138)) || LA311_0 == 141 || ((LA311_0 >= 164) && (LA311_0 <= 165)) || LA311_0 == 189 || ((LA311_0 >= 194) && (LA311_0 <= 195)) || ((LA311_0 >= 199) && (LA311_0 <= 210))) ) 
        	                {
        	                    alt311=1;
        	                }
        	            }
        	            switch (alt311) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:685:42: a1= expression ( LTERM )*
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expression_in_nameValueProto6310);
        	        	        a1=expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, a1.tree, NULL); }

        	        	        // .//Emerson.g:685:56: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt310=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA310_0 = LA(1);
        	        	                if ( (LA310_0 == LTERM) ) 
        	        	                {
        	        	                    alt310=1;
        	        	                }

        	        	            }
        	        	            switch (alt310) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM588 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6312); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulenameValueProtoEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM588, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop310;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop310: ; /* Jump out to here if this rule does not match */


        	        	    }
        	        	    break;

        	            }
        	        }
        	        char_literal589 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_nameValueProto6317); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal589, NULL); }


        	        // .//Emerson.g:685:69: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt312=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA312_0 = LA(1);
        	                if ( (LA312_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA312_2 = LA(2);
        	                        if ( (synpred367_Emerson(ctx)) ) 
        	                        {
        	                            alt312=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt312) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM590 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6319); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM590, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop312;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop312: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:685:76: (a2= expression )?
        	        {
        	            int alt313=2;
        	            {
        	                int LA313_0 = LA(1);
        	                if ( (((LA313_0 >= Identifier) && (LA313_0 <= StringLiteral)) || ((LA313_0 >= 137) && (LA313_0 <= 138)) || LA313_0 == 141 || ((LA313_0 >= 164) && (LA313_0 <= 165)) || LA313_0 == 189 || ((LA313_0 >= 194) && (LA313_0 <= 195)) || ((LA313_0 >= 199) && (LA313_0 <= 210))) ) 
        	                {
        	                    alt313=1;
        	                }
        	            }
        	            switch (alt313) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:685:78: a2= expression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expression_in_nameValueProto6326);
        	        	        a2=expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, a2.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : a2, a1, propertyName
        	         * token labels      : 
        	         * rule labels       : retval, a1, a2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_a2;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_a1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a1", a1.tree != NULL ? a1.tree : NULL);
        	        	stream_a2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a2", a2.tree != NULL ? a2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 685:95: -> ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? )
        	        	{
        	        	    // .//Emerson.g:685:98: ^( NAME_VALUE_PROTO ^( NAME propertyName ) ( ^( VALUE $a1) )? ( ^( PROTO $a2) )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME_VALUE_PROTO, (pANTLR3_UINT8)"NAME_VALUE_PROTO"), root_1));

        	        	        // .//Emerson.g:685:117: ^( NAME propertyName )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME, (pANTLR3_UINT8)"NAME"), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_propertyName == NULL ? NULL : stream_propertyName->nextTree(stream_propertyName));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        // .//Emerson.g:685:138: ( ^( VALUE $a1) )?
        	        	        {
        	        	        	if ( (stream_a1 != NULL && stream_a1->hasNext(stream_a1))  )
        	        	        	{
        	        	        		// .//Emerson.g:685:139: ^( VALUE $a1)
        	        	        		{
        	        	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VALUE, (pANTLR3_UINT8)"VALUE"), root_2));

        	        	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_a1 == NULL ? NULL : stream_a1->nextTree(stream_a1));

        	        	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        		}

        	        	        	}
        	        	        	if ( stream_a1 != NULL) stream_a1->reset(stream_a1);

        	        	        }
        	        	        // .//Emerson.g:685:154: ( ^( PROTO $a2) )?
        	        	        {
        	        	        	if ( (stream_a2 != NULL && stream_a2->hasNext(stream_a2))  )
        	        	        	{
        	        	        		// .//Emerson.g:685:155: ^( PROTO $a2)
        	        	        		{
        	        	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PROTO, (pANTLR3_UINT8)"PROTO"), root_2));

        	        	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_a2 == NULL ? NULL : stream_a2->nextTree(stream_a2));

        	        	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        		}

        	        	        	}
        	        	        	if ( stream_a2 != NULL) stream_a2->reset(stream_a2);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_a1 != NULL) stream_a1->free(stream_a1);
        	        	if (stream_a2 != NULL) stream_a2->free(stream_a2);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:686:7: ( LTERM )* ':' ( LTERM )* ':'
        	    {

        	        // .//Emerson.g:686:7: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt314=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA314_0 = LA(1);
        	                if ( (LA314_0 == LTERM) ) 
        	                {
        	                    alt314=1;
        	                }

        	            }
        	            switch (alt314) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM591 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6370); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM591, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop314;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop314: ; /* Jump out to here if this rule does not match */

        	        char_literal592 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_nameValueProto6373); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal592, NULL); }


        	        // .//Emerson.g:686:18: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt315=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA315_0 = LA(1);
        	                if ( (LA315_0 == LTERM) ) 
        	                {
        	                    alt315=1;
        	                }

        	            }
        	            switch (alt315) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM593 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_nameValueProto6375); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenameValueProtoEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM593, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop315;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop315: ; /* Jump out to here if this rule does not match */

        	        char_literal594 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_nameValueProto6378); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenameValueProtoEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, char_literal594, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 686:29: -> ^( BLANK_NAME_VAL_PROT )
        	        	{
        	        	    // .//Emerson.g:686:32: ^( BLANK_NAME_VAL_PROT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BLANK_NAME_VAL_PROT, (pANTLR3_UINT8)"BLANK_NAME_VAL_PROT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenameValueProtoEx; /* Prevent compiler warnings */
    rulenameValueProtoEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_propertyName != NULL) stream_propertyName->free(stream_propertyName);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(102, nameValueProto_StartIndex); }
    return retval;
}
/* $ANTLR end nameValueProto */

/** 
 * $ANTLR start propertyName
 * .//Emerson.g:691:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
 */
static EmersonParser_propertyName_return
propertyName(pEmersonParser ctx)
{   
    EmersonParser_propertyName_return retval;
    ANTLR3_UINT32 propertyName_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set595;

    pANTLR3_BASE_TREE set595_tree;

    /* Initialize rule variables
     */
    propertyName_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(103)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set595       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set595_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:692:2: ( Identifier | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set595=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= Identifier) && (LA(1) <= StringLiteral)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set595)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_propertyName0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_propertyName0);    goto rulepropertyNameEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameEx; /* Prevent compiler warnings */
    rulepropertyNameEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(103, propertyName_StartIndex); }
    return retval;
}
/* $ANTLR end propertyName */

/** 
 * $ANTLR start literal
 * .//Emerson.g:699:1: literal : ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral );
 */
static EmersonParser_literal_return
literal(pEmersonParser ctx)
{   
    EmersonParser_literal_return retval;
    ANTLR3_UINT32 literal_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set596;

    pANTLR3_BASE_TREE set596_tree;

    /* Initialize rule variables
     */
    literal_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(104)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set596       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set596_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:700:2: ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set596=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= NumericLiteral) && (LA(1) <= StringLiteral)) || ((LA(1) >= 208) && (LA(1) <= 210)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set596)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_literal0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(104, literal_StartIndex); }
    return retval;
}
/* $ANTLR end literal */

// $ANTLR start synpred1_Emerson
static void synpred1_Emerson_fragment(pEmersonParser ctx ) 
{
	pANTLR3_COMMON_TOKEN    a;

	a       = NULL;

    // .//Emerson.g:142:5: (a= LTERM )
    // .//Emerson.g:142:5: a= LTERM
    {
        a = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_synpred1_Emerson881); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred1_EmersonEx; /* Prevent compiler warnings */
rulesynpred1_EmersonEx: ;

}
// $ANTLR end synpred1_Emerson

// $ANTLR start synpred4_Emerson
static void synpred4_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:146:19: ( LTERM )
    // .//Emerson.g:146:19: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred4_Emerson915); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred4_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred4_EmersonEx; /* Prevent compiler warnings */
rulesynpred4_EmersonEx: ;

}
// $ANTLR end synpred4_Emerson

// $ANTLR start synpred8_Emerson
static void synpred8_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:156:33: ( LTERM )
    // .//Emerson.g:156:33: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred8_Emerson972); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred8_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred8_EmersonEx; /* Prevent compiler warnings */
rulesynpred8_EmersonEx: ;

}
// $ANTLR end synpred8_Emerson

// $ANTLR start synpred11_Emerson
static void synpred11_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:160:15: ( LTERM )
    // .//Emerson.g:160:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred11_Emerson1009); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred11_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred11_EmersonEx; /* Prevent compiler warnings */
rulesynpred11_EmersonEx: ;

}
// $ANTLR end synpred11_Emerson

// $ANTLR start synpred14_Emerson
static void synpred14_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:160:45: ( LTERM )
    // .//Emerson.g:160:45: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred14_Emerson1020); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred14_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred14_EmersonEx; /* Prevent compiler warnings */
rulesynpred14_EmersonEx: ;

}
// $ANTLR end synpred14_Emerson

// $ANTLR start synpred22_Emerson
static void synpred22_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:169:8: ( LTERM )
    // .//Emerson.g:169:8: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred22_Emerson1111); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred22_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred22_EmersonEx; /* Prevent compiler warnings */
rulesynpred22_EmersonEx: ;

}
// $ANTLR end synpred22_Emerson

// $ANTLR start synpred24_Emerson
static void synpred24_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:174:4: ( noOpStatement )
    // .//Emerson.g:174:4: noOpStatement
    {
        FOLLOWPUSH(FOLLOW_noOpStatement_in_synpred24_Emerson1137);
        noOpStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred24_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred24_EmersonEx; /* Prevent compiler warnings */
rulesynpred24_EmersonEx: ;

}
// $ANTLR end synpred24_Emerson

// $ANTLR start synpred25_Emerson
static void synpred25_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:175:11: ( switchStatement )
    // .//Emerson.g:175:12: switchStatement
    {
        FOLLOWPUSH(FOLLOW_switchStatement_in_synpred25_Emerson1150);
        switchStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred25_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred25_EmersonEx; /* Prevent compiler warnings */
rulesynpred25_EmersonEx: ;

}
// $ANTLR end synpred25_Emerson

// $ANTLR start synpred26_Emerson
static void synpred26_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:176:11: ( statementBlock )
    // .//Emerson.g:176:11: statementBlock
    {
        FOLLOWPUSH(FOLLOW_statementBlock_in_synpred26_Emerson1167);
        statementBlock(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred26_EmersonEx; /* Prevent compiler warnings */
rulesynpred26_EmersonEx: ;

}
// $ANTLR end synpred26_Emerson

// $ANTLR start synpred28_Emerson
static void synpred28_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:178:4: ( emptyStatement )
    // .//Emerson.g:178:4: emptyStatement
    {
        FOLLOWPUSH(FOLLOW_emptyStatement_in_synpred28_Emerson1177);
        emptyStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred28_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred28_EmersonEx; /* Prevent compiler warnings */
rulesynpred28_EmersonEx: ;

}
// $ANTLR end synpred28_Emerson

// $ANTLR start synpred29_Emerson
static void synpred29_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:179:4: ( expressionStatement )
    // .//Emerson.g:179:4: expressionStatement
    {
        FOLLOWPUSH(FOLLOW_expressionStatement_in_synpred29_Emerson1182);
        expressionStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred29_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred29_EmersonEx; /* Prevent compiler warnings */
rulesynpred29_EmersonEx: ;

}
// $ANTLR end synpred29_Emerson

// $ANTLR start synpred39_Emerson
static void synpred39_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:192:8: ( LTERM )
    // .//Emerson.g:192:8: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred39_Emerson1261); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred39_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred39_EmersonEx; /* Prevent compiler warnings */
rulesynpred39_EmersonEx: ;

}
// $ANTLR end synpred39_Emerson

// $ANTLR start synpred41_Emerson
static void synpred41_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:201:5: ( LTERM )
    // .//Emerson.g:201:5: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred41_Emerson1335); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred41_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred41_EmersonEx; /* Prevent compiler warnings */
rulesynpred41_EmersonEx: ;

}
// $ANTLR end synpred41_Emerson

// $ANTLR start synpred51_Emerson
static void synpred51_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:217:15: ( LTERM )
    // .//Emerson.g:217:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred51_Emerson1457); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred51_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred51_EmersonEx; /* Prevent compiler warnings */
rulesynpred51_EmersonEx: ;

}
// $ANTLR end synpred51_Emerson

// $ANTLR start synpred53_Emerson
static void synpred53_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:221:15: ( LTERM )
    // .//Emerson.g:221:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred53_Emerson1486); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred53_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred53_EmersonEx; /* Prevent compiler warnings */
rulesynpred53_EmersonEx: ;

}
// $ANTLR end synpred53_Emerson

// $ANTLR start synpred62_Emerson
static void synpred62_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:242:52: ( LTERM )
    // .//Emerson.g:242:52: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred62_Emerson1623); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred62_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred62_EmersonEx; /* Prevent compiler warnings */
rulesynpred62_EmersonEx: ;

}
// $ANTLR end synpred62_Emerson

// $ANTLR start synpred64_Emerson
static void synpred64_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:242:87: ( LTERM )
    // .//Emerson.g:242:87: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred64_Emerson1636); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred64_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred64_EmersonEx; /* Prevent compiler warnings */
rulesynpred64_EmersonEx: ;

}
// $ANTLR end synpred64_Emerson

// $ANTLR start synpred65_Emerson
static void synpred65_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_statement_return s2;
	#undef	RETURN_TYPE_s2
	#define	RETURN_TYPE_s2 EmersonParser_statement_return

    // .//Emerson.g:242:73: ( ( LTERM )* 'else' ( LTERM )* s2= statement )
    // .//Emerson.g:242:73: ( LTERM )* 'else' ( LTERM )* s2= statement
    {

        // .//Emerson.g:242:73: ( LTERM )*

        for (;;)
        {
            int alt326=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA326_0 = LA(1);
                if ( (LA326_0 == LTERM) ) 
                {
                    alt326=1;
                }

            }
            switch (alt326) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred65_Emerson1631); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred65_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop326;	/* break out of the loop */
        	    break;
            }
        }
        loop326: ; /* Jump out to here if this rule does not match */

         MATCHT(147, &FOLLOW_147_in_synpred65_Emerson1634); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred65_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:242:87: ( LTERM )*

        for (;;)
        {
            int alt327=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA327_0 = LA(1);
                if ( (LA327_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA327_2 = LA(2);
                        if ( (synpred64_Emerson(ctx)) ) 
                        {
                            alt327=1;
                        }

                    }
                }

            }
            switch (alt327) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred65_Emerson1636); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred65_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop327;	/* break out of the loop */
        	    break;
            }
        }
        loop327: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_statement_in_synpred65_Emerson1641);
        s2=statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred65_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred65_EmersonEx; /* Prevent compiler warnings */
rulesynpred65_EmersonEx: ;

}
// $ANTLR end synpred65_Emerson

// $ANTLR start synpred68_Emerson
static void synpred68_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:248:4: ( forStatement )
    // .//Emerson.g:248:4: forStatement
    {
        FOLLOWPUSH(FOLLOW_forStatement_in_synpred68_Emerson1683);
        forStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred68_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred68_EmersonEx; /* Prevent compiler warnings */
rulesynpred68_EmersonEx: ;

}
// $ANTLR end synpred68_Emerson

// $ANTLR start synpred69_Emerson
static void synpred69_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:253:9: ( LTERM )
    // .//Emerson.g:253:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred69_Emerson1702); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred69_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred69_EmersonEx; /* Prevent compiler warnings */
rulesynpred69_EmersonEx: ;

}
// $ANTLR end synpred69_Emerson

// $ANTLR start synpred76_Emerson
static void synpred76_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:257:52: ( LTERM )
    // .//Emerson.g:257:52: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred76_Emerson1769); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred76_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred76_EmersonEx; /* Prevent compiler warnings */
rulesynpred76_EmersonEx: ;

}
// $ANTLR end synpred76_Emerson

// $ANTLR start synpred87_Emerson
static void synpred87_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:261:149: ( LTERM )
    // .//Emerson.g:261:149: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred87_Emerson1847); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred87_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred87_EmersonEx; /* Prevent compiler warnings */
rulesynpred87_EmersonEx: ;

}
// $ANTLR end synpred87_Emerson

// $ANTLR start synpred95_Emerson
static void synpred95_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:270:99: ( LTERM )
    // .//Emerson.g:270:99: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred95_Emerson1956); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred95_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred95_EmersonEx; /* Prevent compiler warnings */
rulesynpred95_EmersonEx: ;

}
// $ANTLR end synpred95_Emerson

// $ANTLR start synpred107_Emerson
static void synpred107_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:291:51: ( LTERM )
    // .//Emerson.g:291:51: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred107_Emerson2128); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred107_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred107_EmersonEx; /* Prevent compiler warnings */
rulesynpred107_EmersonEx: ;

}
// $ANTLR end synpred107_Emerson

// $ANTLR start synpred112_Emerson
static void synpred112_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:301:16: ( LTERM )
    // .//Emerson.g:301:16: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred112_Emerson2207); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred112_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred112_EmersonEx; /* Prevent compiler warnings */
rulesynpred112_EmersonEx: ;

}
// $ANTLR end synpred112_Emerson

// $ANTLR start synpred120_Emerson
static void synpred120_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:308:49: ( LTERM )
    // .//Emerson.g:308:49: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred120_Emerson2311); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred120_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred120_EmersonEx; /* Prevent compiler warnings */
rulesynpred120_EmersonEx: ;

}
// $ANTLR end synpred120_Emerson

// $ANTLR start synpred123_Emerson
static void synpred123_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_ternaryExpression_return e1;
	#undef	RETURN_TYPE_e1
	#define	RETURN_TYPE_e1 EmersonParser_ternaryExpression_return

    // .//Emerson.g:308:3: ( 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* defaultClause )
    // .//Emerson.g:308:3: 'case' ( LTERM )* e1= ternaryExpression ( LTERM )* ':' ( LTERM )* ( statementList )? ( LTERM )* defaultClause
    {
         MATCHT(157, &FOLLOW_157_in_synpred123_Emerson2297); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred123_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:308:10: ( LTERM )*

        for (;;)
        {
            int alt334=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA334_0 = LA(1);
                if ( (LA334_0 == LTERM) ) 
                {
                    alt334=1;
                }

            }
            switch (alt334) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred123_Emerson2299); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred123_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop334;	/* break out of the loop */
        	    break;
            }
        }
        loop334: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_ternaryExpression_in_synpred123_Emerson2304);
        e1=ternaryExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred123_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:308:38: ( LTERM )*

        for (;;)
        {
            int alt335=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA335_0 = LA(1);
                if ( (LA335_0 == LTERM) ) 
                {
                    alt335=1;
                }

            }
            switch (alt335) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred123_Emerson2306); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred123_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop335;	/* break out of the loop */
        	    break;
            }
        }
        loop335: ; /* Jump out to here if this rule does not match */

         MATCHT(158, &FOLLOW_158_in_synpred123_Emerson2309); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred123_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:308:49: ( LTERM )*

        for (;;)
        {
            int alt336=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA336_0 = LA(1);
                if ( (LA336_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA336_1 = LA(2);
                        if ( (synpred120_Emerson(ctx)) ) 
                        {
                            alt336=1;
                        }

                    }
                }

            }
            switch (alt336) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred123_Emerson2311); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred123_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop336;	/* break out of the loop */
        	    break;
            }
        }
        loop336: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:308:56: ( statementList )?
        {
            int alt337=2;
            alt337 = cdfa337.predict(ctx, RECOGNIZER, ISTREAM, &cdfa337);
            if  (HASEXCEPTION())
            {
                goto rulesynpred123_EmersonEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt337) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: statementList
        	    {
        	        FOLLOWPUSH(FOLLOW_statementList_in_synpred123_Emerson2314);
        	        statementList(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred123_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:308:71: ( LTERM )*

        for (;;)
        {
            int alt338=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA338_0 = LA(1);
                if ( (LA338_0 == LTERM) ) 
                {
                    alt338=1;
                }

            }
            switch (alt338) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred123_Emerson2317); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred123_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop338;	/* break out of the loop */
        	    break;
            }
        }
        loop338: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_defaultClause_in_synpred123_Emerson2320);
        defaultClause(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred123_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred123_EmersonEx; /* Prevent compiler warnings */
rulesynpred123_EmersonEx: ;

}
// $ANTLR end synpred123_Emerson

// $ANTLR start synpred126_Emerson
static void synpred126_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:309:57: ( LTERM )
    // .//Emerson.g:309:57: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred126_Emerson2361); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred126_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred126_EmersonEx; /* Prevent compiler warnings */
rulesynpred126_EmersonEx: ;

}
// $ANTLR end synpred126_Emerson

// $ANTLR start synpred128_Emerson
static void synpred128_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:309:79: ( LTERM )
    // .//Emerson.g:309:79: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred128_Emerson2367); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred128_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred128_EmersonEx; /* Prevent compiler warnings */
rulesynpred128_EmersonEx: ;

}
// $ANTLR end synpred128_Emerson

// $ANTLR start synpred131_Emerson
static void synpred131_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:313:25: ( LTERM )
    // .//Emerson.g:313:25: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred131_Emerson2406); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred131_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred131_EmersonEx; /* Prevent compiler warnings */
rulesynpred131_EmersonEx: ;

}
// $ANTLR end synpred131_Emerson

// $ANTLR start synpred133_Emerson
static void synpred133_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:313:47: ( LTERM )
    // .//Emerson.g:313:47: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred133_Emerson2412); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred133_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred133_EmersonEx; /* Prevent compiler warnings */
rulesynpred133_EmersonEx: ;

}
// $ANTLR end synpred133_Emerson

// $ANTLR start synpred137_Emerson
static void synpred137_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:318:57: ( LTERM )
    // .//Emerson.g:318:57: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred137_Emerson2469); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred137_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred137_EmersonEx; /* Prevent compiler warnings */
rulesynpred137_EmersonEx: ;

}
// $ANTLR end synpred137_Emerson

// $ANTLR start synpred139_Emerson
static void synpred139_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:318:79: ( LTERM )
    // .//Emerson.g:318:79: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred139_Emerson2475); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred139_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred139_EmersonEx; /* Prevent compiler warnings */
rulesynpred139_EmersonEx: ;

}
// $ANTLR end synpred139_Emerson

// $ANTLR start synpred144_Emerson
static void synpred144_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:334:22: ( LTERM )
    // .//Emerson.g:334:22: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred144_Emerson2624); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred144_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred144_EmersonEx; /* Prevent compiler warnings */
rulesynpred144_EmersonEx: ;

}
// $ANTLR end synpred144_Emerson

// $ANTLR start synpred152_Emerson
static void synpred152_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:349:11: ( callExpression )
    // .//Emerson.g:349:11: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred152_Emerson2803);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred152_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred152_EmersonEx; /* Prevent compiler warnings */
rulesynpred152_EmersonEx: ;

}
// $ANTLR end synpred152_Emerson

// $ANTLR start synpred153_Emerson
static void synpred153_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:366:11: ( conditionalExpression )
    // .//Emerson.g:366:11: conditionalExpression
    {
        FOLLOWPUSH(FOLLOW_conditionalExpression_in_synpred153_Emerson2927);
        conditionalExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred153_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred153_EmersonEx; /* Prevent compiler warnings */
rulesynpred153_EmersonEx: ;

}
// $ANTLR end synpred153_Emerson

// $ANTLR start synpred156_Emerson
static void synpred156_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:371:11: ( conditionalExpressionNoIn )
    // .//Emerson.g:371:11: conditionalExpressionNoIn
    {
        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_synpred156_Emerson2994);
        conditionalExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred156_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred156_EmersonEx; /* Prevent compiler warnings */
rulesynpred156_EmersonEx: ;

}
// $ANTLR end synpred156_Emerson

// $ANTLR start synpred159_Emerson
static void synpred159_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:378:4: ( callExpression )
    // .//Emerson.g:378:4: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred159_Emerson3064);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred159_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred159_EmersonEx; /* Prevent compiler warnings */
rulesynpred159_EmersonEx: ;

}
// $ANTLR end synpred159_Emerson

// $ANTLR start synpred160_Emerson
static void synpred160_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:383:4: ( memberExpression )
    // .//Emerson.g:383:4: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred160_Emerson3089);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred160_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred160_EmersonEx; /* Prevent compiler warnings */
rulesynpred160_EmersonEx: ;

}
// $ANTLR end synpred160_Emerson

// $ANTLR start synpred166_Emerson
static void synpred166_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:399:47: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:399:47: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:399:47: ( LTERM )*

        for (;;)
        {
            int alt341=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA341_0 = LA(1);
                if ( (LA341_0 == LTERM) ) 
                {
                    alt341=1;
                }

            }
            switch (alt341) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred166_Emerson3183); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred166_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop341;	/* break out of the loop */
        	    break;
            }
        }
        loop341: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred166_Emerson3186);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred166_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred166_EmersonEx; /* Prevent compiler warnings */
rulesynpred166_EmersonEx: ;

}
// $ANTLR end synpred166_Emerson

// $ANTLR start synpred168_Emerson
static void synpred168_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:399:136: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:399:136: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:399:136: ( LTERM )*

        for (;;)
        {
            int alt342=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA342_0 = LA(1);
                if ( (LA342_0 == LTERM) ) 
                {
                    alt342=1;
                }

            }
            switch (alt342) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred168_Emerson3203); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred168_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop342;	/* break out of the loop */
        	    break;
            }
        }
        loop342: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred168_Emerson3206);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred168_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred168_EmersonEx; /* Prevent compiler warnings */
rulesynpred168_EmersonEx: ;

}
// $ANTLR end synpred168_Emerson

// $ANTLR start synpred171_Emerson
static void synpred171_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:400:48: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:400:48: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:400:48: ( LTERM )*

        for (;;)
        {
            int alt346=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA346_0 = LA(1);
                if ( (LA346_0 == LTERM) ) 
                {
                    alt346=1;
                }

            }
            switch (alt346) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred171_Emerson3233); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred171_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop346;	/* break out of the loop */
        	    break;
            }
        }
        loop346: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred171_Emerson3236);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred171_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred171_EmersonEx; /* Prevent compiler warnings */
rulesynpred171_EmersonEx: ;

}
// $ANTLR end synpred171_Emerson

// $ANTLR start synpred173_Emerson
static void synpred173_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:400:136: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:400:136: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:400:136: ( LTERM )*

        for (;;)
        {
            int alt347=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA347_0 = LA(1);
                if ( (LA347_0 == LTERM) ) 
                {
                    alt347=1;
                }

            }
            switch (alt347) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred173_Emerson3252); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred173_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop347;	/* break out of the loop */
        	    break;
            }
        }
        loop347: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred173_Emerson3255);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred173_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred173_EmersonEx; /* Prevent compiler warnings */
rulesynpred173_EmersonEx: ;

}
// $ANTLR end synpred173_Emerson

// $ANTLR start synpred178_Emerson
static void synpred178_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:401:85: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:401:85: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:401:85: ( LTERM )*

        for (;;)
        {
            int alt351=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA351_0 = LA(1);
                if ( (LA351_0 == LTERM) ) 
                {
                    alt351=1;
                }

            }
            switch (alt351) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred178_Emerson3301); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred178_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop351;	/* break out of the loop */
        	    break;
            }
        }
        loop351: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred178_Emerson3304);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred178_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred178_EmersonEx; /* Prevent compiler warnings */
rulesynpred178_EmersonEx: ;

}
// $ANTLR end synpred178_Emerson

// $ANTLR start synpred180_Emerson
static void synpred180_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:401:147: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:401:147: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:401:147: ( LTERM )*

        for (;;)
        {
            int alt352=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA352_0 = LA(1);
                if ( (LA352_0 == LTERM) ) 
                {
                    alt352=1;
                }

            }
            switch (alt352) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred180_Emerson3317); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred180_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop352;	/* break out of the loop */
        	    break;
            }
        }
        loop352: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred180_Emerson3320);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred180_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred180_EmersonEx; /* Prevent compiler warnings */
rulesynpred180_EmersonEx: ;

}
// $ANTLR end synpred180_Emerson

// $ANTLR start synpred184_Emerson
static void synpred184_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:412:82: ( ( LTERM )* arguments )
    // .//Emerson.g:412:82: ( LTERM )* arguments
    {

        // .//Emerson.g:412:82: ( LTERM )*

        for (;;)
        {
            int alt353=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA353_0 = LA(1);
                if ( (LA353_0 == LTERM) ) 
                {
                    alt353=1;
                }

            }
            switch (alt353) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred184_Emerson3406); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred184_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop353;	/* break out of the loop */
        	    break;
            }
        }
        loop353: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_arguments_in_synpred184_Emerson3409);
        arguments(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred184_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred184_EmersonEx; /* Prevent compiler warnings */
rulesynpred184_EmersonEx: ;

}
// $ANTLR end synpred184_Emerson

// $ANTLR start synpred186_Emerson
static void synpred186_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:412:138: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:412:138: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:412:138: ( LTERM )*

        for (;;)
        {
            int alt354=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA354_0 = LA(1);
                if ( (LA354_0 == LTERM) ) 
                {
                    alt354=1;
                }

            }
            switch (alt354) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred186_Emerson3424); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred186_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop354;	/* break out of the loop */
        	    break;
            }
        }
        loop354: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred186_Emerson3427);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred186_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred186_EmersonEx; /* Prevent compiler warnings */
rulesynpred186_EmersonEx: ;

}
// $ANTLR end synpred186_Emerson

// $ANTLR start synpred188_Emerson
static void synpred188_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:412:207: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:412:207: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:412:207: ( LTERM )*

        for (;;)
        {
            int alt355=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA355_0 = LA(1);
                if ( (LA355_0 == LTERM) ) 
                {
                    alt355=1;
                }

            }
            switch (alt355) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred188_Emerson3442); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred188_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop355;	/* break out of the loop */
        	    break;
            }
        }
        loop355: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred188_Emerson3445);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred188_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred188_EmersonEx; /* Prevent compiler warnings */
rulesynpred188_EmersonEx: ;

}
// $ANTLR end synpred188_Emerson

// $ANTLR start synpred191_Emerson
static void synpred191_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:422:15: ( LTERM )
    // .//Emerson.g:422:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred191_Emerson3514); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred191_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred191_EmersonEx; /* Prevent compiler warnings */
rulesynpred191_EmersonEx: ;

}
// $ANTLR end synpred191_Emerson

// $ANTLR start synpred194_Emerson
static void synpred194_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:422:11: ( '(' ( LTERM )* ( expression )? ( LTERM )* ')' )
    // .//Emerson.g:422:11: '(' ( LTERM )* ( expression )? ( LTERM )* ')'
    {
         MATCHT(138, &FOLLOW_138_in_synpred194_Emerson3512); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred194_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:422:15: ( LTERM )*

        for (;;)
        {
            int alt356=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA356_0 = LA(1);
                if ( (LA356_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA356_2 = LA(2);
                        if ( (synpred191_Emerson(ctx)) ) 
                        {
                            alt356=1;
                        }

                    }
                }

            }
            switch (alt356) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred194_Emerson3514); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred194_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop356;	/* break out of the loop */
        	    break;
            }
        }
        loop356: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:422:22: ( expression )?
        {
            int alt357=2;
            {
                int LA357_0 = LA(1);
                if ( (((LA357_0 >= Identifier) && (LA357_0 <= StringLiteral)) || ((LA357_0 >= 137) && (LA357_0 <= 138)) || LA357_0 == 141 || ((LA357_0 >= 164) && (LA357_0 <= 165)) || LA357_0 == 189 || ((LA357_0 >= 194) && (LA357_0 <= 195)) || ((LA357_0 >= 199) && (LA357_0 <= 210))) ) 
                {
                    alt357=1;
                }
            }
            switch (alt357) 
            {
        	case 1:
        	    // .//Emerson.g:422:23: expression
        	    {
        	        FOLLOWPUSH(FOLLOW_expression_in_synpred194_Emerson3518);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred194_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:422:36: ( LTERM )*

        for (;;)
        {
            int alt358=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA358_0 = LA(1);
                if ( (LA358_0 == LTERM) ) 
                {
                    alt358=1;
                }

            }
            switch (alt358) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred194_Emerson3522); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred194_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop358;	/* break out of the loop */
        	    break;
            }
        }
        loop358: ; /* Jump out to here if this rule does not match */

         MATCHT(139, &FOLLOW_139_in_synpred194_Emerson3525); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred194_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred194_EmersonEx; /* Prevent compiler warnings */
rulesynpred194_EmersonEx: ;

}
// $ANTLR end synpred194_Emerson

// $ANTLR start synpred212_Emerson
static void synpred212_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgConstruct_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_msgConstruct_return

	EmersonParser_msgConstruct_return e3;
	#undef	RETURN_TYPE_e3
	#define	RETURN_TYPE_e3 EmersonParser_msgConstruct_return




    // .//Emerson.g:448:13: ( ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct )
    // .//Emerson.g:448:13: ( LTERM )* '<<' ( LTERM )* e2= msgConstruct '<<' e3= msgConstruct
    {

        // .//Emerson.g:448:13: ( LTERM )*

        for (;;)
        {
            int alt360=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA360_0 = LA(1);
                if ( (LA360_0 == LTERM) ) 
                {
                    alt360=1;
                }

            }
            switch (alt360) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred212_Emerson3820); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred212_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop360;	/* break out of the loop */
        	    break;
            }
        }
        loop360: ; /* Jump out to here if this rule does not match */

         MATCHT(176, &FOLLOW_176_in_synpred212_Emerson3823); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred212_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:448:25: ( LTERM )*

        for (;;)
        {
            int alt361=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA361_0 = LA(1);
                if ( (LA361_0 == LTERM) ) 
                {
                    alt361=1;
                }

            }
            switch (alt361) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred212_Emerson3825); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred212_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop361;	/* break out of the loop */
        	    break;
            }
        }
        loop361: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_msgConstruct_in_synpred212_Emerson3830);
        e2=msgConstruct(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred212_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(176, &FOLLOW_176_in_synpred212_Emerson3832); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred212_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_msgConstruct_in_synpred212_Emerson3836);
        e3=msgConstruct(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred212_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred212_EmersonEx; /* Prevent compiler warnings */
rulesynpred212_EmersonEx: ;

}
// $ANTLR end synpred212_Emerson

// $ANTLR start synpred215_Emerson
static void synpred215_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgConstruct_return e4;
	#undef	RETURN_TYPE_e4
	#define	RETURN_TYPE_e4 EmersonParser_msgConstruct_return

    // .//Emerson.g:449:13: ( ( LTERM )* '<<' ( LTERM )* e4= msgConstruct )
    // .//Emerson.g:449:13: ( LTERM )* '<<' ( LTERM )* e4= msgConstruct
    {

        // .//Emerson.g:449:13: ( LTERM )*

        for (;;)
        {
            int alt362=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA362_0 = LA(1);
                if ( (LA362_0 == LTERM) ) 
                {
                    alt362=1;
                }

            }
            switch (alt362) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred215_Emerson3867); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred215_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop362;	/* break out of the loop */
        	    break;
            }
        }
        loop362: ; /* Jump out to here if this rule does not match */

         MATCHT(176, &FOLLOW_176_in_synpred215_Emerson3870); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred215_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:449:25: ( LTERM )*

        for (;;)
        {
            int alt363=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA363_0 = LA(1);
                if ( (LA363_0 == LTERM) ) 
                {
                    alt363=1;
                }

            }
            switch (alt363) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred215_Emerson3872); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred215_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop363;	/* break out of the loop */
        	    break;
            }
        }
        loop363: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_msgConstruct_in_synpred215_Emerson3877);
        e4=msgConstruct(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred215_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred215_EmersonEx; /* Prevent compiler warnings */
rulesynpred215_EmersonEx: ;

}
// $ANTLR end synpred215_Emerson

// $ANTLR start synpred218_Emerson
static void synpred218_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgSenderConstruct_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_msgSenderConstruct_return

    // .//Emerson.g:455:12: ( ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct )
    // .//Emerson.g:455:12: ( LTERM )* '>>' ( LTERM )* e2= msgSenderConstruct
    {

        // .//Emerson.g:455:12: ( LTERM )*

        for (;;)
        {
            int alt364=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA364_0 = LA(1);
                if ( (LA364_0 == LTERM) ) 
                {
                    alt364=1;
                }

            }
            switch (alt364) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred218_Emerson3937); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred218_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop364;	/* break out of the loop */
        	    break;
            }
        }
        loop364: ; /* Jump out to here if this rule does not match */

         MATCHT(177, &FOLLOW_177_in_synpred218_Emerson3940); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred218_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:455:24: ( LTERM )*

        for (;;)
        {
            int alt365=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA365_0 = LA(1);
                if ( (LA365_0 == LTERM) ) 
                {
                    alt365=1;
                }

            }
            switch (alt365) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred218_Emerson3942); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred218_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop365;	/* break out of the loop */
        	    break;
            }
        }
        loop365: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_msgSenderConstruct_in_synpred218_Emerson3947);
        e2=msgSenderConstruct(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred218_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred218_EmersonEx; /* Prevent compiler warnings */
rulesynpred218_EmersonEx: ;

}
// $ANTLR end synpred218_Emerson

// $ANTLR start synpred221_Emerson
static void synpred221_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_ternaryExpression_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_ternaryExpression_return

    // .//Emerson.g:460:12: ( ( LTERM )* '#' ( LTERM )* e2= ternaryExpression )
    // .//Emerson.g:460:12: ( LTERM )* '#' ( LTERM )* e2= ternaryExpression
    {

        // .//Emerson.g:460:12: ( LTERM )*

        for (;;)
        {
            int alt366=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA366_0 = LA(1);
                if ( (LA366_0 == LTERM) ) 
                {
                    alt366=1;
                }

            }
            switch (alt366) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred221_Emerson4005); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred221_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop366;	/* break out of the loop */
        	    break;
            }
        }
        loop366: ; /* Jump out to here if this rule does not match */

         MATCHT(178, &FOLLOW_178_in_synpred221_Emerson4008); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred221_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:460:23: ( LTERM )*

        for (;;)
        {
            int alt367=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA367_0 = LA(1);
                if ( (LA367_0 == LTERM) ) 
                {
                    alt367=1;
                }

            }
            switch (alt367) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred221_Emerson4010); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred221_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop367;	/* break out of the loop */
        	    break;
            }
        }
        loop367: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_ternaryExpression_in_synpred221_Emerson4015);
        e2=ternaryExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred221_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred221_EmersonEx; /* Prevent compiler warnings */
rulesynpred221_EmersonEx: ;

}
// $ANTLR end synpred221_Emerson

// $ANTLR start synpred226_Emerson
static void synpred226_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_assignmentExpression_return expr1;
	#undef	RETURN_TYPE_expr1
	#define	RETURN_TYPE_expr1 EmersonParser_assignmentExpression_return

	EmersonParser_assignmentExpression_return expr2;
	#undef	RETURN_TYPE_expr2
	#define	RETURN_TYPE_expr2 EmersonParser_assignmentExpression_return




    // .//Emerson.g:465:57: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression )
    // .//Emerson.g:465:57: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression
    {

        // .//Emerson.g:465:57: ( LTERM )*

        for (;;)
        {
            int alt368=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA368_0 = LA(1);
                if ( (LA368_0 == LTERM) ) 
                {
                    alt368=1;
                }

            }
            switch (alt368) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred226_Emerson4064); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred226_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop368;	/* break out of the loop */
        	    break;
            }
        }
        loop368: ; /* Jump out to here if this rule does not match */

         MATCHT(179, &FOLLOW_179_in_synpred226_Emerson4067); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred226_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:465:68: ( LTERM )*

        for (;;)
        {
            int alt369=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA369_0 = LA(1);
                if ( (LA369_0 == LTERM) ) 
                {
                    alt369=1;
                }

            }
            switch (alt369) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred226_Emerson4069); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred226_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop369;	/* break out of the loop */
        	    break;
            }
        }
        loop369: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred226_Emerson4074);
        expr1=assignmentExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred226_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:465:102: ( LTERM )*

        for (;;)
        {
            int alt370=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA370_0 = LA(1);
                if ( (LA370_0 == LTERM) ) 
                {
                    alt370=1;
                }

            }
            switch (alt370) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred226_Emerson4076); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred226_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop370;	/* break out of the loop */
        	    break;
            }
        }
        loop370: ; /* Jump out to here if this rule does not match */

         MATCHT(158, &FOLLOW_158_in_synpred226_Emerson4079); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred226_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:465:113: ( LTERM )*

        for (;;)
        {
            int alt371=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA371_0 = LA(1);
                if ( (LA371_0 == LTERM) ) 
                {
                    alt371=1;
                }

            }
            switch (alt371) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred226_Emerson4081); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred226_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop371;	/* break out of the loop */
        	    break;
            }
        }
        loop371: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred226_Emerson4086);
        expr2=assignmentExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred226_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred226_EmersonEx; /* Prevent compiler warnings */
rulesynpred226_EmersonEx: ;

}
// $ANTLR end synpred226_Emerson

// $ANTLR start synpred229_Emerson
static void synpred229_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgConstructNoIn_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_msgConstructNoIn_return

	EmersonParser_msgConstructNoIn_return e3;
	#undef	RETURN_TYPE_e3
	#define	RETURN_TYPE_e3 EmersonParser_msgConstructNoIn_return




    // .//Emerson.g:476:13: ( ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn )
    // .//Emerson.g:476:13: ( LTERM )* '<<' ( LTERM )* e2= msgConstructNoIn '<<' e3= msgConstructNoIn
    {

        // .//Emerson.g:476:13: ( LTERM )*

        for (;;)
        {
            int alt372=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA372_0 = LA(1);
                if ( (LA372_0 == LTERM) ) 
                {
                    alt372=1;
                }

            }
            switch (alt372) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred229_Emerson4175); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred229_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop372;	/* break out of the loop */
        	    break;
            }
        }
        loop372: ; /* Jump out to here if this rule does not match */

         MATCHT(176, &FOLLOW_176_in_synpred229_Emerson4178); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred229_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:476:25: ( LTERM )*

        for (;;)
        {
            int alt373=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA373_0 = LA(1);
                if ( (LA373_0 == LTERM) ) 
                {
                    alt373=1;
                }

            }
            switch (alt373) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred229_Emerson4180); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred229_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop373;	/* break out of the loop */
        	    break;
            }
        }
        loop373: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_synpred229_Emerson4185);
        e2=msgConstructNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred229_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(176, &FOLLOW_176_in_synpred229_Emerson4187); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred229_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_synpred229_Emerson4191);
        e3=msgConstructNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred229_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred229_EmersonEx; /* Prevent compiler warnings */
rulesynpred229_EmersonEx: ;

}
// $ANTLR end synpred229_Emerson

// $ANTLR start synpred232_Emerson
static void synpred232_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgConstructNoIn_return e4;
	#undef	RETURN_TYPE_e4
	#define	RETURN_TYPE_e4 EmersonParser_msgConstructNoIn_return

	EmersonParser_msgConstructNoIn_return e5;
	#undef	RETURN_TYPE_e5
	#define	RETURN_TYPE_e5 EmersonParser_msgConstructNoIn_return




    // .//Emerson.g:477:13: (e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn )
    // .//Emerson.g:477:13: e4= msgConstructNoIn ( LTERM )* '<<' ( LTERM )* e5= msgConstructNoIn
    {
        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_synpred232_Emerson4224);
        e4=msgConstructNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred232_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:477:33: ( LTERM )*

        for (;;)
        {
            int alt374=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA374_0 = LA(1);
                if ( (LA374_0 == LTERM) ) 
                {
                    alt374=1;
                }

            }
            switch (alt374) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred232_Emerson4226); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred232_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop374;	/* break out of the loop */
        	    break;
            }
        }
        loop374: ; /* Jump out to here if this rule does not match */

         MATCHT(176, &FOLLOW_176_in_synpred232_Emerson4229); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred232_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:477:45: ( LTERM )*

        for (;;)
        {
            int alt375=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA375_0 = LA(1);
                if ( (LA375_0 == LTERM) ) 
                {
                    alt375=1;
                }

            }
            switch (alt375) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred232_Emerson4231); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred232_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop375;	/* break out of the loop */
        	    break;
            }
        }
        loop375: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_msgConstructNoIn_in_synpred232_Emerson4236);
        e5=msgConstructNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred232_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred232_EmersonEx; /* Prevent compiler warnings */
rulesynpred232_EmersonEx: ;

}
// $ANTLR end synpred232_Emerson

// $ANTLR start synpred234_Emerson
static void synpred234_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_msgSenderConstructNoIn_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_msgSenderConstructNoIn_return

    // .//Emerson.g:483:12: ( ( LTERM )* '>>' e2= msgSenderConstructNoIn )
    // .//Emerson.g:483:12: ( LTERM )* '>>' e2= msgSenderConstructNoIn
    {

        // .//Emerson.g:483:12: ( LTERM )*

        for (;;)
        {
            int alt376=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA376_0 = LA(1);
                if ( (LA376_0 == LTERM) ) 
                {
                    alt376=1;
                }

            }
            switch (alt376) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred234_Emerson4307); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred234_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop376;	/* break out of the loop */
        	    break;
            }
        }
        loop376: ; /* Jump out to here if this rule does not match */

         MATCHT(177, &FOLLOW_177_in_synpred234_Emerson4310); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred234_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_msgSenderConstructNoIn_in_synpred234_Emerson4314);
        e2=msgSenderConstructNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred234_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred234_EmersonEx; /* Prevent compiler warnings */
rulesynpred234_EmersonEx: ;

}
// $ANTLR end synpred234_Emerson

// $ANTLR start synpred236_Emerson
static void synpred236_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_ternaryExpressionNoIn_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_ternaryExpressionNoIn_return

    // .//Emerson.g:488:12: ( ( LTERM )* '#' e2= ternaryExpressionNoIn )
    // .//Emerson.g:488:12: ( LTERM )* '#' e2= ternaryExpressionNoIn
    {

        // .//Emerson.g:488:12: ( LTERM )*

        for (;;)
        {
            int alt377=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA377_0 = LA(1);
                if ( (LA377_0 == LTERM) ) 
                {
                    alt377=1;
                }

            }
            switch (alt377) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred236_Emerson4380); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred236_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop377;	/* break out of the loop */
        	    break;
            }
        }
        loop377: ; /* Jump out to here if this rule does not match */

         MATCHT(178, &FOLLOW_178_in_synpred236_Emerson4383); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred236_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_ternaryExpressionNoIn_in_synpred236_Emerson4387);
        e2=ternaryExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred236_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred236_EmersonEx; /* Prevent compiler warnings */
rulesynpred236_EmersonEx: ;

}
// $ANTLR end synpred236_Emerson

// $ANTLR start synpred241_Emerson
static void synpred241_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_assignmentExpressionNoIn_return expr1;
	#undef	RETURN_TYPE_expr1
	#define	RETURN_TYPE_expr1 EmersonParser_assignmentExpressionNoIn_return

	EmersonParser_assignmentExpressionNoIn_return expr2;
	#undef	RETURN_TYPE_expr2
	#define	RETURN_TYPE_expr2 EmersonParser_assignmentExpressionNoIn_return




    // .//Emerson.g:494:65: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn )
    // .//Emerson.g:494:65: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn
    {

        // .//Emerson.g:494:65: ( LTERM )*

        for (;;)
        {
            int alt378=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA378_0 = LA(1);
                if ( (LA378_0 == LTERM) ) 
                {
                    alt378=1;
                }

            }
            switch (alt378) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred241_Emerson4461); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred241_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop378;	/* break out of the loop */
        	    break;
            }
        }
        loop378: ; /* Jump out to here if this rule does not match */

         MATCHT(179, &FOLLOW_179_in_synpred241_Emerson4464); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred241_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:494:76: ( LTERM )*

        for (;;)
        {
            int alt379=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA379_0 = LA(1);
                if ( (LA379_0 == LTERM) ) 
                {
                    alt379=1;
                }

            }
            switch (alt379) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred241_Emerson4466); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred241_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop379;	/* break out of the loop */
        	    break;
            }
        }
        loop379: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_synpred241_Emerson4471);
        expr1=assignmentExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred241_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:494:114: ( LTERM )*

        for (;;)
        {
            int alt380=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA380_0 = LA(1);
                if ( (LA380_0 == LTERM) ) 
                {
                    alt380=1;
                }

            }
            switch (alt380) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred241_Emerson4473); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred241_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop380;	/* break out of the loop */
        	    break;
            }
        }
        loop380: ; /* Jump out to here if this rule does not match */

         MATCHT(158, &FOLLOW_158_in_synpred241_Emerson4476); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred241_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:494:125: ( LTERM )*

        for (;;)
        {
            int alt381=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA381_0 = LA(1);
                if ( (LA381_0 == LTERM) ) 
                {
                    alt381=1;
                }

            }
            switch (alt381) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred241_Emerson4478); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred241_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop381;	/* break out of the loop */
        	    break;
            }
        }
        loop381: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_synpred241_Emerson4483);
        expr2=assignmentExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred241_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred241_EmersonEx; /* Prevent compiler warnings */
rulesynpred241_EmersonEx: ;

}
// $ANTLR end synpred241_Emerson

// $ANTLR start synpred288_Emerson
static void synpred288_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:567:55: ( ( LTERM )* relationalOps ( LTERM )* additiveExpression )
    // .//Emerson.g:567:55: ( LTERM )* relationalOps ( LTERM )* additiveExpression
    {

        // .//Emerson.g:567:55: ( LTERM )*

        for (;;)
        {
            int alt406=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA406_0 = LA(1);
                if ( (LA406_0 == LTERM) ) 
                {
                    alt406=1;
                }

            }
            switch (alt406) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred288_Emerson5201); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred288_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop406;	/* break out of the loop */
        	    break;
            }
        }
        loop406: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_relationalOps_in_synpred288_Emerson5204);
        relationalOps(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred288_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:567:76: ( LTERM )*

        for (;;)
        {
            int alt407=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA407_0 = LA(1);
                if ( (LA407_0 == LTERM) ) 
                {
                    alt407=1;
                }

            }
            switch (alt407) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred288_Emerson5206); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred288_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop407;	/* break out of the loop */
        	    break;
            }
        }
        loop407: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_additiveExpression_in_synpred288_Emerson5209);
        additiveExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred288_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred288_EmersonEx; /* Prevent compiler warnings */
rulesynpred288_EmersonEx: ;

}
// $ANTLR end synpred288_Emerson

// $ANTLR start synpred296_Emerson
static void synpred296_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:585:55: ( ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression )
    // .//Emerson.g:585:55: ( LTERM )* relationalOpsNoIn ( LTERM )* additiveExpression
    {

        // .//Emerson.g:585:55: ( LTERM )*

        for (;;)
        {
            int alt408=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA408_0 = LA(1);
                if ( (LA408_0 == LTERM) ) 
                {
                    alt408=1;
                }

            }
            switch (alt408) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred296_Emerson5340); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred296_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop408;	/* break out of the loop */
        	    break;
            }
        }
        loop408: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_synpred296_Emerson5343);
        relationalOpsNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred296_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:585:80: ( LTERM )*

        for (;;)
        {
            int alt409=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA409_0 = LA(1);
                if ( (LA409_0 == LTERM) ) 
                {
                    alt409=1;
                }

            }
            switch (alt409) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred296_Emerson5345); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred296_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop409;	/* break out of the loop */
        	    break;
            }
        }
        loop409: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_additiveExpression_in_synpred296_Emerson5348);
        additiveExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred296_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred296_EmersonEx; /* Prevent compiler warnings */
rulesynpred296_EmersonEx: ;

}
// $ANTLR end synpred296_Emerson

// $ANTLR start synpred299_Emerson
static void synpred299_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:590:59: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression )
    // .//Emerson.g:590:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
    {

        // .//Emerson.g:590:59: ( LTERM )*

        for (;;)
        {
            int alt410=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA410_0 = LA(1);
                if ( (LA410_0 == LTERM) ) 
                {
                    alt410=1;
                }

            }
            switch (alt410) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred299_Emerson5382); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred299_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop410;	/* break out of the loop */
        	    break;
            }
        }
        loop410: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_addOps_in_synpred299_Emerson5385);
        addOps(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred299_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:590:73: ( LTERM )*

        for (;;)
        {
            int alt411=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA411_0 = LA(1);
                if ( (LA411_0 == LTERM) ) 
                {
                    alt411=1;
                }

            }
            switch (alt411) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred299_Emerson5387); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred299_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop411;	/* break out of the loop */
        	    break;
            }
        }
        loop411: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_synpred299_Emerson5390);
        multiplicativeExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred299_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred299_EmersonEx; /* Prevent compiler warnings */
rulesynpred299_EmersonEx: ;

}
// $ANTLR end synpred299_Emerson

// $ANTLR start synpred305_Emerson
static void synpred305_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:605:4: ( leftHandSideExpression '--' )
    // .//Emerson.g:605:4: leftHandSideExpression '--'
    {
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred305_Emerson5498);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred305_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(199, &FOLLOW_199_in_synpred305_Emerson5500); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred305_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred305_EmersonEx; /* Prevent compiler warnings */
rulesynpred305_EmersonEx: ;

}
// $ANTLR end synpred305_Emerson

// $ANTLR start synpred306_Emerson
static void synpred306_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:606:4: ( leftHandSideExpression '++' )
    // .//Emerson.g:606:4: leftHandSideExpression '++'
    {
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred306_Emerson5514);
        leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred306_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
         MATCHT(200, &FOLLOW_200_in_synpred306_Emerson5516); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred306_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred306_EmersonEx; /* Prevent compiler warnings */
rulesynpred306_EmersonEx: ;

}
// $ANTLR end synpred306_Emerson

// $ANTLR start synpred317_Emerson
static void synpred317_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:632:11: ( vectorLiteral )
    // .//Emerson.g:632:12: vectorLiteral
    {
        FOLLOWPUSH(FOLLOW_vectorLiteral_in_synpred317_Emerson5719);
        vectorLiteral(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred317_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred317_EmersonEx; /* Prevent compiler warnings */
rulesynpred317_EmersonEx: ;

}
// $ANTLR end synpred317_Emerson

// $ANTLR start synpred322_Emerson
static void synpred322_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:637:4: ( objectLiteral )
    // .//Emerson.g:637:4: objectLiteral
    {
        FOLLOWPUSH(FOLLOW_objectLiteral_in_synpred322_Emerson5756);
        objectLiteral(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred322_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred322_EmersonEx; /* Prevent compiler warnings */
rulesynpred322_EmersonEx: ;

}
// $ANTLR end synpred322_Emerson

// $ANTLR start synpred323_Emerson
static void synpred323_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:638:11: ( patternLiteral )
    // .//Emerson.g:638:11: patternLiteral
    {
        FOLLOWPUSH(FOLLOW_patternLiteral_in_synpred323_Emerson5768);
        patternLiteral(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred323_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred323_EmersonEx; /* Prevent compiler warnings */
rulesynpred323_EmersonEx: ;

}
// $ANTLR end synpred323_Emerson

// $ANTLR start synpred332_Emerson
static void synpred332_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:649:11: ( additiveExpression )
    // .//Emerson.g:649:11: additiveExpression
    {
        FOLLOWPUSH(FOLLOW_additiveExpression_in_synpred332_Emerson5889);
        additiveExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred332_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred332_EmersonEx; /* Prevent compiler warnings */
rulesynpred332_EmersonEx: ;

}
// $ANTLR end synpred332_Emerson

// $ANTLR start synpred333_Emerson
static void synpred333_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:651:11: ( NumericLiteral )
    // .//Emerson.g:651:11: NumericLiteral
    {
         MATCHT(NumericLiteral, &FOLLOW_NumericLiteral_in_synpred333_Emerson5902); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred333_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred333_EmersonEx; /* Prevent compiler warnings */
rulesynpred333_EmersonEx: ;

}
// $ANTLR end synpred333_Emerson

// $ANTLR start synpred334_Emerson
static void synpred334_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:652:11: ( callExpression )
    // .//Emerson.g:652:11: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred334_Emerson5914);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred334_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred334_EmersonEx; /* Prevent compiler warnings */
rulesynpred334_EmersonEx: ;

}
// $ANTLR end synpred334_Emerson

// $ANTLR start synpred337_Emerson
static void synpred337_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:663:9: ( LTERM )
    // .//Emerson.g:663:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred337_Emerson6009); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred337_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred337_EmersonEx; /* Prevent compiler warnings */
rulesynpred337_EmersonEx: ;

}
// $ANTLR end synpred337_Emerson

// $ANTLR start synpred340_Emerson
static void synpred340_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:663:5: ( '[' ( LTERM )* ( expression )? ( LTERM )* ']' )
    // .//Emerson.g:663:5: '[' ( LTERM )* ( expression )? ( LTERM )* ']'
    {
         MATCHT(165, &FOLLOW_165_in_synpred340_Emerson6007); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred340_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:663:9: ( LTERM )*

        for (;;)
        {
            int alt414=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA414_0 = LA(1);
                if ( (LA414_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA414_2 = LA(2);
                        if ( (synpred337_Emerson(ctx)) ) 
                        {
                            alt414=1;
                        }

                    }
                }

            }
            switch (alt414) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred340_Emerson6009); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred340_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop414;	/* break out of the loop */
        	    break;
            }
        }
        loop414: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:663:16: ( expression )?
        {
            int alt415=2;
            {
                int LA415_0 = LA(1);
                if ( (((LA415_0 >= Identifier) && (LA415_0 <= StringLiteral)) || ((LA415_0 >= 137) && (LA415_0 <= 138)) || LA415_0 == 141 || ((LA415_0 >= 164) && (LA415_0 <= 165)) || LA415_0 == 189 || ((LA415_0 >= 194) && (LA415_0 <= 195)) || ((LA415_0 >= 199) && (LA415_0 <= 210))) ) 
                {
                    alt415=1;
                }
            }
            switch (alt415) 
            {
        	case 1:
        	    // .//Emerson.g:663:17: expression
        	    {
        	        FOLLOWPUSH(FOLLOW_expression_in_synpred340_Emerson6013);
        	        expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred340_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:663:30: ( LTERM )*

        for (;;)
        {
            int alt416=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA416_0 = LA(1);
                if ( (LA416_0 == LTERM) ) 
                {
                    alt416=1;
                }

            }
            switch (alt416) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred340_Emerson6017); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred340_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop416;	/* break out of the loop */
        	    break;
            }
        }
        loop416: ; /* Jump out to here if this rule does not match */

         MATCHT(166, &FOLLOW_166_in_synpred340_Emerson6020); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred340_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred340_EmersonEx; /* Prevent compiler warnings */
rulesynpred340_EmersonEx: ;

}
// $ANTLR end synpred340_Emerson

// $ANTLR start synpred345_Emerson
static void synpred345_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:669:9: ( LTERM )
    // .//Emerson.g:669:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred345_Emerson6093); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred345_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred345_EmersonEx; /* Prevent compiler warnings */
rulesynpred345_EmersonEx: ;

}
// $ANTLR end synpred345_Emerson

// $ANTLR start synpred348_Emerson
static void synpred348_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:669:5: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' )
    // .//Emerson.g:669:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
    {
         MATCHT(141, &FOLLOW_141_in_synpred348_Emerson6091); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred348_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:669:9: ( LTERM )*

        for (;;)
        {
            int alt418=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA418_0 = LA(1);
                if ( (LA418_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA418_2 = LA(2);
                        if ( (synpred345_Emerson(ctx)) ) 
                        {
                            alt418=1;
                        }

                    }
                }

            }
            switch (alt418) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred348_Emerson6093); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred348_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop418;	/* break out of the loop */
        	    break;
            }
        }
        loop418: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:669:16: ( propertyNameAndValue )?
        {
            int alt419=2;
            {
                int LA419_0 = LA(1);
                if ( (((LA419_0 >= Identifier) && (LA419_0 <= StringLiteral))) ) 
                {
                    alt419=1;
                }
            }
            switch (alt419) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: propertyNameAndValue
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_synpred348_Emerson6096);
        	        propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred348_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:669:38: ( LTERM )*

        for (;;)
        {
            int alt420=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA420_0 = LA(1);
                if ( (LA420_0 == LTERM) ) 
                {
                    alt420=1;
                }

            }
            switch (alt420) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred348_Emerson6099); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred348_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop420;	/* break out of the loop */
        	    break;
            }
        }
        loop420: ; /* Jump out to here if this rule does not match */

         MATCHT(142, &FOLLOW_142_in_synpred348_Emerson6102); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred348_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred348_EmersonEx; /* Prevent compiler warnings */
rulesynpred348_EmersonEx: ;

}
// $ANTLR end synpred348_Emerson

// $ANTLR start synpred353_Emerson
static void synpred353_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:675:9: ( LTERM )
    // .//Emerson.g:675:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred353_Emerson6173); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred353_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred353_EmersonEx; /* Prevent compiler warnings */
rulesynpred353_EmersonEx: ;

}
// $ANTLR end synpred353_Emerson

// $ANTLR start synpred356_Emerson
static void synpred356_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:675:5: ( '{' ( LTERM )* ( nameValueProto )? ( LTERM )* '}' )
    // .//Emerson.g:675:5: '{' ( LTERM )* ( nameValueProto )? ( LTERM )* '}'
    {
         MATCHT(141, &FOLLOW_141_in_synpred356_Emerson6171); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred356_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:675:9: ( LTERM )*

        for (;;)
        {
            int alt422=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA422_0 = LA(1);
                if ( (LA422_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA422_2 = LA(2);
                        if ( (synpred353_Emerson(ctx)) ) 
                        {
                            alt422=1;
                        }

                    }
                }

            }
            switch (alt422) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred356_Emerson6173); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred356_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop422;	/* break out of the loop */
        	    break;
            }
        }
        loop422: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:675:16: ( nameValueProto )?
        {
            int alt423=2;
            alt423 = cdfa423.predict(ctx, RECOGNIZER, ISTREAM, &cdfa423);
            if  (HASEXCEPTION())
            {
                goto rulesynpred356_EmersonEx;
            }
            if (HASFAILED())
            {
                return ;
            }
            switch (alt423) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: nameValueProto
        	    {
        	        FOLLOWPUSH(FOLLOW_nameValueProto_in_synpred356_Emerson6176);
        	        nameValueProto(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred356_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:675:32: ( LTERM )*

        for (;;)
        {
            int alt424=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA424_0 = LA(1);
                if ( (LA424_0 == LTERM) ) 
                {
                    alt424=1;
                }

            }
            switch (alt424) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred356_Emerson6179); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred356_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop424;	/* break out of the loop */
        	    break;
            }
        }
        loop424: ; /* Jump out to here if this rule does not match */

         MATCHT(142, &FOLLOW_142_in_synpred356_Emerson6182); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred356_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred356_EmersonEx; /* Prevent compiler warnings */
rulesynpred356_EmersonEx: ;

}
// $ANTLR end synpred356_Emerson

// $ANTLR start synpred357_Emerson
static void synpred357_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:676:9: ( LTERM )
    // .//Emerson.g:676:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred357_Emerson6199); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred357_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred357_EmersonEx; /* Prevent compiler warnings */
rulesynpred357_EmersonEx: ;

}
// $ANTLR end synpred357_Emerson

// $ANTLR start synpred358_Emerson
static void synpred358_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:676:40: ( LTERM )
    // .//Emerson.g:676:40: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred358_Emerson6210); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred358_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred358_EmersonEx; /* Prevent compiler warnings */
rulesynpred358_EmersonEx: ;

}
// $ANTLR end synpred358_Emerson

// $ANTLR start synpred367_Emerson
static void synpred367_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:685:69: ( LTERM )
    // .//Emerson.g:685:69: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred367_Emerson6319); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred367_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred367_EmersonEx; /* Prevent compiler warnings */
rulesynpred367_EmersonEx: ;

}
// $ANTLR end synpred367_Emerson
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred26_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred26_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred340_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred340_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred22_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred22_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred299_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred299_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred186_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred186_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred123_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred123_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred153_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred153_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred212_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred212_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred358_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred358_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred68_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred68_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred1_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred1_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred356_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred356_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred178_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred178_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred191_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred191_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred168_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred168_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred137_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred137_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred306_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred306_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred28_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred28_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred218_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred218_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred305_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred305_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred76_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred76_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred229_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred229_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred232_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred232_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred112_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred112_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred334_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred334_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred221_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred221_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred152_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred152_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred133_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred133_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred131_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred131_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred62_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred62_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred144_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred144_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred348_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred348_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred353_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred353_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred288_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred288_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred241_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred241_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred128_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred128_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred64_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred64_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred139_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred139_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred65_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred65_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred51_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred51_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred367_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred367_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred166_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred166_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred333_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred333_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred39_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred39_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred180_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred180_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred53_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred53_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred29_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred29_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred188_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred188_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred323_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred323_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred41_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred41_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred126_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred126_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred95_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred95_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred120_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred120_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred184_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred184_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred317_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred317_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred345_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred345_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred4_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred4_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred332_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred332_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred173_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred173_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred226_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred226_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred156_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred156_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred69_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred69_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred296_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred296_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred234_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred234_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred107_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred107_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred11_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred11_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred14_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred14_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred337_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred337_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred322_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred322_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred215_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred215_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred159_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred159_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred236_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred236_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred171_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred171_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred357_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred357_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred8_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred8_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred87_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred87_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred160_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred160_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred25_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred25_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred24_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred24_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred194_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred194_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
