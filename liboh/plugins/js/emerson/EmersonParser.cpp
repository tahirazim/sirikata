/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : .//Emerson.g
 *     -                            On : 2011-01-14 01:22:15
 *     -                for the parser : EmersonParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

  #include <stdlib.h>;
		#include <stdio.h>;
		#include "EmersonUtil.h";

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "EmersonParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pEmersonParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pEmersonParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pEmersonParser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   EmersonParserTokenNames[195+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "UNDEF",
        (pANTLR3_UINT8) "CALL",
        (pANTLR3_UINT8) "ARRAY_INDEX",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "FUNC",
        (pANTLR3_UINT8) "SLIST",
        (pANTLR3_UINT8) "IF",
        (pANTLR3_UINT8) "VARLIST",
        (pANTLR3_UINT8) "VAR",
        (pANTLR3_UINT8) "PROG",
        (pANTLR3_UINT8) "DO",
        (pANTLR3_UINT8) "WHILE",
        (pANTLR3_UINT8) "FOR",
        (pANTLR3_UINT8) "FORINIT",
        (pANTLR3_UINT8) "FORCOND",
        (pANTLR3_UINT8) "FORITER",
        (pANTLR3_UINT8) "FORIN",
        (pANTLR3_UINT8) "BREAK",
        (pANTLR3_UINT8) "CONTINUE",
        (pANTLR3_UINT8) "RETURN",
        (pANTLR3_UINT8) "WITH",
        (pANTLR3_UINT8) "NEW",
        (pANTLR3_UINT8) "TRY",
        (pANTLR3_UINT8) "THROW",
        (pANTLR3_UINT8) "CATCH",
        (pANTLR3_UINT8) "FINALLY",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "SWITCH",
        (pANTLR3_UINT8) "CASE",
        (pANTLR3_UINT8) "LABEL",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "MULT_ASSIGN",
        (pANTLR3_UINT8) "DIV_ASSIGN",
        (pANTLR3_UINT8) "MOD_ASSIGN",
        (pANTLR3_UINT8) "ADD_ASSIGN",
        (pANTLR3_UINT8) "SUB_ASSIGN",
        (pANTLR3_UINT8) "LEFT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "RIGHT_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "TRIPLE_SHIFT_ASSIGN",
        (pANTLR3_UINT8) "AND_ASSIGN",
        (pANTLR3_UINT8) "EXP_ASSIGN",
        (pANTLR3_UINT8) "OR_ASSIGN",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "BIT_OR",
        (pANTLR3_UINT8) "EXP",
        (pANTLR3_UINT8) "BIT_AND",
        (pANTLR3_UINT8) "EQUALS",
        (pANTLR3_UINT8) "NOT_EQUALS",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "NOT_IDENT",
        (pANTLR3_UINT8) "LESS_THAN",
        (pANTLR3_UINT8) "GREATER_THAN",
        (pANTLR3_UINT8) "LESS_THAN_EQUAL",
        (pANTLR3_UINT8) "GREATER_THAN_EQUAL",
        (pANTLR3_UINT8) "INSTANCE_OF",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "LEFT_SHIFT",
        (pANTLR3_UINT8) "RIGHT_SHIFT",
        (pANTLR3_UINT8) "TRIPLE_SHIFT",
        (pANTLR3_UINT8) "ADD",
        (pANTLR3_UINT8) "SUB",
        (pANTLR3_UINT8) "MULT",
        (pANTLR3_UINT8) "DIV",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "ARRAY_LITERAL",
        (pANTLR3_UINT8) "OBJ_LITERAL",
        (pANTLR3_UINT8) "NAME_VALUE",
        (pANTLR3_UINT8) "DELETE",
        (pANTLR3_UINT8) "VOID",
        (pANTLR3_UINT8) "TYPEOF",
        (pANTLR3_UINT8) "PLUSPLUS",
        (pANTLR3_UINT8) "MINUSMINUS",
        (pANTLR3_UINT8) "UNARY_PLUS",
        (pANTLR3_UINT8) "UNARY_MINUS",
        (pANTLR3_UINT8) "COMPLEMENT",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "POSTEXPR",
        (pANTLR3_UINT8) "FUNC_PARAMS",
        (pANTLR3_UINT8) "FUNC_DECL",
        (pANTLR3_UINT8) "FUNC_EXPR",
        (pANTLR3_UINT8) "ARGLIST",
        (pANTLR3_UINT8) "EXPR_LIST",
        (pANTLR3_UINT8) "COND_EXPR",
        (pANTLR3_UINT8) "COND_EXPR_NOIN",
        (pANTLR3_UINT8) "TERNARYOP",
        (pANTLR3_UINT8) "EMPTY_FUNC_BODY",
        (pANTLR3_UINT8) "MESSAGE_SEND",
        (pANTLR3_UINT8) "MESSAGE_RECV",
        (pANTLR3_UINT8) "PAREN",
        (pANTLR3_UINT8) "LTERM",
        (pANTLR3_UINT8) "Identifier",
        (pANTLR3_UINT8) "StringLiteral",
        (pANTLR3_UINT8) "NumericLiteral",
        (pANTLR3_UINT8) "DoubleStringCharacter",
        (pANTLR3_UINT8) "SingleStringCharacter",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "CharacterEscapeSequence",
        (pANTLR3_UINT8) "HexEscapeSequence",
        (pANTLR3_UINT8) "UnicodeEscapeSequence",
        (pANTLR3_UINT8) "SingleEscapeCharacter",
        (pANTLR3_UINT8) "NonEscapeCharacter",
        (pANTLR3_UINT8) "EscapeCharacter",
        (pANTLR3_UINT8) "DecimalDigit",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "DecimalLiteral",
        (pANTLR3_UINT8) "HexIntegerLiteral",
        (pANTLR3_UINT8) "ExponentPart",
        (pANTLR3_UINT8) "IdentifierStart",
        (pANTLR3_UINT8) "IdentifierPart",
        (pANTLR3_UINT8) "UnicodeLetter",
        (pANTLR3_UINT8) "UnicodeDigit",
        (pANTLR3_UINT8) "UnicodeConnectorPunctuation",
        (pANTLR3_UINT8) "UnicodeCombiningMark",
        (pANTLR3_UINT8) "Comment",
        (pANTLR3_UINT8) "LineComment",
        (pANTLR3_UINT8) "WhiteSpace",
        (pANTLR3_UINT8) "'function'",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "','",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'",
        (pANTLR3_UINT8) "'var'",
        (pANTLR3_UINT8) "';'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'if'",
        (pANTLR3_UINT8) "'else'",
        (pANTLR3_UINT8) "'do'",
        (pANTLR3_UINT8) "'while'",
        (pANTLR3_UINT8) "'for'",
        (pANTLR3_UINT8) "'in'",
        (pANTLR3_UINT8) "'continue'",
        (pANTLR3_UINT8) "'break'",
        (pANTLR3_UINT8) "'return'",
        (pANTLR3_UINT8) "'with'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'switch'",
        (pANTLR3_UINT8) "'case'",
        (pANTLR3_UINT8) "'default'",
        (pANTLR3_UINT8) "'throw'",
        (pANTLR3_UINT8) "'try'",
        (pANTLR3_UINT8) "'catch'",
        (pANTLR3_UINT8) "'finally'",
        (pANTLR3_UINT8) "'->'",
        (pANTLR3_UINT8) "'<-'",
        (pANTLR3_UINT8) "'new'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'*='",
        (pANTLR3_UINT8) "'/='",
        (pANTLR3_UINT8) "'%='",
        (pANTLR3_UINT8) "'+='",
        (pANTLR3_UINT8) "'-='",
        (pANTLR3_UINT8) "'<<='",
        (pANTLR3_UINT8) "'>>='",
        (pANTLR3_UINT8) "'>>>='",
        (pANTLR3_UINT8) "'&='",
        (pANTLR3_UINT8) "'^='",
        (pANTLR3_UINT8) "'|='",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'||'",
        (pANTLR3_UINT8) "'&&'",
        (pANTLR3_UINT8) "'|'",
        (pANTLR3_UINT8) "'^'",
        (pANTLR3_UINT8) "'&'",
        (pANTLR3_UINT8) "'=='",
        (pANTLR3_UINT8) "'!='",
        (pANTLR3_UINT8) "'==='",
        (pANTLR3_UINT8) "'!=='",
        (pANTLR3_UINT8) "'<'",
        (pANTLR3_UINT8) "'>'",
        (pANTLR3_UINT8) "'<='",
        (pANTLR3_UINT8) "'>='",
        (pANTLR3_UINT8) "'instanceof'",
        (pANTLR3_UINT8) "'<<'",
        (pANTLR3_UINT8) "'>>'",
        (pANTLR3_UINT8) "'>>>'",
        (pANTLR3_UINT8) "'+'",
        (pANTLR3_UINT8) "'-'",
        (pANTLR3_UINT8) "'*'",
        (pANTLR3_UINT8) "'/'",
        (pANTLR3_UINT8) "'%'",
        (pANTLR3_UINT8) "'--'",
        (pANTLR3_UINT8) "'++'",
        (pANTLR3_UINT8) "'delete'",
        (pANTLR3_UINT8) "'void'",
        (pANTLR3_UINT8) "'typeof'",
        (pANTLR3_UINT8) "'~'",
        (pANTLR3_UINT8) "'!'",
        (pANTLR3_UINT8) "'this'",
        (pANTLR3_UINT8) "'null'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'false'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static EmersonParser_program_return	program    (pEmersonParser ctx);
static EmersonParser_sourceElements_return	sourceElements    (pEmersonParser ctx);
static EmersonParser_sourceElement_return	sourceElement    (pEmersonParser ctx);
static EmersonParser_functionDeclaration_return	functionDeclaration    (pEmersonParser ctx);
static EmersonParser_functionExpression_return	functionExpression    (pEmersonParser ctx);
static EmersonParser_formalParameterList_return	formalParameterList    (pEmersonParser ctx);
static EmersonParser_functionBody_return	functionBody    (pEmersonParser ctx);
static EmersonParser_statement_return	statement    (pEmersonParser ctx);
static EmersonParser_statementBlock_return	statementBlock    (pEmersonParser ctx);
static EmersonParser_statementList_return	statementList    (pEmersonParser ctx);
static EmersonParser_variableStatement_return	variableStatement    (pEmersonParser ctx);
static EmersonParser_variableDeclarationList_return	variableDeclarationList    (pEmersonParser ctx);
static EmersonParser_variableDeclarationListNoIn_return	variableDeclarationListNoIn    (pEmersonParser ctx);
static EmersonParser_variableDeclaration_return	variableDeclaration    (pEmersonParser ctx);
static EmersonParser_variableDeclarationNoIn_return	variableDeclarationNoIn    (pEmersonParser ctx);
static EmersonParser_initialiser_return	initialiser    (pEmersonParser ctx);
static EmersonParser_initialiserNoIn_return	initialiserNoIn    (pEmersonParser ctx);
static EmersonParser_emptyStatement_return	emptyStatement    (pEmersonParser ctx);
static EmersonParser_expressionStatement_return	expressionStatement    (pEmersonParser ctx);
static EmersonParser_ifStatement_return	ifStatement    (pEmersonParser ctx);
static EmersonParser_iterationStatement_return	iterationStatement    (pEmersonParser ctx);
static EmersonParser_doWhileStatement_return	doWhileStatement    (pEmersonParser ctx);
static EmersonParser_whileStatement_return	whileStatement    (pEmersonParser ctx);
static EmersonParser_forStatement_return	forStatement    (pEmersonParser ctx);
static EmersonParser_forStatementInitialiserPart_return	forStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_forInStatement_return	forInStatement    (pEmersonParser ctx);
static EmersonParser_forInStatementInitialiserPart_return	forInStatementInitialiserPart    (pEmersonParser ctx);
static EmersonParser_continueStatement_return	continueStatement    (pEmersonParser ctx);
static EmersonParser_breakStatement_return	breakStatement    (pEmersonParser ctx);
static EmersonParser_returnStatement_return	returnStatement    (pEmersonParser ctx);
static EmersonParser_withStatement_return	withStatement    (pEmersonParser ctx);
static EmersonParser_labelledStatement_return	labelledStatement    (pEmersonParser ctx);
static EmersonParser_switchStatement_return	switchStatement    (pEmersonParser ctx);
static EmersonParser_caseBlock_return	caseBlock    (pEmersonParser ctx);
static EmersonParser_caseClause_return	caseClause    (pEmersonParser ctx);
static EmersonParser_defaultClause_return	defaultClause    (pEmersonParser ctx);
static EmersonParser_throwStatement_return	throwStatement    (pEmersonParser ctx);
static EmersonParser_tryStatement_return	tryStatement    (pEmersonParser ctx);
static EmersonParser_catchClause_return	catchClause    (pEmersonParser ctx);
static EmersonParser_finallyClause_return	finallyClause    (pEmersonParser ctx);
static EmersonParser_msgSendStatement_return	msgSendStatement    (pEmersonParser ctx);
static EmersonParser_msgRecvStatement_return	msgRecvStatement    (pEmersonParser ctx);
static EmersonParser_expression_return	expression    (pEmersonParser ctx);
static EmersonParser_expressionNoIn_return	expressionNoIn    (pEmersonParser ctx);
static EmersonParser_assignmentExpression_return	assignmentExpression    (pEmersonParser ctx);
static EmersonParser_assignmentExpressionNoIn_return	assignmentExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_leftHandSideExpression_return	leftHandSideExpression    (pEmersonParser ctx);
static EmersonParser_newExpression_return	newExpression    (pEmersonParser ctx);
static EmersonParser_indexSuffix1_return	indexSuffix1    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix1_return	propertyReferenceSuffix1    (pEmersonParser ctx);
static EmersonParser_memberExpression_return	memberExpression    (pEmersonParser ctx);
static EmersonParser_memberExpressionSuffix_return	memberExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_callExpression_return	callExpression    (pEmersonParser ctx);
static EmersonParser_callExpressionSuffix_return	callExpressionSuffix    (pEmersonParser ctx);
static EmersonParser_arguments_return	arguments    (pEmersonParser ctx);
static EmersonParser_indexSuffix_return	indexSuffix    (pEmersonParser ctx);
static EmersonParser_propertyReferenceSuffix_return	propertyReferenceSuffix    (pEmersonParser ctx);
static EmersonParser_assignmentOperator_return	assignmentOperator    (pEmersonParser ctx);
static EmersonParser_conditionalExpression_return	conditionalExpression    (pEmersonParser ctx);
static EmersonParser_conditionalExpressionNoIn_return	conditionalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalORExpression_return	logicalORExpression    (pEmersonParser ctx);
static EmersonParser_logicalANDExpression_return	logicalANDExpression    (pEmersonParser ctx);
static EmersonParser_logicalORExpressionNoIn_return	logicalORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_logicalANDExpressionNoIn_return	logicalANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpression_return	bitwiseORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseORExpressionNoIn_return	bitwiseORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpression_return	bitwiseXORExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseXORExpressionNoIn_return	bitwiseXORExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpression_return	bitwiseANDExpression    (pEmersonParser ctx);
static EmersonParser_bitwiseANDExpressionNoIn_return	bitwiseANDExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_equalityExpression_return	equalityExpression    (pEmersonParser ctx);
static EmersonParser_equalityOps_return	equalityOps    (pEmersonParser ctx);
static EmersonParser_equalityExpressionNoIn_return	equalityExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_relationalOps_return	relationalOps    (pEmersonParser ctx);
static EmersonParser_relationalExpression_return	relationalExpression    (pEmersonParser ctx);
static EmersonParser_relationalOpsNoIn_return	relationalOpsNoIn    (pEmersonParser ctx);
static EmersonParser_relationalExpressionNoIn_return	relationalExpressionNoIn    (pEmersonParser ctx);
static EmersonParser_shiftOps_return	shiftOps    (pEmersonParser ctx);
static EmersonParser_shiftExpression_return	shiftExpression    (pEmersonParser ctx);
static EmersonParser_addOps_return	addOps    (pEmersonParser ctx);
static EmersonParser_additiveExpression_return	additiveExpression    (pEmersonParser ctx);
static EmersonParser_multOps_return	multOps    (pEmersonParser ctx);
static EmersonParser_multiplicativeExpression_return	multiplicativeExpression    (pEmersonParser ctx);
static EmersonParser_postfixExpression_return	postfixExpression    (pEmersonParser ctx);
static EmersonParser_unaryOps_return	unaryOps    (pEmersonParser ctx);
static EmersonParser_unaryExpression_return	unaryExpression    (pEmersonParser ctx);
static EmersonParser_primaryExpression_return	primaryExpression    (pEmersonParser ctx);
static EmersonParser_arrayLiteral_return	arrayLiteral    (pEmersonParser ctx);
static EmersonParser_objectLiteral_return	objectLiteral    (pEmersonParser ctx);
static EmersonParser_propertyNameAndValue_return	propertyNameAndValue    (pEmersonParser ctx);
static EmersonParser_propertyName_return	propertyName    (pEmersonParser ctx);
static EmersonParser_literal_return	literal    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred5_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred9_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred23_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred26_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred33_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred37_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred52_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred54_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred65_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred68_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred123_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred126_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred144_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred154_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred157_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred160_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred161_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred167_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred169_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred172_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred174_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred179_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred181_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred185_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred187_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred189_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred284_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred308_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred311_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred316_Emerson    (pEmersonParser ctx);
static ANTLR3_BOOLEAN	synpred319_Emerson    (pEmersonParser ctx);
static void	EmersonParserFree(pEmersonParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = ".//Emerson.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return EmersonParserNewSSD(instream, NULL);
}

/** \brief Create a new EmersonParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pEmersonParser
EmersonParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pEmersonParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pEmersonParser) ANTLR3_CALLOC(1, sizeof(EmersonParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in EmersonParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our EmersonParser interface
     */
    ctx->program	= program;
    ctx->sourceElements	= sourceElements;
    ctx->sourceElement	= sourceElement;
    ctx->functionDeclaration	= functionDeclaration;
    ctx->functionExpression	= functionExpression;
    ctx->formalParameterList	= formalParameterList;
    ctx->functionBody	= functionBody;
    ctx->statement	= statement;
    ctx->statementBlock	= statementBlock;
    ctx->statementList	= statementList;
    ctx->variableStatement	= variableStatement;
    ctx->variableDeclarationList	= variableDeclarationList;
    ctx->variableDeclarationListNoIn	= variableDeclarationListNoIn;
    ctx->variableDeclaration	= variableDeclaration;
    ctx->variableDeclarationNoIn	= variableDeclarationNoIn;
    ctx->initialiser	= initialiser;
    ctx->initialiserNoIn	= initialiserNoIn;
    ctx->emptyStatement	= emptyStatement;
    ctx->expressionStatement	= expressionStatement;
    ctx->ifStatement	= ifStatement;
    ctx->iterationStatement	= iterationStatement;
    ctx->doWhileStatement	= doWhileStatement;
    ctx->whileStatement	= whileStatement;
    ctx->forStatement	= forStatement;
    ctx->forStatementInitialiserPart	= forStatementInitialiserPart;
    ctx->forInStatement	= forInStatement;
    ctx->forInStatementInitialiserPart	= forInStatementInitialiserPart;
    ctx->continueStatement	= continueStatement;
    ctx->breakStatement	= breakStatement;
    ctx->returnStatement	= returnStatement;
    ctx->withStatement	= withStatement;
    ctx->labelledStatement	= labelledStatement;
    ctx->switchStatement	= switchStatement;
    ctx->caseBlock	= caseBlock;
    ctx->caseClause	= caseClause;
    ctx->defaultClause	= defaultClause;
    ctx->throwStatement	= throwStatement;
    ctx->tryStatement	= tryStatement;
    ctx->catchClause	= catchClause;
    ctx->finallyClause	= finallyClause;
    ctx->msgSendStatement	= msgSendStatement;
    ctx->msgRecvStatement	= msgRecvStatement;
    ctx->expression	= expression;
    ctx->expressionNoIn	= expressionNoIn;
    ctx->assignmentExpression	= assignmentExpression;
    ctx->assignmentExpressionNoIn	= assignmentExpressionNoIn;
    ctx->leftHandSideExpression	= leftHandSideExpression;
    ctx->newExpression	= newExpression;
    ctx->indexSuffix1	= indexSuffix1;
    ctx->propertyReferenceSuffix1	= propertyReferenceSuffix1;
    ctx->memberExpression	= memberExpression;
    ctx->memberExpressionSuffix	= memberExpressionSuffix;
    ctx->callExpression	= callExpression;
    ctx->callExpressionSuffix	= callExpressionSuffix;
    ctx->arguments	= arguments;
    ctx->indexSuffix	= indexSuffix;
    ctx->propertyReferenceSuffix	= propertyReferenceSuffix;
    ctx->assignmentOperator	= assignmentOperator;
    ctx->conditionalExpression	= conditionalExpression;
    ctx->conditionalExpressionNoIn	= conditionalExpressionNoIn;
    ctx->logicalORExpression	= logicalORExpression;
    ctx->logicalANDExpression	= logicalANDExpression;
    ctx->logicalORExpressionNoIn	= logicalORExpressionNoIn;
    ctx->logicalANDExpressionNoIn	= logicalANDExpressionNoIn;
    ctx->bitwiseORExpression	= bitwiseORExpression;
    ctx->bitwiseORExpressionNoIn	= bitwiseORExpressionNoIn;
    ctx->bitwiseXORExpression	= bitwiseXORExpression;
    ctx->bitwiseXORExpressionNoIn	= bitwiseXORExpressionNoIn;
    ctx->bitwiseANDExpression	= bitwiseANDExpression;
    ctx->bitwiseANDExpressionNoIn	= bitwiseANDExpressionNoIn;
    ctx->equalityExpression	= equalityExpression;
    ctx->equalityOps	= equalityOps;
    ctx->equalityExpressionNoIn	= equalityExpressionNoIn;
    ctx->relationalOps	= relationalOps;
    ctx->relationalExpression	= relationalExpression;
    ctx->relationalOpsNoIn	= relationalOpsNoIn;
    ctx->relationalExpressionNoIn	= relationalExpressionNoIn;
    ctx->shiftOps	= shiftOps;
    ctx->shiftExpression	= shiftExpression;
    ctx->addOps	= addOps;
    ctx->additiveExpression	= additiveExpression;
    ctx->multOps	= multOps;
    ctx->multiplicativeExpression	= multiplicativeExpression;
    ctx->postfixExpression	= postfixExpression;
    ctx->unaryOps	= unaryOps;
    ctx->unaryExpression	= unaryExpression;
    ctx->primaryExpression	= primaryExpression;
    ctx->arrayLiteral	= arrayLiteral;
    ctx->objectLiteral	= objectLiteral;
    ctx->propertyNameAndValue	= propertyNameAndValue;
    ctx->propertyName	= propertyName;
    ctx->literal	= literal;
    ctx->synpred5_Emerson	= synpred5_Emerson;
    ctx->synpred9_Emerson	= synpred9_Emerson;
    ctx->synpred23_Emerson	= synpred23_Emerson;
    ctx->synpred26_Emerson	= synpred26_Emerson;
    ctx->synpred33_Emerson	= synpred33_Emerson;
    ctx->synpred37_Emerson	= synpred37_Emerson;
    ctx->synpred52_Emerson	= synpred52_Emerson;
    ctx->synpred54_Emerson	= synpred54_Emerson;
    ctx->synpred65_Emerson	= synpred65_Emerson;
    ctx->synpred68_Emerson	= synpred68_Emerson;
    ctx->synpred123_Emerson	= synpred123_Emerson;
    ctx->synpred126_Emerson	= synpred126_Emerson;
    ctx->synpred144_Emerson	= synpred144_Emerson;
    ctx->synpred154_Emerson	= synpred154_Emerson;
    ctx->synpred157_Emerson	= synpred157_Emerson;
    ctx->synpred160_Emerson	= synpred160_Emerson;
    ctx->synpred161_Emerson	= synpred161_Emerson;
    ctx->synpred167_Emerson	= synpred167_Emerson;
    ctx->synpred169_Emerson	= synpred169_Emerson;
    ctx->synpred172_Emerson	= synpred172_Emerson;
    ctx->synpred174_Emerson	= synpred174_Emerson;
    ctx->synpred179_Emerson	= synpred179_Emerson;
    ctx->synpred181_Emerson	= synpred181_Emerson;
    ctx->synpred185_Emerson	= synpred185_Emerson;
    ctx->synpred187_Emerson	= synpred187_Emerson;
    ctx->synpred189_Emerson	= synpred189_Emerson;
    ctx->synpred284_Emerson	= synpred284_Emerson;
    ctx->synpred308_Emerson	= synpred308_Emerson;
    ctx->synpred311_Emerson	= synpred311_Emerson;
    ctx->synpred316_Emerson	= synpred316_Emerson;
    ctx->synpred319_Emerson	= synpred319_Emerson;
    ctx->free			= EmersonParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

    /* Create a LIST for recording rule memos.
     */
     RULEMEMO    = antlr3IntTrieNew(15);	/* 16 bit depth is enough for 32768 rules! */
	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = EmersonParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 EmersonParserFree(pEmersonParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	if	(RULEMEMO != NULL)
	{
		RULEMEMO->free(RULEMEMO);
		RULEMEMO = NULL;
	}	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return EmersonParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program585  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program585_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program585	= { FOLLOW_LTERM_in_program585_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_program588  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_program588_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_program588	= { FOLLOW_sourceElements_in_program588_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_program590  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_program590_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_program590	= { FOLLOW_LTERM_in_program590_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_program593  */
static	ANTLR3_BITWORD FOLLOW_EOF_in_program593_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_program593	= { FOLLOW_EOF_in_program593_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements614  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements614	= { FOLLOW_sourceElement_in_sourceElements614_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_sourceElements617  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_sourceElements617_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_sourceElements617	= { FOLLOW_LTERM_in_sourceElements617_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElement_in_sourceElements620  */
static	ANTLR3_BITWORD FOLLOW_sourceElement_in_sourceElements620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElement_in_sourceElements620	= { FOLLOW_sourceElement_in_sourceElements620_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_sourceElement641  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_sourceElement641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_sourceElement641	= { FOLLOW_functionDeclaration_in_sourceElement641_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_sourceElement650  */
static	ANTLR3_BITWORD FOLLOW_statement_in_sourceElement650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_sourceElement650	= { FOLLOW_statement_in_sourceElement650_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_121_in_functionDeclaration667  */
static	ANTLR3_BITWORD FOLLOW_121_in_functionDeclaration667_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_121_in_functionDeclaration667	= { FOLLOW_121_in_functionDeclaration667_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration669  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration669_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration669	= { FOLLOW_LTERM_in_functionDeclaration669_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionDeclaration672  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionDeclaration672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionDeclaration672	= { FOLLOW_Identifier_in_functionDeclaration672_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration674  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration674_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration674	= { FOLLOW_LTERM_in_functionDeclaration674_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionDeclaration677  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionDeclaration677_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionDeclaration677	= { FOLLOW_formalParameterList_in_functionDeclaration677_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionDeclaration679  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionDeclaration679_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionDeclaration679	= { FOLLOW_LTERM_in_functionDeclaration679_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionDeclaration682  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionDeclaration682_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionDeclaration682	= { FOLLOW_functionBody_in_functionDeclaration682_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_121_in_functionExpression706  */
static	ANTLR3_BITWORD FOLLOW_121_in_functionExpression706_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x04000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_121_in_functionExpression706	= { FOLLOW_121_in_functionExpression706_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression708  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x04000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression708	= { FOLLOW_LTERM_in_functionExpression708_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_functionExpression711  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_functionExpression711_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_functionExpression711	= { FOLLOW_Identifier_in_functionExpression711_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression714  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression714_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression714	= { FOLLOW_LTERM_in_functionExpression714_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_formalParameterList_in_functionExpression717  */
static	ANTLR3_BITWORD FOLLOW_formalParameterList_in_functionExpression717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_formalParameterList_in_functionExpression717	= { FOLLOW_formalParameterList_in_functionExpression717_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionExpression719  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionExpression719_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionExpression719	= { FOLLOW_LTERM_in_functionExpression719_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionBody_in_functionExpression722  */
static	ANTLR3_BITWORD FOLLOW_functionBody_in_functionExpression722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionBody_in_functionExpression722	= { FOLLOW_functionBody_in_functionExpression722_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_122_in_formalParameterList749  */
static	ANTLR3_BITWORD FOLLOW_122_in_formalParameterList749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x10000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_122_in_formalParameterList749	= { FOLLOW_122_in_formalParameterList749_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList752  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList752	= { FOLLOW_LTERM_in_formalParameterList752_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList757  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList757_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList757	= { FOLLOW_Identifier_in_formalParameterList757_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList760  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList760_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList760	= { FOLLOW_LTERM_in_formalParameterList760_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_123_in_formalParameterList763  */
static	ANTLR3_BITWORD FOLLOW_123_in_formalParameterList763_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_123_in_formalParameterList763	= { FOLLOW_123_in_formalParameterList763_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList765  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList765_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList765	= { FOLLOW_LTERM_in_formalParameterList765_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_formalParameterList770  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_formalParameterList770_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_formalParameterList770	= { FOLLOW_Identifier_in_formalParameterList770_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_formalParameterList776  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_formalParameterList776_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_formalParameterList776	= { FOLLOW_LTERM_in_formalParameterList776_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_124_in_formalParameterList779  */
static	ANTLR3_BITWORD FOLLOW_124_in_formalParameterList779_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_124_in_formalParameterList779	= { FOLLOW_124_in_formalParameterList779_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_functionBody805  */
static	ANTLR3_BITWORD FOLLOW_125_in_functionBody805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_functionBody805	= { FOLLOW_125_in_functionBody805_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody807  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody807_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody807	= { FOLLOW_LTERM_in_functionBody807_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_functionBody810  */
static	ANTLR3_BITWORD FOLLOW_126_in_functionBody810_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_functionBody810	= { FOLLOW_126_in_functionBody810_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_functionBody821  */
static	ANTLR3_BITWORD FOLLOW_125_in_functionBody821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_functionBody821	= { FOLLOW_125_in_functionBody821_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody823  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody823	= { FOLLOW_LTERM_in_functionBody823_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sourceElements_in_functionBody827  */
static	ANTLR3_BITWORD FOLLOW_sourceElements_in_functionBody827_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sourceElements_in_functionBody827	= { FOLLOW_sourceElements_in_functionBody827_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_functionBody834  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_functionBody834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_functionBody834	= { FOLLOW_LTERM_in_functionBody834_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_functionBody837  */
static	ANTLR3_BITWORD FOLLOW_126_in_functionBody837_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_functionBody837	= { FOLLOW_126_in_functionBody837_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_statement849  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_statement849_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_statement849	= { FOLLOW_statementBlock_in_statement849_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableStatement_in_statement854  */
static	ANTLR3_BITWORD FOLLOW_variableStatement_in_statement854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableStatement_in_statement854	= { FOLLOW_variableStatement_in_statement854_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_emptyStatement_in_statement859  */
static	ANTLR3_BITWORD FOLLOW_emptyStatement_in_statement859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_emptyStatement_in_statement859	= { FOLLOW_emptyStatement_in_statement859_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_statement864  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_statement864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_statement864	= { FOLLOW_expressionStatement_in_statement864_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ifStatement_in_statement869  */
static	ANTLR3_BITWORD FOLLOW_ifStatement_in_statement869_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ifStatement_in_statement869	= { FOLLOW_ifStatement_in_statement869_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_iterationStatement_in_statement874  */
static	ANTLR3_BITWORD FOLLOW_iterationStatement_in_statement874_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_iterationStatement_in_statement874	= { FOLLOW_iterationStatement_in_statement874_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_continueStatement_in_statement879  */
static	ANTLR3_BITWORD FOLLOW_continueStatement_in_statement879_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_continueStatement_in_statement879	= { FOLLOW_continueStatement_in_statement879_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_breakStatement_in_statement884  */
static	ANTLR3_BITWORD FOLLOW_breakStatement_in_statement884_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_breakStatement_in_statement884	= { FOLLOW_breakStatement_in_statement884_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_returnStatement_in_statement889  */
static	ANTLR3_BITWORD FOLLOW_returnStatement_in_statement889_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_returnStatement_in_statement889	= { FOLLOW_returnStatement_in_statement889_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_withStatement_in_statement894  */
static	ANTLR3_BITWORD FOLLOW_withStatement_in_statement894_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_withStatement_in_statement894	= { FOLLOW_withStatement_in_statement894_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labelledStatement_in_statement899  */
static	ANTLR3_BITWORD FOLLOW_labelledStatement_in_statement899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labelledStatement_in_statement899	= { FOLLOW_labelledStatement_in_statement899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_switchStatement_in_statement904  */
static	ANTLR3_BITWORD FOLLOW_switchStatement_in_statement904_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_switchStatement_in_statement904	= { FOLLOW_switchStatement_in_statement904_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_throwStatement_in_statement909  */
static	ANTLR3_BITWORD FOLLOW_throwStatement_in_statement909_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_throwStatement_in_statement909	= { FOLLOW_throwStatement_in_statement909_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tryStatement_in_statement914  */
static	ANTLR3_BITWORD FOLLOW_tryStatement_in_statement914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tryStatement_in_statement914	= { FOLLOW_tryStatement_in_statement914_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSendStatement_in_statement919  */
static	ANTLR3_BITWORD FOLLOW_msgSendStatement_in_statement919_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSendStatement_in_statement919	= { FOLLOW_msgSendStatement_in_statement919_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgRecvStatement_in_statement924  */
static	ANTLR3_BITWORD FOLLOW_msgRecvStatement_in_statement924_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgRecvStatement_in_statement924	= { FOLLOW_msgRecvStatement_in_statement924_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_statementBlock936  */
static	ANTLR3_BITWORD FOLLOW_125_in_statementBlock936_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_statementBlock936	= { FOLLOW_125_in_statementBlock936_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock938  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock938	= { FOLLOW_LTERM_in_statementBlock938_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_statementBlock941  */
static	ANTLR3_BITWORD FOLLOW_126_in_statementBlock941_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_statementBlock941	= { FOLLOW_126_in_statementBlock941_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_statementBlock946  */
static	ANTLR3_BITWORD FOLLOW_125_in_statementBlock946_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_statementBlock946	= { FOLLOW_125_in_statementBlock946_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock948  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock948_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock948	= { FOLLOW_LTERM_in_statementBlock948_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_statementBlock952  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_statementBlock952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_statementBlock952	= { FOLLOW_statementList_in_statementBlock952_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementBlock957  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementBlock957_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementBlock957	= { FOLLOW_LTERM_in_statementBlock957_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_statementBlock960  */
static	ANTLR3_BITWORD FOLLOW_126_in_statementBlock960_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_statementBlock960	= { FOLLOW_126_in_statementBlock960_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList973  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList973_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList973	= { FOLLOW_statement_in_statementList973_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_statementList976  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_statementList976_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_statementList976	= { FOLLOW_LTERM_in_statementList976_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statementList979  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statementList979_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statementList979	= { FOLLOW_statement_in_statementList979_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_variableStatement1002  */
static	ANTLR3_BITWORD FOLLOW_127_in_variableStatement1002_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_variableStatement1002	= { FOLLOW_127_in_variableStatement1002_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1004  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1004_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1004	= { FOLLOW_LTERM_in_variableStatement1004_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationList_in_variableStatement1007  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationList_in_variableStatement1007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationList_in_variableStatement1007	= { FOLLOW_variableDeclarationList_in_variableStatement1007_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableStatement1010  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableStatement1010_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableStatement1010	= { FOLLOW_LTERM_in_variableStatement1010_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_variableStatement1014  */
static	ANTLR3_BITWORD FOLLOW_128_in_variableStatement1014_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_variableStatement1014	= { FOLLOW_128_in_variableStatement1014_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1036  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1036_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1036	= { FOLLOW_variableDeclaration_in_variableDeclarationList1036_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1039  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1039_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1039	= { FOLLOW_LTERM_in_variableDeclarationList1039_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_123_in_variableDeclarationList1042  */
static	ANTLR3_BITWORD FOLLOW_123_in_variableDeclarationList1042_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_123_in_variableDeclarationList1042	= { FOLLOW_123_in_variableDeclarationList1042_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationList1044  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationList1044_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationList1044	= { FOLLOW_LTERM_in_variableDeclarationList1044_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclaration_in_variableDeclarationList1047  */
static	ANTLR3_BITWORD FOLLOW_variableDeclaration_in_variableDeclarationList1047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclaration_in_variableDeclarationList1047	= { FOLLOW_variableDeclaration_in_variableDeclarationList1047_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1066  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1066_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1066	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1066_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1069  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1069_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1069	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1069_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_123_in_variableDeclarationListNoIn1072  */
static	ANTLR3_BITWORD FOLLOW_123_in_variableDeclarationListNoIn1072_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_123_in_variableDeclarationListNoIn1072	= { FOLLOW_123_in_variableDeclarationListNoIn1072_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationListNoIn1074  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationListNoIn1074_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationListNoIn1074	= { FOLLOW_LTERM_in_variableDeclarationListNoIn1074_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1077  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1077_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1077	= { FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1077_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclaration1096  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclaration1096_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclaration1096	= { FOLLOW_Identifier_in_variableDeclaration1096_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclaration1098  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclaration1098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclaration1098	= { FOLLOW_LTERM_in_variableDeclaration1098_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiser_in_variableDeclaration1101  */
static	ANTLR3_BITWORD FOLLOW_initialiser_in_variableDeclaration1101_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiser_in_variableDeclaration1101	= { FOLLOW_initialiser_in_variableDeclaration1101_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_variableDeclarationNoIn1125  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_variableDeclarationNoIn1125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_variableDeclarationNoIn1125	= { FOLLOW_Identifier_in_variableDeclarationNoIn1125_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_variableDeclarationNoIn1127  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_variableDeclarationNoIn1127_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_variableDeclarationNoIn1127	= { FOLLOW_LTERM_in_variableDeclarationNoIn1127_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1130  */
static	ANTLR3_BITWORD FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1130_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1130	= { FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1130_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_initialiser1155  */
static	ANTLR3_BITWORD FOLLOW_129_in_initialiser1155_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_initialiser1155	= { FOLLOW_129_in_initialiser1155_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiser1157  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiser1157_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiser1157	= { FOLLOW_LTERM_in_initialiser1157_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_initialiser1160  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_initialiser1160_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_initialiser1160	= { FOLLOW_assignmentExpression_in_initialiser1160_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_initialiserNoIn1177  */
static	ANTLR3_BITWORD FOLLOW_129_in_initialiserNoIn1177_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_initialiserNoIn1177	= { FOLLOW_129_in_initialiserNoIn1177_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_initialiserNoIn1179  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_initialiserNoIn1179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_initialiserNoIn1179	= { FOLLOW_LTERM_in_initialiserNoIn1179_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1182  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1182	= { FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_emptyStatement1198  */
static	ANTLR3_BITWORD FOLLOW_128_in_emptyStatement1198_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_emptyStatement1198	= { FOLLOW_128_in_emptyStatement1198_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionStatement1210  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionStatement1210_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionStatement1210	= { FOLLOW_expression_in_expressionStatement1210_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionStatement1213  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionStatement1213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionStatement1213	= { FOLLOW_LTERM_in_expressionStatement1213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_expressionStatement1217  */
static	ANTLR3_BITWORD FOLLOW_128_in_expressionStatement1217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_expressionStatement1217	= { FOLLOW_128_in_expressionStatement1217_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_130_in_ifStatement1233  */
static	ANTLR3_BITWORD FOLLOW_130_in_ifStatement1233_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_130_in_ifStatement1233	= { FOLLOW_130_in_ifStatement1233_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1235  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1235_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1235	= { FOLLOW_LTERM_in_ifStatement1235_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_122_in_ifStatement1238  */
static	ANTLR3_BITWORD FOLLOW_122_in_ifStatement1238_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_122_in_ifStatement1238	= { FOLLOW_122_in_ifStatement1238_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1240  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1240	= { FOLLOW_LTERM_in_ifStatement1240_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_ifStatement1243  */
static	ANTLR3_BITWORD FOLLOW_expression_in_ifStatement1243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_ifStatement1243	= { FOLLOW_expression_in_ifStatement1243_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1245  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1245_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1245	= { FOLLOW_LTERM_in_ifStatement1245_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_124_in_ifStatement1248  */
static	ANTLR3_BITWORD FOLLOW_124_in_ifStatement1248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_124_in_ifStatement1248	= { FOLLOW_124_in_ifStatement1248_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1250  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1250_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1250	= { FOLLOW_LTERM_in_ifStatement1250_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1255  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1255	= { FOLLOW_statement_in_ifStatement1255_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1258  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1258_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1258	= { FOLLOW_LTERM_in_ifStatement1258_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_ifStatement1261  */
static	ANTLR3_BITWORD FOLLOW_131_in_ifStatement1261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_ifStatement1261	= { FOLLOW_131_in_ifStatement1261_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_ifStatement1263  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_ifStatement1263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_ifStatement1263	= { FOLLOW_LTERM_in_ifStatement1263_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_ifStatement1268  */
static	ANTLR3_BITWORD FOLLOW_statement_in_ifStatement1268_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_ifStatement1268	= { FOLLOW_statement_in_ifStatement1268_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_doWhileStatement_in_iterationStatement1297  */
static	ANTLR3_BITWORD FOLLOW_doWhileStatement_in_iterationStatement1297_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_doWhileStatement_in_iterationStatement1297	= { FOLLOW_doWhileStatement_in_iterationStatement1297_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_whileStatement_in_iterationStatement1302  */
static	ANTLR3_BITWORD FOLLOW_whileStatement_in_iterationStatement1302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_whileStatement_in_iterationStatement1302	= { FOLLOW_whileStatement_in_iterationStatement1302_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_iterationStatement1307  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_iterationStatement1307_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_iterationStatement1307	= { FOLLOW_forStatement_in_iterationStatement1307_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatement_in_iterationStatement1312  */
static	ANTLR3_BITWORD FOLLOW_forInStatement_in_iterationStatement1312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatement_in_iterationStatement1312	= { FOLLOW_forInStatement_in_iterationStatement1312_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_132_in_doWhileStatement1324  */
static	ANTLR3_BITWORD FOLLOW_132_in_doWhileStatement1324_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_132_in_doWhileStatement1324	= { FOLLOW_132_in_doWhileStatement1324_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1326  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1326_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1326	= { FOLLOW_LTERM_in_doWhileStatement1326_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_doWhileStatement1329  */
static	ANTLR3_BITWORD FOLLOW_statement_in_doWhileStatement1329_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_doWhileStatement1329	= { FOLLOW_statement_in_doWhileStatement1329_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1331  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1331_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1331	= { FOLLOW_LTERM_in_doWhileStatement1331_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_doWhileStatement1334  */
static	ANTLR3_BITWORD FOLLOW_133_in_doWhileStatement1334_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_doWhileStatement1334	= { FOLLOW_133_in_doWhileStatement1334_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1336  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1336_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1336	= { FOLLOW_LTERM_in_doWhileStatement1336_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_122_in_doWhileStatement1339  */
static	ANTLR3_BITWORD FOLLOW_122_in_doWhileStatement1339_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2600000380000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_122_in_doWhileStatement1339	= { FOLLOW_122_in_doWhileStatement1339_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_doWhileStatement1341  */
static	ANTLR3_BITWORD FOLLOW_expression_in_doWhileStatement1341_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_doWhileStatement1341	= { FOLLOW_expression_in_doWhileStatement1341_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_124_in_doWhileStatement1343  */
static	ANTLR3_BITWORD FOLLOW_124_in_doWhileStatement1343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_124_in_doWhileStatement1343	= { FOLLOW_124_in_doWhileStatement1343_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_doWhileStatement1346  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_doWhileStatement1346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_doWhileStatement1346	= { FOLLOW_LTERM_in_doWhileStatement1346_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_doWhileStatement1350  */
static	ANTLR3_BITWORD FOLLOW_128_in_doWhileStatement1350_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_doWhileStatement1350	= { FOLLOW_128_in_doWhileStatement1350_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_133_in_whileStatement1376  */
static	ANTLR3_BITWORD FOLLOW_133_in_whileStatement1376_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_133_in_whileStatement1376	= { FOLLOW_133_in_whileStatement1376_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1378  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1378_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1378	= { FOLLOW_LTERM_in_whileStatement1378_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_122_in_whileStatement1381  */
static	ANTLR3_BITWORD FOLLOW_122_in_whileStatement1381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_122_in_whileStatement1381	= { FOLLOW_122_in_whileStatement1381_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1383  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1383	= { FOLLOW_LTERM_in_whileStatement1383_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_whileStatement1386  */
static	ANTLR3_BITWORD FOLLOW_expression_in_whileStatement1386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_whileStatement1386	= { FOLLOW_expression_in_whileStatement1386_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1388  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1388_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1388	= { FOLLOW_LTERM_in_whileStatement1388_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_124_in_whileStatement1391  */
static	ANTLR3_BITWORD FOLLOW_124_in_whileStatement1391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_124_in_whileStatement1391	= { FOLLOW_124_in_whileStatement1391_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_whileStatement1393  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_whileStatement1393_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_whileStatement1393	= { FOLLOW_LTERM_in_whileStatement1393_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_whileStatement1396  */
static	ANTLR3_BITWORD FOLLOW_statement_in_whileStatement1396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_whileStatement1396	= { FOLLOW_statement_in_whileStatement1396_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_134_in_forStatement1419  */
static	ANTLR3_BITWORD FOLLOW_134_in_forStatement1419_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_134_in_forStatement1419	= { FOLLOW_134_in_forStatement1419_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1421  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1421_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1421	= { FOLLOW_LTERM_in_forStatement1421_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_122_in_forStatement1424  */
static	ANTLR3_BITWORD FOLLOW_122_in_forStatement1424_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00001), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_122_in_forStatement1424	= { FOLLOW_122_in_forStatement1424_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1427  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1427_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1427	= { FOLLOW_LTERM_in_forStatement1427_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatementInitialiserPart_in_forStatement1432  */
static	ANTLR3_BITWORD FOLLOW_forStatementInitialiserPart_in_forStatement1432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatementInitialiserPart_in_forStatement1432	= { FOLLOW_forStatementInitialiserPart_in_forStatement1432_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1436  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1436	= { FOLLOW_LTERM_in_forStatement1436_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_forStatement1439  */
static	ANTLR3_BITWORD FOLLOW_128_in_forStatement1439_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00001), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_forStatement1439	= { FOLLOW_128_in_forStatement1439_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1442  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1442_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1442	= { FOLLOW_LTERM_in_forStatement1442_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1447  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1447_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1447	= { FOLLOW_expression_in_forStatement1447_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1451  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1451_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1451	= { FOLLOW_LTERM_in_forStatement1451_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_forStatement1454  */
static	ANTLR3_BITWORD FOLLOW_128_in_forStatement1454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x36000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_forStatement1454	= { FOLLOW_128_in_forStatement1454_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1457  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1457	= { FOLLOW_LTERM_in_forStatement1457_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forStatement1462  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forStatement1462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forStatement1462	= { FOLLOW_expression_in_forStatement1462_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1466  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1466	= { FOLLOW_LTERM_in_forStatement1466_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_124_in_forStatement1469  */
static	ANTLR3_BITWORD FOLLOW_124_in_forStatement1469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_124_in_forStatement1469	= { FOLLOW_124_in_forStatement1469_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatement1471  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatement1471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatement1471	= { FOLLOW_LTERM_in_forStatement1471_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forStatement1474  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forStatement1474_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forStatement1474	= { FOLLOW_statement_in_forStatement1474_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionNoIn_in_forStatementInitialiserPart1523  */
static	ANTLR3_BITWORD FOLLOW_expressionNoIn_in_forStatementInitialiserPart1523_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionNoIn_in_forStatementInitialiserPart1523	= { FOLLOW_expressionNoIn_in_forStatementInitialiserPart1523_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_forStatementInitialiserPart1528  */
static	ANTLR3_BITWORD FOLLOW_127_in_forStatementInitialiserPart1528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_forStatementInitialiserPart1528	= { FOLLOW_127_in_forStatementInitialiserPart1528_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forStatementInitialiserPart1530  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forStatementInitialiserPart1530_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forStatementInitialiserPart1530	= { FOLLOW_LTERM_in_forStatementInitialiserPart1530_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1533  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1533_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1533	= { FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1533_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_134_in_forInStatement1553  */
static	ANTLR3_BITWORD FOLLOW_134_in_forInStatement1553_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_134_in_forInStatement1553	= { FOLLOW_134_in_forInStatement1553_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1555  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1555_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1555	= { FOLLOW_LTERM_in_forInStatement1555_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_122_in_forInStatement1558  */
static	ANTLR3_BITWORD FOLLOW_122_in_forInStatement1558_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0x0000000000C00000), ANTLR3_UINT64_LIT(0x0000000000000078) };
static  ANTLR3_BITSET_LIST FOLLOW_122_in_forInStatement1558	= { FOLLOW_122_in_forInStatement1558_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1560  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1560_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0x0000000000C00000), ANTLR3_UINT64_LIT(0x0000000000000078) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1560	= { FOLLOW_LTERM_in_forInStatement1560_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forInStatementInitialiserPart_in_forInStatement1563  */
static	ANTLR3_BITWORD FOLLOW_forInStatementInitialiserPart_in_forInStatement1563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_forInStatementInitialiserPart_in_forInStatement1563	= { FOLLOW_forInStatementInitialiserPart_in_forInStatement1563_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1565  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1565	= { FOLLOW_LTERM_in_forInStatement1565_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_135_in_forInStatement1568  */
static	ANTLR3_BITWORD FOLLOW_135_in_forInStatement1568_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_135_in_forInStatement1568	= { FOLLOW_135_in_forInStatement1568_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1570  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1570	= { FOLLOW_LTERM_in_forInStatement1570_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_forInStatement1573  */
static	ANTLR3_BITWORD FOLLOW_expression_in_forInStatement1573_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_forInStatement1573	= { FOLLOW_expression_in_forInStatement1573_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1575  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1575_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1575	= { FOLLOW_LTERM_in_forInStatement1575_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_124_in_forInStatement1578  */
static	ANTLR3_BITWORD FOLLOW_124_in_forInStatement1578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_124_in_forInStatement1578	= { FOLLOW_124_in_forInStatement1578_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatement1580  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatement1580_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatement1580	= { FOLLOW_LTERM_in_forInStatement1580_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_forInStatement1583  */
static	ANTLR3_BITWORD FOLLOW_statement_in_forInStatement1583_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_forInStatement1583	= { FOLLOW_statement_in_forInStatement1583_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1607  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1607_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1607	= { FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1607_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_127_in_forInStatementInitialiserPart1616  */
static	ANTLR3_BITWORD FOLLOW_127_in_forInStatementInitialiserPart1616_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_127_in_forInStatementInitialiserPart1616	= { FOLLOW_127_in_forInStatementInitialiserPart1616_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_forInStatementInitialiserPart1618  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_forInStatementInitialiserPart1618_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_forInStatementInitialiserPart1618	= { FOLLOW_LTERM_in_forInStatementInitialiserPart1618_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1621  */
static	ANTLR3_BITWORD FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1621_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1621	= { FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1621_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_136_in_continueStatement1640  */
static	ANTLR3_BITWORD FOLLOW_136_in_continueStatement1640_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_136_in_continueStatement1640	= { FOLLOW_136_in_continueStatement1640_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_continueStatement1642  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_continueStatement1642_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_continueStatement1642	= { FOLLOW_Identifier_in_continueStatement1642_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_continueStatement1646  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_continueStatement1646_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_continueStatement1646	= { FOLLOW_LTERM_in_continueStatement1646_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_continueStatement1650  */
static	ANTLR3_BITWORD FOLLOW_128_in_continueStatement1650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_continueStatement1650	= { FOLLOW_128_in_continueStatement1650_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_137_in_breakStatement1672  */
static	ANTLR3_BITWORD FOLLOW_137_in_breakStatement1672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_137_in_breakStatement1672	= { FOLLOW_137_in_breakStatement1672_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_breakStatement1674  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_breakStatement1674_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_breakStatement1674	= { FOLLOW_Identifier_in_breakStatement1674_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_breakStatement1678  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_breakStatement1678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_breakStatement1678	= { FOLLOW_LTERM_in_breakStatement1678_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_breakStatement1682  */
static	ANTLR3_BITWORD FOLLOW_128_in_breakStatement1682_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_breakStatement1682	= { FOLLOW_128_in_breakStatement1682_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_138_in_returnStatement1703  */
static	ANTLR3_BITWORD FOLLOW_138_in_returnStatement1703_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00001), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_138_in_returnStatement1703	= { FOLLOW_138_in_returnStatement1703_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_returnStatement1705  */
static	ANTLR3_BITWORD FOLLOW_expression_in_returnStatement1705_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_returnStatement1705	= { FOLLOW_expression_in_returnStatement1705_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_returnStatement1709  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_returnStatement1709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_returnStatement1709	= { FOLLOW_LTERM_in_returnStatement1709_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_returnStatement1713  */
static	ANTLR3_BITWORD FOLLOW_128_in_returnStatement1713_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_returnStatement1713	= { FOLLOW_128_in_returnStatement1713_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_139_in_withStatement1735  */
static	ANTLR3_BITWORD FOLLOW_139_in_withStatement1735_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_139_in_withStatement1735	= { FOLLOW_139_in_withStatement1735_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement1737  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement1737_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement1737	= { FOLLOW_LTERM_in_withStatement1737_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_122_in_withStatement1740  */
static	ANTLR3_BITWORD FOLLOW_122_in_withStatement1740_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_122_in_withStatement1740	= { FOLLOW_122_in_withStatement1740_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement1742  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement1742_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement1742	= { FOLLOW_LTERM_in_withStatement1742_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_withStatement1745  */
static	ANTLR3_BITWORD FOLLOW_expression_in_withStatement1745_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_withStatement1745	= { FOLLOW_expression_in_withStatement1745_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement1747  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement1747_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement1747	= { FOLLOW_LTERM_in_withStatement1747_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_124_in_withStatement1750  */
static	ANTLR3_BITWORD FOLLOW_124_in_withStatement1750_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_124_in_withStatement1750	= { FOLLOW_124_in_withStatement1750_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_withStatement1752  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_withStatement1752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_withStatement1752	= { FOLLOW_LTERM_in_withStatement1752_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_withStatement1755  */
static	ANTLR3_BITWORD FOLLOW_statement_in_withStatement1755_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_withStatement1755	= { FOLLOW_statement_in_withStatement1755_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_labelledStatement1776  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_labelledStatement1776_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_labelledStatement1776	= { FOLLOW_Identifier_in_labelledStatement1776_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_labelledStatement1778  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_labelledStatement1778_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_labelledStatement1778	= { FOLLOW_LTERM_in_labelledStatement1778_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_labelledStatement1781  */
static	ANTLR3_BITWORD FOLLOW_140_in_labelledStatement1781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_labelledStatement1781	= { FOLLOW_140_in_labelledStatement1781_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_labelledStatement1783  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_labelledStatement1783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_labelledStatement1783	= { FOLLOW_LTERM_in_labelledStatement1783_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_labelledStatement1786  */
static	ANTLR3_BITWORD FOLLOW_statement_in_labelledStatement1786_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_labelledStatement1786	= { FOLLOW_statement_in_labelledStatement1786_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_141_in_switchStatement1809  */
static	ANTLR3_BITWORD FOLLOW_141_in_switchStatement1809_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_141_in_switchStatement1809	= { FOLLOW_141_in_switchStatement1809_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement1811  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement1811_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement1811	= { FOLLOW_LTERM_in_switchStatement1811_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_122_in_switchStatement1814  */
static	ANTLR3_BITWORD FOLLOW_122_in_switchStatement1814_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_122_in_switchStatement1814	= { FOLLOW_122_in_switchStatement1814_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement1816  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement1816_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement1816	= { FOLLOW_LTERM_in_switchStatement1816_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_switchStatement1819  */
static	ANTLR3_BITWORD FOLLOW_expression_in_switchStatement1819_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_switchStatement1819	= { FOLLOW_expression_in_switchStatement1819_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement1821  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement1821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement1821	= { FOLLOW_LTERM_in_switchStatement1821_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_124_in_switchStatement1824  */
static	ANTLR3_BITWORD FOLLOW_124_in_switchStatement1824_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_124_in_switchStatement1824	= { FOLLOW_124_in_switchStatement1824_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_switchStatement1826  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_switchStatement1826_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_switchStatement1826	= { FOLLOW_LTERM_in_switchStatement1826_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseBlock_in_switchStatement1829  */
static	ANTLR3_BITWORD FOLLOW_caseBlock_in_switchStatement1829_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_caseBlock_in_switchStatement1829	= { FOLLOW_caseBlock_in_switchStatement1829_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_caseBlock1851  */
static	ANTLR3_BITWORD FOLLOW_125_in_caseBlock1851_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000), ANTLR3_UINT64_LIT(0x000000000000C000) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_caseBlock1851	= { FOLLOW_125_in_caseBlock1851_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock1854  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock1854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock1854	= { FOLLOW_LTERM_in_caseBlock1854_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock1859  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock1859_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000), ANTLR3_UINT64_LIT(0x000000000000C000) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock1859	= { FOLLOW_caseClause_in_caseBlock1859_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock1864  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock1864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000008000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock1864	= { FOLLOW_LTERM_in_caseBlock1864_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_defaultClause_in_caseBlock1867  */
static	ANTLR3_BITWORD FOLLOW_defaultClause_in_caseBlock1867_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_defaultClause_in_caseBlock1867	= { FOLLOW_defaultClause_in_caseBlock1867_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock1870  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock1870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock1870	= { FOLLOW_LTERM_in_caseBlock1870_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_caseClause_in_caseBlock1875  */
static	ANTLR3_BITWORD FOLLOW_caseClause_in_caseBlock1875_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_caseClause_in_caseBlock1875	= { FOLLOW_caseClause_in_caseBlock1875_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseBlock1881  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseBlock1881_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseBlock1881	= { FOLLOW_LTERM_in_caseBlock1881_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_caseBlock1884  */
static	ANTLR3_BITWORD FOLLOW_126_in_caseBlock1884_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_caseBlock1884	= { FOLLOW_126_in_caseBlock1884_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_142_in_caseClause1921  */
static	ANTLR3_BITWORD FOLLOW_142_in_caseClause1921_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_142_in_caseClause1921	= { FOLLOW_142_in_caseClause1921_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause1923  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause1923_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause1923	= { FOLLOW_LTERM_in_caseClause1923_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_caseClause1926  */
static	ANTLR3_BITWORD FOLLOW_expression_in_caseClause1926_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_caseClause1926	= { FOLLOW_expression_in_caseClause1926_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause1928  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause1928_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause1928	= { FOLLOW_LTERM_in_caseClause1928_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_caseClause1931  */
static	ANTLR3_BITWORD FOLLOW_140_in_caseClause1931_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_caseClause1931	= { FOLLOW_140_in_caseClause1931_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_caseClause1933  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_caseClause1933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_caseClause1933	= { FOLLOW_LTERM_in_caseClause1933_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_caseClause1936  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_caseClause1936_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_caseClause1936	= { FOLLOW_statementList_in_caseClause1936_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_143_in_defaultClause1961  */
static	ANTLR3_BITWORD FOLLOW_143_in_defaultClause1961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_143_in_defaultClause1961	= { FOLLOW_143_in_defaultClause1961_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause1963  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause1963_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause1963	= { FOLLOW_LTERM_in_defaultClause1963_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_defaultClause1966  */
static	ANTLR3_BITWORD FOLLOW_140_in_defaultClause1966_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_defaultClause1966	= { FOLLOW_140_in_defaultClause1966_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_defaultClause1968  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_defaultClause1968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_defaultClause1968	= { FOLLOW_LTERM_in_defaultClause1968_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementList_in_defaultClause1971  */
static	ANTLR3_BITWORD FOLLOW_statementList_in_defaultClause1971_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementList_in_defaultClause1971	= { FOLLOW_statementList_in_defaultClause1971_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_144_in_throwStatement1993  */
static	ANTLR3_BITWORD FOLLOW_144_in_throwStatement1993_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2600000380000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_144_in_throwStatement1993	= { FOLLOW_144_in_throwStatement1993_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_throwStatement1995  */
static	ANTLR3_BITWORD FOLLOW_expression_in_throwStatement1995_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_throwStatement1995	= { FOLLOW_expression_in_throwStatement1995_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_throwStatement1998  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_throwStatement1998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_throwStatement1998	= { FOLLOW_LTERM_in_throwStatement1998_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_throwStatement2002  */
static	ANTLR3_BITWORD FOLLOW_128_in_throwStatement2002_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_throwStatement2002	= { FOLLOW_128_in_throwStatement2002_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_145_in_tryStatement2023  */
static	ANTLR3_BITWORD FOLLOW_145_in_tryStatement2023_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_145_in_tryStatement2023	= { FOLLOW_145_in_tryStatement2023_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2025  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2025_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2025	= { FOLLOW_LTERM_in_tryStatement2025_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_tryStatement2028  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_tryStatement2028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x00000000000C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_tryStatement2028	= { FOLLOW_statementBlock_in_tryStatement2028_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2030  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2030_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x00000000000C0000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2030	= { FOLLOW_LTERM_in_tryStatement2030_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyClause_in_tryStatement2042  */
static	ANTLR3_BITWORD FOLLOW_finallyClause_in_tryStatement2042_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyClause_in_tryStatement2042	= { FOLLOW_finallyClause_in_tryStatement2042_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_catchClause_in_tryStatement2054  */
static	ANTLR3_BITWORD FOLLOW_catchClause_in_tryStatement2054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_catchClause_in_tryStatement2054	= { FOLLOW_catchClause_in_tryStatement2054_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_tryStatement2057  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_tryStatement2057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_tryStatement2057	= { FOLLOW_LTERM_in_tryStatement2057_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_finallyClause_in_tryStatement2060  */
static	ANTLR3_BITWORD FOLLOW_finallyClause_in_tryStatement2060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_finallyClause_in_tryStatement2060	= { FOLLOW_finallyClause_in_tryStatement2060_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_146_in_catchClause2093  */
static	ANTLR3_BITWORD FOLLOW_146_in_catchClause2093_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_146_in_catchClause2093	= { FOLLOW_146_in_catchClause2093_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2095  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2095_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2095	= { FOLLOW_LTERM_in_catchClause2095_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_122_in_catchClause2098  */
static	ANTLR3_BITWORD FOLLOW_122_in_catchClause2098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_122_in_catchClause2098	= { FOLLOW_122_in_catchClause2098_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2100  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2100_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2100	= { FOLLOW_LTERM_in_catchClause2100_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_catchClause2103  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_catchClause2103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_catchClause2103	= { FOLLOW_Identifier_in_catchClause2103_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2105  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2105_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2105	= { FOLLOW_LTERM_in_catchClause2105_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_124_in_catchClause2108  */
static	ANTLR3_BITWORD FOLLOW_124_in_catchClause2108_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_124_in_catchClause2108	= { FOLLOW_124_in_catchClause2108_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_catchClause2110  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_catchClause2110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_catchClause2110	= { FOLLOW_LTERM_in_catchClause2110_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_catchClause2113  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_catchClause2113_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_catchClause2113	= { FOLLOW_statementBlock_in_catchClause2113_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_147_in_finallyClause2135  */
static	ANTLR3_BITWORD FOLLOW_147_in_finallyClause2135_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_147_in_finallyClause2135	= { FOLLOW_147_in_finallyClause2135_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_finallyClause2137  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_finallyClause2137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_finallyClause2137	= { FOLLOW_LTERM_in_finallyClause2137_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_finallyClause2140  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_finallyClause2140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_finallyClause2140	= { FOLLOW_statementBlock_in_finallyClause2140_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement2165  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement2165_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement2165	= { FOLLOW_leftHandSideExpression_in_msgSendStatement2165_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSendStatement2168  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSendStatement2168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSendStatement2168	= { FOLLOW_LTERM_in_msgSendStatement2168_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_148_in_msgSendStatement2171  */
static	ANTLR3_BITWORD FOLLOW_148_in_msgSendStatement2171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2600000380000000), ANTLR3_UINT64_LIT(0x0000000000C00000), ANTLR3_UINT64_LIT(0x0000000000000078) };
static  ANTLR3_BITSET_LIST FOLLOW_148_in_msgSendStatement2171	= { FOLLOW_148_in_msgSendStatement2171_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgSendStatement2176  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgSendStatement2176_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgSendStatement2176	= { FOLLOW_leftHandSideExpression_in_msgSendStatement2176_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgSendStatement2179  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgSendStatement2179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgSendStatement2179	= { FOLLOW_LTERM_in_msgSendStatement2179_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_msgSendStatement2183  */
static	ANTLR3_BITWORD FOLLOW_128_in_msgSendStatement2183_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_msgSendStatement2183	= { FOLLOW_128_in_msgSendStatement2183_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_148_in_msgSendStatement2202  */
static	ANTLR3_BITWORD FOLLOW_148_in_msgSendStatement2202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2600000380000000), ANTLR3_UINT64_LIT(0x0000000000C00000), ANTLR3_UINT64_LIT(0x0000000000000078) };
static  ANTLR3_BITSET_LIST FOLLOW_148_in_msgSendStatement2202	= { FOLLOW_148_in_msgSendStatement2202_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgSendStatement2204  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgSendStatement2204_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgSendStatement2204	= { FOLLOW_memberExpression_in_msgSendStatement2204_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgRecvStatement2232  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgRecvStatement2232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgRecvStatement2232	= { FOLLOW_memberExpression_in_msgRecvStatement2232_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2234  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2234	= { FOLLOW_LTERM_in_msgRecvStatement2234_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_msgRecvStatement2236  */
static	ANTLR3_BITWORD FOLLOW_149_in_msgRecvStatement2236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2600000380000000), ANTLR3_UINT64_LIT(0x0000000000C00000), ANTLR3_UINT64_LIT(0x0000000000000078) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_msgRecvStatement2236	= { FOLLOW_149_in_msgRecvStatement2236_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement2240  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement2240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement2240	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement2240_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2243  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2243	= { FOLLOW_LTERM_in_msgRecvStatement2243_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_msgRecvStatement2247  */
static	ANTLR3_BITWORD FOLLOW_128_in_msgRecvStatement2247_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_msgRecvStatement2247	= { FOLLOW_128_in_msgRecvStatement2247_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgRecvStatement2268  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgRecvStatement2268_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgRecvStatement2268	= { FOLLOW_memberExpression_in_msgRecvStatement2268_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2270  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2270_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2270	= { FOLLOW_LTERM_in_msgRecvStatement2270_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_msgRecvStatement2272  */
static	ANTLR3_BITWORD FOLLOW_149_in_msgRecvStatement2272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2600000380000000), ANTLR3_UINT64_LIT(0x0000000000C00000), ANTLR3_UINT64_LIT(0x0000000000000078) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_msgRecvStatement2272	= { FOLLOW_149_in_msgRecvStatement2272_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_msgRecvStatement2276  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_msgRecvStatement2276_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_msgRecvStatement2276	= { FOLLOW_leftHandSideExpression_in_msgRecvStatement2276_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2278  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2278_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2278	= { FOLLOW_LTERM_in_msgRecvStatement2278_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_msgRecvStatement2281  */
static	ANTLR3_BITWORD FOLLOW_149_in_msgRecvStatement2281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2600000380000000), ANTLR3_UINT64_LIT(0x0000000000C00000), ANTLR3_UINT64_LIT(0x0000000000000078) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_msgRecvStatement2281	= { FOLLOW_149_in_msgRecvStatement2281_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_msgRecvStatement2285  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_msgRecvStatement2285_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_msgRecvStatement2285	= { FOLLOW_memberExpression_in_msgRecvStatement2285_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_msgRecvStatement2288  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_msgRecvStatement2288_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_msgRecvStatement2288	= { FOLLOW_LTERM_in_msgRecvStatement2288_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_128_in_msgRecvStatement2292  */
static	ANTLR3_BITWORD FOLLOW_128_in_msgRecvStatement2292_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_128_in_msgRecvStatement2292	= { FOLLOW_128_in_msgRecvStatement2292_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression2319  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression2319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression2319	= { FOLLOW_assignmentExpression_in_expression2319_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expression2322  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expression2322_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expression2322	= { FOLLOW_LTERM_in_expression2322_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_123_in_expression2325  */
static	ANTLR3_BITWORD FOLLOW_123_in_expression2325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_123_in_expression2325	= { FOLLOW_123_in_expression2325_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expression2327  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expression2327_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expression2327	= { FOLLOW_LTERM_in_expression2327_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_expression2330  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_expression2330_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_expression2330	= { FOLLOW_assignmentExpression_in_expression2330_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2354  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2354_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2354	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2354_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionNoIn2357  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionNoIn2357_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionNoIn2357	= { FOLLOW_LTERM_in_expressionNoIn2357_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_123_in_expressionNoIn2360  */
static	ANTLR3_BITWORD FOLLOW_123_in_expressionNoIn2360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_123_in_expressionNoIn2360	= { FOLLOW_123_in_expressionNoIn2360_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_expressionNoIn2362  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_expressionNoIn2362_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_expressionNoIn2362	= { FOLLOW_LTERM_in_expressionNoIn2362_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2365  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2365_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2365	= { FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2365_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_assignmentExpression2389  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_assignmentExpression2389_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_assignmentExpression2389	= { FOLLOW_conditionalExpression_in_assignmentExpression2389_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpression2402  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpression2402_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000001FFC000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpression2402	= { FOLLOW_leftHandSideExpression_in_assignmentExpression2402_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2404  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000001FFC000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2404	= { FOLLOW_LTERM_in_assignmentExpression2404_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpression2407  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpression2407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpression2407	= { FOLLOW_assignmentOperator_in_assignmentExpression2407_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpression2409  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpression2409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpression2409	= { FOLLOW_LTERM_in_assignmentExpression2409_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_assignmentExpression2412  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_assignmentExpression2412_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_assignmentExpression2412	= { FOLLOW_assignmentExpression_in_assignmentExpression2412_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2436  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2436	= { FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2436_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2449  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2449_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000001FFC000002) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2449	= { FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2449_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn2451  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn2451_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000001FFC000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn2451	= { FOLLOW_LTERM_in_assignmentExpressionNoIn2451_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2454  */
static	ANTLR3_BITWORD FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2454	= { FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2454_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_assignmentExpressionNoIn2456  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_assignmentExpressionNoIn2456_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_assignmentExpressionNoIn2456	= { FOLLOW_LTERM_in_assignmentExpressionNoIn2456_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2459  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2459_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2459	= { FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2459_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_leftHandSideExpression2484  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_leftHandSideExpression2484_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_leftHandSideExpression2484	= { FOLLOW_callExpression_in_leftHandSideExpression2484_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_leftHandSideExpression2493  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_leftHandSideExpression2493_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_leftHandSideExpression2493	= { FOLLOW_newExpression_in_leftHandSideExpression2493_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_newExpression2509  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_newExpression2509_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_newExpression2509	= { FOLLOW_memberExpression_in_newExpression2509_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_150_in_newExpression2518  */
static	ANTLR3_BITWORD FOLLOW_150_in_newExpression2518_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0x0000000000C00000), ANTLR3_UINT64_LIT(0x0000000000000078) };
static  ANTLR3_BITSET_LIST FOLLOW_150_in_newExpression2518	= { FOLLOW_150_in_newExpression2518_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_newExpression2520  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_newExpression2520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0x0000000000C00000), ANTLR3_UINT64_LIT(0x0000000000000078) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_newExpression2520	= { FOLLOW_LTERM_in_newExpression2520_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_newExpression_in_newExpression2523  */
static	ANTLR3_BITWORD FOLLOW_newExpression_in_newExpression2523_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_newExpression_in_newExpression2523	= { FOLLOW_newExpression_in_newExpression2523_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_indexSuffix12545  */
static	ANTLR3_BITWORD FOLLOW_151_in_indexSuffix12545_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_indexSuffix12545	= { FOLLOW_151_in_indexSuffix12545_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix12547  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix12547_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix12547	= { FOLLOW_LTERM_in_indexSuffix12547_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix12550  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix12550_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix12550	= { FOLLOW_expression_in_indexSuffix12550_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix12552  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix12552_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix12552	= { FOLLOW_LTERM_in_indexSuffix12552_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_indexSuffix12555  */
static	ANTLR3_BITWORD FOLLOW_152_in_indexSuffix12555_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_indexSuffix12555	= { FOLLOW_152_in_indexSuffix12555_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_153_in_propertyReferenceSuffix12572  */
static	ANTLR3_BITWORD FOLLOW_153_in_propertyReferenceSuffix12572_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_153_in_propertyReferenceSuffix12572	= { FOLLOW_153_in_propertyReferenceSuffix12572_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix12574  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix12574_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix12574	= { FOLLOW_LTERM_in_propertyReferenceSuffix12574_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix12577  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix12577_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix12577	= { FOLLOW_Identifier_in_propertyReferenceSuffix12577_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primaryExpression_in_memberExpression2596  */
static	ANTLR3_BITWORD FOLLOW_primaryExpression_in_memberExpression2596_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_primaryExpression_in_memberExpression2596	= { FOLLOW_primaryExpression_in_memberExpression2596_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression2605  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression2605_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression2605	= { FOLLOW_LTERM_in_memberExpression2605_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression2608  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression2608_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression2608	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression2608_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression2625  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression2625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression2625	= { FOLLOW_LTERM_in_memberExpression2625_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression2628  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression2628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression2628	= { FOLLOW_indexSuffix1_in_memberExpression2628_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionExpression_in_memberExpression2647  */
static	ANTLR3_BITWORD FOLLOW_functionExpression_in_memberExpression2647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_functionExpression_in_memberExpression2647	= { FOLLOW_functionExpression_in_memberExpression2647_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression2655  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression2655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression2655	= { FOLLOW_LTERM_in_memberExpression2655_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression2658  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression2658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression2658	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression2658_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression2675  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression2675_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression2675	= { FOLLOW_LTERM_in_memberExpression2675_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression2678  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression2678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression2678	= { FOLLOW_indexSuffix1_in_memberExpression2678_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_150_in_memberExpression2697  */
static	ANTLR3_BITWORD FOLLOW_150_in_memberExpression2697_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0x0000000000C00000), ANTLR3_UINT64_LIT(0x0000000000000078) };
static  ANTLR3_BITSET_LIST FOLLOW_150_in_memberExpression2697	= { FOLLOW_150_in_memberExpression2697_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression2699  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression2699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0x0000000000C00000), ANTLR3_UINT64_LIT(0x0000000000000078) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression2699	= { FOLLOW_LTERM_in_memberExpression2699_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_memberExpression2704  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_memberExpression2704_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_memberExpression2704	= { FOLLOW_memberExpression_in_memberExpression2704_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression2706  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression2706_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression2706	= { FOLLOW_LTERM_in_memberExpression2706_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_memberExpression2709  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_memberExpression2709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_memberExpression2709	= { FOLLOW_arguments_in_memberExpression2709_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression2724  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression2724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression2724	= { FOLLOW_LTERM_in_memberExpression2724_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_memberExpression2727  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_memberExpression2727_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_memberExpression2727	= { FOLLOW_propertyReferenceSuffix1_in_memberExpression2727_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_memberExpression2740  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_memberExpression2740_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_memberExpression2740	= { FOLLOW_LTERM_in_memberExpression2740_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_memberExpression2743  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_memberExpression2743_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_memberExpression2743	= { FOLLOW_indexSuffix1_in_memberExpression2743_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_memberExpressionSuffix2772  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_memberExpressionSuffix2772_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_memberExpressionSuffix2772	= { FOLLOW_indexSuffix_in_memberExpressionSuffix2772_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix2782  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix2782_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix2782	= { FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix2782_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_callExpression2799  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_callExpression2799_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_callExpression2799	= { FOLLOW_memberExpression_in_callExpression2799_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression2801  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression2801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression2801	= { FOLLOW_LTERM_in_callExpression2801_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression2804  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression2804_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0400000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression2804	= { FOLLOW_arguments_in_callExpression2804_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression2818  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression2818_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression2818	= { FOLLOW_LTERM_in_callExpression2818_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpression2821  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpression2821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0400000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpression2821	= { FOLLOW_arguments_in_callExpression2821_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression2829  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression2829_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression2829	= { FOLLOW_LTERM_in_callExpression2829_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_callExpression2832  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_callExpression2832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0400000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_callExpression2832	= { FOLLOW_indexSuffix1_in_callExpression2832_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_callExpression2847  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_callExpression2847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_callExpression2847	= { FOLLOW_LTERM_in_callExpression2847_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_callExpression2850  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_callExpression2850_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0400000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_callExpression2850	= { FOLLOW_propertyReferenceSuffix1_in_callExpression2850_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_callExpressionSuffix2877  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_callExpressionSuffix2877_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_callExpressionSuffix2877	= { FOLLOW_arguments_in_callExpressionSuffix2877_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix_in_callExpressionSuffix2886  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix_in_callExpressionSuffix2886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix_in_callExpressionSuffix2886	= { FOLLOW_indexSuffix_in_callExpressionSuffix2886_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix2895  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix2895_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix2895	= { FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix2895_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_122_in_arguments2910  */
static	ANTLR3_BITWORD FOLLOW_122_in_arguments2910_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x36000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_122_in_arguments2910	= { FOLLOW_122_in_arguments2910_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments2913  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments2913_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments2913	= { FOLLOW_LTERM_in_arguments2913_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments2917  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments2917_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments2917	= { FOLLOW_assignmentExpression_in_arguments2917_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments2921  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments2921_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments2921	= { FOLLOW_LTERM_in_arguments2921_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_123_in_arguments2924  */
static	ANTLR3_BITWORD FOLLOW_123_in_arguments2924_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_123_in_arguments2924	= { FOLLOW_123_in_arguments2924_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments2926  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments2926_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments2926	= { FOLLOW_LTERM_in_arguments2926_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arguments2929  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arguments2929_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arguments2929	= { FOLLOW_assignmentExpression_in_arguments2929_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arguments2935  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arguments2935_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arguments2935	= { FOLLOW_LTERM_in_arguments2935_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_124_in_arguments2938  */
static	ANTLR3_BITWORD FOLLOW_124_in_arguments2938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_124_in_arguments2938	= { FOLLOW_124_in_arguments2938_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_indexSuffix2961  */
static	ANTLR3_BITWORD FOLLOW_151_in_indexSuffix2961_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_indexSuffix2961	= { FOLLOW_151_in_indexSuffix2961_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix2963  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix2963_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix2963	= { FOLLOW_LTERM_in_indexSuffix2963_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_indexSuffix2966  */
static	ANTLR3_BITWORD FOLLOW_expression_in_indexSuffix2966_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_indexSuffix2966	= { FOLLOW_expression_in_indexSuffix2966_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_indexSuffix2968  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_indexSuffix2968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_indexSuffix2968	= { FOLLOW_LTERM_in_indexSuffix2968_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_indexSuffix2971  */
static	ANTLR3_BITWORD FOLLOW_152_in_indexSuffix2971_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_indexSuffix2971	= { FOLLOW_152_in_indexSuffix2971_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_153_in_propertyReferenceSuffix2992  */
static	ANTLR3_BITWORD FOLLOW_153_in_propertyReferenceSuffix2992_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_153_in_propertyReferenceSuffix2992	= { FOLLOW_153_in_propertyReferenceSuffix2992_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyReferenceSuffix2994  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyReferenceSuffix2994_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000000C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyReferenceSuffix2994	= { FOLLOW_LTERM_in_propertyReferenceSuffix2994_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_propertyReferenceSuffix2997  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_propertyReferenceSuffix2997_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_propertyReferenceSuffix2997	= { FOLLOW_Identifier_in_propertyReferenceSuffix2997_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_129_in_assignmentOperator3017  */
static	ANTLR3_BITWORD FOLLOW_129_in_assignmentOperator3017_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_129_in_assignmentOperator3017	= { FOLLOW_129_in_assignmentOperator3017_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_154_in_assignmentOperator3026  */
static	ANTLR3_BITWORD FOLLOW_154_in_assignmentOperator3026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_154_in_assignmentOperator3026	= { FOLLOW_154_in_assignmentOperator3026_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_155_in_assignmentOperator3035  */
static	ANTLR3_BITWORD FOLLOW_155_in_assignmentOperator3035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_155_in_assignmentOperator3035	= { FOLLOW_155_in_assignmentOperator3035_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_156_in_assignmentOperator3045  */
static	ANTLR3_BITWORD FOLLOW_156_in_assignmentOperator3045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_156_in_assignmentOperator3045	= { FOLLOW_156_in_assignmentOperator3045_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_157_in_assignmentOperator3054  */
static	ANTLR3_BITWORD FOLLOW_157_in_assignmentOperator3054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_157_in_assignmentOperator3054	= { FOLLOW_157_in_assignmentOperator3054_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_158_in_assignmentOperator3063  */
static	ANTLR3_BITWORD FOLLOW_158_in_assignmentOperator3063_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_158_in_assignmentOperator3063	= { FOLLOW_158_in_assignmentOperator3063_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_159_in_assignmentOperator3072  */
static	ANTLR3_BITWORD FOLLOW_159_in_assignmentOperator3072_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_159_in_assignmentOperator3072	= { FOLLOW_159_in_assignmentOperator3072_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_160_in_assignmentOperator3081  */
static	ANTLR3_BITWORD FOLLOW_160_in_assignmentOperator3081_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_160_in_assignmentOperator3081	= { FOLLOW_160_in_assignmentOperator3081_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_161_in_assignmentOperator3090  */
static	ANTLR3_BITWORD FOLLOW_161_in_assignmentOperator3090_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_161_in_assignmentOperator3090	= { FOLLOW_161_in_assignmentOperator3090_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_162_in_assignmentOperator3099  */
static	ANTLR3_BITWORD FOLLOW_162_in_assignmentOperator3099_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_162_in_assignmentOperator3099	= { FOLLOW_162_in_assignmentOperator3099_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_163_in_assignmentOperator3107  */
static	ANTLR3_BITWORD FOLLOW_163_in_assignmentOperator3107_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_163_in_assignmentOperator3107	= { FOLLOW_163_in_assignmentOperator3107_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_164_in_assignmentOperator3116  */
static	ANTLR3_BITWORD FOLLOW_164_in_assignmentOperator3116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_164_in_assignmentOperator3116	= { FOLLOW_164_in_assignmentOperator3116_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpression_in_conditionalExpression3134  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpression_in_conditionalExpression3134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpression_in_conditionalExpression3134	= { FOLLOW_logicalORExpression_in_conditionalExpression3134_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3142  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3142	= { FOLLOW_LTERM_in_conditionalExpression3142_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_conditionalExpression3145  */
static	ANTLR3_BITWORD FOLLOW_165_in_conditionalExpression3145_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_conditionalExpression3145	= { FOLLOW_165_in_conditionalExpression3145_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3147  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3147	= { FOLLOW_LTERM_in_conditionalExpression3147_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_conditionalExpression3152  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_conditionalExpression3152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_conditionalExpression3152	= { FOLLOW_assignmentExpression_in_conditionalExpression3152_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3154  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3154	= { FOLLOW_LTERM_in_conditionalExpression3154_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_conditionalExpression3157  */
static	ANTLR3_BITWORD FOLLOW_140_in_conditionalExpression3157_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_conditionalExpression3157	= { FOLLOW_140_in_conditionalExpression3157_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpression3159  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpression3159_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpression3159	= { FOLLOW_LTERM_in_conditionalExpression3159_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_conditionalExpression3164  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_conditionalExpression3164_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_conditionalExpression3164	= { FOLLOW_assignmentExpression_in_conditionalExpression3164_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3195  */
static	ANTLR3_BITWORD FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3195_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3195	= { FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3195_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3202  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3202_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3202	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3202_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_165_in_conditionalExpressionNoIn3205  */
static	ANTLR3_BITWORD FOLLOW_165_in_conditionalExpressionNoIn3205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_165_in_conditionalExpressionNoIn3205	= { FOLLOW_165_in_conditionalExpressionNoIn3205_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3207  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3207_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3207	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3207_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3212  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3212_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3212	= { FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3212_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3214  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3214_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3214	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3214_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_conditionalExpressionNoIn3217  */
static	ANTLR3_BITWORD FOLLOW_140_in_conditionalExpressionNoIn3217_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_conditionalExpressionNoIn3217	= { FOLLOW_140_in_conditionalExpressionNoIn3217_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_conditionalExpressionNoIn3219  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_conditionalExpressionNoIn3219_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_conditionalExpressionNoIn3219	= { FOLLOW_LTERM_in_conditionalExpressionNoIn3219_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3224  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3224_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3224	= { FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3224_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression3254  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression3254_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression3254	= { FOLLOW_logicalANDExpression_in_logicalORExpression3254_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression3261  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression3261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression3261	= { FOLLOW_LTERM_in_logicalORExpression3261_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_logicalORExpression3264  */
static	ANTLR3_BITWORD FOLLOW_166_in_logicalORExpression3264_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_logicalORExpression3264	= { FOLLOW_166_in_logicalORExpression3264_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpression3266  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpression3266_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpression3266	= { FOLLOW_LTERM_in_logicalORExpression3266_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpression_in_logicalORExpression3269  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpression_in_logicalORExpression3269_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpression_in_logicalORExpression3269	= { FOLLOW_logicalANDExpression_in_logicalORExpression3269_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression3296  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression3296_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression3296	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression3296_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression3303  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression3303_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression3303	= { FOLLOW_LTERM_in_logicalANDExpression3303_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_logicalANDExpression3306  */
static	ANTLR3_BITWORD FOLLOW_167_in_logicalANDExpression3306_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_logicalANDExpression3306	= { FOLLOW_167_in_logicalANDExpression3306_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpression3308  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpression3308_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpression3308	= { FOLLOW_LTERM_in_logicalANDExpression3308_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpression_in_logicalANDExpression3311  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpression_in_logicalANDExpression3311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpression_in_logicalANDExpression3311	= { FOLLOW_bitwiseORExpression_in_logicalANDExpression3311_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3339  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3339_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3339	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3339_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn3346  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn3346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn3346	= { FOLLOW_LTERM_in_logicalORExpressionNoIn3346_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_166_in_logicalORExpressionNoIn3349  */
static	ANTLR3_BITWORD FOLLOW_166_in_logicalORExpressionNoIn3349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_166_in_logicalORExpressionNoIn3349	= { FOLLOW_166_in_logicalORExpressionNoIn3349_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalORExpressionNoIn3351  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalORExpressionNoIn3351_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalORExpressionNoIn3351	= { FOLLOW_LTERM_in_logicalORExpressionNoIn3351_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3354  */
static	ANTLR3_BITWORD FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3354_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3354	= { FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3354_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3383  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3383	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3383_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn3391  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn3391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn3391	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn3391_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_167_in_logicalANDExpressionNoIn3394  */
static	ANTLR3_BITWORD FOLLOW_167_in_logicalANDExpressionNoIn3394_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_167_in_logicalANDExpressionNoIn3394	= { FOLLOW_167_in_logicalANDExpressionNoIn3394_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_logicalANDExpressionNoIn3396  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_logicalANDExpressionNoIn3396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_logicalANDExpressionNoIn3396	= { FOLLOW_LTERM_in_logicalANDExpressionNoIn3396_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3399  */
static	ANTLR3_BITWORD FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3399_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000008000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3399	= { FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3399_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3426  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3426_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3426	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3426_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression3434  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression3434_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression3434	= { FOLLOW_LTERM_in_bitwiseORExpression3434_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_bitwiseORExpression3437  */
static	ANTLR3_BITWORD FOLLOW_168_in_bitwiseORExpression3437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_bitwiseORExpression3437	= { FOLLOW_168_in_bitwiseORExpression3437_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpression3439  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpression3439_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpression3439	= { FOLLOW_LTERM_in_bitwiseORExpression3439_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3442  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3442_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3442	= { FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3442_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3469  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3469	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3469_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn3477  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn3477_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn3477	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn3477_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_168_in_bitwiseORExpressionNoIn3480  */
static	ANTLR3_BITWORD FOLLOW_168_in_bitwiseORExpressionNoIn3480_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_168_in_bitwiseORExpressionNoIn3480	= { FOLLOW_168_in_bitwiseORExpressionNoIn3480_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseORExpressionNoIn3482  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseORExpressionNoIn3482_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseORExpressionNoIn3482	= { FOLLOW_LTERM_in_bitwiseORExpressionNoIn3482_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3485  */
static	ANTLR3_BITWORD FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000010000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3485	= { FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3485_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3511  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3511_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3511	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3511_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression3519  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression3519_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression3519	= { FOLLOW_LTERM_in_bitwiseXORExpression3519_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_bitwiseXORExpression3522  */
static	ANTLR3_BITWORD FOLLOW_169_in_bitwiseXORExpression3522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_bitwiseXORExpression3522	= { FOLLOW_169_in_bitwiseXORExpression3522_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpression3524  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpression3524_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpression3524	= { FOLLOW_LTERM_in_bitwiseXORExpression3524_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3527  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3527_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3527	= { FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3527_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3554  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3554_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3554	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3554_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3561  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3561_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3561	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3561_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_169_in_bitwiseXORExpressionNoIn3564  */
static	ANTLR3_BITWORD FOLLOW_169_in_bitwiseXORExpressionNoIn3564_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_169_in_bitwiseXORExpressionNoIn3564	= { FOLLOW_169_in_bitwiseXORExpressionNoIn3564_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3566  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3566_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3566	= { FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3566_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3569  */
static	ANTLR3_BITWORD FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3569_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3569	= { FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3569_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression3597  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression3597_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression3597	= { FOLLOW_equalityExpression_in_bitwiseANDExpression3597_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression3605  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression3605_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression3605	= { FOLLOW_LTERM_in_bitwiseANDExpression3605_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_170_in_bitwiseANDExpression3608  */
static	ANTLR3_BITWORD FOLLOW_170_in_bitwiseANDExpression3608_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_170_in_bitwiseANDExpression3608	= { FOLLOW_170_in_bitwiseANDExpression3608_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpression3610  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpression3610_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpression3610	= { FOLLOW_LTERM_in_bitwiseANDExpression3610_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpression_in_bitwiseANDExpression3613  */
static	ANTLR3_BITWORD FOLLOW_equalityExpression_in_bitwiseANDExpression3613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpression_in_bitwiseANDExpression3613	= { FOLLOW_equalityExpression_in_bitwiseANDExpression3613_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3641  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3641	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3641_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3649  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3649_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3649	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3649_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_170_in_bitwiseANDExpressionNoIn3652  */
static	ANTLR3_BITWORD FOLLOW_170_in_bitwiseANDExpressionNoIn3652_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_170_in_bitwiseANDExpressionNoIn3652	= { FOLLOW_170_in_bitwiseANDExpressionNoIn3652_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3654  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3654_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3654	= { FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3654_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3657  */
static	ANTLR3_BITWORD FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3657	= { FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3657_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression3684  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression3684_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000780000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression3684	= { FOLLOW_relationalExpression_in_equalityExpression3684_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression3691  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression3691_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000780000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression3691	= { FOLLOW_LTERM_in_equalityExpression3691_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpression3694  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpression3694_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpression3694	= { FOLLOW_equalityOps_in_equalityExpression3694_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpression3696  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpression3696_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpression3696	= { FOLLOW_LTERM_in_equalityExpression3696_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpression_in_equalityExpression3699  */
static	ANTLR3_BITWORD FOLLOW_relationalExpression_in_equalityExpression3699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000780000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpression_in_equalityExpression3699	= { FOLLOW_relationalExpression_in_equalityExpression3699_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_171_in_equalityOps3724  */
static	ANTLR3_BITWORD FOLLOW_171_in_equalityOps3724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_171_in_equalityOps3724	= { FOLLOW_171_in_equalityOps3724_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_172_in_equalityOps3734  */
static	ANTLR3_BITWORD FOLLOW_172_in_equalityOps3734_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_172_in_equalityOps3734	= { FOLLOW_172_in_equalityOps3734_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_173_in_equalityOps3744  */
static	ANTLR3_BITWORD FOLLOW_173_in_equalityOps3744_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_173_in_equalityOps3744	= { FOLLOW_173_in_equalityOps3744_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_174_in_equalityOps3754  */
static	ANTLR3_BITWORD FOLLOW_174_in_equalityOps3754_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_174_in_equalityOps3754	= { FOLLOW_174_in_equalityOps3754_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3771  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3771_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000780000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3771	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3771_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn3778  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn3778_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000780000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn3778	= { FOLLOW_LTERM_in_equalityExpressionNoIn3778_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equalityOps_in_equalityExpressionNoIn3781  */
static	ANTLR3_BITWORD FOLLOW_equalityOps_in_equalityExpressionNoIn3781_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_equalityOps_in_equalityExpressionNoIn3781	= { FOLLOW_equalityOps_in_equalityExpressionNoIn3781_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_equalityExpressionNoIn3783  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_equalityExpressionNoIn3783_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_equalityExpressionNoIn3783	= { FOLLOW_LTERM_in_equalityExpressionNoIn3783_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3786  */
static	ANTLR3_BITWORD FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3786_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000780000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3786	= { FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3786_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_relationalOps3811  */
static	ANTLR3_BITWORD FOLLOW_175_in_relationalOps3811_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_relationalOps3811	= { FOLLOW_175_in_relationalOps3811_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_relationalOps3822  */
static	ANTLR3_BITWORD FOLLOW_176_in_relationalOps3822_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_relationalOps3822	= { FOLLOW_176_in_relationalOps3822_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_177_in_relationalOps3833  */
static	ANTLR3_BITWORD FOLLOW_177_in_relationalOps3833_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_177_in_relationalOps3833	= { FOLLOW_177_in_relationalOps3833_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_relationalOps3843  */
static	ANTLR3_BITWORD FOLLOW_178_in_relationalOps3843_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_relationalOps3843	= { FOLLOW_178_in_relationalOps3843_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_relationalOps3853  */
static	ANTLR3_BITWORD FOLLOW_179_in_relationalOps3853_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_relationalOps3853	= { FOLLOW_179_in_relationalOps3853_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_135_in_relationalOps3863  */
static	ANTLR3_BITWORD FOLLOW_135_in_relationalOps3863_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_135_in_relationalOps3863	= { FOLLOW_135_in_relationalOps3863_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression3888  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression3888_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x000F800000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression3888	= { FOLLOW_shiftExpression_in_relationalExpression3888_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression3896  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression3896_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x000F800000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression3896	= { FOLLOW_LTERM_in_relationalExpression3896_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOps_in_relationalExpression3899  */
static	ANTLR3_BITWORD FOLLOW_relationalOps_in_relationalExpression3899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOps_in_relationalExpression3899	= { FOLLOW_relationalOps_in_relationalExpression3899_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpression3901  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpression3901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpression3901	= { FOLLOW_LTERM_in_relationalExpression3901_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpression3904  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpression3904_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x000F800000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpression3904	= { FOLLOW_shiftExpression_in_relationalExpression3904_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_175_in_relationalOpsNoIn3928  */
static	ANTLR3_BITWORD FOLLOW_175_in_relationalOpsNoIn3928_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_175_in_relationalOpsNoIn3928	= { FOLLOW_175_in_relationalOpsNoIn3928_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_176_in_relationalOpsNoIn3939  */
static	ANTLR3_BITWORD FOLLOW_176_in_relationalOpsNoIn3939_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_176_in_relationalOpsNoIn3939	= { FOLLOW_176_in_relationalOpsNoIn3939_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_177_in_relationalOpsNoIn3950  */
static	ANTLR3_BITWORD FOLLOW_177_in_relationalOpsNoIn3950_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_177_in_relationalOpsNoIn3950	= { FOLLOW_177_in_relationalOpsNoIn3950_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_178_in_relationalOpsNoIn3960  */
static	ANTLR3_BITWORD FOLLOW_178_in_relationalOpsNoIn3960_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_178_in_relationalOpsNoIn3960	= { FOLLOW_178_in_relationalOpsNoIn3960_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_179_in_relationalOpsNoIn3970  */
static	ANTLR3_BITWORD FOLLOW_179_in_relationalOpsNoIn3970_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_179_in_relationalOpsNoIn3970	= { FOLLOW_179_in_relationalOpsNoIn3970_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn3987  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn3987_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x000F800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn3987	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn3987_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn3995  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn3995_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x000F800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn3995	= { FOLLOW_LTERM_in_relationalExpressionNoIn3995_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn3998  */
static	ANTLR3_BITWORD FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn3998_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn3998	= { FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn3998_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_relationalExpressionNoIn4000  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_relationalExpressionNoIn4000_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_relationalExpressionNoIn4000	= { FOLLOW_LTERM_in_relationalExpressionNoIn4000_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftExpression_in_relationalExpressionNoIn4003  */
static	ANTLR3_BITWORD FOLLOW_shiftExpression_in_relationalExpressionNoIn4003_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x000F800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftExpression_in_relationalExpressionNoIn4003	= { FOLLOW_shiftExpression_in_relationalExpressionNoIn4003_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_180_in_shiftOps4026  */
static	ANTLR3_BITWORD FOLLOW_180_in_shiftOps4026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_180_in_shiftOps4026	= { FOLLOW_180_in_shiftOps4026_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_181_in_shiftOps4036  */
static	ANTLR3_BITWORD FOLLOW_181_in_shiftOps4036_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_181_in_shiftOps4036	= { FOLLOW_181_in_shiftOps4036_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_182_in_shiftOps4045  */
static	ANTLR3_BITWORD FOLLOW_182_in_shiftOps4045_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_182_in_shiftOps4045	= { FOLLOW_182_in_shiftOps4045_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression4062  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression4062_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0070000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression4062	= { FOLLOW_additiveExpression_in_shiftExpression4062_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_shiftExpression4069  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_shiftExpression4069_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0070000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_shiftExpression4069	= { FOLLOW_LTERM_in_shiftExpression4069_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shiftOps_in_shiftExpression4072  */
static	ANTLR3_BITWORD FOLLOW_shiftOps_in_shiftExpression4072_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_shiftOps_in_shiftExpression4072	= { FOLLOW_shiftOps_in_shiftExpression4072_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_shiftExpression4074  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_shiftExpression4074_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_shiftExpression4074	= { FOLLOW_LTERM_in_shiftExpression4074_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additiveExpression_in_shiftExpression4077  */
static	ANTLR3_BITWORD FOLLOW_additiveExpression_in_shiftExpression4077_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0070000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_additiveExpression_in_shiftExpression4077	= { FOLLOW_additiveExpression_in_shiftExpression4077_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_addOps4103  */
static	ANTLR3_BITWORD FOLLOW_183_in_addOps4103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_addOps4103	= { FOLLOW_183_in_addOps4103_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_addOps4113  */
static	ANTLR3_BITWORD FOLLOW_184_in_addOps4113_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_addOps4113	= { FOLLOW_184_in_addOps4113_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression4131  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression4131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0180000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression4131	= { FOLLOW_multiplicativeExpression_in_additiveExpression4131_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression4138  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression4138_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0180000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression4138	= { FOLLOW_LTERM_in_additiveExpression4138_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_additiveExpression4141  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_additiveExpression4141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_additiveExpression4141	= { FOLLOW_addOps_in_additiveExpression4141_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_additiveExpression4143  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_additiveExpression4143_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_additiveExpression4143	= { FOLLOW_LTERM_in_additiveExpression4143_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_additiveExpression4146  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_additiveExpression4146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0180000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_additiveExpression4146	= { FOLLOW_multiplicativeExpression_in_additiveExpression4146_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_185_in_multOps4171  */
static	ANTLR3_BITWORD FOLLOW_185_in_multOps4171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_185_in_multOps4171	= { FOLLOW_185_in_multOps4171_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_186_in_multOps4181  */
static	ANTLR3_BITWORD FOLLOW_186_in_multOps4181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_186_in_multOps4181	= { FOLLOW_186_in_multOps4181_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_187_in_multOps4191  */
static	ANTLR3_BITWORD FOLLOW_187_in_multOps4191_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_187_in_multOps4191	= { FOLLOW_187_in_multOps4191_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression4208  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression4208_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0E00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression4208	= { FOLLOW_unaryExpression_in_multiplicativeExpression4208_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression4216  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression4216_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0E00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression4216	= { FOLLOW_LTERM_in_multiplicativeExpression4216_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multOps_in_multiplicativeExpression4219  */
static	ANTLR3_BITWORD FOLLOW_multOps_in_multiplicativeExpression4219_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_multOps_in_multiplicativeExpression4219	= { FOLLOW_multOps_in_multiplicativeExpression4219_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_multiplicativeExpression4221  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_multiplicativeExpression4221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_multiplicativeExpression4221	= { FOLLOW_LTERM_in_multiplicativeExpression4221_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_multiplicativeExpression4224  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_multiplicativeExpression4224_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0E00000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_multiplicativeExpression4224	= { FOLLOW_unaryExpression_in_multiplicativeExpression4224_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_postfixExpression4249  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_postfixExpression4249_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x3000000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_postfixExpression4249	= { FOLLOW_leftHandSideExpression_in_postfixExpression4249_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_188_in_postfixExpression4258  */
static	ANTLR3_BITWORD FOLLOW_188_in_postfixExpression4258_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_188_in_postfixExpression4258	= { FOLLOW_188_in_postfixExpression4258_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_189_in_postfixExpression4271  */
static	ANTLR3_BITWORD FOLLOW_189_in_postfixExpression4271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_189_in_postfixExpression4271	= { FOLLOW_189_in_postfixExpression4271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_190_in_unaryOps4291  */
static	ANTLR3_BITWORD FOLLOW_190_in_unaryOps4291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_190_in_unaryOps4291	= { FOLLOW_190_in_unaryOps4291_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_191_in_unaryOps4301  */
static	ANTLR3_BITWORD FOLLOW_191_in_unaryOps4301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_191_in_unaryOps4301	= { FOLLOW_191_in_unaryOps4301_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_192_in_unaryOps4311  */
static	ANTLR3_BITWORD FOLLOW_192_in_unaryOps4311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_192_in_unaryOps4311	= { FOLLOW_192_in_unaryOps4311_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_189_in_unaryOps4321  */
static	ANTLR3_BITWORD FOLLOW_189_in_unaryOps4321_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_189_in_unaryOps4321	= { FOLLOW_189_in_unaryOps4321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_188_in_unaryOps4332  */
static	ANTLR3_BITWORD FOLLOW_188_in_unaryOps4332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_188_in_unaryOps4332	= { FOLLOW_188_in_unaryOps4332_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_183_in_unaryOps4343  */
static	ANTLR3_BITWORD FOLLOW_183_in_unaryOps4343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_183_in_unaryOps4343	= { FOLLOW_183_in_unaryOps4343_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_184_in_unaryOps4355  */
static	ANTLR3_BITWORD FOLLOW_184_in_unaryOps4355_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_184_in_unaryOps4355	= { FOLLOW_184_in_unaryOps4355_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_193_in_unaryOps4367  */
static	ANTLR3_BITWORD FOLLOW_193_in_unaryOps4367_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_193_in_unaryOps4367	= { FOLLOW_193_in_unaryOps4367_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_194_in_unaryOps4379  */
static	ANTLR3_BITWORD FOLLOW_194_in_unaryOps4379_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_194_in_unaryOps4379	= { FOLLOW_194_in_unaryOps4379_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_postfixExpression_in_unaryExpression4398  */
static	ANTLR3_BITWORD FOLLOW_postfixExpression_in_unaryExpression4398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_postfixExpression_in_unaryExpression4398	= { FOLLOW_postfixExpression_in_unaryExpression4398_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryOps_in_unaryExpression4411  */
static	ANTLR3_BITWORD FOLLOW_unaryOps_in_unaryExpression4411_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2600000380000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryOps_in_unaryExpression4411	= { FOLLOW_unaryOps_in_unaryExpression4411_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unaryExpression_in_unaryExpression4415  */
static	ANTLR3_BITWORD FOLLOW_unaryExpression_in_unaryExpression4415_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unaryExpression_in_unaryExpression4415	= { FOLLOW_unaryExpression_in_unaryExpression4415_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_195_in_primaryExpression4437  */
static	ANTLR3_BITWORD FOLLOW_195_in_primaryExpression4437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_195_in_primaryExpression4437	= { FOLLOW_195_in_primaryExpression4437_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_Identifier_in_primaryExpression4442  */
static	ANTLR3_BITWORD FOLLOW_Identifier_in_primaryExpression4442_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_Identifier_in_primaryExpression4442	= { FOLLOW_Identifier_in_primaryExpression4442_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_in_primaryExpression4447  */
static	ANTLR3_BITWORD FOLLOW_literal_in_primaryExpression4447_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_in_primaryExpression4447	= { FOLLOW_literal_in_primaryExpression4447_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arrayLiteral_in_primaryExpression4452  */
static	ANTLR3_BITWORD FOLLOW_arrayLiteral_in_primaryExpression4452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arrayLiteral_in_primaryExpression4452	= { FOLLOW_arrayLiteral_in_primaryExpression4452_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_objectLiteral_in_primaryExpression4457  */
static	ANTLR3_BITWORD FOLLOW_objectLiteral_in_primaryExpression4457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_objectLiteral_in_primaryExpression4457	= { FOLLOW_objectLiteral_in_primaryExpression4457_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_122_in_primaryExpression4462  */
static	ANTLR3_BITWORD FOLLOW_122_in_primaryExpression4462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_122_in_primaryExpression4462	= { FOLLOW_122_in_primaryExpression4462_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression4464  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression4464_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression4464	= { FOLLOW_LTERM_in_primaryExpression4464_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primaryExpression4467  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primaryExpression4467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primaryExpression4467	= { FOLLOW_expression_in_primaryExpression4467_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_primaryExpression4469  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_primaryExpression4469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x1000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_primaryExpression4469	= { FOLLOW_LTERM_in_primaryExpression4469_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_124_in_primaryExpression4472  */
static	ANTLR3_BITWORD FOLLOW_124_in_primaryExpression4472_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_124_in_primaryExpression4472	= { FOLLOW_124_in_primaryExpression4472_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_arrayLiteral4496  */
static	ANTLR3_BITWORD FOLLOW_151_in_arrayLiteral4496_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000001C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_arrayLiteral4496	= { FOLLOW_151_in_arrayLiteral4496_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4498  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000001C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4498	= { FOLLOW_LTERM_in_arrayLiteral4498_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral4502  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral4502_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral4502	= { FOLLOW_assignmentExpression_in_arrayLiteral4502_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4506  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4506_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4506	= { FOLLOW_LTERM_in_arrayLiteral4506_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_arrayLiteral4509  */
static	ANTLR3_BITWORD FOLLOW_152_in_arrayLiteral4509_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_arrayLiteral4509	= { FOLLOW_152_in_arrayLiteral4509_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_arrayLiteral4523  */
static	ANTLR3_BITWORD FOLLOW_151_in_arrayLiteral4523_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_arrayLiteral4523	= { FOLLOW_151_in_arrayLiteral4523_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4525  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4525_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4525	= { FOLLOW_LTERM_in_arrayLiteral4525_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral4530  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral4530_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0800000040000000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral4530	= { FOLLOW_assignmentExpression_in_arrayLiteral4530_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_123_in_arrayLiteral4533  */
static	ANTLR3_BITWORD FOLLOW_123_in_arrayLiteral4533_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_123_in_arrayLiteral4533	= { FOLLOW_123_in_arrayLiteral4533_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4535  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4535_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4535	= { FOLLOW_LTERM_in_arrayLiteral4535_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_arrayLiteral4540  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_arrayLiteral4540_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0800000040000000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_arrayLiteral4540	= { FOLLOW_assignmentExpression_in_arrayLiteral4540_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_arrayLiteral4544  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_arrayLiteral4544_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_arrayLiteral4544	= { FOLLOW_LTERM_in_arrayLiteral4544_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_arrayLiteral4547  */
static	ANTLR3_BITWORD FOLLOW_152_in_arrayLiteral4547_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_arrayLiteral4547	= { FOLLOW_152_in_arrayLiteral4547_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_objectLiteral4578  */
static	ANTLR3_BITWORD FOLLOW_125_in_objectLiteral4578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x40000003C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_objectLiteral4578	= { FOLLOW_125_in_objectLiteral4578_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral4580  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral4580_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x40000003C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral4580	= { FOLLOW_LTERM_in_objectLiteral4580_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral4583  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral4583_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral4583	= { FOLLOW_propertyNameAndValue_in_objectLiteral4583_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral4586  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral4586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral4586	= { FOLLOW_LTERM_in_objectLiteral4586_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_objectLiteral4589  */
static	ANTLR3_BITWORD FOLLOW_126_in_objectLiteral4589_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_objectLiteral4589	= { FOLLOW_126_in_objectLiteral4589_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_objectLiteral4603  */
static	ANTLR3_BITWORD FOLLOW_125_in_objectLiteral4603_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000003C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_objectLiteral4603	= { FOLLOW_125_in_objectLiteral4603_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral4605  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral4605_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000003C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral4605	= { FOLLOW_LTERM_in_objectLiteral4605_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral4610  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral4610_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral4610	= { FOLLOW_propertyNameAndValue_in_objectLiteral4610_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_123_in_objectLiteral4613  */
static	ANTLR3_BITWORD FOLLOW_123_in_objectLiteral4613_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000003C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_123_in_objectLiteral4613	= { FOLLOW_123_in_objectLiteral4613_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral4615  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral4615_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x00000003C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral4615	= { FOLLOW_LTERM_in_objectLiteral4615_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_objectLiteral4620  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_objectLiteral4620_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4800000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_objectLiteral4620	= { FOLLOW_propertyNameAndValue_in_objectLiteral4620_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_objectLiteral4624  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_objectLiteral4624_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_objectLiteral4624	= { FOLLOW_LTERM_in_objectLiteral4624_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_objectLiteral4631  */
static	ANTLR3_BITWORD FOLLOW_126_in_objectLiteral4631_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_objectLiteral4631	= { FOLLOW_126_in_objectLiteral4631_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyName_in_propertyNameAndValue4655  */
static	ANTLR3_BITWORD FOLLOW_propertyName_in_propertyNameAndValue4655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyName_in_propertyNameAndValue4655	= { FOLLOW_propertyName_in_propertyNameAndValue4655_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue4657  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue4657_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue4657	= { FOLLOW_LTERM_in_propertyNameAndValue4657_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_140_in_propertyNameAndValue4660  */
static	ANTLR3_BITWORD FOLLOW_140_in_propertyNameAndValue4660_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_140_in_propertyNameAndValue4660	= { FOLLOW_140_in_propertyNameAndValue4660_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_propertyNameAndValue4662  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_propertyNameAndValue4662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_propertyNameAndValue4662	= { FOLLOW_LTERM_in_propertyNameAndValue4662_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_propertyNameAndValue4665  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_propertyNameAndValue4665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_propertyNameAndValue4665	= { FOLLOW_assignmentExpression_in_propertyNameAndValue4665_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_propertyName0  */
static	ANTLR3_BITWORD FOLLOW_set_in_propertyName0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_propertyName0	= { FOLLOW_set_in_propertyName0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal0	= { FOLLOW_set_in_literal0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_functionDeclaration_in_synpred5_Emerson641  */
static	ANTLR3_BITWORD FOLLOW_functionDeclaration_in_synpred5_Emerson641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_functionDeclaration_in_synpred5_Emerson641	= { FOLLOW_functionDeclaration_in_synpred5_Emerson641_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred9_Emerson708  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred9_Emerson708_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred9_Emerson708	= { FOLLOW_LTERM_in_synpred9_Emerson708_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statementBlock_in_synpred23_Emerson849  */
static	ANTLR3_BITWORD FOLLOW_statementBlock_in_synpred23_Emerson849_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statementBlock_in_synpred23_Emerson849	= { FOLLOW_statementBlock_in_synpred23_Emerson849_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionStatement_in_synpred26_Emerson864  */
static	ANTLR3_BITWORD FOLLOW_expressionStatement_in_synpred26_Emerson864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionStatement_in_synpred26_Emerson864	= { FOLLOW_expressionStatement_in_synpred26_Emerson864_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_labelledStatement_in_synpred33_Emerson899  */
static	ANTLR3_BITWORD FOLLOW_labelledStatement_in_synpred33_Emerson899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_labelledStatement_in_synpred33_Emerson899	= { FOLLOW_labelledStatement_in_synpred33_Emerson899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_msgSendStatement_in_synpred37_Emerson919  */
static	ANTLR3_BITWORD FOLLOW_msgSendStatement_in_synpred37_Emerson919_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_msgSendStatement_in_synpred37_Emerson919	= { FOLLOW_msgSendStatement_in_synpred37_Emerson919_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred52_Emerson1098  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred52_Emerson1098_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred52_Emerson1098	= { FOLLOW_LTERM_in_synpred52_Emerson1098_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred54_Emerson1127  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred54_Emerson1127_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred54_Emerson1127	= { FOLLOW_LTERM_in_synpred54_Emerson1127_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred65_Emerson1258  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred65_Emerson1258_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000008) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred65_Emerson1258	= { FOLLOW_LTERM_in_synpred65_Emerson1258_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_131_in_synpred65_Emerson1261  */
static	ANTLR3_BITWORD FOLLOW_131_in_synpred65_Emerson1261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_131_in_synpred65_Emerson1261	= { FOLLOW_131_in_synpred65_Emerson1261_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred65_Emerson1263  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred65_Emerson1263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0xA6000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C32F75), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred65_Emerson1263	= { FOLLOW_LTERM_in_synpred65_Emerson1263_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_synpred65_Emerson1268  */
static	ANTLR3_BITWORD FOLLOW_statement_in_synpred65_Emerson1268_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_synpred65_Emerson1268	= { FOLLOW_statement_in_synpred65_Emerson1268_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_forStatement_in_synpred68_Emerson1307  */
static	ANTLR3_BITWORD FOLLOW_forStatement_in_synpred68_Emerson1307_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_forStatement_in_synpred68_Emerson1307	= { FOLLOW_forStatement_in_synpred68_Emerson1307_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred123_Emerson1933  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred123_Emerson1933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred123_Emerson1933	= { FOLLOW_LTERM_in_synpred123_Emerson1933_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred126_Emerson1968  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred126_Emerson1968_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred126_Emerson1968	= { FOLLOW_LTERM_in_synpred126_Emerson1968_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred144_Emerson2232  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred144_Emerson2232_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred144_Emerson2232	= { FOLLOW_memberExpression_in_synpred144_Emerson2232_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred144_Emerson2234  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred144_Emerson2234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred144_Emerson2234	= { FOLLOW_LTERM_in_synpred144_Emerson2234_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_149_in_synpred144_Emerson2236  */
static	ANTLR3_BITWORD FOLLOW_149_in_synpred144_Emerson2236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x2600000380000000), ANTLR3_UINT64_LIT(0x0000000000C00000), ANTLR3_UINT64_LIT(0x0000000000000078) };
static  ANTLR3_BITSET_LIST FOLLOW_149_in_synpred144_Emerson2236	= { FOLLOW_149_in_synpred144_Emerson2236_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_leftHandSideExpression_in_synpred144_Emerson2240  */
static	ANTLR3_BITWORD FOLLOW_leftHandSideExpression_in_synpred144_Emerson2240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_leftHandSideExpression_in_synpred144_Emerson2240	= { FOLLOW_leftHandSideExpression_in_synpred144_Emerson2240_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_synpred144_Emerson2242  */
static	ANTLR3_BITWORD FOLLOW_set_in_synpred144_Emerson2242_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_synpred144_Emerson2242	= { FOLLOW_set_in_synpred144_Emerson2242_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpression_in_synpred154_Emerson2389  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpression_in_synpred154_Emerson2389_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpression_in_synpred154_Emerson2389	= { FOLLOW_conditionalExpression_in_synpred154_Emerson2389_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditionalExpressionNoIn_in_synpred157_Emerson2436  */
static	ANTLR3_BITWORD FOLLOW_conditionalExpressionNoIn_in_synpred157_Emerson2436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditionalExpressionNoIn_in_synpred157_Emerson2436	= { FOLLOW_conditionalExpressionNoIn_in_synpred157_Emerson2436_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callExpression_in_synpred160_Emerson2484  */
static	ANTLR3_BITWORD FOLLOW_callExpression_in_synpred160_Emerson2484_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callExpression_in_synpred160_Emerson2484	= { FOLLOW_callExpression_in_synpred160_Emerson2484_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_memberExpression_in_synpred161_Emerson2509  */
static	ANTLR3_BITWORD FOLLOW_memberExpression_in_synpred161_Emerson2509_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_memberExpression_in_synpred161_Emerson2509	= { FOLLOW_memberExpression_in_synpred161_Emerson2509_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred167_Emerson2605  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred167_Emerson2605_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred167_Emerson2605	= { FOLLOW_LTERM_in_synpred167_Emerson2605_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred167_Emerson2608  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred167_Emerson2608_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred167_Emerson2608	= { FOLLOW_propertyReferenceSuffix1_in_synpred167_Emerson2608_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred169_Emerson2625  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred169_Emerson2625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred169_Emerson2625	= { FOLLOW_LTERM_in_synpred169_Emerson2625_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred169_Emerson2628  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred169_Emerson2628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred169_Emerson2628	= { FOLLOW_indexSuffix1_in_synpred169_Emerson2628_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred172_Emerson2655  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred172_Emerson2655_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred172_Emerson2655	= { FOLLOW_LTERM_in_synpred172_Emerson2655_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred172_Emerson2658  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred172_Emerson2658_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred172_Emerson2658	= { FOLLOW_propertyReferenceSuffix1_in_synpred172_Emerson2658_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred174_Emerson2675  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred174_Emerson2675_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred174_Emerson2675	= { FOLLOW_LTERM_in_synpred174_Emerson2675_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred174_Emerson2678  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred174_Emerson2678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred174_Emerson2678	= { FOLLOW_indexSuffix1_in_synpred174_Emerson2678_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred179_Emerson2724  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred179_Emerson2724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred179_Emerson2724	= { FOLLOW_LTERM_in_synpred179_Emerson2724_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred179_Emerson2727  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred179_Emerson2727_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred179_Emerson2727	= { FOLLOW_propertyReferenceSuffix1_in_synpred179_Emerson2727_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred181_Emerson2740  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred181_Emerson2740_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred181_Emerson2740	= { FOLLOW_LTERM_in_synpred181_Emerson2740_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred181_Emerson2743  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred181_Emerson2743_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred181_Emerson2743	= { FOLLOW_indexSuffix1_in_synpred181_Emerson2743_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred185_Emerson2818  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred185_Emerson2818_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0400000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred185_Emerson2818	= { FOLLOW_LTERM_in_synpred185_Emerson2818_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_arguments_in_synpred185_Emerson2821  */
static	ANTLR3_BITWORD FOLLOW_arguments_in_synpred185_Emerson2821_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_arguments_in_synpred185_Emerson2821	= { FOLLOW_arguments_in_synpred185_Emerson2821_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred187_Emerson2829  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred187_Emerson2829_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002800000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred187_Emerson2829	= { FOLLOW_LTERM_in_synpred187_Emerson2829_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_indexSuffix1_in_synpred187_Emerson2832  */
static	ANTLR3_BITWORD FOLLOW_indexSuffix1_in_synpred187_Emerson2832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_indexSuffix1_in_synpred187_Emerson2832	= { FOLLOW_indexSuffix1_in_synpred187_Emerson2832_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred189_Emerson2847  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred189_Emerson2847_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred189_Emerson2847	= { FOLLOW_LTERM_in_synpred189_Emerson2847_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyReferenceSuffix1_in_synpred189_Emerson2850  */
static	ANTLR3_BITWORD FOLLOW_propertyReferenceSuffix1_in_synpred189_Emerson2850_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyReferenceSuffix1_in_synpred189_Emerson2850	= { FOLLOW_propertyReferenceSuffix1_in_synpred189_Emerson2850_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred284_Emerson4138  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred284_Emerson4138_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0180000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred284_Emerson4138	= { FOLLOW_LTERM_in_synpred284_Emerson4138_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_addOps_in_synpred284_Emerson4141  */
static	ANTLR3_BITWORD FOLLOW_addOps_in_synpred284_Emerson4141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_addOps_in_synpred284_Emerson4141	= { FOLLOW_addOps_in_synpred284_Emerson4141_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred284_Emerson4143  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred284_Emerson4143_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000000C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred284_Emerson4143	= { FOLLOW_LTERM_in_synpred284_Emerson4143_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicativeExpression_in_synpred284_Emerson4146  */
static	ANTLR3_BITWORD FOLLOW_multiplicativeExpression_in_synpred284_Emerson4146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicativeExpression_in_synpred284_Emerson4146	= { FOLLOW_multiplicativeExpression_in_synpred284_Emerson4146_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred308_Emerson4498  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred308_Emerson4498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred308_Emerson4498	= { FOLLOW_LTERM_in_synpred308_Emerson4498_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_151_in_synpred311_Emerson4496  */
static	ANTLR3_BITWORD FOLLOW_151_in_synpred311_Emerson4496_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000001C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_151_in_synpred311_Emerson4496	= { FOLLOW_151_in_synpred311_Emerson4496_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred311_Emerson4498  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred311_Emerson4498_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x26000003C0000000), ANTLR3_UINT64_LIT(0xF180000001C00000), ANTLR3_UINT64_LIT(0x000000000000007F) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred311_Emerson4498	= { FOLLOW_LTERM_in_synpred311_Emerson4498_bits, 4	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentExpression_in_synpred311_Emerson4502  */
static	ANTLR3_BITWORD FOLLOW_assignmentExpression_in_synpred311_Emerson4502_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentExpression_in_synpred311_Emerson4502	= { FOLLOW_assignmentExpression_in_synpred311_Emerson4502_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred311_Emerson4506  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred311_Emerson4506_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred311_Emerson4506	= { FOLLOW_LTERM_in_synpred311_Emerson4506_bits, 3	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_152_in_synpred311_Emerson4509  */
static	ANTLR3_BITWORD FOLLOW_152_in_synpred311_Emerson4509_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_152_in_synpred311_Emerson4509	= { FOLLOW_152_in_synpred311_Emerson4509_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred316_Emerson4580  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred316_Emerson4580_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred316_Emerson4580	= { FOLLOW_LTERM_in_synpred316_Emerson4580_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_125_in_synpred319_Emerson4578  */
static	ANTLR3_BITWORD FOLLOW_125_in_synpred319_Emerson4578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x40000003C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_125_in_synpred319_Emerson4578	= { FOLLOW_125_in_synpred319_Emerson4578_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred319_Emerson4580  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred319_Emerson4580_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x40000003C0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred319_Emerson4580	= { FOLLOW_LTERM_in_synpred319_Emerson4580_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_propertyNameAndValue_in_synpred319_Emerson4583  */
static	ANTLR3_BITWORD FOLLOW_propertyNameAndValue_in_synpred319_Emerson4583_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_propertyNameAndValue_in_synpred319_Emerson4583	= { FOLLOW_propertyNameAndValue_in_synpred319_Emerson4583_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LTERM_in_synpred319_Emerson4586  */
static	ANTLR3_BITWORD FOLLOW_LTERM_in_synpred319_Emerson4586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x4000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LTERM_in_synpred319_Emerson4586	= { FOLLOW_LTERM_in_synpred319_Emerson4586_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_126_in_synpred319_Emerson4589  */
static	ANTLR3_BITWORD FOLLOW_126_in_synpred319_Emerson4589_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_126_in_synpred319_Emerson4589	= { FOLLOW_126_in_synpred319_Emerson4589_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 131:18: ( ( LTERM )* sourceElement )*
 */
static const ANTLR3_INT32 dfa4_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa4_eof[4] =
    {
	2, 2, -1, -1
    };
static const ANTLR3_INT32 dfa4_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa4_max[4] =
    {
	198, 198, -1, -1
    };
static const ANTLR3_INT32 dfa4_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa4_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa4_T_empty	    NULL

static const ANTLR3_INT32 dfa4_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, -1, 3, 
	3, 3, -1, 3, 3, 3, 3, -1, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa4_transitions[] =
{
    dfa4_T0, dfa4_T0, dfa4_T_empty, dfa4_T_empty	
};


/* Declare tracking structure for Cyclic DFA 4
 */
static
ANTLR3_CYCLIC_DFA cdfa4
    =	{
	    4,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 131:18: ( ( LTERM )* sourceElement )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa4_eot,	    /* EOT table			    */
	    dfa4_eof,	    /* EOF table			    */
	    dfa4_min,	    /* Minimum tokens for each state    */
	    dfa4_max,	    /* Maximum tokens for each state    */
	    dfa4_accept,	/* Accept table			    */
	    dfa4_special,	/* Special transition states	    */
	    dfa4_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 4
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    134:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static const ANTLR3_INT32 dfa5_eot[32] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_eof[32] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_min[32] =
    {
	95, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_max[32] =
    {
	198, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa5_accept[32] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };
static const ANTLR3_INT32 dfa5_special[32] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa5_T_empty	    NULL

static const ANTLR3_INT32 dfa5_T0[] =
    {
	2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, 2, -1, 2, 2, -1, 2, -1, 2, 2, 
	2, -1, 2, 2, 2, 2, -1, 2, -1, -1, 2, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa5_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa5_transitions[] =
{
    dfa5_T0, dfa5_T1, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, dfa5_T_empty, 
    dfa5_T_empty	
};

static ANTLR3_INT32 dfa5_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA5_1;

    	    ANTLR3_MARKER index5_1;


    		LA5_1 = LA(1);

    	 
    	    index5_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred5_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index5_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"134:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );";
    EXCEPTION->decisionNum  = 5;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 5
 */
static
ANTLR3_CYCLIC_DFA cdfa5
    =	{
	    5,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"134:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );",	
	    (CDFA_SPECIAL_FUNC) dfa5_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa5_eot,	    /* EOT table			    */
	    dfa5_eof,	    /* EOF table			    */
	    dfa5_min,	    /* Minimum tokens for each state    */
	    dfa5_max,	    /* Maximum tokens for each state    */
	    dfa5_accept,	/* Accept table			    */
	    dfa5_special,	/* Special transition states	    */
	    dfa5_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 5
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    149:8: ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )?
 */
static const ANTLR3_INT32 dfa17_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa17_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa17_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa17_max[4] =
    {
	124, 124, -1, -1
    };
static const ANTLR3_INT32 dfa17_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa17_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa17_T_empty	    NULL

static const ANTLR3_INT32 dfa17_T0[] =
    {
	1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa17_transitions[] =
{
    dfa17_T0, dfa17_T0, dfa17_T_empty, dfa17_T_empty	
};


/* Declare tracking structure for Cyclic DFA 17
 */
static
ANTLR3_CYCLIC_DFA cdfa17
    =	{
	    17,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"149:8: ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa17_eot,	    /* EOT table			    */
	    dfa17_eof,	    /* EOF table			    */
	    dfa17_min,	    /* Minimum tokens for each state    */
	    dfa17_max,	    /* Maximum tokens for each state    */
	    dfa17_accept,	/* Accept table			    */
	    dfa17_special,	/* Special transition states	    */
	    dfa17_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 17
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 149:30: ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*
 */
static const ANTLR3_INT32 dfa16_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa16_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa16_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa16_max[4] =
    {
	124, 124, -1, -1
    };
static const ANTLR3_INT32 dfa16_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa16_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa16_T_empty	    NULL

static const ANTLR3_INT32 dfa16_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa16_transitions[] =
{
    dfa16_T0, dfa16_T0, dfa16_T_empty, dfa16_T_empty	
};


/* Declare tracking structure for Cyclic DFA 16
 */
static
ANTLR3_CYCLIC_DFA cdfa16
    =	{
	    16,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 149:30: ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa16_eot,	    /* EOT table			    */
	    dfa16_eof,	    /* EOF table			    */
	    dfa16_min,	    /* Minimum tokens for each state    */
	    dfa16_max,	    /* Maximum tokens for each state    */
	    dfa16_accept,	/* Accept table			    */
	    dfa16_special,	/* Special transition states	    */
	    dfa16_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 16
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    152:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa22_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa22_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa22_min[5] =
    {
	125, 94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa22_max[5] =
    {
	125, 198, 198, -1, -1
    };
static const ANTLR3_INT32 dfa22_accept[5] =
    {
	-1, -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa22_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa22_T_empty	    NULL

static const ANTLR3_INT32 dfa22_T0[] =
    {
	2, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 4, 3, 3, -1, 3, -1, 3, 
	3, 3, -1, 3, 3, 3, 3, -1, 3, -1, -1, 3, 3, -1, -1, -1, -1, 3, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3
    };static const ANTLR3_INT32 dfa22_T1[] =
    {
	1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa22_transitions[] =
{
    dfa22_T1, dfa22_T0, dfa22_T0, dfa22_T_empty, dfa22_T_empty	
};


/* Declare tracking structure for Cyclic DFA 22
 */
static
ANTLR3_CYCLIC_DFA cdfa22
    =	{
	    22,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"152:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa22_eot,	    /* EOT table			    */
	    dfa22_eof,	    /* EOF table			    */
	    dfa22_min,	    /* Minimum tokens for each state    */
	    dfa22_max,	    /* Maximum tokens for each state    */
	    dfa22_accept,	/* Accept table			    */
	    dfa22_special,	/* Special transition states	    */
	    dfa22_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 22
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    158:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement | msgSendStatement | msgRecvStatement );
 */
static const ANTLR3_INT32 dfa23_eot[35] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_eof[35] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_min[35] =
    {
	95, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_max[35] =
    {
	198, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_accept[35] =
    {
	-1, -1, 2, 3, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5, 6, -1, -1, 7, 8, 9, 10, 12, 13, 14, 1, 15, 16, 11
    };
static const ANTLR3_INT32 dfa23_special[35] =
    {	
	-1, 0, -1, -1, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa23_T_empty	    NULL

static const ANTLR3_INT32 dfa23_T0[] =
    {
	5, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 9, 8, -1, -1, 1, -1, 2, 3, -1, 20, -1, 21, 
	21, 21, -1, 24, 25, 26, 27, -1, 28, -1, -1, 29, 30, -1, -1, -1, -1, 10, 
	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, 
	-1, 11, 11, 11, 11, 11, 11, 11, 4, 6, 6, 6
    };static const ANTLR3_INT32 dfa23_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa23_transitions[] =
{
    dfa23_T0, dfa23_T1, dfa23_T_empty, dfa23_T_empty, dfa23_T1, dfa23_T1, 
    dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T1, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, dfa23_T_empty, 
    dfa23_T_empty, dfa23_T_empty	
};

static ANTLR3_INT32 dfa23_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA23_1;

    	    ANTLR3_MARKER index23_1;


    		LA23_1 = LA(1);

    	 
    	    index23_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred23_Emerson(ctx)) )
    	    {
    	        s = 31;
    	    }

    	    else if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA23_4;

    	    ANTLR3_MARKER index23_4;


    		LA23_4 = LA(1);

    	 
    	    index23_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA23_5;

    	    ANTLR3_MARKER index23_5;


    		LA23_5 = LA(1);

    	 
    	    index23_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred33_Emerson(ctx)) )
    	    {
    	        s = 34;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA23_6;

    	    ANTLR3_MARKER index23_6;


    		LA23_6 = LA(1);

    	 
    	    index23_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA23_7;

    	    ANTLR3_MARKER index23_7;


    		LA23_7 = LA(1);

    	 
    	    index23_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA23_8;

    	    ANTLR3_MARKER index23_8;


    		LA23_8 = LA(1);

    	 
    	    index23_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA23_9;

    	    ANTLR3_MARKER index23_9;


    		LA23_9 = LA(1);

    	 
    	    index23_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA23_10;

    	    ANTLR3_MARKER index23_10;


    		LA23_10 = LA(1);

    	 
    	    index23_10 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred26_Emerson(ctx)) )
    	    {
    	        s = 11;
    	    }

    	    else if ( (synpred37_Emerson(ctx)) )
    	    {
    	        s = 32;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 33;
    	    }

    	 
    		SEEK(index23_10);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"158:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement | msgSendStatement | msgRecvStatement );";
    EXCEPTION->decisionNum  = 23;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 23
 */
static
ANTLR3_CYCLIC_DFA cdfa23
    =	{
	    23,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"158:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement | msgSendStatement | msgRecvStatement );",	
	    (CDFA_SPECIAL_FUNC) dfa23_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa23_eot,	    /* EOT table			    */
	    dfa23_eof,	    /* EOF table			    */
	    dfa23_min,	    /* Minimum tokens for each state    */
	    dfa23_max,	    /* Maximum tokens for each state    */
	    dfa23_accept,	/* Accept table			    */
	    dfa23_special,	/* Special transition states	    */
	    dfa23_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 23
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    177:1: statementBlock : ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static const ANTLR3_INT32 dfa27_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa27_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa27_min[5] =
    {
	125, 94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa27_max[5] =
    {
	125, 198, 198, -1, -1
    };
static const ANTLR3_INT32 dfa27_accept[5] =
    {
	-1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa27_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa27_T_empty	    NULL

static const ANTLR3_INT32 dfa27_T0[] =
    {
	1
    };static const ANTLR3_INT32 dfa27_T1[] =
    {
	2, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, 4, 3, 4, 4, -1, 4, -1, 4, 
	4, 4, -1, 4, 4, 4, 4, -1, 4, -1, -1, 4, 4, -1, -1, -1, -1, 4, 4, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, -1, -1, -1, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa27_transitions[] =
{
    dfa27_T0, dfa27_T1, dfa27_T1, dfa27_T_empty, dfa27_T_empty	
};


/* Declare tracking structure for Cyclic DFA 27
 */
static
ANTLR3_CYCLIC_DFA cdfa27
    =	{
	    27,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"177:1: statementBlock : ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa27_eot,	    /* EOT table			    */
	    dfa27_eof,	    /* EOF table			    */
	    dfa27_min,	    /* Minimum tokens for each state    */
	    dfa27_max,	    /* Maximum tokens for each state    */
	    dfa27_accept,	/* Accept table			    */
	    dfa27_special,	/* Special transition states	    */
	    dfa27_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 27
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 183:14: ( ( LTERM )* statement )*
 */
static const ANTLR3_INT32 dfa29_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa29_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa29_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa29_max[4] =
    {
	198, 198, -1, -1
    };
static const ANTLR3_INT32 dfa29_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa29_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa29_T_empty	    NULL

static const ANTLR3_INT32 dfa29_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 2, 3, 3, -1, 3, -1, 3, 
	3, 3, -1, 3, 3, 3, 3, -1, 3, 2, 2, 3, 3, -1, -1, -1, -1, 3, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa29_transitions[] =
{
    dfa29_T0, dfa29_T0, dfa29_T_empty, dfa29_T_empty	
};


/* Declare tracking structure for Cyclic DFA 29
 */
static
ANTLR3_CYCLIC_DFA cdfa29
    =	{
	    29,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 183:14: ( ( LTERM )* statement )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa29_eot,	    /* EOT table			    */
	    dfa29_eof,	    /* EOF table			    */
	    dfa29_min,	    /* Minimum tokens for each state    */
	    dfa29_max,	    /* Maximum tokens for each state    */
	    dfa29_accept,	/* Accept table			    */
	    dfa29_special,	/* Special transition states	    */
	    dfa29_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 29
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 191:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
 */
static const ANTLR3_INT32 dfa34_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa34_eof[5] =
    {
	-1, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa34_min[5] =
    {
	94, 94, -1, -1, 94
    };
static const ANTLR3_INT32 dfa34_max[5] =
    {
	128, 198, -1, -1, 198
    };
static const ANTLR3_INT32 dfa34_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa34_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa34_T_empty	    NULL

static const ANTLR3_INT32 dfa34_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, -1, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa34_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa34_transitions[] =
{
    dfa34_T1, dfa34_T0, dfa34_T_empty, dfa34_T_empty, dfa34_T0	
};


/* Declare tracking structure for Cyclic DFA 34
 */
static
ANTLR3_CYCLIC_DFA cdfa34
    =	{
	    34,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 191:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa34_eot,	    /* EOT table			    */
	    dfa34_eof,	    /* EOF table			    */
	    dfa34_min,	    /* Minimum tokens for each state    */
	    dfa34_max,	    /* Maximum tokens for each state    */
	    dfa34_accept,	/* Accept table			    */
	    dfa34_special,	/* Special transition states	    */
	    dfa34_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 34
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 195:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
 */
static const ANTLR3_INT32 dfa37_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa37_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa37_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa37_max[4] =
    {
	128, 128, -1, -1
    };
static const ANTLR3_INT32 dfa37_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa37_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa37_T_empty	    NULL

static const ANTLR3_INT32 dfa37_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa37_transitions[] =
{
    dfa37_T0, dfa37_T0, dfa37_T_empty, dfa37_T_empty	
};


/* Declare tracking structure for Cyclic DFA 37
 */
static
ANTLR3_CYCLIC_DFA cdfa37
    =	{
	    37,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 195:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa37_eot,	    /* EOT table			    */
	    dfa37_eof,	    /* EOF table			    */
	    dfa37_min,	    /* Minimum tokens for each state    */
	    dfa37_max,	    /* Maximum tokens for each state    */
	    dfa37_accept,	/* Accept table			    */
	    dfa37_special,	/* Special transition states	    */
	    dfa37_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 37
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    242:21: ( ( LTERM )* init= forStatementInitialiserPart )?
 */
static const ANTLR3_INT32 dfa63_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa63_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa63_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa63_max[4] =
    {
	198, 198, -1, -1
    };
static const ANTLR3_INT32 dfa63_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa63_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa63_T_empty	    NULL

static const ANTLR3_INT32 dfa63_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, 2, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa63_transitions[] =
{
    dfa63_T0, dfa63_T0, dfa63_T_empty, dfa63_T_empty	
};


/* Declare tracking structure for Cyclic DFA 63
 */
static
ANTLR3_CYCLIC_DFA cdfa63
    =	{
	    63,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"242:21: ( ( LTERM )* init= forStatementInitialiserPart )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa63_eot,	    /* EOT table			    */
	    dfa63_eof,	    /* EOF table			    */
	    dfa63_min,	    /* Minimum tokens for each state    */
	    dfa63_max,	    /* Maximum tokens for each state    */
	    dfa63_accept,	/* Accept table			    */
	    dfa63_special,	/* Special transition states	    */
	    dfa63_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 63
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    242:75: ( ( LTERM )* cond= expression )?
 */
static const ANTLR3_INT32 dfa66_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa66_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa66_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa66_max[4] =
    {
	198, 198, -1, -1
    };
static const ANTLR3_INT32 dfa66_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa66_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa66_T_empty	    NULL

static const ANTLR3_INT32 dfa66_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, 2, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa66_transitions[] =
{
    dfa66_T0, dfa66_T0, dfa66_T_empty, dfa66_T_empty	
};


/* Declare tracking structure for Cyclic DFA 66
 */
static
ANTLR3_CYCLIC_DFA cdfa66
    =	{
	    66,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"242:75: ( ( LTERM )* cond= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa66_eot,	    /* EOT table			    */
	    dfa66_eof,	    /* EOF table			    */
	    dfa66_min,	    /* Minimum tokens for each state    */
	    dfa66_max,	    /* Maximum tokens for each state    */
	    dfa66_accept,	/* Accept table			    */
	    dfa66_special,	/* Special transition states	    */
	    dfa66_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 66
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    242:112: ( ( LTERM )* iter= expression )?
 */
static const ANTLR3_INT32 dfa69_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa69_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa69_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa69_max[4] =
    {
	198, 198, -1, -1
    };
static const ANTLR3_INT32 dfa69_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa69_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa69_T_empty	    NULL

static const ANTLR3_INT32 dfa69_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 3, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa69_transitions[] =
{
    dfa69_T0, dfa69_T0, dfa69_T_empty, dfa69_T_empty	
};


/* Declare tracking structure for Cyclic DFA 69
 */
static
ANTLR3_CYCLIC_DFA cdfa69
    =	{
	    69,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"242:112: ( ( LTERM )* iter= expression )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa69_eot,	    /* EOT table			    */
	    dfa69_eof,	    /* EOF table			    */
	    dfa69_min,	    /* Minimum tokens for each state    */
	    dfa69_max,	    /* Maximum tokens for each state    */
	    dfa69_accept,	/* Accept table			    */
	    dfa69_special,	/* Special transition states	    */
	    dfa69_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 69
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 284:8: ( ( LTERM )* case1= caseClause )*
 */
static const ANTLR3_INT32 dfa99_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa99_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa99_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa99_max[4] =
    {
	143, 143, -1, -1
    };
static const ANTLR3_INT32 dfa99_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa99_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa99_T_empty	    NULL

static const ANTLR3_INT32 dfa99_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa99_transitions[] =
{
    dfa99_T0, dfa99_T0, dfa99_T_empty, dfa99_T_empty	
};


/* Declare tracking structure for Cyclic DFA 99
 */
static
ANTLR3_CYCLIC_DFA cdfa99
    =	{
	    99,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 284:8: ( ( LTERM )* case1= caseClause )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa99_eot,	    /* EOT table			    */
	    dfa99_eof,	    /* EOF table			    */
	    dfa99_min,	    /* Minimum tokens for each state    */
	    dfa99_max,	    /* Maximum tokens for each state    */
	    dfa99_accept,	/* Accept table			    */
	    dfa99_special,	/* Special transition states	    */
	    dfa99_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 99
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    284:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?
 */
static const ANTLR3_INT32 dfa103_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa103_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa103_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa103_max[4] =
    {
	143, 143, -1, -1
    };
static const ANTLR3_INT32 dfa103_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa103_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa103_T_empty	    NULL

static const ANTLR3_INT32 dfa103_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa103_transitions[] =
{
    dfa103_T0, dfa103_T0, dfa103_T_empty, dfa103_T_empty	
};


/* Declare tracking structure for Cyclic DFA 103
 */
static
ANTLR3_CYCLIC_DFA cdfa103
    =	{
	    103,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"284:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa103_eot,	    /* EOT table			    */
	    dfa103_eof,	    /* EOF table			    */
	    dfa103_min,	    /* Minimum tokens for each state    */
	    dfa103_max,	    /* Maximum tokens for each state    */
	    dfa103_accept,	/* Accept table			    */
	    dfa103_special,	/* Special transition states	    */
	    dfa103_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 103
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 284:57: ( ( LTERM )* case2= caseClause )*
 */
static const ANTLR3_INT32 dfa102_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa102_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa102_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa102_max[4] =
    {
	142, 142, -1, -1
    };
static const ANTLR3_INT32 dfa102_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa102_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa102_T_empty	    NULL

static const ANTLR3_INT32 dfa102_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa102_transitions[] =
{
    dfa102_T0, dfa102_T0, dfa102_T_empty, dfa102_T_empty	
};


/* Declare tracking structure for Cyclic DFA 102
 */
static
ANTLR3_CYCLIC_DFA cdfa102
    =	{
	    102,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 284:57: ( ( LTERM )* case2= caseClause )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa102_eot,	    /* EOT table			    */
	    dfa102_eof,	    /* EOF table			    */
	    dfa102_min,	    /* Minimum tokens for each state    */
	    dfa102_max,	    /* Maximum tokens for each state    */
	    dfa102_accept,	/* Accept table			    */
	    dfa102_special,	/* Special transition states	    */
	    dfa102_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 102
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    300:127: ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?
 */
static const ANTLR3_INT32 dfa116_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa116_eof[4] =
    {
	3, 3, -1, -1
    };
static const ANTLR3_INT32 dfa116_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa116_max[4] =
    {
	198, 198, -1, -1
    };
static const ANTLR3_INT32 dfa116_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa116_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa116_T_empty	    NULL

static const ANTLR3_INT32 dfa116_T0[] =
    {
	1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 3, 3, 3, 3, -1, 3, 3, 3, 
	3, 3, -1, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, -1, 2, -1, -1, 3, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa116_transitions[] =
{
    dfa116_T0, dfa116_T0, dfa116_T_empty, dfa116_T_empty	
};


/* Declare tracking structure for Cyclic DFA 116
 */
static
ANTLR3_CYCLIC_DFA cdfa116
    =	{
	    116,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"300:127: ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa116_eot,	    /* EOT table			    */
	    dfa116_eof,	    /* EOF table			    */
	    dfa116_min,	    /* Minimum tokens for each state    */
	    dfa116_max,	    /* Maximum tokens for each state    */
	    dfa116_accept,	/* Accept table			    */
	    dfa116_special,	/* Special transition states	    */
	    dfa116_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 116
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    320:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );
 */
static const ANTLR3_INT32 dfa131_eot[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa131_eof[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa131_min[11] =
    {
	95, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa131_max[11] =
    {
	198, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa131_accept[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa131_special[11] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa131_T_empty	    NULL

static const ANTLR3_INT32 dfa131_T0[] =
    {
	2, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 7, 6, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 3, 3
    };static const ANTLR3_INT32 dfa131_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa131_transitions[] =
{
    dfa131_T0, dfa131_T1, dfa131_T1, dfa131_T1, dfa131_T1, dfa131_T1, dfa131_T1, 
    dfa131_T1, dfa131_T1, dfa131_T_empty, dfa131_T_empty	
};

static ANTLR3_INT32 dfa131_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA131_1;

    	    ANTLR3_MARKER index131_1;


    		LA131_1 = LA(1);

    	 
    	    index131_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred144_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index131_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA131_2;

    	    ANTLR3_MARKER index131_2;


    		LA131_2 = LA(1);

    	 
    	    index131_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred144_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index131_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA131_3;

    	    ANTLR3_MARKER index131_3;


    		LA131_3 = LA(1);

    	 
    	    index131_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred144_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index131_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA131_4;

    	    ANTLR3_MARKER index131_4;


    		LA131_4 = LA(1);

    	 
    	    index131_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred144_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index131_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA131_5;

    	    ANTLR3_MARKER index131_5;


    		LA131_5 = LA(1);

    	 
    	    index131_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred144_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index131_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA131_6;

    	    ANTLR3_MARKER index131_6;


    		LA131_6 = LA(1);

    	 
    	    index131_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred144_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index131_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA131_7;

    	    ANTLR3_MARKER index131_7;


    		LA131_7 = LA(1);

    	 
    	    index131_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred144_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index131_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA131_8;

    	    ANTLR3_MARKER index131_8;


    		LA131_8 = LA(1);

    	 
    	    index131_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred144_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index131_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"320:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );";
    EXCEPTION->decisionNum  = 131;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 131
 */
static
ANTLR3_CYCLIC_DFA cdfa131
    =	{
	    131,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"320:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );",	
	    (CDFA_SPECIAL_FUNC) dfa131_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa131_eot,	    /* EOT table			    */
	    dfa131_eof,	    /* EOF table			    */
	    dfa131_min,	    /* Minimum tokens for each state    */
	    dfa131_max,	    /* Maximum tokens for each state    */
	    dfa131_accept,	/* Accept table			    */
	    dfa131_special,	/* Special transition states	    */
	    dfa131_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 131
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 327:25: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
 */
static const ANTLR3_INT32 dfa134_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa134_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa134_min[5] =
    {
	94, 94, -1, -1, 94
    };
static const ANTLR3_INT32 dfa134_max[5] =
    {
	152, 198, -1, -1, 198
    };
static const ANTLR3_INT32 dfa134_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa134_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa134_T_empty	    NULL

static const ANTLR3_INT32 dfa134_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2
    };static const ANTLR3_INT32 dfa134_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa134_transitions[] =
{
    dfa134_T0, dfa134_T1, dfa134_T_empty, dfa134_T_empty, dfa134_T1	
};


/* Declare tracking structure for Cyclic DFA 134
 */
static
ANTLR3_CYCLIC_DFA cdfa134
    =	{
	    134,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 327:25: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa134_eot,	    /* EOT table			    */
	    dfa134_eof,	    /* EOF table			    */
	    dfa134_min,	    /* Minimum tokens for each state    */
	    dfa134_max,	    /* Maximum tokens for each state    */
	    dfa134_accept,	/* Accept table			    */
	    dfa134_special,	/* Special transition states	    */
	    dfa134_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 134
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 331:29: ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*
 */
static const ANTLR3_INT32 dfa137_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa137_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa137_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa137_max[4] =
    {
	128, 128, -1, -1
    };
static const ANTLR3_INT32 dfa137_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa137_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa137_T_empty	    NULL

static const ANTLR3_INT32 dfa137_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa137_transitions[] =
{
    dfa137_T0, dfa137_T0, dfa137_T_empty, dfa137_T_empty	
};


/* Declare tracking structure for Cyclic DFA 137
 */
static
ANTLR3_CYCLIC_DFA cdfa137
    =	{
	    137,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 331:29: ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa137_eot,	    /* EOT table			    */
	    dfa137_eof,	    /* EOF table			    */
	    dfa137_min,	    /* Minimum tokens for each state    */
	    dfa137_max,	    /* Maximum tokens for each state    */
	    dfa137_accept,	/* Accept table			    */
	    dfa137_special,	/* Special transition states	    */
	    dfa137_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 137
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    335:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static const ANTLR3_INT32 dfa140_eot[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa140_eof[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa140_min[19] =
    {
	95, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa140_max[19] =
    {
	198, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa140_accept[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2
    };
static const ANTLR3_INT32 dfa140_special[19] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa140_T_empty	    NULL

static const ANTLR3_INT32 dfa140_T0[] =
    {
	2, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 7, 6, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 9, -1, -1, -1, 
	9, 9, 9, 9, 9, 9, 9, 1, 3, 3, 3
    };static const ANTLR3_INT32 dfa140_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa140_transitions[] =
{
    dfa140_T0, dfa140_T1, dfa140_T1, dfa140_T1, dfa140_T1, dfa140_T1, dfa140_T1, 
    dfa140_T1, dfa140_T1, dfa140_T_empty, dfa140_T_empty, dfa140_T_empty, 
    dfa140_T_empty, dfa140_T_empty, dfa140_T_empty, dfa140_T_empty, dfa140_T_empty, 
    dfa140_T_empty, dfa140_T_empty	
};

static ANTLR3_INT32 dfa140_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA140_1;

    	    ANTLR3_MARKER index140_1;


    		LA140_1 = LA(1);

    	 
    	    index140_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index140_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA140_2;

    	    ANTLR3_MARKER index140_2;


    		LA140_2 = LA(1);

    	 
    	    index140_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index140_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA140_3;

    	    ANTLR3_MARKER index140_3;


    		LA140_3 = LA(1);

    	 
    	    index140_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index140_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA140_4;

    	    ANTLR3_MARKER index140_4;


    		LA140_4 = LA(1);

    	 
    	    index140_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index140_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA140_5;

    	    ANTLR3_MARKER index140_5;


    		LA140_5 = LA(1);

    	 
    	    index140_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index140_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA140_6;

    	    ANTLR3_MARKER index140_6;


    		LA140_6 = LA(1);

    	 
    	    index140_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index140_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA140_7;

    	    ANTLR3_MARKER index140_7;


    		LA140_7 = LA(1);

    	 
    	    index140_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index140_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA140_8;

    	    ANTLR3_MARKER index140_8;


    		LA140_8 = LA(1);

    	 
    	    index140_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred154_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index140_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"335:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );";
    EXCEPTION->decisionNum  = 140;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 140
 */
static
ANTLR3_CYCLIC_DFA cdfa140
    =	{
	    140,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"335:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa140_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa140_eot,	    /* EOT table			    */
	    dfa140_eof,	    /* EOF table			    */
	    dfa140_min,	    /* Minimum tokens for each state    */
	    dfa140_max,	    /* Maximum tokens for each state    */
	    dfa140_accept,	/* Accept table			    */
	    dfa140_special,	/* Special transition states	    */
	    dfa140_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 140
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    340:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static const ANTLR3_INT32 dfa143_eot[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa143_eof[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1
    };
static const ANTLR3_INT32 dfa143_min[19] =
    {
	95, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa143_max[19] =
    {
	198, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa143_accept[19] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2
    };
static const ANTLR3_INT32 dfa143_special[19] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa143_T_empty	    NULL

static const ANTLR3_INT32 dfa143_T0[] =
    {
	2, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 7, 6, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 9, -1, -1, -1, 
	9, 9, 9, 9, 9, 9, 9, 1, 3, 3, 3
    };static const ANTLR3_INT32 dfa143_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa143_transitions[] =
{
    dfa143_T0, dfa143_T1, dfa143_T1, dfa143_T1, dfa143_T1, dfa143_T1, dfa143_T1, 
    dfa143_T1, dfa143_T1, dfa143_T_empty, dfa143_T_empty, dfa143_T_empty, 
    dfa143_T_empty, dfa143_T_empty, dfa143_T_empty, dfa143_T_empty, dfa143_T_empty, 
    dfa143_T_empty, dfa143_T_empty	
};

static ANTLR3_INT32 dfa143_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA143_1;

    	    ANTLR3_MARKER index143_1;


    		LA143_1 = LA(1);

    	 
    	    index143_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index143_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA143_2;

    	    ANTLR3_MARKER index143_2;


    		LA143_2 = LA(1);

    	 
    	    index143_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index143_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA143_3;

    	    ANTLR3_MARKER index143_3;


    		LA143_3 = LA(1);

    	 
    	    index143_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index143_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA143_4;

    	    ANTLR3_MARKER index143_4;


    		LA143_4 = LA(1);

    	 
    	    index143_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index143_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA143_5;

    	    ANTLR3_MARKER index143_5;


    		LA143_5 = LA(1);

    	 
    	    index143_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index143_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA143_6;

    	    ANTLR3_MARKER index143_6;


    		LA143_6 = LA(1);

    	 
    	    index143_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index143_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA143_7;

    	    ANTLR3_MARKER index143_7;


    		LA143_7 = LA(1);

    	 
    	    index143_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index143_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA143_8;

    	    ANTLR3_MARKER index143_8;


    		LA143_8 = LA(1);

    	 
    	    index143_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred157_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 18;
    	    }

    	 
    		SEEK(index143_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"340:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );";
    EXCEPTION->decisionNum  = 143;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 143
 */
static
ANTLR3_CYCLIC_DFA cdfa143
    =	{
	    143,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"340:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );",	
	    (CDFA_SPECIAL_FUNC) dfa143_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa143_eot,	    /* EOT table			    */
	    dfa143_eof,	    /* EOF table			    */
	    dfa143_min,	    /* Minimum tokens for each state    */
	    dfa143_max,	    /* Maximum tokens for each state    */
	    dfa143_accept,	/* Accept table			    */
	    dfa143_special,	/* Special transition states	    */
	    dfa143_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 143
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    345:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static const ANTLR3_INT32 dfa144_eot[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa144_eof[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa144_min[11] =
    {
	95, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa144_max[11] =
    {
	198, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1
    };
static const ANTLR3_INT32 dfa144_accept[11] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa144_special[11] =
    {	
	-1, 0, 1, 2, 3, 4, 5, 6, 7, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa144_T_empty	    NULL

static const ANTLR3_INT32 dfa144_T0[] =
    {
	2, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 7, 6, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 3, 3
    };static const ANTLR3_INT32 dfa144_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa144_transitions[] =
{
    dfa144_T0, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, dfa144_T1, 
    dfa144_T1, dfa144_T1, dfa144_T_empty, dfa144_T_empty	
};

static ANTLR3_INT32 dfa144_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA144_1;

    	    ANTLR3_MARKER index144_1;


    		LA144_1 = LA(1);

    	 
    	    index144_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA144_2;

    	    ANTLR3_MARKER index144_2;


    		LA144_2 = LA(1);

    	 
    	    index144_2 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_2);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 2:
        
    	{
    	    ANTLR3_UINT32 LA144_3;

    	    ANTLR3_MARKER index144_3;


    		LA144_3 = LA(1);

    	 
    	    index144_3 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_3);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 3:
        
    	{
    	    ANTLR3_UINT32 LA144_4;

    	    ANTLR3_MARKER index144_4;


    		LA144_4 = LA(1);

    	 
    	    index144_4 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_4);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 4:
        
    	{
    	    ANTLR3_UINT32 LA144_5;

    	    ANTLR3_MARKER index144_5;


    		LA144_5 = LA(1);

    	 
    	    index144_5 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_5);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 5:
        
    	{
    	    ANTLR3_UINT32 LA144_6;

    	    ANTLR3_MARKER index144_6;


    		LA144_6 = LA(1);

    	 
    	    index144_6 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_6);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 6:
        
    	{
    	    ANTLR3_UINT32 LA144_7;

    	    ANTLR3_MARKER index144_7;


    		LA144_7 = LA(1);

    	 
    	    index144_7 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_7);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 7:
        
    	{
    	    ANTLR3_UINT32 LA144_8;

    	    ANTLR3_MARKER index144_8;


    		LA144_8 = LA(1);

    	 
    	    index144_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred160_Emerson(ctx)) )
    	    {
    	        s = 9;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 10;
    	    }

    	 
    		SEEK(index144_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"345:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );";
    EXCEPTION->decisionNum  = 144;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 144
 */
static
ANTLR3_CYCLIC_DFA cdfa144
    =	{
	    144,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"345:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );",	
	    (CDFA_SPECIAL_FUNC) dfa144_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa144_eot,	    /* EOT table			    */
	    dfa144_eof,	    /* EOF table			    */
	    dfa144_min,	    /* Minimum tokens for each state    */
	    dfa144_max,	    /* Maximum tokens for each state    */
	    dfa144_accept,	/* Accept table			    */
	    dfa144_special,	/* Special transition states	    */
	    dfa144_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 144
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    350:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static const ANTLR3_INT32 dfa146_eot[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa146_eof[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa146_min[10] =
    {
	95, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa146_max[10] =
    {
	198, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };
static const ANTLR3_INT32 dfa146_accept[10] =
    {
	-1, 1, -1, -1, -1, -1, -1, -1, -1, 2
    };
static const ANTLR3_INT32 dfa146_special[10] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, 0, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa146_T_empty	    NULL

static const ANTLR3_INT32 dfa146_T0[] =
    {
	1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa146_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa146_transitions[] =
{
    dfa146_T0, dfa146_T_empty, dfa146_T_empty, dfa146_T_empty, dfa146_T_empty, 
    dfa146_T_empty, dfa146_T_empty, dfa146_T_empty, dfa146_T1, dfa146_T_empty	
};

static ANTLR3_INT32 dfa146_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA146_8;

    	    ANTLR3_MARKER index146_8;


    		LA146_8 = LA(1);

    	 
    	    index146_8 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred161_Emerson(ctx)) )
    	    {
    	        s = 1;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 9;
    	    }

    	 
    		SEEK(index146_8);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"350:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );";
    EXCEPTION->decisionNum  = 146;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 146
 */
static
ANTLR3_CYCLIC_DFA cdfa146
    =	{
	    146,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"350:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );",	
	    (CDFA_SPECIAL_FUNC) dfa146_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa146_eot,	    /* EOT table			    */
	    dfa146_eof,	    /* EOF table			    */
	    dfa146_min,	    /* Minimum tokens for each state    */
	    dfa146_max,	    /* Maximum tokens for each state    */
	    dfa146_accept,	/* Accept table			    */
	    dfa146_special,	/* Special transition states	    */
	    dfa146_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 146
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 368:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa152_eot[79] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa152_eof[79] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa152_min[79] =
    {
	94, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa152_max[79] =
    {
	198, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa152_accept[79] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa152_special[79] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa152_T_empty	    NULL

static const ANTLR3_INT32 dfa152_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 9, 2, 77, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa152_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa152_transitions[] =
{
    dfa152_T0, dfa152_T1, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, 
    dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T1, 
    dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, 
    dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, 
    dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, 
    dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, 
    dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, 
    dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, 
    dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, 
    dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, 
    dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, 
    dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, 
    dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, 
    dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, 
    dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, 
    dfa152_T_empty, dfa152_T_empty, dfa152_T_empty, dfa152_T_empty	
};

static ANTLR3_INT32 dfa152_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA152_1;

    	    ANTLR3_MARKER index152_1;


    		LA152_1 = LA(1);

    	 
    	    index152_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred167_Emerson(ctx)) )
    	    {
    	        s = 77;
    	    }

    	    else if ( (synpred169_Emerson(ctx)) )
    	    {
    	        s = 78;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index152_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA152_9;

    	    ANTLR3_MARKER index152_9;


    		LA152_9 = LA(1);

    	 
    	    index152_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred169_Emerson(ctx)) )
    	    {
    	        s = 78;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index152_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 368:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 152;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 152
 */
static
ANTLR3_CYCLIC_DFA cdfa152
    =	{
	    152,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 368:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa152_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa152_eot,	    /* EOT table			    */
	    dfa152_eof,	    /* EOF table			    */
	    dfa152_min,	    /* Minimum tokens for each state    */
	    dfa152_max,	    /* Maximum tokens for each state    */
	    dfa152_accept,	/* Accept table			    */
	    dfa152_special,	/* Special transition states	    */
	    dfa152_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 152
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 369:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa155_eot[79] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa155_eof[79] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa155_min[79] =
    {
	94, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa155_max[79] =
    {
	198, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa155_accept[79] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa155_special[79] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa155_T_empty	    NULL

static const ANTLR3_INT32 dfa155_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 9, 2, 77, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa155_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa155_transitions[] =
{
    dfa155_T0, dfa155_T1, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, 
    dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T1, 
    dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, 
    dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, 
    dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, 
    dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, 
    dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, 
    dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, 
    dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, 
    dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, 
    dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, 
    dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, 
    dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, 
    dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, 
    dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, 
    dfa155_T_empty, dfa155_T_empty, dfa155_T_empty, dfa155_T_empty	
};

static ANTLR3_INT32 dfa155_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA155_1;

    	    ANTLR3_MARKER index155_1;


    		LA155_1 = LA(1);

    	 
    	    index155_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred172_Emerson(ctx)) )
    	    {
    	        s = 77;
    	    }

    	    else if ( (synpred174_Emerson(ctx)) )
    	    {
    	        s = 78;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index155_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA155_9;

    	    ANTLR3_MARKER index155_9;


    		LA155_9 = LA(1);

    	 
    	    index155_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred174_Emerson(ctx)) )
    	    {
    	        s = 78;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index155_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 369:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 155;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 155
 */
static
ANTLR3_CYCLIC_DFA cdfa155
    =	{
	    155,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 369:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa155_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa155_eot,	    /* EOT table			    */
	    dfa155_eof,	    /* EOF table			    */
	    dfa155_min,	    /* Minimum tokens for each state    */
	    dfa155_max,	    /* Maximum tokens for each state    */
	    dfa155_accept,	/* Accept table			    */
	    dfa155_special,	/* Special transition states	    */
	    dfa155_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 155
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 370:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa160_eot[79] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa160_eof[79] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa160_min[79] =
    {
	94, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa160_max[79] =
    {
	198, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa160_accept[79] =
    {
	-1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa160_special[79] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa160_T_empty	    NULL

static const ANTLR3_INT32 dfa160_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2, 2, 2, 9, 2, 77, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa160_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa160_transitions[] =
{
    dfa160_T0, dfa160_T1, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T1, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, 
    dfa160_T_empty, dfa160_T_empty, dfa160_T_empty, dfa160_T_empty	
};

static ANTLR3_INT32 dfa160_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA160_1;

    	    ANTLR3_MARKER index160_1;


    		LA160_1 = LA(1);

    	 
    	    index160_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred179_Emerson(ctx)) )
    	    {
    	        s = 77;
    	    }

    	    else if ( (synpred181_Emerson(ctx)) )
    	    {
    	        s = 78;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index160_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
        case 1:
        
    	{
    	    ANTLR3_UINT32 LA160_9;

    	    ANTLR3_MARKER index160_9;


    		LA160_9 = LA(1);

    	 
    	    index160_9 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred181_Emerson(ctx)) )
    	    {
    	        s = 78;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index160_9);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 370:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*";
    EXCEPTION->decisionNum  = 160;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 160
 */
static
ANTLR3_CYCLIC_DFA cdfa160
    =	{
	    160,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 370:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa160_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa160_eot,	    /* EOT table			    */
	    dfa160_eof,	    /* EOF table			    */
	    dfa160_min,	    /* Minimum tokens for each state    */
	    dfa160_max,	    /* Maximum tokens for each state    */
	    dfa160_accept,	/* Accept table			    */
	    dfa160_special,	/* Special transition states	    */
	    dfa160_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 160
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 379:78: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
 */
static const ANTLR3_INT32 dfa167_eot[52] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa167_eof[52] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa167_min[52] =
    {
	94, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa167_max[52] =
    {
	189, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa167_accept[52] =
    {
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3
    };
static const ANTLR3_INT32 dfa167_special[52] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa167_T_empty	    NULL

static const ANTLR3_INT32 dfa167_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 2, 2, -1, 2, -1, 2, 2, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, 2, 
	-1, 50, 2, 51, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa167_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa167_transitions[] =
{
    dfa167_T0, dfa167_T1, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, dfa167_T_empty, 
    dfa167_T_empty, dfa167_T_empty	
};

static ANTLR3_INT32 dfa167_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA167_1;

    	    ANTLR3_MARKER index167_1;


    		LA167_1 = LA(1);

    	 
    	    index167_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred185_Emerson(ctx)) )
    	    {
    	        s = 49;
    	    }

    	    else if ( (synpred187_Emerson(ctx)) )
    	    {
    	        s = 50;
    	    }

    	    else if ( (synpred189_Emerson(ctx)) )
    	    {
    	        s = 51;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index167_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 379:78: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*";
    EXCEPTION->decisionNum  = 167;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 167
 */
static
ANTLR3_CYCLIC_DFA cdfa167
    =	{
	    167,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 379:78: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa167_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa167_eot,	    /* EOT table			    */
	    dfa167_eof,	    /* EOF table			    */
	    dfa167_min,	    /* Minimum tokens for each state    */
	    dfa167_max,	    /* Maximum tokens for each state    */
	    dfa167_accept,	/* Accept table			    */
	    dfa167_special,	/* Special transition states	    */
	    dfa167_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 167
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    389:8: ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )?
 */
static const ANTLR3_INT32 dfa173_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa173_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa173_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa173_max[4] =
    {
	198, 198, -1, -1
    };
static const ANTLR3_INT32 dfa173_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa173_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa173_T_empty	    NULL

static const ANTLR3_INT32 dfa173_T0[] =
    {
	1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 3, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa173_transitions[] =
{
    dfa173_T0, dfa173_T0, dfa173_T_empty, dfa173_T_empty	
};


/* Declare tracking structure for Cyclic DFA 173
 */
static
ANTLR3_CYCLIC_DFA cdfa173
    =	{
	    173,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"389:8: ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa173_eot,	    /* EOT table			    */
	    dfa173_eof,	    /* EOF table			    */
	    dfa173_min,	    /* Minimum tokens for each state    */
	    dfa173_max,	    /* Maximum tokens for each state    */
	    dfa173_accept,	/* Accept table			    */
	    dfa173_special,	/* Special transition states	    */
	    dfa173_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 173
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 389:39: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
 */
static const ANTLR3_INT32 dfa172_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa172_eof[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa172_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa172_max[4] =
    {
	124, 124, -1, -1
    };
static const ANTLR3_INT32 dfa172_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa172_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa172_T_empty	    NULL

static const ANTLR3_INT32 dfa172_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa172_transitions[] =
{
    dfa172_T0, dfa172_T0, dfa172_T_empty, dfa172_T_empty	
};


/* Declare tracking structure for Cyclic DFA 172
 */
static
ANTLR3_CYCLIC_DFA cdfa172
    =	{
	    172,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 389:39: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa172_eot,	    /* EOT table			    */
	    dfa172_eof,	    /* EOF table			    */
	    dfa172_min,	    /* Minimum tokens for each state    */
	    dfa172_max,	    /* Maximum tokens for each state    */
	    dfa172_accept,	/* Accept table			    */
	    dfa172_special,	/* Special transition states	    */
	    dfa172_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 172
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    406:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
 */
static const ANTLR3_INT32 dfa183_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa183_eof[5] =
    {
	3, 3, -1, -1, 3
    };
static const ANTLR3_INT32 dfa183_min[5] =
    {
	94, 94, -1, -1, 94
    };
static const ANTLR3_INT32 dfa183_max[5] =
    {
	165, 198, -1, -1, 198
    };
static const ANTLR3_INT32 dfa183_accept[5] =
    {
	-1, -1, 1, 2, -1
    };
static const ANTLR3_INT32 dfa183_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa183_T_empty	    NULL

static const ANTLR3_INT32 dfa183_T0[] =
    {
	4, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 3, 3, 3, -1, 3, 3, 3, 3, 
	3, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, -1, 3, 3, 3, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3
    };static const ANTLR3_INT32 dfa183_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, 3, -1, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa183_transitions[] =
{
    dfa183_T1, dfa183_T0, dfa183_T_empty, dfa183_T_empty, dfa183_T0	
};


/* Declare tracking structure for Cyclic DFA 183
 */
static
ANTLR3_CYCLIC_DFA cdfa183
    =	{
	    183,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"406:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa183_eot,	    /* EOT table			    */
	    dfa183_eof,	    /* EOF table			    */
	    dfa183_min,	    /* Minimum tokens for each state    */
	    dfa183_max,	    /* Maximum tokens for each state    */
	    dfa183_accept,	/* Accept table			    */
	    dfa183_special,	/* Special transition states	    */
	    dfa183_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 183
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    410:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
 */
static const ANTLR3_INT32 dfa188_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa188_eof[4] =
    {
	3, -1, -1, -1
    };
static const ANTLR3_INT32 dfa188_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa188_max[4] =
    {
	165, 165, -1, -1
    };
static const ANTLR3_INT32 dfa188_accept[4] =
    {
	-1, -1, 1, 2
    };
static const ANTLR3_INT32 dfa188_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa188_T_empty	    NULL

static const ANTLR3_INT32 dfa188_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 3, -1, -1, 
	-1, -1, -1, -1, 3, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa188_transitions[] =
{
    dfa188_T0, dfa188_T0, dfa188_T_empty, dfa188_T_empty	
};


/* Declare tracking structure for Cyclic DFA 188
 */
static
ANTLR3_CYCLIC_DFA cdfa188
    =	{
	    188,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"410:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa188_eot,	    /* EOT table			    */
	    dfa188_eof,	    /* EOF table			    */
	    dfa188_min,	    /* Minimum tokens for each state    */
	    dfa188_max,	    /* Maximum tokens for each state    */
	    dfa188_accept,	/* Accept table			    */
	    dfa188_special,	/* Special transition states	    */
	    dfa188_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 188
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 415:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
 */
static const ANTLR3_INT32 dfa191_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa191_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa191_min[5] =
    {
	94, 94, -1, -1, 94
    };
static const ANTLR3_INT32 dfa191_max[5] =
    {
	166, 198, -1, -1, 198
    };
static const ANTLR3_INT32 dfa191_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa191_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa191_T_empty	    NULL

static const ANTLR3_INT32 dfa191_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3
    };static const ANTLR3_INT32 dfa191_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa191_transitions[] =
{
    dfa191_T0, dfa191_T1, dfa191_T_empty, dfa191_T_empty, dfa191_T1	
};


/* Declare tracking structure for Cyclic DFA 191
 */
static
ANTLR3_CYCLIC_DFA cdfa191
    =	{
	    191,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 415:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa191_eot,	    /* EOT table			    */
	    dfa191_eof,	    /* EOF table			    */
	    dfa191_min,	    /* Minimum tokens for each state    */
	    dfa191_max,	    /* Maximum tokens for each state    */
	    dfa191_accept,	/* Accept table			    */
	    dfa191_special,	/* Special transition states	    */
	    dfa191_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 191
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 419:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
 */
static const ANTLR3_INT32 dfa194_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa194_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa194_min[5] =
    {
	94, 94, -1, -1, 94
    };
static const ANTLR3_INT32 dfa194_max[5] =
    {
	167, 198, -1, -1, 198
    };
static const ANTLR3_INT32 dfa194_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa194_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa194_T_empty	    NULL

static const ANTLR3_INT32 dfa194_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };static const ANTLR3_INT32 dfa194_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa194_transitions[] =
{
    dfa194_T1, dfa194_T0, dfa194_T_empty, dfa194_T_empty, dfa194_T0	
};


/* Declare tracking structure for Cyclic DFA 194
 */
static
ANTLR3_CYCLIC_DFA cdfa194
    =	{
	    194,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 419:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa194_eot,	    /* EOT table			    */
	    dfa194_eof,	    /* EOF table			    */
	    dfa194_min,	    /* Minimum tokens for each state    */
	    dfa194_max,	    /* Maximum tokens for each state    */
	    dfa194_accept,	/* Accept table			    */
	    dfa194_special,	/* Special transition states	    */
	    dfa194_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 194
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 423:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa197_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa197_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa197_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa197_max[4] =
    {
	166, 166, -1, -1
    };
static const ANTLR3_INT32 dfa197_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa197_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa197_T_empty	    NULL

static const ANTLR3_INT32 dfa197_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa197_transitions[] =
{
    dfa197_T0, dfa197_T0, dfa197_T_empty, dfa197_T_empty	
};


/* Declare tracking structure for Cyclic DFA 197
 */
static
ANTLR3_CYCLIC_DFA cdfa197
    =	{
	    197,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 423:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa197_eot,	    /* EOT table			    */
	    dfa197_eof,	    /* EOF table			    */
	    dfa197_min,	    /* Minimum tokens for each state    */
	    dfa197_max,	    /* Maximum tokens for each state    */
	    dfa197_accept,	/* Accept table			    */
	    dfa197_special,	/* Special transition states	    */
	    dfa197_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 197
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 428:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa200_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa200_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa200_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa200_max[4] =
    {
	167, 167, -1, -1
    };
static const ANTLR3_INT32 dfa200_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa200_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa200_T_empty	    NULL

static const ANTLR3_INT32 dfa200_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa200_transitions[] =
{
    dfa200_T0, dfa200_T0, dfa200_T_empty, dfa200_T_empty	
};


/* Declare tracking structure for Cyclic DFA 200
 */
static
ANTLR3_CYCLIC_DFA cdfa200
    =	{
	    200,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 428:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa200_eot,	    /* EOT table			    */
	    dfa200_eof,	    /* EOF table			    */
	    dfa200_min,	    /* Minimum tokens for each state    */
	    dfa200_max,	    /* Maximum tokens for each state    */
	    dfa200_accept,	/* Accept table			    */
	    dfa200_special,	/* Special transition states	    */
	    dfa200_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 200
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 432:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
 */
static const ANTLR3_INT32 dfa203_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa203_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa203_min[5] =
    {
	94, 94, -1, -1, 94
    };
static const ANTLR3_INT32 dfa203_max[5] =
    {
	168, 198, -1, -1, 198
    };
static const ANTLR3_INT32 dfa203_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa203_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa203_T_empty	    NULL

static const ANTLR3_INT32 dfa203_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 3, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };static const ANTLR3_INT32 dfa203_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa203_transitions[] =
{
    dfa203_T1, dfa203_T0, dfa203_T_empty, dfa203_T_empty, dfa203_T0	
};


/* Declare tracking structure for Cyclic DFA 203
 */
static
ANTLR3_CYCLIC_DFA cdfa203
    =	{
	    203,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 432:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa203_eot,	    /* EOT table			    */
	    dfa203_eof,	    /* EOF table			    */
	    dfa203_min,	    /* Minimum tokens for each state    */
	    dfa203_max,	    /* Maximum tokens for each state    */
	    dfa203_accept,	/* Accept table			    */
	    dfa203_special,	/* Special transition states	    */
	    dfa203_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 203
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 436:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa206_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa206_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa206_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa206_max[4] =
    {
	168, 168, -1, -1
    };
static const ANTLR3_INT32 dfa206_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa206_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa206_T_empty	    NULL

static const ANTLR3_INT32 dfa206_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa206_transitions[] =
{
    dfa206_T0, dfa206_T0, dfa206_T_empty, dfa206_T_empty	
};


/* Declare tracking structure for Cyclic DFA 206
 */
static
ANTLR3_CYCLIC_DFA cdfa206
    =	{
	    206,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 436:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa206_eot,	    /* EOT table			    */
	    dfa206_eof,	    /* EOF table			    */
	    dfa206_min,	    /* Minimum tokens for each state    */
	    dfa206_max,	    /* Maximum tokens for each state    */
	    dfa206_accept,	/* Accept table			    */
	    dfa206_special,	/* Special transition states	    */
	    dfa206_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 206
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 440:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
 */
static const ANTLR3_INT32 dfa209_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa209_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa209_min[5] =
    {
	94, 94, -1, -1, 94
    };
static const ANTLR3_INT32 dfa209_max[5] =
    {
	169, 198, -1, -1, 198
    };
static const ANTLR3_INT32 dfa209_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa209_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa209_T_empty	    NULL

static const ANTLR3_INT32 dfa209_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 3
    };static const ANTLR3_INT32 dfa209_T1[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 3, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa209_transitions[] =
{
    dfa209_T0, dfa209_T1, dfa209_T_empty, dfa209_T_empty, dfa209_T1	
};


/* Declare tracking structure for Cyclic DFA 209
 */
static
ANTLR3_CYCLIC_DFA cdfa209
    =	{
	    209,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 440:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa209_eot,	    /* EOT table			    */
	    dfa209_eof,	    /* EOF table			    */
	    dfa209_min,	    /* Minimum tokens for each state    */
	    dfa209_max,	    /* Maximum tokens for each state    */
	    dfa209_accept,	/* Accept table			    */
	    dfa209_special,	/* Special transition states	    */
	    dfa209_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 209
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 444:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa212_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa212_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa212_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa212_max[4] =
    {
	169, 169, -1, -1
    };
static const ANTLR3_INT32 dfa212_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa212_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa212_T_empty	    NULL

static const ANTLR3_INT32 dfa212_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 
	3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa212_transitions[] =
{
    dfa212_T0, dfa212_T0, dfa212_T_empty, dfa212_T_empty	
};


/* Declare tracking structure for Cyclic DFA 212
 */
static
ANTLR3_CYCLIC_DFA cdfa212
    =	{
	    212,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 444:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa212_eot,	    /* EOT table			    */
	    dfa212_eof,	    /* EOF table			    */
	    dfa212_min,	    /* Minimum tokens for each state    */
	    dfa212_max,	    /* Maximum tokens for each state    */
	    dfa212_accept,	/* Accept table			    */
	    dfa212_special,	/* Special transition states	    */
	    dfa212_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 212
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 448:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
 */
static const ANTLR3_INT32 dfa215_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa215_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa215_min[5] =
    {
	94, 94, -1, -1, 94
    };
static const ANTLR3_INT32 dfa215_max[5] =
    {
	170, 198, -1, -1, 198
    };
static const ANTLR3_INT32 dfa215_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa215_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa215_T_empty	    NULL

static const ANTLR3_INT32 dfa215_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 3, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2
    };static const ANTLR3_INT32 dfa215_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa215_transitions[] =
{
    dfa215_T1, dfa215_T0, dfa215_T_empty, dfa215_T_empty, dfa215_T0	
};


/* Declare tracking structure for Cyclic DFA 215
 */
static
ANTLR3_CYCLIC_DFA cdfa215
    =	{
	    215,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 448:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa215_eot,	    /* EOT table			    */
	    dfa215_eof,	    /* EOF table			    */
	    dfa215_min,	    /* Minimum tokens for each state    */
	    dfa215_max,	    /* Maximum tokens for each state    */
	    dfa215_accept,	/* Accept table			    */
	    dfa215_special,	/* Special transition states	    */
	    dfa215_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 215
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 452:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa218_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa218_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa218_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa218_max[4] =
    {
	170, 170, -1, -1
    };
static const ANTLR3_INT32 dfa218_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa218_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa218_T_empty	    NULL

static const ANTLR3_INT32 dfa218_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 
	2, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa218_transitions[] =
{
    dfa218_T0, dfa218_T0, dfa218_T_empty, dfa218_T_empty	
};


/* Declare tracking structure for Cyclic DFA 218
 */
static
ANTLR3_CYCLIC_DFA cdfa218
    =	{
	    218,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 452:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa218_eot,	    /* EOT table			    */
	    dfa218_eof,	    /* EOF table			    */
	    dfa218_min,	    /* Minimum tokens for each state    */
	    dfa218_max,	    /* Maximum tokens for each state    */
	    dfa218_accept,	/* Accept table			    */
	    dfa218_special,	/* Special transition states	    */
	    dfa218_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 218
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 456:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
 */
static const ANTLR3_INT32 dfa221_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa221_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa221_min[5] =
    {
	94, 94, -1, -1, 94
    };
static const ANTLR3_INT32 dfa221_max[5] =
    {
	174, 198, -1, -1, 198
    };
static const ANTLR3_INT32 dfa221_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa221_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa221_T_empty	    NULL

static const ANTLR3_INT32 dfa221_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2
    };static const ANTLR3_INT32 dfa221_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 
	2, 2, 2, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa221_transitions[] =
{
    dfa221_T1, dfa221_T0, dfa221_T_empty, dfa221_T_empty, dfa221_T0	
};


/* Declare tracking structure for Cyclic DFA 221
 */
static
ANTLR3_CYCLIC_DFA cdfa221
    =	{
	    221,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 456:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa221_eot,	    /* EOT table			    */
	    dfa221_eof,	    /* EOF table			    */
	    dfa221_min,	    /* Minimum tokens for each state    */
	    dfa221_max,	    /* Maximum tokens for each state    */
	    dfa221_accept,	/* Accept table			    */
	    dfa221_special,	/* Special transition states	    */
	    dfa221_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 221
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 467:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
 */
static const ANTLR3_INT32 dfa225_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa225_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa225_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa225_max[4] =
    {
	174, 174, -1, -1
    };
static const ANTLR3_INT32 dfa225_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa225_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa225_T_empty	    NULL

static const ANTLR3_INT32 dfa225_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa225_transitions[] =
{
    dfa225_T0, dfa225_T0, dfa225_T_empty, dfa225_T_empty	
};


/* Declare tracking structure for Cyclic DFA 225
 */
static
ANTLR3_CYCLIC_DFA cdfa225
    =	{
	    225,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 467:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa225_eot,	    /* EOT table			    */
	    dfa225_eof,	    /* EOF table			    */
	    dfa225_min,	    /* Minimum tokens for each state    */
	    dfa225_max,	    /* Maximum tokens for each state    */
	    dfa225_accept,	/* Accept table			    */
	    dfa225_special,	/* Special transition states	    */
	    dfa225_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 225
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 481:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*
 */
static const ANTLR3_INT32 dfa229_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa229_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa229_min[5] =
    {
	94, 94, -1, -1, 94
    };
static const ANTLR3_INT32 dfa229_max[5] =
    {
	179, 198, -1, -1, 198
    };
static const ANTLR3_INT32 dfa229_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa229_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa229_T_empty	    NULL

static const ANTLR3_INT32 dfa229_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 
	3, 3, 3, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa229_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, 3, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa229_transitions[] =
{
    dfa229_T1, dfa229_T0, dfa229_T_empty, dfa229_T_empty, dfa229_T0	
};


/* Declare tracking structure for Cyclic DFA 229
 */
static
ANTLR3_CYCLIC_DFA cdfa229
    =	{
	    229,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 481:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa229_eot,	    /* EOT table			    */
	    dfa229_eof,	    /* EOF table			    */
	    dfa229_min,	    /* Minimum tokens for each state    */
	    dfa229_max,	    /* Maximum tokens for each state    */
	    dfa229_accept,	/* Accept table			    */
	    dfa229_special,	/* Special transition states	    */
	    dfa229_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 229
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 493:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*
 */
static const ANTLR3_INT32 dfa233_eot[4] =
    {
	-1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa233_eof[4] =
    {
	2, -1, -1, -1
    };
static const ANTLR3_INT32 dfa233_min[4] =
    {
	94, 94, -1, -1
    };
static const ANTLR3_INT32 dfa233_max[4] =
    {
	179, 179, -1, -1
    };
static const ANTLR3_INT32 dfa233_accept[4] =
    {
	-1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa233_special[4] =
    {	
	-1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa233_T_empty	    NULL

static const ANTLR3_INT32 dfa233_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa233_transitions[] =
{
    dfa233_T0, dfa233_T0, dfa233_T_empty, dfa233_T_empty	
};


/* Declare tracking structure for Cyclic DFA 233
 */
static
ANTLR3_CYCLIC_DFA cdfa233
    =	{
	    233,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 493:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa233_eot,	    /* EOT table			    */
	    dfa233_eof,	    /* EOF table			    */
	    dfa233_min,	    /* Minimum tokens for each state    */
	    dfa233_max,	    /* Maximum tokens for each state    */
	    dfa233_accept,	/* Accept table			    */
	    dfa233_special,	/* Special transition states	    */
	    dfa233_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 233
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 503:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*
 */
static const ANTLR3_INT32 dfa237_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa237_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa237_min[5] =
    {
	94, 94, -1, -1, 94
    };
static const ANTLR3_INT32 dfa237_max[5] =
    {
	182, 198, -1, -1, 198
    };
static const ANTLR3_INT32 dfa237_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa237_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa237_T_empty	    NULL

static const ANTLR3_INT32 dfa237_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 3, 3, 2, 2, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa237_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa237_transitions[] =
{
    dfa237_T1, dfa237_T0, dfa237_T_empty, dfa237_T_empty, dfa237_T0	
};


/* Declare tracking structure for Cyclic DFA 237
 */
static
ANTLR3_CYCLIC_DFA cdfa237
    =	{
	    237,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 503:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa237_eot,	    /* EOT table			    */
	    dfa237_eof,	    /* EOF table			    */
	    dfa237_min,	    /* Minimum tokens for each state    */
	    dfa237_max,	    /* Maximum tokens for each state    */
	    dfa237_accept,	/* Accept table			    */
	    dfa237_special,	/* Special transition states	    */
	    dfa237_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 237
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 514:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
 */
static const ANTLR3_INT32 dfa241_eot[30] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa241_eof[30] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa241_min[30] =
    {
	94, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa241_max[30] =
    {
	184, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa241_accept[30] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1
    };
static const ANTLR3_INT32 dfa241_special[30] =
    {	
	-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa241_T_empty	    NULL

static const ANTLR3_INT32 dfa241_T0[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 28, 28
    };static const ANTLR3_INT32 dfa241_T1[] =
    {
	-1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa241_transitions[] =
{
    dfa241_T0, dfa241_T1, dfa241_T_empty, dfa241_T_empty, dfa241_T_empty, 
    dfa241_T_empty, dfa241_T_empty, dfa241_T_empty, dfa241_T_empty, dfa241_T_empty, 
    dfa241_T_empty, dfa241_T_empty, dfa241_T_empty, dfa241_T_empty, dfa241_T_empty, 
    dfa241_T_empty, dfa241_T_empty, dfa241_T_empty, dfa241_T_empty, dfa241_T_empty, 
    dfa241_T_empty, dfa241_T_empty, dfa241_T_empty, dfa241_T_empty, dfa241_T_empty, 
    dfa241_T_empty, dfa241_T_empty, dfa241_T_empty, dfa241_T_empty, dfa241_T_empty	
};

static ANTLR3_INT32 dfa241_sst(pEmersonParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;
    
    _s	    = s;
    switch  (s)
    {
        case 0:
        
    	{
    	    ANTLR3_UINT32 LA241_1;

    	    ANTLR3_MARKER index241_1;


    		LA241_1 = LA(1);

    	 
    	    index241_1 = INDEX();

    	    REWINDLAST();

    	    s = -1;
    	    if ( (synpred284_Emerson(ctx)) )
    	    {
    	        s = 28;
    	    }

    	    else if ( (ANTLR3_TRUE) )
    	    {
    	        s = 2;
    	    }

    	 
    		SEEK(index241_1);

    	    if ( s>=0 ) 
    	    {
    		return s;
    	    }
    	}
    	break;
    }
    if (BACKTRACKING > 0)
    {
	FAILEDFLAG = ANTLR3_TRUE;
	return	-1;
    }    
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 514:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*";
    EXCEPTION->decisionNum  = 241;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 241
 */
static
ANTLR3_CYCLIC_DFA cdfa241
    =	{
	    241,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 514:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) dfa241_sst,
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa241_eot,	    /* EOT table			    */
	    dfa241_eof,	    /* EOF table			    */
	    dfa241_min,	    /* Minimum tokens for each state    */
	    dfa241_max,	    /* Maximum tokens for each state    */
	    dfa241_accept,	/* Accept table			    */
	    dfa241_special,	/* Special transition states	    */
	    dfa241_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 241
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 524:41: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
 */
static const ANTLR3_INT32 dfa245_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa245_eof[5] =
    {
	2, 2, -1, -1, 2
    };
static const ANTLR3_INT32 dfa245_min[5] =
    {
	94, 94, -1, -1, 94
    };
static const ANTLR3_INT32 dfa245_max[5] =
    {
	187, 198, -1, -1, 198
    };
static const ANTLR3_INT32 dfa245_accept[5] =
    {
	-1, -1, 2, 1, -1
    };
static const ANTLR3_INT32 dfa245_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa245_T_empty	    NULL

static const ANTLR3_INT32 dfa245_T0[] =
    {
	4, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa245_T1[] =
    {
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, 2, -1, 2, -1, -1, 
	-1, -1, -1, -1, 2, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa245_transitions[] =
{
    dfa245_T1, dfa245_T0, dfa245_T_empty, dfa245_T_empty, dfa245_T0	
};


/* Declare tracking structure for Cyclic DFA 245
 */
static
ANTLR3_CYCLIC_DFA cdfa245
    =	{
	    245,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"()* loopback of 524:41: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa245_eot,	    /* EOT table			    */
	    dfa245_eof,	    /* EOF table			    */
	    dfa245_min,	    /* Minimum tokens for each state    */
	    dfa245_max,	    /* Maximum tokens for each state    */
	    dfa245_accept,	/* Accept table			    */
	    dfa245_special,	/* Special transition states	    */
	    dfa245_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 245
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start program
 * .//Emerson.g:125:1: program : (a= LTERM )* sourceElements ( LTERM )* EOF -> ^( PROG sourceElements ) ;
 */
static EmersonParser_program_return
program(pEmersonParser ctx)
{   
    EmersonParser_program_return retval;
    ANTLR3_UINT32 program_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    a;
    pANTLR3_COMMON_TOKEN    LTERM2;
    pANTLR3_COMMON_TOKEN    EOF3;
    EmersonParser_sourceElements_return sourceElements1;
    #undef	RETURN_TYPE_sourceElements1
    #define	RETURN_TYPE_sourceElements1 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE a_tree;
    pANTLR3_BASE_TREE LTERM2_tree;
    pANTLR3_BASE_TREE EOF3_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    program_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(1)) )
    {
    	retval.start = 0;

        return retval; 
    }
    a       = NULL;
    LTERM2       = NULL;
    EOF3       = NULL;
    sourceElements1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    a_tree   = NULL;
    LTERM2_tree   = NULL;
    EOF3_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:126:2: ( (a= LTERM )* sourceElements ( LTERM )* EOF -> ^( PROG sourceElements ) )
        // .//Emerson.g:126:4: (a= LTERM )* sourceElements ( LTERM )* EOF
        {

            // .//Emerson.g:126:5: (a= LTERM )*

            for (;;)
            {
                int alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA1_0 = LA(1);
                    if ( (LA1_0 == LTERM) ) 
                    {
                        alt1=1;
                    }

                }
                switch (alt1) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: a= LTERM
            	    {
            	        a = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program585); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, a, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_sourceElements_in_program588);
            sourceElements1=sourceElements(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements1.tree, NULL); }

            // .//Emerson.g:126:28: ( LTERM )*

            for (;;)
            {
                int alt2=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA2_0 = LA(1);
                    if ( (LA2_0 == LTERM) ) 
                    {
                        alt2=1;
                    }

                }
                switch (alt2) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM2 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_program590); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM2, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */

            EOF3 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_program593); 
            if  (HASEXCEPTION())
            {
                goto ruleprogramEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF3, NULL); }


             
            /* AST REWRITE
             * elements          : sourceElements
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 126:39: -> ^( PROG sourceElements )
            	{
            	    // .//Emerson.g:126:42: ^( PROG sourceElements )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PROG, (pANTLR3_UINT8)"PROG"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(1, program_StartIndex); }
    return retval;
}
/* $ANTLR end program */

/** 
 * $ANTLR start sourceElements
 * .//Emerson.g:130:1: sourceElements : sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ ;
 */
static EmersonParser_sourceElements_return
sourceElements(pEmersonParser ctx)
{   
    EmersonParser_sourceElements_return retval;
    ANTLR3_UINT32 sourceElements_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM5;
    EmersonParser_sourceElement_return sourceElement4;
    #undef	RETURN_TYPE_sourceElement4
    #define	RETURN_TYPE_sourceElement4 EmersonParser_sourceElement_return

    EmersonParser_sourceElement_return sourceElement6;
    #undef	RETURN_TYPE_sourceElement6
    #define	RETURN_TYPE_sourceElement6 EmersonParser_sourceElement_return

    pANTLR3_BASE_TREE LTERM5_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElement;
    /* Initialize rule variables
     */
    sourceElements_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(2)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM5       = NULL;
    sourceElement4.tree = NULL;

    sourceElement6.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM5_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_sourceElement   = NULL;
    #define CREATE_stream_sourceElement  if (stream_sourceElement == NULL) {stream_sourceElement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:131:2: ( sourceElement ( ( LTERM )* sourceElement )* -> ( sourceElement )+ )
        // .//Emerson.g:131:4: sourceElement ( ( LTERM )* sourceElement )*
        {
            FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements614);
            sourceElement4=sourceElement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesourceElementsEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement4.tree, NULL); }

            // .//Emerson.g:131:18: ( ( LTERM )* sourceElement )*

            for (;;)
            {
                int alt4=2;
                alt4 = cdfa4.predict(ctx, RECOGNIZER, ISTREAM, &cdfa4);
                if  (HASEXCEPTION())
                {
                    goto rulesourceElementsEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt4) 
                {
            	case 1:
            	    // .//Emerson.g:131:19: ( LTERM )* sourceElement
            	    {

            	        // .//Emerson.g:131:19: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt3=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA3_0 = LA(1);
            	                if ( (LA3_0 == LTERM) ) 
            	                {
            	                    alt3=1;
            	                }

            	            }
            	            switch (alt3) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM5 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_sourceElements617); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulesourceElementsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM5, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop3;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop3: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_sourceElement_in_sourceElements620);
            	        sourceElement6=sourceElement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesourceElementsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_sourceElement; stream_sourceElement->add(stream_sourceElement, sourceElement6.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : sourceElement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 131:42: -> ( sourceElement )+
            	{
            	    if ((stream_sourceElement == NULL || !stream_sourceElement->hasNext(stream_sourceElement))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_sourceElement->hasNext(stream_sourceElement))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElement == NULL ? NULL : stream_sourceElement->nextTree(stream_sourceElement));

            	    	}
            	    	stream_sourceElement->reset(stream_sourceElement);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementsEx; /* Prevent compiler warnings */
    rulesourceElementsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_sourceElement != NULL) stream_sourceElement->free(stream_sourceElement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(2, sourceElements_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElements */

/** 
 * $ANTLR start sourceElement
 * .//Emerson.g:134:1: sourceElement : ( functionDeclaration -> functionDeclaration | statement -> statement );
 */
static EmersonParser_sourceElement_return
sourceElement(pEmersonParser ctx)
{   
    EmersonParser_sourceElement_return retval;
    ANTLR3_UINT32 sourceElement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_functionDeclaration_return functionDeclaration7;
    #undef	RETURN_TYPE_functionDeclaration7
    #define	RETURN_TYPE_functionDeclaration7 EmersonParser_functionDeclaration_return

    EmersonParser_statement_return statement8;
    #undef	RETURN_TYPE_statement8
    #define	RETURN_TYPE_statement8 EmersonParser_statement_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionDeclaration;
    /* Initialize rule variables
     */
    sourceElement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(3)) )
    {
    	retval.start = 0;

        return retval; 
    }
    functionDeclaration7.tree = NULL;

    statement8.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_functionDeclaration   = NULL;
    #define CREATE_stream_functionDeclaration  if (stream_functionDeclaration == NULL) {stream_functionDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionDeclaration"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:135:2: ( functionDeclaration -> functionDeclaration | statement -> statement )
            
            ANTLR3_UINT32 alt5;

            alt5=2;

            alt5 = cdfa5.predict(ctx, RECOGNIZER, ISTREAM, &cdfa5);
            if  (HASEXCEPTION())
            {
                goto rulesourceElementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt5) 
            {
        	case 1:
        	    // .//Emerson.g:135:4: functionDeclaration
        	    {
        	        FOLLOWPUSH(FOLLOW_functionDeclaration_in_sourceElement641);
        	        functionDeclaration7=functionDeclaration(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_functionDeclaration; stream_functionDeclaration->add(stream_functionDeclaration, functionDeclaration7.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : functionDeclaration
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 135:24: -> functionDeclaration
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionDeclaration == NULL ? NULL : stream_functionDeclaration->nextTree(stream_functionDeclaration));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:136:4: statement
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_sourceElement650);
        	        statement8=statement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesourceElementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement8.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : statement
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 136:14: -> statement
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulesourceElementEx; /* Prevent compiler warnings */
    rulesourceElementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_functionDeclaration != NULL) stream_functionDeclaration->free(stream_functionDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(3, sourceElement_StartIndex); }
    return retval;
}
/* $ANTLR end sourceElement */

/** 
 * $ANTLR start functionDeclaration
 * .//Emerson.g:140:1: functionDeclaration : 'function' ( LTERM )* Identifier ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_DECL Identifier formalParameterList functionBody ) ;
 */
static EmersonParser_functionDeclaration_return
functionDeclaration(pEmersonParser ctx)
{   
    EmersonParser_functionDeclaration_return retval;
    ANTLR3_UINT32 functionDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal9;
    pANTLR3_COMMON_TOKEN    LTERM10;
    pANTLR3_COMMON_TOKEN    Identifier11;
    pANTLR3_COMMON_TOKEN    LTERM12;
    pANTLR3_COMMON_TOKEN    LTERM14;
    EmersonParser_formalParameterList_return formalParameterList13;
    #undef	RETURN_TYPE_formalParameterList13
    #define	RETURN_TYPE_formalParameterList13 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody15;
    #undef	RETURN_TYPE_functionBody15
    #define	RETURN_TYPE_functionBody15 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal9_tree;
    pANTLR3_BASE_TREE LTERM10_tree;
    pANTLR3_BASE_TREE Identifier11_tree;
    pANTLR3_BASE_TREE LTERM12_tree;
    pANTLR3_BASE_TREE LTERM14_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_121;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(4)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal9       = NULL;
    LTERM10       = NULL;
    Identifier11       = NULL;
    LTERM12       = NULL;
    LTERM14       = NULL;
    formalParameterList13.tree = NULL;

    functionBody15.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal9_tree   = NULL;
    LTERM10_tree   = NULL;
    Identifier11_tree   = NULL;
    LTERM12_tree   = NULL;
    LTERM14_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_121   = NULL;
    #define CREATE_stream_121  if (stream_121 == NULL) {stream_121 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 121"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:141:2: ( 'function' ( LTERM )* Identifier ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_DECL Identifier formalParameterList functionBody ) )
        // .//Emerson.g:141:4: 'function' ( LTERM )* Identifier ( LTERM )* formalParameterList ( LTERM )* functionBody
        {
            string_literal9 = (pANTLR3_COMMON_TOKEN) MATCHT(121, &FOLLOW_121_in_functionDeclaration667); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_121; stream_121->add(stream_121, string_literal9, NULL); }


            // .//Emerson.g:141:15: ( LTERM )*

            for (;;)
            {
                int alt6=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA6_0 = LA(1);
                    if ( (LA6_0 == LTERM) ) 
                    {
                        alt6=1;
                    }

                }
                switch (alt6) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM10 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration669); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM10, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop6;	/* break out of the loop */
            	    break;
                }
            }
            loop6: ; /* Jump out to here if this rule does not match */

            Identifier11 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionDeclaration672); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier11, NULL); }


            // .//Emerson.g:141:33: ( LTERM )*

            for (;;)
            {
                int alt7=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA7_0 = LA(1);
                    if ( (LA7_0 == LTERM) ) 
                    {
                        alt7=1;
                    }

                }
                switch (alt7) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM12 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration674); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM12, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_formalParameterList_in_functionDeclaration677);
            formalParameterList13=formalParameterList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList13.tree, NULL); }

            // .//Emerson.g:141:60: ( LTERM )*

            for (;;)
            {
                int alt8=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA8_0 = LA(1);
                    if ( (LA8_0 == LTERM) ) 
                    {
                        alt8=1;
                    }

                }
                switch (alt8) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM14 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionDeclaration679); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM14, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionDeclaration682);
            functionBody15=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody15.tree, NULL); }

             
            /* AST REWRITE
             * elements          : Identifier, formalParameterList, functionBody
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 141:80: -> ^( FUNC_DECL Identifier formalParameterList functionBody )
            	{
            	    // .//Emerson.g:141:83: ^( FUNC_DECL Identifier formalParameterList functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_DECL, (pANTLR3_UINT8)"FUNC_DECL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionDeclarationEx; /* Prevent compiler warnings */
    rulefunctionDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_121 != NULL) stream_121->free(stream_121);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(4, functionDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end functionDeclaration */

/** 
 * $ANTLR start functionExpression
 * .//Emerson.g:144:1: functionExpression : 'function' ( LTERM )* ( Identifier )? ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody ) ;
 */
static EmersonParser_functionExpression_return
functionExpression(pEmersonParser ctx)
{   
    EmersonParser_functionExpression_return retval;
    ANTLR3_UINT32 functionExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal16;
    pANTLR3_COMMON_TOKEN    LTERM17;
    pANTLR3_COMMON_TOKEN    Identifier18;
    pANTLR3_COMMON_TOKEN    LTERM19;
    pANTLR3_COMMON_TOKEN    LTERM21;
    EmersonParser_formalParameterList_return formalParameterList20;
    #undef	RETURN_TYPE_formalParameterList20
    #define	RETURN_TYPE_formalParameterList20 EmersonParser_formalParameterList_return

    EmersonParser_functionBody_return functionBody22;
    #undef	RETURN_TYPE_functionBody22
    #define	RETURN_TYPE_functionBody22 EmersonParser_functionBody_return

    pANTLR3_BASE_TREE string_literal16_tree;
    pANTLR3_BASE_TREE LTERM17_tree;
    pANTLR3_BASE_TREE Identifier18_tree;
    pANTLR3_BASE_TREE LTERM19_tree;
    pANTLR3_BASE_TREE LTERM21_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_121;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionBody;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_formalParameterList;
    /* Initialize rule variables
     */
    functionExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(5)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal16       = NULL;
    LTERM17       = NULL;
    Identifier18       = NULL;
    LTERM19       = NULL;
    LTERM21       = NULL;
    formalParameterList20.tree = NULL;

    functionBody22.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal16_tree   = NULL;
    LTERM17_tree   = NULL;
    Identifier18_tree   = NULL;
    LTERM19_tree   = NULL;
    LTERM21_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_121   = NULL;
    #define CREATE_stream_121  if (stream_121 == NULL) {stream_121 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 121"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_functionBody   = NULL;
    #define CREATE_stream_functionBody  if (stream_functionBody == NULL) {stream_functionBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionBody"); }
    stream_formalParameterList   = NULL;
    #define CREATE_stream_formalParameterList  if (stream_formalParameterList == NULL) {stream_formalParameterList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule formalParameterList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:145:2: ( 'function' ( LTERM )* ( Identifier )? ( LTERM )* formalParameterList ( LTERM )* functionBody -> ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody ) )
        // .//Emerson.g:145:4: 'function' ( LTERM )* ( Identifier )? ( LTERM )* formalParameterList ( LTERM )* functionBody
        {
            string_literal16 = (pANTLR3_COMMON_TOKEN) MATCHT(121, &FOLLOW_121_in_functionExpression706); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_121; stream_121->add(stream_121, string_literal16, NULL); }


            // .//Emerson.g:145:15: ( LTERM )*

            for (;;)
            {
                int alt9=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA9_0 = LA(1);
                    if ( (LA9_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA9_2 = LA(2);
                            if ( (synpred9_Emerson(ctx)) ) 
                            {
                                alt9=1;
                            }

                        }
                    }

                }
                switch (alt9) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM17 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression708); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM17, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:145:22: ( Identifier )?
            {
                int alt10=2;
                {
                    int LA10_0 = LA(1);
                    if ( (LA10_0 == Identifier) ) 
                    {
                        alt10=1;
                    }
                }
                switch (alt10) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier18 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_functionExpression711); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier18, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:145:34: ( LTERM )*

            for (;;)
            {
                int alt11=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA11_0 = LA(1);
                    if ( (LA11_0 == LTERM) ) 
                    {
                        alt11=1;
                    }

                }
                switch (alt11) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM19 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression714); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM19, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_formalParameterList_in_functionExpression717);
            formalParameterList20=formalParameterList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_formalParameterList; stream_formalParameterList->add(stream_formalParameterList, formalParameterList20.tree, NULL); }

            // .//Emerson.g:145:61: ( LTERM )*

            for (;;)
            {
                int alt12=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA12_0 = LA(1);
                    if ( (LA12_0 == LTERM) ) 
                    {
                        alt12=1;
                    }

                }
                switch (alt12) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM21 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionExpression719); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefunctionExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM21, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_functionBody_in_functionExpression722);
            functionBody22=functionBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_functionBody; stream_functionBody->add(stream_functionBody, functionBody22.tree, NULL); }

             
            /* AST REWRITE
             * elements          : formalParameterList, Identifier, functionBody
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 145:81: -> ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody )
            	{
            	    // .//Emerson.g:145:84: ^( FUNC_EXPR ( Identifier )? formalParameterList functionBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_EXPR, (pANTLR3_UINT8)"FUNC_EXPR"), root_1));

            	        // .//Emerson.g:145:97: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_formalParameterList == NULL ? NULL : stream_formalParameterList->nextTree(stream_formalParameterList));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_functionBody == NULL ? NULL : stream_functionBody->nextTree(stream_functionBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionExpressionEx; /* Prevent compiler warnings */
    rulefunctionExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_121 != NULL) stream_121->free(stream_121);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_functionBody != NULL) stream_functionBody->free(stream_functionBody);
        if (stream_formalParameterList != NULL) stream_formalParameterList->free(stream_formalParameterList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(5, functionExpression_StartIndex); }
    return retval;
}
/* $ANTLR end functionExpression */

/** 
 * $ANTLR start formalParameterList
 * .//Emerson.g:148:1: formalParameterList : '(' ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )? ( LTERM )* ')' -> ^( FUNC_PARAMS ( $i1)? ( $i2)* ) ;
 */
static EmersonParser_formalParameterList_return
formalParameterList(pEmersonParser ctx)
{   
    EmersonParser_formalParameterList_return retval;
    ANTLR3_UINT32 formalParameterList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    i1;
    pANTLR3_COMMON_TOKEN    i2;
    pANTLR3_COMMON_TOKEN    char_literal23;
    pANTLR3_COMMON_TOKEN    LTERM24;
    pANTLR3_COMMON_TOKEN    LTERM25;
    pANTLR3_COMMON_TOKEN    char_literal26;
    pANTLR3_COMMON_TOKEN    LTERM27;
    pANTLR3_COMMON_TOKEN    LTERM28;
    pANTLR3_COMMON_TOKEN    char_literal29;

    pANTLR3_BASE_TREE i1_tree;
    pANTLR3_BASE_TREE i2_tree;
    pANTLR3_BASE_TREE char_literal23_tree;
    pANTLR3_BASE_TREE LTERM24_tree;
    pANTLR3_BASE_TREE LTERM25_tree;
    pANTLR3_BASE_TREE char_literal26_tree;
    pANTLR3_BASE_TREE LTERM27_tree;
    pANTLR3_BASE_TREE LTERM28_tree;
    pANTLR3_BASE_TREE char_literal29_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_122;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_123;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_124;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    formalParameterList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(6)) )
    {
    	retval.start = 0;

        return retval; 
    }
    i1       = NULL;
    i2       = NULL;
    char_literal23       = NULL;
    LTERM24       = NULL;
    LTERM25       = NULL;
    char_literal26       = NULL;
    LTERM27       = NULL;
    LTERM28       = NULL;
    char_literal29       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    i1_tree   = NULL;
    i2_tree   = NULL;
    char_literal23_tree   = NULL;
    LTERM24_tree   = NULL;
    LTERM25_tree   = NULL;
    char_literal26_tree   = NULL;
    LTERM27_tree   = NULL;
    LTERM28_tree   = NULL;
    char_literal29_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_122   = NULL;
    #define CREATE_stream_122  if (stream_122 == NULL) {stream_122 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 122"); } 
    stream_123   = NULL;
    #define CREATE_stream_123  if (stream_123 == NULL) {stream_123 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 123"); } 
    stream_124   = NULL;
    #define CREATE_stream_124  if (stream_124 == NULL) {stream_124 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 124"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:149:2: ( '(' ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )? ( LTERM )* ')' -> ^( FUNC_PARAMS ( $i1)? ( $i2)* ) )
        // .//Emerson.g:149:4: '(' ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )? ( LTERM )* ')'
        {
            char_literal23 = (pANTLR3_COMMON_TOKEN) MATCHT(122, &FOLLOW_122_in_formalParameterList749); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_122; stream_122->add(stream_122, char_literal23, NULL); }


            // .//Emerson.g:149:8: ( ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )* )?
            {
                int alt17=2;
                alt17 = cdfa17.predict(ctx, RECOGNIZER, ISTREAM, &cdfa17);
                if  (HASEXCEPTION())
                {
                    goto ruleformalParameterListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt17) 
                {
            	case 1:
            	    // .//Emerson.g:149:9: ( LTERM )* i1= Identifier ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*
            	    {

            	        // .//Emerson.g:149:9: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt13=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA13_0 = LA(1);
            	                if ( (LA13_0 == LTERM) ) 
            	                {
            	                    alt13=1;
            	                }

            	            }
            	            switch (alt13) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM24 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList752); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM24, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop13;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop13: ; /* Jump out to here if this rule does not match */

            	        i1 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList757); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, i1, NULL); }


            	        // .//Emerson.g:149:30: ( ( LTERM )* ',' ( LTERM )* i2= Identifier )*

            	        for (;;)
            	        {
            	            int alt16=2;
            	            alt16 = cdfa16.predict(ctx, RECOGNIZER, ISTREAM, &cdfa16);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleformalParameterListEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt16) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:149:31: ( LTERM )* ',' ( LTERM )* i2= Identifier
            	        	    {

            	        	        // .//Emerson.g:149:31: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt14=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA14_0 = LA(1);
            	        	                if ( (LA14_0 == LTERM) ) 
            	        	                {
            	        	                    alt14=1;
            	        	                }

            	        	            }
            	        	            switch (alt14) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM25 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList760); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleformalParameterListEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM25, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop14;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop14: ; /* Jump out to here if this rule does not match */

            	        	        char_literal26 = (pANTLR3_COMMON_TOKEN) MATCHT(123, &FOLLOW_123_in_formalParameterList763); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_123; stream_123->add(stream_123, char_literal26, NULL); }


            	        	        // .//Emerson.g:149:42: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt15=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA15_0 = LA(1);
            	        	                if ( (LA15_0 == LTERM) ) 
            	        	                {
            	        	                    alt15=1;
            	        	                }

            	        	            }
            	        	            switch (alt15) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM27 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList765); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleformalParameterListEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM27, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop15;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop15: ; /* Jump out to here if this rule does not match */

            	        	        i2 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_formalParameterList770); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleformalParameterListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, i2, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop16;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop16: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // .//Emerson.g:149:67: ( LTERM )*

            for (;;)
            {
                int alt18=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA18_0 = LA(1);
                    if ( (LA18_0 == LTERM) ) 
                    {
                        alt18=1;
                    }

                }
                switch (alt18) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM28 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_formalParameterList776); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleformalParameterListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM28, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop18;	/* break out of the loop */
            	    break;
                }
            }
            loop18: ; /* Jump out to here if this rule does not match */

            char_literal29 = (pANTLR3_COMMON_TOKEN) MATCHT(124, &FOLLOW_124_in_formalParameterList779); 
            if  (HASEXCEPTION())
            {
                goto ruleformalParameterListEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_124; stream_124->add(stream_124, char_literal29, NULL); }


             
            /* AST REWRITE
             * elements          : i1, i2
             * token labels      : i2, i1
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_i2;
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_i1;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_i2=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token i2", i2);
            	stream_i1=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token i1", i1);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 149:78: -> ^( FUNC_PARAMS ( $i1)? ( $i2)* )
            	{
            	    // .//Emerson.g:149:81: ^( FUNC_PARAMS ( $i1)? ( $i2)* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_PARAMS, (pANTLR3_UINT8)"FUNC_PARAMS"), root_1));

            	        // .//Emerson.g:149:96: ( $i1)?
            	        {
            	        	if ( (stream_i1 != NULL && stream_i1->hasNext(stream_i1))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_i1 == NULL ? NULL : stream_i1->nextNode(stream_i1));

            	        	}
            	        	if ( stream_i1 != NULL) stream_i1->reset(stream_i1);

            	        }
            	        // .//Emerson.g:149:101: ( $i2)*
            	        {
            	        	while ( (stream_i2 != NULL && stream_i2->hasNext(stream_i2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_i2 == NULL ? NULL : stream_i2->nextNode(stream_i2));

            	        	}
            	        	if (stream_i2 != NULL) stream_i2->reset(stream_i2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_i2 != NULL) stream_i2->free(stream_i2); 
            	if (stream_i1 != NULL) stream_i1->free(stream_i1); 
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleformalParameterListEx; /* Prevent compiler warnings */
    ruleformalParameterListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_122 != NULL) stream_122->free(stream_122);
        if (stream_123 != NULL) stream_123->free(stream_123);
        if (stream_124 != NULL) stream_124->free(stream_124);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(6, formalParameterList_StartIndex); }
    return retval;
}
/* $ANTLR end formalParameterList */

/** 
 * $ANTLR start functionBody
 * .//Emerson.g:152:1: functionBody : ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' );
 */
static EmersonParser_functionBody_return
functionBody(pEmersonParser ctx)
{   
    EmersonParser_functionBody_return retval;
    ANTLR3_UINT32 functionBody_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal30;
    pANTLR3_COMMON_TOKEN    LTERM31;
    pANTLR3_COMMON_TOKEN    char_literal32;
    pANTLR3_COMMON_TOKEN    char_literal33;
    pANTLR3_COMMON_TOKEN    LTERM34;
    pANTLR3_COMMON_TOKEN    LTERM36;
    pANTLR3_COMMON_TOKEN    char_literal37;
    EmersonParser_sourceElements_return sourceElements35;
    #undef	RETURN_TYPE_sourceElements35
    #define	RETURN_TYPE_sourceElements35 EmersonParser_sourceElements_return

    pANTLR3_BASE_TREE char_literal30_tree;
    pANTLR3_BASE_TREE LTERM31_tree;
    pANTLR3_BASE_TREE char_literal32_tree;
    pANTLR3_BASE_TREE char_literal33_tree;
    pANTLR3_BASE_TREE LTERM34_tree;
    pANTLR3_BASE_TREE LTERM36_tree;
    pANTLR3_BASE_TREE char_literal37_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_sourceElements;
    /* Initialize rule variables
     */
    functionBody_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(7)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal30       = NULL;
    LTERM31       = NULL;
    char_literal32       = NULL;
    char_literal33       = NULL;
    LTERM34       = NULL;
    LTERM36       = NULL;
    char_literal37       = NULL;
    sourceElements35.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal30_tree   = NULL;
    LTERM31_tree   = NULL;
    char_literal32_tree   = NULL;
    char_literal33_tree   = NULL;
    LTERM34_tree   = NULL;
    LTERM36_tree   = NULL;
    char_literal37_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_sourceElements   = NULL;
    #define CREATE_stream_sourceElements  if (stream_sourceElements == NULL) {stream_sourceElements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule sourceElements"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:153:2: ( '{' ( LTERM )* '}' -> ^( EMPTY_FUNC_BODY ) | '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt22;

            alt22=2;

            alt22 = cdfa22.predict(ctx, RECOGNIZER, ISTREAM, &cdfa22);
            if  (HASEXCEPTION())
            {
                goto rulefunctionBodyEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt22) 
            {
        	case 1:
        	    // .//Emerson.g:153:4: '{' ( LTERM )* '}'
        	    {
        	        char_literal30 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_functionBody805); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal30, NULL); }


        	        // .//Emerson.g:153:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt19=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA19_0 = LA(1);
        	                if ( (LA19_0 == LTERM) ) 
        	                {
        	                    alt19=1;
        	                }

        	            }
        	            switch (alt19) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM31 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody807); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM31, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop19;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop19: ; /* Jump out to here if this rule does not match */

        	        char_literal32 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_functionBody810); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal32, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 153:19: -> ^( EMPTY_FUNC_BODY )
        	        	{
        	        	    // .//Emerson.g:153:22: ^( EMPTY_FUNC_BODY )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EMPTY_FUNC_BODY, (pANTLR3_UINT8)"EMPTY_FUNC_BODY"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:154:4: '{' ( LTERM )* ( sourceElements -> sourceElements ) ( LTERM )* '}'
        	    {
        	        char_literal33 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_functionBody821); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal33, NULL); }


        	        // .//Emerson.g:154:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt20=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA20_0 = LA(1);
        	                if ( (LA20_0 == LTERM) ) 
        	                {
        	                    alt20=1;
        	                }

        	            }
        	            switch (alt20) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM34 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody823); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM34, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop20;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop20: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:154:15: ( sourceElements -> sourceElements )
        	        // .//Emerson.g:154:16: sourceElements
        	        {
        	            FOLLOWPUSH(FOLLOW_sourceElements_in_functionBody827);
        	            sourceElements35=sourceElements(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulefunctionBodyEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_sourceElements; stream_sourceElements->add(stream_sourceElements, sourceElements35.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : sourceElements
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 154:31: -> sourceElements
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_sourceElements == NULL ? NULL : stream_sourceElements->nextTree(stream_sourceElements));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:154:50: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt21=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA21_0 = LA(1);
        	                if ( (LA21_0 == LTERM) ) 
        	                {
        	                    alt21=1;
        	                }

        	            }
        	            switch (alt21) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM36 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_functionBody834); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunctionBodyEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM36, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop21;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop21: ; /* Jump out to here if this rule does not match */

        	        char_literal37 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_functionBody837); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunctionBodyEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal37, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionBodyEx; /* Prevent compiler warnings */
    rulefunctionBodyEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_sourceElements != NULL) stream_sourceElements->free(stream_sourceElements);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(7, functionBody_StartIndex); }
    return retval;
}
/* $ANTLR end functionBody */

/** 
 * $ANTLR start statement
 * .//Emerson.g:158:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement | msgSendStatement | msgRecvStatement );
 */
static EmersonParser_statement_return
statement(pEmersonParser ctx)
{   
    EmersonParser_statement_return retval;
    ANTLR3_UINT32 statement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_statementBlock_return statementBlock38;
    #undef	RETURN_TYPE_statementBlock38
    #define	RETURN_TYPE_statementBlock38 EmersonParser_statementBlock_return

    EmersonParser_variableStatement_return variableStatement39;
    #undef	RETURN_TYPE_variableStatement39
    #define	RETURN_TYPE_variableStatement39 EmersonParser_variableStatement_return

    EmersonParser_emptyStatement_return emptyStatement40;
    #undef	RETURN_TYPE_emptyStatement40
    #define	RETURN_TYPE_emptyStatement40 EmersonParser_emptyStatement_return

    EmersonParser_expressionStatement_return expressionStatement41;
    #undef	RETURN_TYPE_expressionStatement41
    #define	RETURN_TYPE_expressionStatement41 EmersonParser_expressionStatement_return

    EmersonParser_ifStatement_return ifStatement42;
    #undef	RETURN_TYPE_ifStatement42
    #define	RETURN_TYPE_ifStatement42 EmersonParser_ifStatement_return

    EmersonParser_iterationStatement_return iterationStatement43;
    #undef	RETURN_TYPE_iterationStatement43
    #define	RETURN_TYPE_iterationStatement43 EmersonParser_iterationStatement_return

    EmersonParser_continueStatement_return continueStatement44;
    #undef	RETURN_TYPE_continueStatement44
    #define	RETURN_TYPE_continueStatement44 EmersonParser_continueStatement_return

    EmersonParser_breakStatement_return breakStatement45;
    #undef	RETURN_TYPE_breakStatement45
    #define	RETURN_TYPE_breakStatement45 EmersonParser_breakStatement_return

    EmersonParser_returnStatement_return returnStatement46;
    #undef	RETURN_TYPE_returnStatement46
    #define	RETURN_TYPE_returnStatement46 EmersonParser_returnStatement_return

    EmersonParser_withStatement_return withStatement47;
    #undef	RETURN_TYPE_withStatement47
    #define	RETURN_TYPE_withStatement47 EmersonParser_withStatement_return

    EmersonParser_labelledStatement_return labelledStatement48;
    #undef	RETURN_TYPE_labelledStatement48
    #define	RETURN_TYPE_labelledStatement48 EmersonParser_labelledStatement_return

    EmersonParser_switchStatement_return switchStatement49;
    #undef	RETURN_TYPE_switchStatement49
    #define	RETURN_TYPE_switchStatement49 EmersonParser_switchStatement_return

    EmersonParser_throwStatement_return throwStatement50;
    #undef	RETURN_TYPE_throwStatement50
    #define	RETURN_TYPE_throwStatement50 EmersonParser_throwStatement_return

    EmersonParser_tryStatement_return tryStatement51;
    #undef	RETURN_TYPE_tryStatement51
    #define	RETURN_TYPE_tryStatement51 EmersonParser_tryStatement_return

    EmersonParser_msgSendStatement_return msgSendStatement52;
    #undef	RETURN_TYPE_msgSendStatement52
    #define	RETURN_TYPE_msgSendStatement52 EmersonParser_msgSendStatement_return

    EmersonParser_msgRecvStatement_return msgRecvStatement53;
    #undef	RETURN_TYPE_msgRecvStatement53
    #define	RETURN_TYPE_msgRecvStatement53 EmersonParser_msgRecvStatement_return


    /* Initialize rule variables
     */
    statement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(8)) )
    {
    	retval.start = 0;

        return retval; 
    }
    statementBlock38.tree = NULL;

    variableStatement39.tree = NULL;

    emptyStatement40.tree = NULL;

    expressionStatement41.tree = NULL;

    ifStatement42.tree = NULL;

    iterationStatement43.tree = NULL;

    continueStatement44.tree = NULL;

    breakStatement45.tree = NULL;

    returnStatement46.tree = NULL;

    withStatement47.tree = NULL;

    labelledStatement48.tree = NULL;

    switchStatement49.tree = NULL;

    throwStatement50.tree = NULL;

    tryStatement51.tree = NULL;

    msgSendStatement52.tree = NULL;

    msgRecvStatement53.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:159:2: ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement | msgSendStatement | msgRecvStatement )
            
            ANTLR3_UINT32 alt23;

            alt23=16;

            alt23 = cdfa23.predict(ctx, RECOGNIZER, ISTREAM, &cdfa23);
            if  (HASEXCEPTION())
            {
                goto rulestatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt23) 
            {
        	case 1:
        	    // .//Emerson.g:159:4: statementBlock
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_statementBlock_in_statement849);
        	        statementBlock38=statementBlock(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, statementBlock38.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:160:4: variableStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_variableStatement_in_statement854);
        	        variableStatement39=variableStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, variableStatement39.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:161:4: emptyStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_emptyStatement_in_statement859);
        	        emptyStatement40=emptyStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, emptyStatement40.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:162:4: expressionStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionStatement_in_statement864);
        	        expressionStatement41=expressionStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionStatement41.tree);

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:163:4: ifStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_ifStatement_in_statement869);
        	        ifStatement42=ifStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, ifStatement42.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:164:4: iterationStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_iterationStatement_in_statement874);
        	        iterationStatement43=iterationStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, iterationStatement43.tree);

        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:165:4: continueStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_continueStatement_in_statement879);
        	        continueStatement44=continueStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, continueStatement44.tree);

        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:166:4: breakStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_breakStatement_in_statement884);
        	        breakStatement45=breakStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, breakStatement45.tree);

        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:167:4: returnStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_returnStatement_in_statement889);
        	        returnStatement46=returnStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, returnStatement46.tree);

        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:168:4: withStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_withStatement_in_statement894);
        	        withStatement47=withStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, withStatement47.tree);

        	    }
        	    break;
        	case 11:
        	    // .//Emerson.g:169:4: labelledStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_labelledStatement_in_statement899);
        	        labelledStatement48=labelledStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, labelledStatement48.tree);

        	    }
        	    break;
        	case 12:
        	    // .//Emerson.g:170:4: switchStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_switchStatement_in_statement904);
        	        switchStatement49=switchStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, switchStatement49.tree);

        	    }
        	    break;
        	case 13:
        	    // .//Emerson.g:171:4: throwStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_throwStatement_in_statement909);
        	        throwStatement50=throwStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, throwStatement50.tree);

        	    }
        	    break;
        	case 14:
        	    // .//Emerson.g:172:4: tryStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_tryStatement_in_statement914);
        	        tryStatement51=tryStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, tryStatement51.tree);

        	    }
        	    break;
        	case 15:
        	    // .//Emerson.g:173:4: msgSendStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_msgSendStatement_in_statement919);
        	        msgSendStatement52=msgSendStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, msgSendStatement52.tree);

        	    }
        	    break;
        	case 16:
        	    // .//Emerson.g:174:4: msgRecvStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_msgRecvStatement_in_statement924);
        	        msgRecvStatement53=msgRecvStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, msgRecvStatement53.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(8, statement_StartIndex); }
    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start statementBlock
 * .//Emerson.g:177:1: statementBlock : ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' );
 */
static EmersonParser_statementBlock_return
statementBlock(pEmersonParser ctx)
{   
    EmersonParser_statementBlock_return retval;
    ANTLR3_UINT32 statementBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal54;
    pANTLR3_COMMON_TOKEN    LTERM55;
    pANTLR3_COMMON_TOKEN    char_literal56;
    pANTLR3_COMMON_TOKEN    char_literal57;
    pANTLR3_COMMON_TOKEN    LTERM58;
    pANTLR3_COMMON_TOKEN    LTERM60;
    pANTLR3_COMMON_TOKEN    char_literal61;
    EmersonParser_statementList_return statementList59;
    #undef	RETURN_TYPE_statementList59
    #define	RETURN_TYPE_statementList59 EmersonParser_statementList_return

    pANTLR3_BASE_TREE char_literal54_tree;
    pANTLR3_BASE_TREE LTERM55_tree;
    pANTLR3_BASE_TREE char_literal56_tree;
    pANTLR3_BASE_TREE char_literal57_tree;
    pANTLR3_BASE_TREE LTERM58_tree;
    pANTLR3_BASE_TREE LTERM60_tree;
    pANTLR3_BASE_TREE char_literal61_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    statementBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(9)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal54       = NULL;
    LTERM55       = NULL;
    char_literal56       = NULL;
    char_literal57       = NULL;
    LTERM58       = NULL;
    LTERM60       = NULL;
    char_literal61       = NULL;
    statementList59.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal54_tree   = NULL;
    LTERM55_tree   = NULL;
    char_literal56_tree   = NULL;
    char_literal57_tree   = NULL;
    LTERM58_tree   = NULL;
    LTERM60_tree   = NULL;
    char_literal61_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:178:2: ( '{' ( LTERM )* '}' | '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}' )
            
            ANTLR3_UINT32 alt27;

            alt27=2;

            alt27 = cdfa27.predict(ctx, RECOGNIZER, ISTREAM, &cdfa27);
            if  (HASEXCEPTION())
            {
                goto rulestatementBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt27) 
            {
        	case 1:
        	    // .//Emerson.g:178:4: '{' ( LTERM )* '}'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        char_literal54 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_statementBlock936); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        char_literal54_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal54));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal54_tree);
        	        }

        	        // .//Emerson.g:178:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt24=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA24_0 = LA(1);
        	                if ( (LA24_0 == LTERM) ) 
        	                {
        	                    alt24=1;
        	                }

        	            }
        	            switch (alt24) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM55 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock938); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) {
        	        	        LTERM55_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, LTERM55));
        	        	        ADAPTOR->addChild(ADAPTOR, root_0, LTERM55_tree);
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop24;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop24: ; /* Jump out to here if this rule does not match */

        	        char_literal56 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_statementBlock941); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        char_literal56_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal56));
        	        ADAPTOR->addChild(ADAPTOR, root_0, char_literal56_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:179:4: '{' ( LTERM )* ( statementList -> statementList ) ( LTERM )* '}'
        	    {
        	        char_literal57 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_statementBlock946); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal57, NULL); }


        	        // .//Emerson.g:179:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt25=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA25_0 = LA(1);
        	                if ( (LA25_0 == LTERM) ) 
        	                {
        	                    alt25=1;
        	                }

        	            }
        	            switch (alt25) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM58 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock948); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM58, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop25;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop25: ; /* Jump out to here if this rule does not match */

        	        // .//Emerson.g:179:15: ( statementList -> statementList )
        	        // .//Emerson.g:179:16: statementList
        	        {
        	            FOLLOWPUSH(FOLLOW_statementList_in_statementBlock952);
        	            statementList59=statementList(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulestatementBlockEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList59.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : statementList
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 179:29: -> statementList
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:179:46: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt26=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA26_0 = LA(1);
        	                if ( (LA26_0 == LTERM) ) 
        	                {
        	                    alt26=1;
        	                }

        	            }
        	            switch (alt26) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM60 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementBlock957); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulestatementBlockEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM60, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop26;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop26: ; /* Jump out to here if this rule does not match */

        	        char_literal61 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_statementBlock960); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementBlockEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal61, NULL); }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementBlockEx; /* Prevent compiler warnings */
    rulestatementBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(9, statementBlock_StartIndex); }
    return retval;
}
/* $ANTLR end statementBlock */

/** 
 * $ANTLR start statementList
 * .//Emerson.g:182:1: statementList : statement ( ( LTERM )* statement )* -> ^( SLIST ( statement )+ ) ;
 */
static EmersonParser_statementList_return
statementList(pEmersonParser ctx)
{   
    EmersonParser_statementList_return retval;
    ANTLR3_UINT32 statementList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM63;
    EmersonParser_statement_return statement62;
    #undef	RETURN_TYPE_statement62
    #define	RETURN_TYPE_statement62 EmersonParser_statement_return

    EmersonParser_statement_return statement64;
    #undef	RETURN_TYPE_statement64
    #define	RETURN_TYPE_statement64 EmersonParser_statement_return

    pANTLR3_BASE_TREE LTERM63_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    statementList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(10)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM63       = NULL;
    statement62.tree = NULL;

    statement64.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM63_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:183:2: ( statement ( ( LTERM )* statement )* -> ^( SLIST ( statement )+ ) )
        // .//Emerson.g:183:4: statement ( ( LTERM )* statement )*
        {
            FOLLOWPUSH(FOLLOW_statement_in_statementList973);
            statement62=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestatementListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement62.tree, NULL); }

            // .//Emerson.g:183:14: ( ( LTERM )* statement )*

            for (;;)
            {
                int alt29=2;
                alt29 = cdfa29.predict(ctx, RECOGNIZER, ISTREAM, &cdfa29);
                if  (HASEXCEPTION())
                {
                    goto rulestatementListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt29) 
                {
            	case 1:
            	    // .//Emerson.g:183:15: ( LTERM )* statement
            	    {

            	        // .//Emerson.g:183:15: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt28=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA28_0 = LA(1);
            	                if ( (LA28_0 == LTERM) ) 
            	                {
            	                    alt28=1;
            	                }

            	            }
            	            switch (alt28) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM63 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_statementList976); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulestatementListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM63, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop28;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop28: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_statement_in_statementList979);
            	        statement64=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatementListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement64.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop29;	/* break out of the loop */
            	    break;
                }
            }
            loop29: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 183:34: -> ^( SLIST ( statement )+ )
            	{
            	    // .//Emerson.g:183:37: ^( SLIST ( statement )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SLIST, (pANTLR3_UINT8)"SLIST"), root_1));

            	        if ((stream_statement == NULL || !stream_statement->hasNext(stream_statement))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_statement->hasNext(stream_statement))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        	}
            	        	stream_statement->reset(stream_statement);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementListEx; /* Prevent compiler warnings */
    rulestatementListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(10, statementList_StartIndex); }
    return retval;
}
/* $ANTLR end statementList */

/** 
 * $ANTLR start variableStatement
 * .//Emerson.g:186:1: variableStatement : 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) ;
 */
static EmersonParser_variableStatement_return
variableStatement(pEmersonParser ctx)
{   
    EmersonParser_variableStatement_return retval;
    ANTLR3_UINT32 variableStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal65;
    pANTLR3_COMMON_TOKEN    LTERM66;
    pANTLR3_COMMON_TOKEN    LTERM68;
    pANTLR3_COMMON_TOKEN    char_literal69;
    EmersonParser_variableDeclarationList_return variableDeclarationList67;
    #undef	RETURN_TYPE_variableDeclarationList67
    #define	RETURN_TYPE_variableDeclarationList67 EmersonParser_variableDeclarationList_return

    pANTLR3_BASE_TREE string_literal65_tree;
    pANTLR3_BASE_TREE LTERM66_tree;
    pANTLR3_BASE_TREE LTERM68_tree;
    pANTLR3_BASE_TREE char_literal69_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationList;
    /* Initialize rule variables
     */
    variableStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(11)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal65       = NULL;
    LTERM66       = NULL;
    LTERM68       = NULL;
    char_literal69       = NULL;
    variableDeclarationList67.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal65_tree   = NULL;
    LTERM66_tree   = NULL;
    LTERM68_tree   = NULL;
    char_literal69_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_variableDeclarationList   = NULL;
    #define CREATE_stream_variableDeclarationList  if (stream_variableDeclarationList == NULL) {stream_variableDeclarationList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:187:2: ( 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' ) -> ^( VARLIST variableDeclarationList ) )
        // .//Emerson.g:187:4: 'var' ( LTERM )* variableDeclarationList ( LTERM | ';' )
        {
            string_literal65 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_variableStatement1002); 
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, string_literal65, NULL); }


            // .//Emerson.g:187:10: ( LTERM )*

            for (;;)
            {
                int alt30=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA30_0 = LA(1);
                    if ( (LA30_0 == LTERM) ) 
                    {
                        alt30=1;
                    }

                }
                switch (alt30) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM66 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1004); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM66, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop30;	/* break out of the loop */
            	    break;
                }
            }
            loop30: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_variableDeclarationList_in_variableStatement1007);
            variableDeclarationList67=variableDeclarationList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationList; stream_variableDeclarationList->add(stream_variableDeclarationList, variableDeclarationList67.tree, NULL); }

            // .//Emerson.g:187:41: ( LTERM | ';' )
            {
                int alt31=2;

                {
                    int LA31_0 = LA(1);
                    if ( (LA31_0 == LTERM) ) 
                    {
                        alt31=1;
                    }
                    else if ( (LA31_0 == 128) ) 
                    {
                        alt31=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 31;
                        EXCEPTION->state        = 0;


                        goto rulevariableStatementEx;
                    }
                }
                switch (alt31) 
                {
            	case 1:
            	    // .//Emerson.g:187:42: LTERM
            	    {
            	        LTERM68 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableStatement1010); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM68, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:187:50: ';'
            	    {
            	        char_literal69 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_variableStatement1014); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal69, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : variableDeclarationList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 187:55: -> ^( VARLIST variableDeclarationList )
            	{
            	    // .//Emerson.g:187:58: ^( VARLIST variableDeclarationList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationList == NULL ? NULL : stream_variableDeclarationList->nextTree(stream_variableDeclarationList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableStatementEx; /* Prevent compiler warnings */
    rulevariableStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_variableDeclarationList != NULL) stream_variableDeclarationList->free(stream_variableDeclarationList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(11, variableStatement_StartIndex); }
    return retval;
}
/* $ANTLR end variableStatement */

/** 
 * $ANTLR start variableDeclarationList
 * .//Emerson.g:190:1: variableDeclarationList : variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ ;
 */
static EmersonParser_variableDeclarationList_return
variableDeclarationList(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationList_return retval;
    ANTLR3_UINT32 variableDeclarationList_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM71;
    pANTLR3_COMMON_TOKEN    char_literal72;
    pANTLR3_COMMON_TOKEN    LTERM73;
    EmersonParser_variableDeclaration_return variableDeclaration70;
    #undef	RETURN_TYPE_variableDeclaration70
    #define	RETURN_TYPE_variableDeclaration70 EmersonParser_variableDeclaration_return

    EmersonParser_variableDeclaration_return variableDeclaration74;
    #undef	RETURN_TYPE_variableDeclaration74
    #define	RETURN_TYPE_variableDeclaration74 EmersonParser_variableDeclaration_return

    pANTLR3_BASE_TREE LTERM71_tree;
    pANTLR3_BASE_TREE char_literal72_tree;
    pANTLR3_BASE_TREE LTERM73_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_123;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclaration;
    /* Initialize rule variables
     */
    variableDeclarationList_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(12)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM71       = NULL;
    char_literal72       = NULL;
    LTERM73       = NULL;
    variableDeclaration70.tree = NULL;

    variableDeclaration74.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM71_tree   = NULL;
    char_literal72_tree   = NULL;
    LTERM73_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_123   = NULL;
    #define CREATE_stream_123  if (stream_123 == NULL) {stream_123 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 123"); } 
    stream_variableDeclaration   = NULL;
    #define CREATE_stream_variableDeclaration  if (stream_variableDeclaration == NULL) {stream_variableDeclaration = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclaration"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:191:2: ( variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )* -> ( variableDeclaration )+ )
        // .//Emerson.g:191:4: variableDeclaration ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1036);
            variableDeclaration70=variableDeclaration(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration70.tree, NULL); }

            // .//Emerson.g:191:24: ( ( LTERM )* ',' ( LTERM )* variableDeclaration )*

            for (;;)
            {
                int alt34=2;
                alt34 = cdfa34.predict(ctx, RECOGNIZER, ISTREAM, &cdfa34);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt34) 
                {
            	case 1:
            	    // .//Emerson.g:191:25: ( LTERM )* ',' ( LTERM )* variableDeclaration
            	    {

            	        // .//Emerson.g:191:25: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt32=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA32_0 = LA(1);
            	                if ( (LA32_0 == LTERM) ) 
            	                {
            	                    alt32=1;
            	                }

            	            }
            	            switch (alt32) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM71 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1039); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM71, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop32;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop32: ; /* Jump out to here if this rule does not match */

            	        char_literal72 = (pANTLR3_COMMON_TOKEN) MATCHT(123, &FOLLOW_123_in_variableDeclarationList1042); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_123; stream_123->add(stream_123, char_literal72, NULL); }


            	        // .//Emerson.g:191:36: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt33=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA33_0 = LA(1);
            	                if ( (LA33_0 == LTERM) ) 
            	                {
            	                    alt33=1;
            	                }

            	            }
            	            switch (alt33) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM73 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationList1044); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM73, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop33;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop33: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclaration_in_variableDeclarationList1047);
            	        variableDeclaration74=variableDeclaration(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclaration; stream_variableDeclaration->add(stream_variableDeclaration, variableDeclaration74.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop34;	/* break out of the loop */
            	    break;
                }
            }
            loop34: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclaration
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 191:65: -> ( variableDeclaration )+
            	{
            	    if ((stream_variableDeclaration == NULL || !stream_variableDeclaration->hasNext(stream_variableDeclaration))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclaration->hasNext(stream_variableDeclaration))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclaration == NULL ? NULL : stream_variableDeclaration->nextTree(stream_variableDeclaration));

            	    	}
            	    	stream_variableDeclaration->reset(stream_variableDeclaration);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListEx; /* Prevent compiler warnings */
    rulevariableDeclarationListEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_123 != NULL) stream_123->free(stream_123);
        if (stream_variableDeclaration != NULL) stream_variableDeclaration->free(stream_variableDeclaration);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(12, variableDeclarationList_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationList */

/** 
 * $ANTLR start variableDeclarationListNoIn
 * .//Emerson.g:194:1: variableDeclarationListNoIn : variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ ;
 */
static EmersonParser_variableDeclarationListNoIn_return
variableDeclarationListNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationListNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationListNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM76;
    pANTLR3_COMMON_TOKEN    char_literal77;
    pANTLR3_COMMON_TOKEN    LTERM78;
    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn75;
    #undef	RETURN_TYPE_variableDeclarationNoIn75
    #define	RETURN_TYPE_variableDeclarationNoIn75 EmersonParser_variableDeclarationNoIn_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn79;
    #undef	RETURN_TYPE_variableDeclarationNoIn79
    #define	RETURN_TYPE_variableDeclarationNoIn79 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE LTERM76_tree;
    pANTLR3_BASE_TREE char_literal77_tree;
    pANTLR3_BASE_TREE LTERM78_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_123;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    variableDeclarationListNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(13)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM76       = NULL;
    char_literal77       = NULL;
    LTERM78       = NULL;
    variableDeclarationNoIn75.tree = NULL;

    variableDeclarationNoIn79.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM76_tree   = NULL;
    char_literal77_tree   = NULL;
    LTERM78_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_123   = NULL;
    #define CREATE_stream_123  if (stream_123 == NULL) {stream_123 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 123"); } 
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:195:2: ( variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )* -> ( variableDeclarationNoIn )+ )
        // .//Emerson.g:195:4: variableDeclarationNoIn ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*
        {
            FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1066);
            variableDeclarationNoIn75=variableDeclarationNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationListNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn75.tree, NULL); }

            // .//Emerson.g:195:28: ( ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn )*

            for (;;)
            {
                int alt37=2;
                alt37 = cdfa37.predict(ctx, RECOGNIZER, ISTREAM, &cdfa37);
                if  (HASEXCEPTION())
                {
                    goto rulevariableDeclarationListNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt37) 
                {
            	case 1:
            	    // .//Emerson.g:195:29: ( LTERM )* ',' ( LTERM )* variableDeclarationNoIn
            	    {

            	        // .//Emerson.g:195:29: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt35=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA35_0 = LA(1);
            	                if ( (LA35_0 == LTERM) ) 
            	                {
            	                    alt35=1;
            	                }

            	            }
            	            switch (alt35) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM76 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1069); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM76, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop35;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop35: ; /* Jump out to here if this rule does not match */

            	        char_literal77 = (pANTLR3_COMMON_TOKEN) MATCHT(123, &FOLLOW_123_in_variableDeclarationListNoIn1072); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_123; stream_123->add(stream_123, char_literal77, NULL); }


            	        // .//Emerson.g:195:40: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt36=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA36_0 = LA(1);
            	                if ( (LA36_0 == LTERM) ) 
            	                {
            	                    alt36=1;
            	                }

            	            }
            	            switch (alt36) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM78 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationListNoIn1074); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulevariableDeclarationListNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM78, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop36;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop36: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_variableDeclarationListNoIn1077);
            	        variableDeclarationNoIn79=variableDeclarationNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationListNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn79.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop37;	/* break out of the loop */
            	    break;
                }
            }
            loop37: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : variableDeclarationNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 195:73: -> ( variableDeclarationNoIn )+
            	{
            	    if ((stream_variableDeclarationNoIn == NULL || !stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_variableDeclarationNoIn->hasNext(stream_variableDeclarationNoIn))  ) {
            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

            	    	}
            	    	stream_variableDeclarationNoIn->reset(stream_variableDeclarationNoIn);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationListNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationListNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_123 != NULL) stream_123->free(stream_123);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(13, variableDeclarationListNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationListNoIn */

/** 
 * $ANTLR start variableDeclaration
 * .//Emerson.g:198:1: variableDeclaration : Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) ;
 */
static EmersonParser_variableDeclaration_return
variableDeclaration(pEmersonParser ctx)
{   
    EmersonParser_variableDeclaration_return retval;
    ANTLR3_UINT32 variableDeclaration_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier80;
    pANTLR3_COMMON_TOKEN    LTERM81;
    EmersonParser_initialiser_return initialiser82;
    #undef	RETURN_TYPE_initialiser82
    #define	RETURN_TYPE_initialiser82 EmersonParser_initialiser_return

    pANTLR3_BASE_TREE Identifier80_tree;
    pANTLR3_BASE_TREE LTERM81_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiser;
    /* Initialize rule variables
     */
    variableDeclaration_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(14)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier80       = NULL;
    LTERM81       = NULL;
    initialiser82.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier80_tree   = NULL;
    LTERM81_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiser   = NULL;
    #define CREATE_stream_initialiser  if (stream_initialiser == NULL) {stream_initialiser = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiser"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:199:2: ( Identifier ( LTERM )* ( initialiser )? -> ^( VAR Identifier ( initialiser )? ) )
        // .//Emerson.g:199:4: Identifier ( LTERM )* ( initialiser )?
        {
            Identifier80 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclaration1096); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier80, NULL); }


            // .//Emerson.g:199:15: ( LTERM )*

            for (;;)
            {
                int alt38=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA38_0 = LA(1);
                    if ( (LA38_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA38_2 = LA(2);
                            if ( (synpred52_Emerson(ctx)) ) 
                            {
                                alt38=1;
                            }

                        }
                    }

                }
                switch (alt38) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM81 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclaration1098); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM81, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop38;	/* break out of the loop */
            	    break;
                }
            }
            loop38: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:199:22: ( initialiser )?
            {
                int alt39=2;
                {
                    int LA39_0 = LA(1);
                    if ( (LA39_0 == 129) ) 
                    {
                        alt39=1;
                    }
                }
                switch (alt39) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiser
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiser_in_variableDeclaration1101);
            	        initialiser82=initialiser(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiser; stream_initialiser->add(stream_initialiser, initialiser82.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : initialiser, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 199:35: -> ^( VAR Identifier ( initialiser )? )
            	{
            	    // .//Emerson.g:199:38: ^( VAR Identifier ( initialiser )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:199:55: ( initialiser )?
            	        {
            	        	if ( (stream_initialiser != NULL && stream_initialiser->hasNext(stream_initialiser))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiser == NULL ? NULL : stream_initialiser->nextTree(stream_initialiser));

            	        	}
            	        	if ( stream_initialiser != NULL) stream_initialiser->reset(stream_initialiser);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationEx; /* Prevent compiler warnings */
    rulevariableDeclarationEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiser != NULL) stream_initialiser->free(stream_initialiser);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(14, variableDeclaration_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclaration */

/** 
 * $ANTLR start variableDeclarationNoIn
 * .//Emerson.g:202:1: variableDeclarationNoIn : Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) ;
 */
static EmersonParser_variableDeclarationNoIn_return
variableDeclarationNoIn(pEmersonParser ctx)
{   
    EmersonParser_variableDeclarationNoIn_return retval;
    ANTLR3_UINT32 variableDeclarationNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier83;
    pANTLR3_COMMON_TOKEN    LTERM84;
    EmersonParser_initialiserNoIn_return initialiserNoIn85;
    #undef	RETURN_TYPE_initialiserNoIn85
    #define	RETURN_TYPE_initialiserNoIn85 EmersonParser_initialiserNoIn_return

    pANTLR3_BASE_TREE Identifier83_tree;
    pANTLR3_BASE_TREE LTERM84_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_initialiserNoIn;
    /* Initialize rule variables
     */
    variableDeclarationNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(15)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier83       = NULL;
    LTERM84       = NULL;
    initialiserNoIn85.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier83_tree   = NULL;
    LTERM84_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_initialiserNoIn   = NULL;
    #define CREATE_stream_initialiserNoIn  if (stream_initialiserNoIn == NULL) {stream_initialiserNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule initialiserNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:203:2: ( Identifier ( LTERM )* ( initialiserNoIn )? -> ^( VAR Identifier ( initialiserNoIn )? ) )
        // .//Emerson.g:203:4: Identifier ( LTERM )* ( initialiserNoIn )?
        {
            Identifier83 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_variableDeclarationNoIn1125); 
            if  (HASEXCEPTION())
            {
                goto rulevariableDeclarationNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier83, NULL); }


            // .//Emerson.g:203:15: ( LTERM )*

            for (;;)
            {
                int alt40=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA40_0 = LA(1);
                    if ( (LA40_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA40_2 = LA(2);
                            if ( (synpred54_Emerson(ctx)) ) 
                            {
                                alt40=1;
                            }

                        }
                    }

                }
                switch (alt40) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM84 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_variableDeclarationNoIn1127); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM84, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop40;	/* break out of the loop */
            	    break;
                }
            }
            loop40: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:203:22: ( initialiserNoIn )?
            {
                int alt41=2;
                {
                    int LA41_0 = LA(1);
                    if ( (LA41_0 == 129) ) 
                    {
                        alt41=1;
                    }
                }
                switch (alt41) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: initialiserNoIn
            	    {
            	        FOLLOWPUSH(FOLLOW_initialiserNoIn_in_variableDeclarationNoIn1130);
            	        initialiserNoIn85=initialiserNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulevariableDeclarationNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_initialiserNoIn; stream_initialiserNoIn->add(stream_initialiserNoIn, initialiserNoIn85.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : initialiserNoIn, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 203:39: -> ^( VAR Identifier ( initialiserNoIn )? )
            	{
            	    // .//Emerson.g:203:43: ^( VAR Identifier ( initialiserNoIn )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        // .//Emerson.g:203:60: ( initialiserNoIn )?
            	        {
            	        	if ( (stream_initialiserNoIn != NULL && stream_initialiserNoIn->hasNext(stream_initialiserNoIn))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_initialiserNoIn == NULL ? NULL : stream_initialiserNoIn->nextTree(stream_initialiserNoIn));

            	        	}
            	        	if ( stream_initialiserNoIn != NULL) stream_initialiserNoIn->reset(stream_initialiserNoIn);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulevariableDeclarationNoInEx; /* Prevent compiler warnings */
    rulevariableDeclarationNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_initialiserNoIn != NULL) stream_initialiserNoIn->free(stream_initialiserNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(15, variableDeclarationNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end variableDeclarationNoIn */

/** 
 * $ANTLR start initialiser
 * .//Emerson.g:206:1: initialiser : '=' ( LTERM )* assignmentExpression -> assignmentExpression ;
 */
static EmersonParser_initialiser_return
initialiser(pEmersonParser ctx)
{   
    EmersonParser_initialiser_return retval;
    ANTLR3_UINT32 initialiser_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal86;
    pANTLR3_COMMON_TOKEN    LTERM87;
    EmersonParser_assignmentExpression_return assignmentExpression88;
    #undef	RETURN_TYPE_assignmentExpression88
    #define	RETURN_TYPE_assignmentExpression88 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal86_tree;
    pANTLR3_BASE_TREE LTERM87_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    initialiser_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(16)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal86       = NULL;
    LTERM87       = NULL;
    assignmentExpression88.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal86_tree   = NULL;
    LTERM87_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:207:2: ( '=' ( LTERM )* assignmentExpression -> assignmentExpression )
        // .//Emerson.g:207:4: '=' ( LTERM )* assignmentExpression
        {
            char_literal86 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_initialiser1155); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal86, NULL); }


            // .//Emerson.g:207:8: ( LTERM )*

            for (;;)
            {
                int alt42=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA42_0 = LA(1);
                    if ( (LA42_0 == LTERM) ) 
                    {
                        alt42=1;
                    }

                }
                switch (alt42) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM87 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiser1157); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM87, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop42;	/* break out of the loop */
            	    break;
                }
            }
            loop42: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_initialiser1160);
            assignmentExpression88=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression88.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 207:36: -> assignmentExpression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserEx; /* Prevent compiler warnings */
    ruleinitialiserEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(16, initialiser_StartIndex); }
    return retval;
}
/* $ANTLR end initialiser */

/** 
 * $ANTLR start initialiserNoIn
 * .//Emerson.g:210:1: initialiserNoIn : '=' ( LTERM )* assignmentExpressionNoIn -> assignmentExpressionNoIn ;
 */
static EmersonParser_initialiserNoIn_return
initialiserNoIn(pEmersonParser ctx)
{   
    EmersonParser_initialiserNoIn_return retval;
    ANTLR3_UINT32 initialiserNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal89;
    pANTLR3_COMMON_TOKEN    LTERM90;
    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn91;
    #undef	RETURN_TYPE_assignmentExpressionNoIn91
    #define	RETURN_TYPE_assignmentExpressionNoIn91 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE char_literal89_tree;
    pANTLR3_BASE_TREE LTERM90_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    /* Initialize rule variables
     */
    initialiserNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(17)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal89       = NULL;
    LTERM90       = NULL;
    assignmentExpressionNoIn91.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal89_tree   = NULL;
    LTERM90_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:211:2: ( '=' ( LTERM )* assignmentExpressionNoIn -> assignmentExpressionNoIn )
        // .//Emerson.g:211:4: '=' ( LTERM )* assignmentExpressionNoIn
        {
            char_literal89 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_initialiserNoIn1177); 
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal89, NULL); }


            // .//Emerson.g:211:8: ( LTERM )*

            for (;;)
            {
                int alt43=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA43_0 = LA(1);
                    if ( (LA43_0 == LTERM) ) 
                    {
                        alt43=1;
                    }

                }
                switch (alt43) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM90 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_initialiserNoIn1179); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinitialiserNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM90, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop43;	/* break out of the loop */
            	    break;
                }
            }
            loop43: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_initialiserNoIn1182);
            assignmentExpressionNoIn91=assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinitialiserNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn91.tree, NULL); }

             
            /* AST REWRITE
             * elements          : assignmentExpressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 211:40: -> assignmentExpressionNoIn
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinitialiserNoInEx; /* Prevent compiler warnings */
    ruleinitialiserNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(17, initialiserNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end initialiserNoIn */

/** 
 * $ANTLR start emptyStatement
 * .//Emerson.g:214:1: emptyStatement : ';' ;
 */
static EmersonParser_emptyStatement_return
emptyStatement(pEmersonParser ctx)
{   
    EmersonParser_emptyStatement_return retval;
    ANTLR3_UINT32 emptyStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal92;

    pANTLR3_BASE_TREE char_literal92_tree;

    /* Initialize rule variables
     */
    emptyStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(18)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal92       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal92_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:215:2: ( ';' )
        // .//Emerson.g:215:4: ';'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal92 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_emptyStatement1198); 
            if  (HASEXCEPTION())
            {
                goto ruleemptyStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) {
            char_literal92_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, char_literal92));
            ADAPTOR->addChild(ADAPTOR, root_0, char_literal92_tree);
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleemptyStatementEx; /* Prevent compiler warnings */
    ruleemptyStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(18, emptyStatement_StartIndex); }
    return retval;
}
/* $ANTLR end emptyStatement */

/** 
 * $ANTLR start expressionStatement
 * .//Emerson.g:218:1: expressionStatement : expression ( LTERM | ';' ) -> expression ;
 */
static EmersonParser_expressionStatement_return
expressionStatement(pEmersonParser ctx)
{   
    EmersonParser_expressionStatement_return retval;
    ANTLR3_UINT32 expressionStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM94;
    pANTLR3_COMMON_TOKEN    char_literal95;
    EmersonParser_expression_return expression93;
    #undef	RETURN_TYPE_expression93
    #define	RETURN_TYPE_expression93 EmersonParser_expression_return

    pANTLR3_BASE_TREE LTERM94_tree;
    pANTLR3_BASE_TREE char_literal95_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    expressionStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(19)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM94       = NULL;
    char_literal95       = NULL;
    expression93.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM94_tree   = NULL;
    char_literal95_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:219:2: ( expression ( LTERM | ';' ) -> expression )
        // .//Emerson.g:219:4: expression ( LTERM | ';' )
        {
            FOLLOWPUSH(FOLLOW_expression_in_expressionStatement1210);
            expression93=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression93.tree, NULL); }

            // .//Emerson.g:219:15: ( LTERM | ';' )
            {
                int alt44=2;

                {
                    int LA44_0 = LA(1);
                    if ( (LA44_0 == LTERM) ) 
                    {
                        alt44=1;
                    }
                    else if ( (LA44_0 == 128) ) 
                    {
                        alt44=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 44;
                        EXCEPTION->state        = 0;


                        goto ruleexpressionStatementEx;
                    }
                }
                switch (alt44) 
                {
            	case 1:
            	    // .//Emerson.g:219:16: LTERM
            	    {
            	        LTERM94 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionStatement1213); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM94, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:219:24: ';'
            	    {
            	        char_literal95 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_expressionStatement1217); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal95, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 219:29: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionStatementEx; /* Prevent compiler warnings */
    ruleexpressionStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(19, expressionStatement_StartIndex); }
    return retval;
}
/* $ANTLR end expressionStatement */

/** 
 * $ANTLR start ifStatement
 * .//Emerson.g:222:1: ifStatement : 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) ;
 */
static EmersonParser_ifStatement_return
ifStatement(pEmersonParser ctx)
{   
    EmersonParser_ifStatement_return retval;
    ANTLR3_UINT32 ifStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal96;
    pANTLR3_COMMON_TOKEN    LTERM97;
    pANTLR3_COMMON_TOKEN    char_literal98;
    pANTLR3_COMMON_TOKEN    LTERM99;
    pANTLR3_COMMON_TOKEN    LTERM101;
    pANTLR3_COMMON_TOKEN    char_literal102;
    pANTLR3_COMMON_TOKEN    LTERM103;
    pANTLR3_COMMON_TOKEN    LTERM104;
    pANTLR3_COMMON_TOKEN    string_literal105;
    pANTLR3_COMMON_TOKEN    LTERM106;
    EmersonParser_statement_return s1;
    #undef	RETURN_TYPE_s1
    #define	RETURN_TYPE_s1 EmersonParser_statement_return

    EmersonParser_statement_return s2;
    #undef	RETURN_TYPE_s2
    #define	RETURN_TYPE_s2 EmersonParser_statement_return

    EmersonParser_expression_return expression100;
    #undef	RETURN_TYPE_expression100
    #define	RETURN_TYPE_expression100 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal96_tree;
    pANTLR3_BASE_TREE LTERM97_tree;
    pANTLR3_BASE_TREE char_literal98_tree;
    pANTLR3_BASE_TREE LTERM99_tree;
    pANTLR3_BASE_TREE LTERM101_tree;
    pANTLR3_BASE_TREE char_literal102_tree;
    pANTLR3_BASE_TREE LTERM103_tree;
    pANTLR3_BASE_TREE LTERM104_tree;
    pANTLR3_BASE_TREE string_literal105_tree;
    pANTLR3_BASE_TREE LTERM106_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_122;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_124;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_131;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_130;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    ifStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(20)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal96       = NULL;
    LTERM97       = NULL;
    char_literal98       = NULL;
    LTERM99       = NULL;
    LTERM101       = NULL;
    char_literal102       = NULL;
    LTERM103       = NULL;
    LTERM104       = NULL;
    string_literal105       = NULL;
    LTERM106       = NULL;
    s1.tree = NULL;

    s2.tree = NULL;

    expression100.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal96_tree   = NULL;
    LTERM97_tree   = NULL;
    char_literal98_tree   = NULL;
    LTERM99_tree   = NULL;
    LTERM101_tree   = NULL;
    char_literal102_tree   = NULL;
    LTERM103_tree   = NULL;
    LTERM104_tree   = NULL;
    string_literal105_tree   = NULL;
    LTERM106_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_122   = NULL;
    #define CREATE_stream_122  if (stream_122 == NULL) {stream_122 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 122"); } 
    stream_124   = NULL;
    #define CREATE_stream_124  if (stream_124 == NULL) {stream_124 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 124"); } 
    stream_131   = NULL;
    #define CREATE_stream_131  if (stream_131 == NULL) {stream_131 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 131"); } 
    stream_130   = NULL;
    #define CREATE_stream_130  if (stream_130 == NULL) {stream_130 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 130"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:223:1: ( 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )? -> ^( IF expression $s1 ( $s2)? ) )
        // .//Emerson.g:223:3: 'if' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* s1= statement ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
        {
            string_literal96 = (pANTLR3_COMMON_TOKEN) MATCHT(130, &FOLLOW_130_in_ifStatement1233); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_130; stream_130->add(stream_130, string_literal96, NULL); }


            // .//Emerson.g:223:8: ( LTERM )*

            for (;;)
            {
                int alt45=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA45_0 = LA(1);
                    if ( (LA45_0 == LTERM) ) 
                    {
                        alt45=1;
                    }

                }
                switch (alt45) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM97 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1235); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM97, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop45;	/* break out of the loop */
            	    break;
                }
            }
            loop45: ; /* Jump out to here if this rule does not match */

            char_literal98 = (pANTLR3_COMMON_TOKEN) MATCHT(122, &FOLLOW_122_in_ifStatement1238); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_122; stream_122->add(stream_122, char_literal98, NULL); }


            // .//Emerson.g:223:19: ( LTERM )*

            for (;;)
            {
                int alt46=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA46_0 = LA(1);
                    if ( (LA46_0 == LTERM) ) 
                    {
                        alt46=1;
                    }

                }
                switch (alt46) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM99 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1240); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM99, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop46;	/* break out of the loop */
            	    break;
                }
            }
            loop46: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_ifStatement1243);
            expression100=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression100.tree, NULL); }

            // .//Emerson.g:223:37: ( LTERM )*

            for (;;)
            {
                int alt47=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA47_0 = LA(1);
                    if ( (LA47_0 == LTERM) ) 
                    {
                        alt47=1;
                    }

                }
                switch (alt47) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM101 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1245); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM101, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop47;	/* break out of the loop */
            	    break;
                }
            }
            loop47: ; /* Jump out to here if this rule does not match */

            char_literal102 = (pANTLR3_COMMON_TOKEN) MATCHT(124, &FOLLOW_124_in_ifStatement1248); 
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_124; stream_124->add(stream_124, char_literal102, NULL); }


            // .//Emerson.g:223:48: ( LTERM )*

            for (;;)
            {
                int alt48=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA48_0 = LA(1);
                    if ( (LA48_0 == LTERM) ) 
                    {
                        alt48=1;
                    }

                }
                switch (alt48) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM103 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1250); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM103, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop48;	/* break out of the loop */
            	    break;
                }
            }
            loop48: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_ifStatement1255);
            s1=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleifStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s1.tree, NULL); }

            // .//Emerson.g:223:68: ( ( LTERM )* 'else' ( LTERM )* s2= statement )?
            {
                int alt51=2;
                {
                    int LA51_0 = LA(1);
                    if ( (LA51_0 == LTERM) ) 
                    {
                        {
                            int LA51_1 = LA(2);
                            if ( (synpred65_Emerson(ctx)) ) 
                            {
                                alt51=1;
                            }
                        }
                    }
                    else if ( (LA51_0 == 131) ) 
                    {
                        {
                            int LA51_2 = LA(2);
                            if ( (synpred65_Emerson(ctx)) ) 
                            {
                                alt51=1;
                            }
                        }
                    }
                }
                switch (alt51) 
                {
            	case 1:
            	    // .//Emerson.g:223:69: ( LTERM )* 'else' ( LTERM )* s2= statement
            	    {

            	        // .//Emerson.g:223:69: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt49=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA49_0 = LA(1);
            	                if ( (LA49_0 == LTERM) ) 
            	                {
            	                    alt49=1;
            	                }

            	            }
            	            switch (alt49) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM104 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1258); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM104, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop49;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop49: ; /* Jump out to here if this rule does not match */

            	        string_literal105 = (pANTLR3_COMMON_TOKEN) MATCHT(131, &FOLLOW_131_in_ifStatement1261); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_131; stream_131->add(stream_131, string_literal105, NULL); }


            	        // .//Emerson.g:223:83: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt50=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA50_0 = LA(1);
            	                if ( (LA50_0 == LTERM) ) 
            	                {
            	                    alt50=1;
            	                }

            	            }
            	            switch (alt50) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM106 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_ifStatement1263); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleifStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM106, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop50;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop50: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_statement_in_ifStatement1268);
            	        s2=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleifStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, s2.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : s1, expression, s2
             * token labels      : 
             * rule labels       : retval, s2, s1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_s1;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_s2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s2", s2.tree != NULL ? s2.tree : NULL);
            	stream_s1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s1", s1.tree != NULL ? s1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 223:105: -> ^( IF expression $s1 ( $s2)? )
            	{
            	    // .//Emerson.g:223:108: ^( IF expression $s1 ( $s2)? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IF, (pANTLR3_UINT8)"IF"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s1 == NULL ? NULL : stream_s1->nextTree(stream_s1));
            	        // .//Emerson.g:223:128: ( $s2)?
            	        {
            	        	if ( (stream_s2 != NULL && stream_s2->hasNext(stream_s2))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_s2 == NULL ? NULL : stream_s2->nextTree(stream_s2));

            	        	}
            	        	if ( stream_s2 != NULL) stream_s2->reset(stream_s2);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_s2 != NULL) stream_s2->free(stream_s2);
            	if (stream_s1 != NULL) stream_s1->free(stream_s1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleifStatementEx; /* Prevent compiler warnings */
    ruleifStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_122 != NULL) stream_122->free(stream_122);
        if (stream_124 != NULL) stream_124->free(stream_124);
        if (stream_131 != NULL) stream_131->free(stream_131);
        if (stream_130 != NULL) stream_130->free(stream_130);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(20, ifStatement_StartIndex); }
    return retval;
}
/* $ANTLR end ifStatement */

/** 
 * $ANTLR start iterationStatement
 * .//Emerson.g:226:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
 */
static EmersonParser_iterationStatement_return
iterationStatement(pEmersonParser ctx)
{   
    EmersonParser_iterationStatement_return retval;
    ANTLR3_UINT32 iterationStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_doWhileStatement_return doWhileStatement107;
    #undef	RETURN_TYPE_doWhileStatement107
    #define	RETURN_TYPE_doWhileStatement107 EmersonParser_doWhileStatement_return

    EmersonParser_whileStatement_return whileStatement108;
    #undef	RETURN_TYPE_whileStatement108
    #define	RETURN_TYPE_whileStatement108 EmersonParser_whileStatement_return

    EmersonParser_forStatement_return forStatement109;
    #undef	RETURN_TYPE_forStatement109
    #define	RETURN_TYPE_forStatement109 EmersonParser_forStatement_return

    EmersonParser_forInStatement_return forInStatement110;
    #undef	RETURN_TYPE_forInStatement110
    #define	RETURN_TYPE_forInStatement110 EmersonParser_forInStatement_return


    /* Initialize rule variables
     */
    iterationStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(21)) )
    {
    	retval.start = 0;

        return retval; 
    }
    doWhileStatement107.tree = NULL;

    whileStatement108.tree = NULL;

    forStatement109.tree = NULL;

    forInStatement110.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:227:2: ( doWhileStatement | whileStatement | forStatement | forInStatement )
            
            ANTLR3_UINT32 alt52;

            alt52=4;

            switch ( LA(1) ) 
            {
            case 132:
            	{
            		alt52=1;
            	}
                break;
            case 133:
            	{
            		alt52=2;
            	}
                break;
            case 134:
            	{

            		{
            		    int LA52_3 = LA(2);
            		    if ( (synpred68_Emerson(ctx)) ) 
            		    {
            		        alt52=3;
            		    }
            		    else if ( (ANTLR3_TRUE) ) 
            		    {
            		        alt52=4;
            		    }
            		    else 
            		    {
            		        if (BACKTRACKING>0)
            		        {
            		            FAILEDFLAG = ANTLR3_TRUE; 
            		            return retval;
            		        }
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 52;
            		        EXCEPTION->state        = 3;


            		        goto ruleiterationStatementEx;
            		    }
            		}
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 52;
                EXCEPTION->state        = 0;


                goto ruleiterationStatementEx;
            }

            switch (alt52) 
            {
        	case 1:
        	    // .//Emerson.g:227:4: doWhileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_doWhileStatement_in_iterationStatement1297);
        	        doWhileStatement107=doWhileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, doWhileStatement107.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:228:4: whileStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_whileStatement_in_iterationStatement1302);
        	        whileStatement108=whileStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, whileStatement108.tree);

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:229:4: forStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forStatement_in_iterationStatement1307);
        	        forStatement109=forStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forStatement109.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:230:4: forInStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_forInStatement_in_iterationStatement1312);
        	        forInStatement110=forInStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleiterationStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, forInStatement110.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleiterationStatementEx; /* Prevent compiler warnings */
    ruleiterationStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(21, iterationStatement_StartIndex); }
    return retval;
}
/* $ANTLR end iterationStatement */

/** 
 * $ANTLR start doWhileStatement
 * .//Emerson.g:233:1: doWhileStatement : 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) ;
 */
static EmersonParser_doWhileStatement_return
doWhileStatement(pEmersonParser ctx)
{   
    EmersonParser_doWhileStatement_return retval;
    ANTLR3_UINT32 doWhileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal111;
    pANTLR3_COMMON_TOKEN    LTERM112;
    pANTLR3_COMMON_TOKEN    LTERM114;
    pANTLR3_COMMON_TOKEN    string_literal115;
    pANTLR3_COMMON_TOKEN    LTERM116;
    pANTLR3_COMMON_TOKEN    char_literal117;
    pANTLR3_COMMON_TOKEN    char_literal119;
    pANTLR3_COMMON_TOKEN    LTERM120;
    pANTLR3_COMMON_TOKEN    char_literal121;
    EmersonParser_statement_return statement113;
    #undef	RETURN_TYPE_statement113
    #define	RETURN_TYPE_statement113 EmersonParser_statement_return

    EmersonParser_expression_return expression118;
    #undef	RETURN_TYPE_expression118
    #define	RETURN_TYPE_expression118 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal111_tree;
    pANTLR3_BASE_TREE LTERM112_tree;
    pANTLR3_BASE_TREE LTERM114_tree;
    pANTLR3_BASE_TREE string_literal115_tree;
    pANTLR3_BASE_TREE LTERM116_tree;
    pANTLR3_BASE_TREE char_literal117_tree;
    pANTLR3_BASE_TREE char_literal119_tree;
    pANTLR3_BASE_TREE LTERM120_tree;
    pANTLR3_BASE_TREE char_literal121_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_132;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_122;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_124;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    doWhileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(22)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal111       = NULL;
    LTERM112       = NULL;
    LTERM114       = NULL;
    string_literal115       = NULL;
    LTERM116       = NULL;
    char_literal117       = NULL;
    char_literal119       = NULL;
    LTERM120       = NULL;
    char_literal121       = NULL;
    statement113.tree = NULL;

    expression118.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal111_tree   = NULL;
    LTERM112_tree   = NULL;
    LTERM114_tree   = NULL;
    string_literal115_tree   = NULL;
    LTERM116_tree   = NULL;
    char_literal117_tree   = NULL;
    char_literal119_tree   = NULL;
    LTERM120_tree   = NULL;
    char_literal121_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_132   = NULL;
    #define CREATE_stream_132  if (stream_132 == NULL) {stream_132 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 132"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_122   = NULL;
    #define CREATE_stream_122  if (stream_122 == NULL) {stream_122 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 122"); } 
    stream_124   = NULL;
    #define CREATE_stream_124  if (stream_124 == NULL) {stream_124 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 124"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:234:2: ( 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' ) -> ^( DO statement expression ) )
        // .//Emerson.g:234:4: 'do' ( LTERM )* statement ( LTERM )* 'while' ( LTERM )* '(' expression ')' ( LTERM | ';' )
        {
            string_literal111 = (pANTLR3_COMMON_TOKEN) MATCHT(132, &FOLLOW_132_in_doWhileStatement1324); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_132; stream_132->add(stream_132, string_literal111, NULL); }


            // .//Emerson.g:234:9: ( LTERM )*

            for (;;)
            {
                int alt53=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA53_0 = LA(1);
                    if ( (LA53_0 == LTERM) ) 
                    {
                        alt53=1;
                    }

                }
                switch (alt53) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM112 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1326); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM112, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop53;	/* break out of the loop */
            	    break;
                }
            }
            loop53: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_doWhileStatement1329);
            statement113=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement113.tree, NULL); }

            // .//Emerson.g:234:26: ( LTERM )*

            for (;;)
            {
                int alt54=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA54_0 = LA(1);
                    if ( (LA54_0 == LTERM) ) 
                    {
                        alt54=1;
                    }

                }
                switch (alt54) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM114 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1331); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM114, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop54;	/* break out of the loop */
            	    break;
                }
            }
            loop54: ; /* Jump out to here if this rule does not match */

            string_literal115 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_doWhileStatement1334); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, string_literal115, NULL); }


            // .//Emerson.g:234:41: ( LTERM )*

            for (;;)
            {
                int alt55=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA55_0 = LA(1);
                    if ( (LA55_0 == LTERM) ) 
                    {
                        alt55=1;
                    }

                }
                switch (alt55) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM116 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1336); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM116, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop55;	/* break out of the loop */
            	    break;
                }
            }
            loop55: ; /* Jump out to here if this rule does not match */

            char_literal117 = (pANTLR3_COMMON_TOKEN) MATCHT(122, &FOLLOW_122_in_doWhileStatement1339); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_122; stream_122->add(stream_122, char_literal117, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_doWhileStatement1341);
            expression118=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression118.tree, NULL); }
            char_literal119 = (pANTLR3_COMMON_TOKEN) MATCHT(124, &FOLLOW_124_in_doWhileStatement1343); 
            if  (HASEXCEPTION())
            {
                goto ruledoWhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_124; stream_124->add(stream_124, char_literal119, NULL); }


            // .//Emerson.g:234:67: ( LTERM | ';' )
            {
                int alt56=2;

                {
                    int LA56_0 = LA(1);
                    if ( (LA56_0 == LTERM) ) 
                    {
                        alt56=1;
                    }
                    else if ( (LA56_0 == 128) ) 
                    {
                        alt56=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 56;
                        EXCEPTION->state        = 0;


                        goto ruledoWhileStatementEx;
                    }
                }
                switch (alt56) 
                {
            	case 1:
            	    // .//Emerson.g:234:68: LTERM
            	    {
            	        LTERM120 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_doWhileStatement1346); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM120, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:234:76: ';'
            	    {
            	        char_literal121 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_doWhileStatement1350); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledoWhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal121, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 234:81: -> ^( DO statement expression )
            	{
            	    // .//Emerson.g:234:84: ^( DO statement expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DO, (pANTLR3_UINT8)"DO"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledoWhileStatementEx; /* Prevent compiler warnings */
    ruledoWhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_132 != NULL) stream_132->free(stream_132);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_122 != NULL) stream_122->free(stream_122);
        if (stream_124 != NULL) stream_124->free(stream_124);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(22, doWhileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end doWhileStatement */

/** 
 * $ANTLR start whileStatement
 * .//Emerson.g:237:1: whileStatement : 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) ;
 */
static EmersonParser_whileStatement_return
whileStatement(pEmersonParser ctx)
{   
    EmersonParser_whileStatement_return retval;
    ANTLR3_UINT32 whileStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal122;
    pANTLR3_COMMON_TOKEN    LTERM123;
    pANTLR3_COMMON_TOKEN    char_literal124;
    pANTLR3_COMMON_TOKEN    LTERM125;
    pANTLR3_COMMON_TOKEN    LTERM127;
    pANTLR3_COMMON_TOKEN    char_literal128;
    pANTLR3_COMMON_TOKEN    LTERM129;
    EmersonParser_expression_return expression126;
    #undef	RETURN_TYPE_expression126
    #define	RETURN_TYPE_expression126 EmersonParser_expression_return

    EmersonParser_statement_return statement130;
    #undef	RETURN_TYPE_statement130
    #define	RETURN_TYPE_statement130 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal122_tree;
    pANTLR3_BASE_TREE LTERM123_tree;
    pANTLR3_BASE_TREE char_literal124_tree;
    pANTLR3_BASE_TREE LTERM125_tree;
    pANTLR3_BASE_TREE LTERM127_tree;
    pANTLR3_BASE_TREE char_literal128_tree;
    pANTLR3_BASE_TREE LTERM129_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_133;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_122;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_124;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    whileStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(23)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal122       = NULL;
    LTERM123       = NULL;
    char_literal124       = NULL;
    LTERM125       = NULL;
    LTERM127       = NULL;
    char_literal128       = NULL;
    LTERM129       = NULL;
    expression126.tree = NULL;

    statement130.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal122_tree   = NULL;
    LTERM123_tree   = NULL;
    char_literal124_tree   = NULL;
    LTERM125_tree   = NULL;
    LTERM127_tree   = NULL;
    char_literal128_tree   = NULL;
    LTERM129_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_133   = NULL;
    #define CREATE_stream_133  if (stream_133 == NULL) {stream_133 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 133"); } 
    stream_122   = NULL;
    #define CREATE_stream_122  if (stream_122 == NULL) {stream_122 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 122"); } 
    stream_124   = NULL;
    #define CREATE_stream_124  if (stream_124 == NULL) {stream_124 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 124"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:238:2: ( 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WHILE expression statement ) )
        // .//Emerson.g:238:4: 'while' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal122 = (pANTLR3_COMMON_TOKEN) MATCHT(133, &FOLLOW_133_in_whileStatement1376); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_133; stream_133->add(stream_133, string_literal122, NULL); }


            // .//Emerson.g:238:12: ( LTERM )*

            for (;;)
            {
                int alt57=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA57_0 = LA(1);
                    if ( (LA57_0 == LTERM) ) 
                    {
                        alt57=1;
                    }

                }
                switch (alt57) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM123 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1378); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM123, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop57;	/* break out of the loop */
            	    break;
                }
            }
            loop57: ; /* Jump out to here if this rule does not match */

            char_literal124 = (pANTLR3_COMMON_TOKEN) MATCHT(122, &FOLLOW_122_in_whileStatement1381); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_122; stream_122->add(stream_122, char_literal124, NULL); }


            // .//Emerson.g:238:23: ( LTERM )*

            for (;;)
            {
                int alt58=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA58_0 = LA(1);
                    if ( (LA58_0 == LTERM) ) 
                    {
                        alt58=1;
                    }

                }
                switch (alt58) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM125 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1383); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM125, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop58;	/* break out of the loop */
            	    break;
                }
            }
            loop58: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_whileStatement1386);
            expression126=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression126.tree, NULL); }

            // .//Emerson.g:238:41: ( LTERM )*

            for (;;)
            {
                int alt59=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA59_0 = LA(1);
                    if ( (LA59_0 == LTERM) ) 
                    {
                        alt59=1;
                    }

                }
                switch (alt59) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM127 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1388); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM127, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop59;	/* break out of the loop */
            	    break;
                }
            }
            loop59: ; /* Jump out to here if this rule does not match */

            char_literal128 = (pANTLR3_COMMON_TOKEN) MATCHT(124, &FOLLOW_124_in_whileStatement1391); 
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_124; stream_124->add(stream_124, char_literal128, NULL); }


            // .//Emerson.g:238:52: ( LTERM )*

            for (;;)
            {
                int alt60=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA60_0 = LA(1);
                    if ( (LA60_0 == LTERM) ) 
                    {
                        alt60=1;
                    }

                }
                switch (alt60) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM129 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_whileStatement1393); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewhileStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM129, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop60;	/* break out of the loop */
            	    break;
                }
            }
            loop60: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_whileStatement1396);
            statement130=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhileStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement130.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 238:69: -> ^( WHILE expression statement )
            	{
            	    // .//Emerson.g:238:72: ^( WHILE expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WHILE, (pANTLR3_UINT8)"WHILE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewhileStatementEx; /* Prevent compiler warnings */
    rulewhileStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_133 != NULL) stream_133->free(stream_133);
        if (stream_122 != NULL) stream_122->free(stream_122);
        if (stream_124 != NULL) stream_124->free(stream_124);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(23, whileStatement_StartIndex); }
    return retval;
}
/* $ANTLR end whileStatement */

/** 
 * $ANTLR start forStatement
 * .//Emerson.g:241:1: forStatement : 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) ;
 */
static EmersonParser_forStatement_return
forStatement(pEmersonParser ctx)
{   
    EmersonParser_forStatement_return retval;
    ANTLR3_UINT32 forStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal131;
    pANTLR3_COMMON_TOKEN    LTERM132;
    pANTLR3_COMMON_TOKEN    char_literal133;
    pANTLR3_COMMON_TOKEN    LTERM134;
    pANTLR3_COMMON_TOKEN    LTERM135;
    pANTLR3_COMMON_TOKEN    char_literal136;
    pANTLR3_COMMON_TOKEN    LTERM137;
    pANTLR3_COMMON_TOKEN    LTERM138;
    pANTLR3_COMMON_TOKEN    char_literal139;
    pANTLR3_COMMON_TOKEN    LTERM140;
    pANTLR3_COMMON_TOKEN    LTERM141;
    pANTLR3_COMMON_TOKEN    char_literal142;
    pANTLR3_COMMON_TOKEN    LTERM143;
    EmersonParser_forStatementInitialiserPart_return init;
    #undef	RETURN_TYPE_init
    #define	RETURN_TYPE_init EmersonParser_forStatementInitialiserPart_return

    EmersonParser_expression_return cond;
    #undef	RETURN_TYPE_cond
    #define	RETURN_TYPE_cond EmersonParser_expression_return

    EmersonParser_expression_return iter;
    #undef	RETURN_TYPE_iter
    #define	RETURN_TYPE_iter EmersonParser_expression_return

    EmersonParser_statement_return statement144;
    #undef	RETURN_TYPE_statement144
    #define	RETURN_TYPE_statement144 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal131_tree;
    pANTLR3_BASE_TREE LTERM132_tree;
    pANTLR3_BASE_TREE char_literal133_tree;
    pANTLR3_BASE_TREE LTERM134_tree;
    pANTLR3_BASE_TREE LTERM135_tree;
    pANTLR3_BASE_TREE char_literal136_tree;
    pANTLR3_BASE_TREE LTERM137_tree;
    pANTLR3_BASE_TREE LTERM138_tree;
    pANTLR3_BASE_TREE char_literal139_tree;
    pANTLR3_BASE_TREE LTERM140_tree;
    pANTLR3_BASE_TREE LTERM141_tree;
    pANTLR3_BASE_TREE char_literal142_tree;
    pANTLR3_BASE_TREE LTERM143_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_134;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_122;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_124;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forStatementInitialiserPart;
    /* Initialize rule variables
     */
    forStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(24)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal131       = NULL;
    LTERM132       = NULL;
    char_literal133       = NULL;
    LTERM134       = NULL;
    LTERM135       = NULL;
    char_literal136       = NULL;
    LTERM137       = NULL;
    LTERM138       = NULL;
    char_literal139       = NULL;
    LTERM140       = NULL;
    LTERM141       = NULL;
    char_literal142       = NULL;
    LTERM143       = NULL;
    init.tree = NULL;

    cond.tree = NULL;

    iter.tree = NULL;

    statement144.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal131_tree   = NULL;
    LTERM132_tree   = NULL;
    char_literal133_tree   = NULL;
    LTERM134_tree   = NULL;
    LTERM135_tree   = NULL;
    char_literal136_tree   = NULL;
    LTERM137_tree   = NULL;
    LTERM138_tree   = NULL;
    char_literal139_tree   = NULL;
    LTERM140_tree   = NULL;
    LTERM141_tree   = NULL;
    char_literal142_tree   = NULL;
    LTERM143_tree   = NULL;

    stream_134   = NULL;
    #define CREATE_stream_134  if (stream_134 == NULL) {stream_134 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 134"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_122   = NULL;
    #define CREATE_stream_122  if (stream_122 == NULL) {stream_122 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 122"); } 
    stream_124   = NULL;
    #define CREATE_stream_124  if (stream_124 == NULL) {stream_124 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 124"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forStatementInitialiserPart   = NULL;
    #define CREATE_stream_forStatementInitialiserPart  if (stream_forStatementInitialiserPart == NULL) {stream_forStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:242:2: ( 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement ) )
        // .//Emerson.g:242:4: 'for' ( LTERM )* '(' ( ( LTERM )* init= forStatementInitialiserPart )? ( LTERM )* ';' ( ( LTERM )* cond= expression )? ( LTERM )* ';' ( ( LTERM )* iter= expression )? ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal131 = (pANTLR3_COMMON_TOKEN) MATCHT(134, &FOLLOW_134_in_forStatement1419); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_134; stream_134->add(stream_134, string_literal131, NULL); }


            // .//Emerson.g:242:10: ( LTERM )*

            for (;;)
            {
                int alt61=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA61_0 = LA(1);
                    if ( (LA61_0 == LTERM) ) 
                    {
                        alt61=1;
                    }

                }
                switch (alt61) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM132 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1421); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM132, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop61;	/* break out of the loop */
            	    break;
                }
            }
            loop61: ; /* Jump out to here if this rule does not match */

            char_literal133 = (pANTLR3_COMMON_TOKEN) MATCHT(122, &FOLLOW_122_in_forStatement1424); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_122; stream_122->add(stream_122, char_literal133, NULL); }


            // .//Emerson.g:242:21: ( ( LTERM )* init= forStatementInitialiserPart )?
            {
                int alt63=2;
                alt63 = cdfa63.predict(ctx, RECOGNIZER, ISTREAM, &cdfa63);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt63) 
                {
            	case 1:
            	    // .//Emerson.g:242:22: ( LTERM )* init= forStatementInitialiserPart
            	    {

            	        // .//Emerson.g:242:22: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt62=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA62_0 = LA(1);
            	                if ( (LA62_0 == LTERM) ) 
            	                {
            	                    alt62=1;
            	                }

            	            }
            	            switch (alt62) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM134 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1427); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM134, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop62;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop62: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_forStatementInitialiserPart_in_forStatement1432);
            	        init=forStatementInitialiserPart(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_forStatementInitialiserPart; stream_forStatementInitialiserPart->add(stream_forStatementInitialiserPart, init.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:242:64: ( LTERM )*

            for (;;)
            {
                int alt64=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA64_0 = LA(1);
                    if ( (LA64_0 == LTERM) ) 
                    {
                        alt64=1;
                    }

                }
                switch (alt64) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM135 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1436); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM135, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop64;	/* break out of the loop */
            	    break;
                }
            }
            loop64: ; /* Jump out to here if this rule does not match */

            char_literal136 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_forStatement1439); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal136, NULL); }


            // .//Emerson.g:242:75: ( ( LTERM )* cond= expression )?
            {
                int alt66=2;
                alt66 = cdfa66.predict(ctx, RECOGNIZER, ISTREAM, &cdfa66);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt66) 
                {
            	case 1:
            	    // .//Emerson.g:242:76: ( LTERM )* cond= expression
            	    {

            	        // .//Emerson.g:242:76: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt65=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA65_0 = LA(1);
            	                if ( (LA65_0 == LTERM) ) 
            	                {
            	                    alt65=1;
            	                }

            	            }
            	            switch (alt65) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM137 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1442); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM137, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop65;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop65: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1447);
            	        cond=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, cond.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:242:101: ( LTERM )*

            for (;;)
            {
                int alt67=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA67_0 = LA(1);
                    if ( (LA67_0 == LTERM) ) 
                    {
                        alt67=1;
                    }

                }
                switch (alt67) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM138 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1451); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM138, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop67;	/* break out of the loop */
            	    break;
                }
            }
            loop67: ; /* Jump out to here if this rule does not match */

            char_literal139 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_forStatement1454); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal139, NULL); }


            // .//Emerson.g:242:112: ( ( LTERM )* iter= expression )?
            {
                int alt69=2;
                alt69 = cdfa69.predict(ctx, RECOGNIZER, ISTREAM, &cdfa69);
                if  (HASEXCEPTION())
                {
                    goto ruleforStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt69) 
                {
            	case 1:
            	    // .//Emerson.g:242:113: ( LTERM )* iter= expression
            	    {

            	        // .//Emerson.g:242:113: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt68=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA68_0 = LA(1);
            	                if ( (LA68_0 == LTERM) ) 
            	                {
            	                    alt68=1;
            	                }

            	            }
            	            switch (alt68) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM140 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1457); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleforStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM140, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop68;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop68: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_expression_in_forStatement1462);
            	        iter=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, iter.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:242:138: ( LTERM )*

            for (;;)
            {
                int alt70=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA70_0 = LA(1);
                    if ( (LA70_0 == LTERM) ) 
                    {
                        alt70=1;
                    }

                }
                switch (alt70) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM141 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1466); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM141, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop70;	/* break out of the loop */
            	    break;
                }
            }
            loop70: ; /* Jump out to here if this rule does not match */

            char_literal142 = (pANTLR3_COMMON_TOKEN) MATCHT(124, &FOLLOW_124_in_forStatement1469); 
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_124; stream_124->add(stream_124, char_literal142, NULL); }


            // .//Emerson.g:242:149: ( LTERM )*

            for (;;)
            {
                int alt71=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA71_0 = LA(1);
                    if ( (LA71_0 == LTERM) ) 
                    {
                        alt71=1;
                    }

                }
                switch (alt71) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM143 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatement1471); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM143, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop71;	/* break out of the loop */
            	    break;
                }
            }
            loop71: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forStatement1474);
            statement144=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement144.tree, NULL); }

             
            /* AST REWRITE
             * elements          : init, statement, cond, iter
             * token labels      : 
             * rule labels       : retval, init, iter, cond
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_init;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_iter;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cond;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_init=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token init", init.tree != NULL ? init.tree : NULL);
            	stream_iter=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token iter", iter.tree != NULL ? iter.tree : NULL);
            	stream_cond=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token cond", cond.tree != NULL ? cond.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 242:166: -> ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	{
            	    // .//Emerson.g:242:170: ^( FOR ( ^( FORINIT $init) )? ( ^( FORCOND $cond) )? ( ^( FORITER $iter) )? statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FOR, (pANTLR3_UINT8)"FOR"), root_1));

            	        // .//Emerson.g:242:176: ( ^( FORINIT $init) )?
            	        {
            	        	if ( (stream_init != NULL && stream_init->hasNext(stream_init))  )
            	        	{
            	        		// .//Emerson.g:242:176: ^( FORINIT $init)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORINIT, (pANTLR3_UINT8)"FORINIT"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_init == NULL ? NULL : stream_init->nextTree(stream_init));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_init != NULL) stream_init->reset(stream_init);

            	        }
            	        // .//Emerson.g:242:196: ( ^( FORCOND $cond) )?
            	        {
            	        	if ( (stream_cond != NULL && stream_cond->hasNext(stream_cond))  )
            	        	{
            	        		// .//Emerson.g:242:196: ^( FORCOND $cond)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORCOND, (pANTLR3_UINT8)"FORCOND"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_cond == NULL ? NULL : stream_cond->nextTree(stream_cond));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_cond != NULL) stream_cond->reset(stream_cond);

            	        }
            	        // .//Emerson.g:242:215: ( ^( FORITER $iter) )?
            	        {
            	        	if ( (stream_iter != NULL && stream_iter->hasNext(stream_iter))  )
            	        	{
            	        		// .//Emerson.g:242:215: ^( FORITER $iter)
            	        		{
            	        		    pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        		    root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORITER, (pANTLR3_UINT8)"FORITER"), root_2));

            	        		    ADAPTOR->addChild(ADAPTOR, root_2, stream_iter == NULL ? NULL : stream_iter->nextTree(stream_iter));

            	        		    ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        		}

            	        	}
            	        	if ( stream_iter != NULL) stream_iter->reset(stream_iter);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_init != NULL) stream_init->free(stream_init);
            	if (stream_iter != NULL) stream_iter->free(stream_iter);
            	if (stream_cond != NULL) stream_cond->free(stream_cond);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementEx; /* Prevent compiler warnings */
    ruleforStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_134 != NULL) stream_134->free(stream_134);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_122 != NULL) stream_122->free(stream_122);
        if (stream_124 != NULL) stream_124->free(stream_124);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forStatementInitialiserPart != NULL) stream_forStatementInitialiserPart->free(stream_forStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(24, forStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forStatement */

/** 
 * $ANTLR start forStatementInitialiserPart
 * .//Emerson.g:245:1: forStatementInitialiserPart : ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) );
 */
static EmersonParser_forStatementInitialiserPart_return
forStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal146;
    pANTLR3_COMMON_TOKEN    LTERM147;
    EmersonParser_expressionNoIn_return expressionNoIn145;
    #undef	RETURN_TYPE_expressionNoIn145
    #define	RETURN_TYPE_expressionNoIn145 EmersonParser_expressionNoIn_return

    EmersonParser_variableDeclarationListNoIn_return variableDeclarationListNoIn148;
    #undef	RETURN_TYPE_variableDeclarationListNoIn148
    #define	RETURN_TYPE_variableDeclarationListNoIn148 EmersonParser_variableDeclarationListNoIn_return

    pANTLR3_BASE_TREE string_literal146_tree;
    pANTLR3_BASE_TREE LTERM147_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationListNoIn;
    /* Initialize rule variables
     */
    forStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(25)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal146       = NULL;
    LTERM147       = NULL;
    expressionNoIn145.tree = NULL;

    variableDeclarationListNoIn148.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal146_tree   = NULL;
    LTERM147_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_variableDeclarationListNoIn   = NULL;
    #define CREATE_stream_variableDeclarationListNoIn  if (stream_variableDeclarationListNoIn == NULL) {stream_variableDeclarationListNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationListNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:246:2: ( expressionNoIn | 'var' ( LTERM )* variableDeclarationListNoIn -> ^( VARLIST variableDeclarationListNoIn ) )
            
            ANTLR3_UINT32 alt73;

            alt73=2;


            {
                int LA73_0 = LA(1);
                if ( (((LA73_0 >= Identifier) && (LA73_0 <= NumericLiteral)) || ((LA73_0 >= 121) && (LA73_0 <= 122)) || LA73_0 == 125 || ((LA73_0 >= 150) && (LA73_0 <= 151)) || ((LA73_0 >= 183) && (LA73_0 <= 184)) || ((LA73_0 >= 188) && (LA73_0 <= 198))) ) 
                {
                    alt73=1;
                }
                else if ( (LA73_0 == 127) ) 
                {
                    alt73=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 73;
                    EXCEPTION->state        = 0;


                    goto ruleforStatementInitialiserPartEx;
                }
            }
            switch (alt73) 
            {
        	case 1:
        	    // .//Emerson.g:246:4: expressionNoIn
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expressionNoIn_in_forStatementInitialiserPart1523);
        	        expressionNoIn145=expressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, expressionNoIn145.tree);

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:247:4: 'var' ( LTERM )* variableDeclarationListNoIn
        	    {
        	        string_literal146 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_forStatementInitialiserPart1528); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, string_literal146, NULL); }


        	        // .//Emerson.g:247:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt72=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA72_0 = LA(1);
        	                if ( (LA72_0 == LTERM) ) 
        	                {
        	                    alt72=1;
        	                }

        	            }
        	            switch (alt72) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM147 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forStatementInitialiserPart1530); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM147, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop72;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop72: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationListNoIn_in_forStatementInitialiserPart1533);
        	        variableDeclarationListNoIn148=variableDeclarationListNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationListNoIn; stream_variableDeclarationListNoIn->add(stream_variableDeclarationListNoIn, variableDeclarationListNoIn148.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationListNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 247:45: -> ^( VARLIST variableDeclarationListNoIn )
        	        	{
        	        	    // .//Emerson.g:247:48: ^( VARLIST variableDeclarationListNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VARLIST, (pANTLR3_UINT8)"VARLIST"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationListNoIn == NULL ? NULL : stream_variableDeclarationListNoIn->nextTree(stream_variableDeclarationListNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_variableDeclarationListNoIn != NULL) stream_variableDeclarationListNoIn->free(stream_variableDeclarationListNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(25, forStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forStatementInitialiserPart */

/** 
 * $ANTLR start forInStatement
 * .//Emerson.g:250:1: forInStatement : 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) ;
 */
static EmersonParser_forInStatement_return
forInStatement(pEmersonParser ctx)
{   
    EmersonParser_forInStatement_return retval;
    ANTLR3_UINT32 forInStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal149;
    pANTLR3_COMMON_TOKEN    LTERM150;
    pANTLR3_COMMON_TOKEN    char_literal151;
    pANTLR3_COMMON_TOKEN    LTERM152;
    pANTLR3_COMMON_TOKEN    LTERM154;
    pANTLR3_COMMON_TOKEN    string_literal155;
    pANTLR3_COMMON_TOKEN    LTERM156;
    pANTLR3_COMMON_TOKEN    LTERM158;
    pANTLR3_COMMON_TOKEN    char_literal159;
    pANTLR3_COMMON_TOKEN    LTERM160;
    EmersonParser_forInStatementInitialiserPart_return forInStatementInitialiserPart153;
    #undef	RETURN_TYPE_forInStatementInitialiserPart153
    #define	RETURN_TYPE_forInStatementInitialiserPart153 EmersonParser_forInStatementInitialiserPart_return

    EmersonParser_expression_return expression157;
    #undef	RETURN_TYPE_expression157
    #define	RETURN_TYPE_expression157 EmersonParser_expression_return

    EmersonParser_statement_return statement161;
    #undef	RETURN_TYPE_statement161
    #define	RETURN_TYPE_statement161 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal149_tree;
    pANTLR3_BASE_TREE LTERM150_tree;
    pANTLR3_BASE_TREE char_literal151_tree;
    pANTLR3_BASE_TREE LTERM152_tree;
    pANTLR3_BASE_TREE LTERM154_tree;
    pANTLR3_BASE_TREE string_literal155_tree;
    pANTLR3_BASE_TREE LTERM156_tree;
    pANTLR3_BASE_TREE LTERM158_tree;
    pANTLR3_BASE_TREE char_literal159_tree;
    pANTLR3_BASE_TREE LTERM160_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_134;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_135;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_122;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_124;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_forInStatementInitialiserPart;
    /* Initialize rule variables
     */
    forInStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(26)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal149       = NULL;
    LTERM150       = NULL;
    char_literal151       = NULL;
    LTERM152       = NULL;
    LTERM154       = NULL;
    string_literal155       = NULL;
    LTERM156       = NULL;
    LTERM158       = NULL;
    char_literal159       = NULL;
    LTERM160       = NULL;
    forInStatementInitialiserPart153.tree = NULL;

    expression157.tree = NULL;

    statement161.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal149_tree   = NULL;
    LTERM150_tree   = NULL;
    char_literal151_tree   = NULL;
    LTERM152_tree   = NULL;
    LTERM154_tree   = NULL;
    string_literal155_tree   = NULL;
    LTERM156_tree   = NULL;
    LTERM158_tree   = NULL;
    char_literal159_tree   = NULL;
    LTERM160_tree   = NULL;

    stream_134   = NULL;
    #define CREATE_stream_134  if (stream_134 == NULL) {stream_134 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 134"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_135   = NULL;
    #define CREATE_stream_135  if (stream_135 == NULL) {stream_135 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 135"); } 
    stream_122   = NULL;
    #define CREATE_stream_122  if (stream_122 == NULL) {stream_122 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 122"); } 
    stream_124   = NULL;
    #define CREATE_stream_124  if (stream_124 == NULL) {stream_124 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 124"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_forInStatementInitialiserPart   = NULL;
    #define CREATE_stream_forInStatementInitialiserPart  if (stream_forInStatementInitialiserPart == NULL) {stream_forInStatementInitialiserPart = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule forInStatementInitialiserPart"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:251:2: ( 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( FORIN forInStatementInitialiserPart expression statement ) )
        // .//Emerson.g:251:4: 'for' ( LTERM )* '(' ( LTERM )* forInStatementInitialiserPart ( LTERM )* 'in' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal149 = (pANTLR3_COMMON_TOKEN) MATCHT(134, &FOLLOW_134_in_forInStatement1553); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_134; stream_134->add(stream_134, string_literal149, NULL); }


            // .//Emerson.g:251:10: ( LTERM )*

            for (;;)
            {
                int alt74=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA74_0 = LA(1);
                    if ( (LA74_0 == LTERM) ) 
                    {
                        alt74=1;
                    }

                }
                switch (alt74) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM150 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1555); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM150, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop74;	/* break out of the loop */
            	    break;
                }
            }
            loop74: ; /* Jump out to here if this rule does not match */

            char_literal151 = (pANTLR3_COMMON_TOKEN) MATCHT(122, &FOLLOW_122_in_forInStatement1558); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_122; stream_122->add(stream_122, char_literal151, NULL); }


            // .//Emerson.g:251:21: ( LTERM )*

            for (;;)
            {
                int alt75=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA75_0 = LA(1);
                    if ( (LA75_0 == LTERM) ) 
                    {
                        alt75=1;
                    }

                }
                switch (alt75) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM152 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1560); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM152, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop75;	/* break out of the loop */
            	    break;
                }
            }
            loop75: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_forInStatementInitialiserPart_in_forInStatement1563);
            forInStatementInitialiserPart153=forInStatementInitialiserPart(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_forInStatementInitialiserPart; stream_forInStatementInitialiserPart->add(stream_forInStatementInitialiserPart, forInStatementInitialiserPart153.tree, NULL); }

            // .//Emerson.g:251:58: ( LTERM )*

            for (;;)
            {
                int alt76=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA76_0 = LA(1);
                    if ( (LA76_0 == LTERM) ) 
                    {
                        alt76=1;
                    }

                }
                switch (alt76) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM154 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1565); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM154, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop76;	/* break out of the loop */
            	    break;
                }
            }
            loop76: ; /* Jump out to here if this rule does not match */

            string_literal155 = (pANTLR3_COMMON_TOKEN) MATCHT(135, &FOLLOW_135_in_forInStatement1568); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_135; stream_135->add(stream_135, string_literal155, NULL); }


            // .//Emerson.g:251:70: ( LTERM )*

            for (;;)
            {
                int alt77=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA77_0 = LA(1);
                    if ( (LA77_0 == LTERM) ) 
                    {
                        alt77=1;
                    }

                }
                switch (alt77) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM156 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1570); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM156, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop77;	/* break out of the loop */
            	    break;
                }
            }
            loop77: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_forInStatement1573);
            expression157=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression157.tree, NULL); }

            // .//Emerson.g:251:88: ( LTERM )*

            for (;;)
            {
                int alt78=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA78_0 = LA(1);
                    if ( (LA78_0 == LTERM) ) 
                    {
                        alt78=1;
                    }

                }
                switch (alt78) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM158 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1575); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM158, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop78;	/* break out of the loop */
            	    break;
                }
            }
            loop78: ; /* Jump out to here if this rule does not match */

            char_literal159 = (pANTLR3_COMMON_TOKEN) MATCHT(124, &FOLLOW_124_in_forInStatement1578); 
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_124; stream_124->add(stream_124, char_literal159, NULL); }


            // .//Emerson.g:251:99: ( LTERM )*

            for (;;)
            {
                int alt79=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA79_0 = LA(1);
                    if ( (LA79_0 == LTERM) ) 
                    {
                        alt79=1;
                    }

                }
                switch (alt79) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM160 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatement1580); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleforInStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM160, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop79;	/* break out of the loop */
            	    break;
                }
            }
            loop79: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_forInStatement1583);
            statement161=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleforInStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement161.tree, NULL); }

             
            /* AST REWRITE
             * elements          : forInStatementInitialiserPart, statement, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 251:116: -> ^( FORIN forInStatementInitialiserPart expression statement )
            	{
            	    // .//Emerson.g:251:119: ^( FORIN forInStatementInitialiserPart expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FORIN, (pANTLR3_UINT8)"FORIN"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_forInStatementInitialiserPart == NULL ? NULL : stream_forInStatementInitialiserPart->nextTree(stream_forInStatementInitialiserPart));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementEx; /* Prevent compiler warnings */
    ruleforInStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_134 != NULL) stream_134->free(stream_134);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_135 != NULL) stream_135->free(stream_135);
        if (stream_122 != NULL) stream_122->free(stream_122);
        if (stream_124 != NULL) stream_124->free(stream_124);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_forInStatementInitialiserPart != NULL) stream_forInStatementInitialiserPart->free(stream_forInStatementInitialiserPart);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(26, forInStatement_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatement */

/** 
 * $ANTLR start forInStatementInitialiserPart
 * .//Emerson.g:254:1: forInStatementInitialiserPart : ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) );
 */
static EmersonParser_forInStatementInitialiserPart_return
forInStatementInitialiserPart(pEmersonParser ctx)
{   
    EmersonParser_forInStatementInitialiserPart_return retval;
    ANTLR3_UINT32 forInStatementInitialiserPart_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal163;
    pANTLR3_COMMON_TOKEN    LTERM164;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression162;
    #undef	RETURN_TYPE_leftHandSideExpression162
    #define	RETURN_TYPE_leftHandSideExpression162 EmersonParser_leftHandSideExpression_return

    EmersonParser_variableDeclarationNoIn_return variableDeclarationNoIn165;
    #undef	RETURN_TYPE_variableDeclarationNoIn165
    #define	RETURN_TYPE_variableDeclarationNoIn165 EmersonParser_variableDeclarationNoIn_return

    pANTLR3_BASE_TREE string_literal163_tree;
    pANTLR3_BASE_TREE LTERM164_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_127;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_variableDeclarationNoIn;
    /* Initialize rule variables
     */
    forInStatementInitialiserPart_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(27)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal163       = NULL;
    LTERM164       = NULL;
    leftHandSideExpression162.tree = NULL;

    variableDeclarationNoIn165.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal163_tree   = NULL;
    LTERM164_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_127   = NULL;
    #define CREATE_stream_127  if (stream_127 == NULL) {stream_127 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 127"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_variableDeclarationNoIn   = NULL;
    #define CREATE_stream_variableDeclarationNoIn  if (stream_variableDeclarationNoIn == NULL) {stream_variableDeclarationNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule variableDeclarationNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:255:2: ( leftHandSideExpression -> leftHandSideExpression | 'var' ( LTERM )* variableDeclarationNoIn -> ^( VAR variableDeclarationNoIn ) )
            
            ANTLR3_UINT32 alt81;

            alt81=2;


            {
                int LA81_0 = LA(1);
                if ( (((LA81_0 >= Identifier) && (LA81_0 <= NumericLiteral)) || ((LA81_0 >= 121) && (LA81_0 <= 122)) || LA81_0 == 125 || ((LA81_0 >= 150) && (LA81_0 <= 151)) || ((LA81_0 >= 195) && (LA81_0 <= 198))) ) 
                {
                    alt81=1;
                }
                else if ( (LA81_0 == 127) ) 
                {
                    alt81=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 81;
                    EXCEPTION->state        = 0;


                    goto ruleforInStatementInitialiserPartEx;
                }
            }
            switch (alt81) 
            {
        	case 1:
        	    // .//Emerson.g:255:4: leftHandSideExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_forInStatementInitialiserPart1607);
        	        leftHandSideExpression162=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression162.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : leftHandSideExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 255:27: -> leftHandSideExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:256:4: 'var' ( LTERM )* variableDeclarationNoIn
        	    {
        	        string_literal163 = (pANTLR3_COMMON_TOKEN) MATCHT(127, &FOLLOW_127_in_forInStatementInitialiserPart1616); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_127; stream_127->add(stream_127, string_literal163, NULL); }


        	        // .//Emerson.g:256:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt80=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA80_0 = LA(1);
        	                if ( (LA80_0 == LTERM) ) 
        	                {
        	                    alt80=1;
        	                }

        	            }
        	            switch (alt80) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM164 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_forInStatementInitialiserPart1618); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleforInStatementInitialiserPartEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM164, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop80;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop80: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_variableDeclarationNoIn_in_forInStatementInitialiserPart1621);
        	        variableDeclarationNoIn165=variableDeclarationNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleforInStatementInitialiserPartEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_variableDeclarationNoIn; stream_variableDeclarationNoIn->add(stream_variableDeclarationNoIn, variableDeclarationNoIn165.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : variableDeclarationNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 256:41: -> ^( VAR variableDeclarationNoIn )
        	        	{
        	        	    // .//Emerson.g:256:44: ^( VAR variableDeclarationNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VAR, (pANTLR3_UINT8)"VAR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_variableDeclarationNoIn == NULL ? NULL : stream_variableDeclarationNoIn->nextTree(stream_variableDeclarationNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleforInStatementInitialiserPartEx; /* Prevent compiler warnings */
    ruleforInStatementInitialiserPartEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_127 != NULL) stream_127->free(stream_127);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_variableDeclarationNoIn != NULL) stream_variableDeclarationNoIn->free(stream_variableDeclarationNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(27, forInStatementInitialiserPart_StartIndex); }
    return retval;
}
/* $ANTLR end forInStatementInitialiserPart */

/** 
 * $ANTLR start continueStatement
 * .//Emerson.g:259:1: continueStatement : 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) ;
 */
static EmersonParser_continueStatement_return
continueStatement(pEmersonParser ctx)
{   
    EmersonParser_continueStatement_return retval;
    ANTLR3_UINT32 continueStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal166;
    pANTLR3_COMMON_TOKEN    Identifier167;
    pANTLR3_COMMON_TOKEN    LTERM168;
    pANTLR3_COMMON_TOKEN    char_literal169;

    pANTLR3_BASE_TREE string_literal166_tree;
    pANTLR3_BASE_TREE Identifier167_tree;
    pANTLR3_BASE_TREE LTERM168_tree;
    pANTLR3_BASE_TREE char_literal169_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_136;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    continueStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(28)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal166       = NULL;
    Identifier167       = NULL;
    LTERM168       = NULL;
    char_literal169       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal166_tree   = NULL;
    Identifier167_tree   = NULL;
    LTERM168_tree   = NULL;
    char_literal169_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_136   = NULL;
    #define CREATE_stream_136  if (stream_136 == NULL) {stream_136 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 136"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:260:2: ( 'continue' ( Identifier )? ( LTERM | ';' ) -> ^( CONTINUE ( Identifier )? ) )
        // .//Emerson.g:260:4: 'continue' ( Identifier )? ( LTERM | ';' )
        {
            string_literal166 = (pANTLR3_COMMON_TOKEN) MATCHT(136, &FOLLOW_136_in_continueStatement1640); 
            if  (HASEXCEPTION())
            {
                goto rulecontinueStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_136; stream_136->add(stream_136, string_literal166, NULL); }


            // .//Emerson.g:260:15: ( Identifier )?
            {
                int alt82=2;
                {
                    int LA82_0 = LA(1);
                    if ( (LA82_0 == Identifier) ) 
                    {
                        alt82=1;
                    }
                }
                switch (alt82) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier167 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_continueStatement1642); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier167, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:260:27: ( LTERM | ';' )
            {
                int alt83=2;

                {
                    int LA83_0 = LA(1);
                    if ( (LA83_0 == LTERM) ) 
                    {
                        alt83=1;
                    }
                    else if ( (LA83_0 == 128) ) 
                    {
                        alt83=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 83;
                        EXCEPTION->state        = 0;


                        goto rulecontinueStatementEx;
                    }
                }
                switch (alt83) 
                {
            	case 1:
            	    // .//Emerson.g:260:28: LTERM
            	    {
            	        LTERM168 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_continueStatement1646); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM168, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:260:36: ';'
            	    {
            	        char_literal169 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_continueStatement1650); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecontinueStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal169, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 260:42: -> ^( CONTINUE ( Identifier )? )
            	{
            	    // .//Emerson.g:260:45: ^( CONTINUE ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CONTINUE, (pANTLR3_UINT8)"CONTINUE"), root_1));

            	        // .//Emerson.g:260:56: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecontinueStatementEx; /* Prevent compiler warnings */
    rulecontinueStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_136 != NULL) stream_136->free(stream_136);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(28, continueStatement_StartIndex); }
    return retval;
}
/* $ANTLR end continueStatement */

/** 
 * $ANTLR start breakStatement
 * .//Emerson.g:263:1: breakStatement : 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) ;
 */
static EmersonParser_breakStatement_return
breakStatement(pEmersonParser ctx)
{   
    EmersonParser_breakStatement_return retval;
    ANTLR3_UINT32 breakStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal170;
    pANTLR3_COMMON_TOKEN    Identifier171;
    pANTLR3_COMMON_TOKEN    LTERM172;
    pANTLR3_COMMON_TOKEN    char_literal173;

    pANTLR3_BASE_TREE string_literal170_tree;
    pANTLR3_BASE_TREE Identifier171_tree;
    pANTLR3_BASE_TREE LTERM172_tree;
    pANTLR3_BASE_TREE char_literal173_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_137;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    breakStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(29)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal170       = NULL;
    Identifier171       = NULL;
    LTERM172       = NULL;
    char_literal173       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal170_tree   = NULL;
    Identifier171_tree   = NULL;
    LTERM172_tree   = NULL;
    char_literal173_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_137   = NULL;
    #define CREATE_stream_137  if (stream_137 == NULL) {stream_137 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 137"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:264:2: ( 'break' ( Identifier )? ( LTERM | ';' ) -> ^( BREAK ( Identifier )? ) )
        // .//Emerson.g:264:4: 'break' ( Identifier )? ( LTERM | ';' )
        {
            string_literal170 = (pANTLR3_COMMON_TOKEN) MATCHT(137, &FOLLOW_137_in_breakStatement1672); 
            if  (HASEXCEPTION())
            {
                goto rulebreakStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_137; stream_137->add(stream_137, string_literal170, NULL); }


            // .//Emerson.g:264:12: ( Identifier )?
            {
                int alt84=2;
                {
                    int LA84_0 = LA(1);
                    if ( (LA84_0 == Identifier) ) 
                    {
                        alt84=1;
                    }
                }
                switch (alt84) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: Identifier
            	    {
            	        Identifier171 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_breakStatement1674); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier171, NULL); }


            	    }
            	    break;

                }
            }

            // .//Emerson.g:264:24: ( LTERM | ';' )
            {
                int alt85=2;

                {
                    int LA85_0 = LA(1);
                    if ( (LA85_0 == LTERM) ) 
                    {
                        alt85=1;
                    }
                    else if ( (LA85_0 == 128) ) 
                    {
                        alt85=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 85;
                        EXCEPTION->state        = 0;


                        goto rulebreakStatementEx;
                    }
                }
                switch (alt85) 
                {
            	case 1:
            	    // .//Emerson.g:264:25: LTERM
            	    {
            	        LTERM172 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_breakStatement1678); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM172, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:264:33: ';'
            	    {
            	        char_literal173 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_breakStatement1682); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebreakStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal173, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 264:38: -> ^( BREAK ( Identifier )? )
            	{
            	    // .//Emerson.g:264:41: ^( BREAK ( Identifier )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BREAK, (pANTLR3_UINT8)"BREAK"), root_1));

            	        // .//Emerson.g:264:49: ( Identifier )?
            	        {
            	        	if ( (stream_Identifier != NULL && stream_Identifier->hasNext(stream_Identifier))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        	}
            	        	if ( stream_Identifier != NULL) stream_Identifier->reset(stream_Identifier);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebreakStatementEx; /* Prevent compiler warnings */
    rulebreakStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_137 != NULL) stream_137->free(stream_137);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(29, breakStatement_StartIndex); }
    return retval;
}
/* $ANTLR end breakStatement */

/** 
 * $ANTLR start returnStatement
 * .//Emerson.g:267:1: returnStatement : 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) ;
 */
static EmersonParser_returnStatement_return
returnStatement(pEmersonParser ctx)
{   
    EmersonParser_returnStatement_return retval;
    ANTLR3_UINT32 returnStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal174;
    pANTLR3_COMMON_TOKEN    LTERM176;
    pANTLR3_COMMON_TOKEN    char_literal177;
    EmersonParser_expression_return expression175;
    #undef	RETURN_TYPE_expression175
    #define	RETURN_TYPE_expression175 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal174_tree;
    pANTLR3_BASE_TREE LTERM176_tree;
    pANTLR3_BASE_TREE char_literal177_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_138;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    returnStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(30)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal174       = NULL;
    LTERM176       = NULL;
    char_literal177       = NULL;
    expression175.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal174_tree   = NULL;
    LTERM176_tree   = NULL;
    char_literal177_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_138   = NULL;
    #define CREATE_stream_138  if (stream_138 == NULL) {stream_138 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 138"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:268:2: ( 'return' ( expression )? ( LTERM | ';' ) -> ^( RETURN ( expression )? ) )
        // .//Emerson.g:268:4: 'return' ( expression )? ( LTERM | ';' )
        {
            string_literal174 = (pANTLR3_COMMON_TOKEN) MATCHT(138, &FOLLOW_138_in_returnStatement1703); 
            if  (HASEXCEPTION())
            {
                goto rulereturnStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_138; stream_138->add(stream_138, string_literal174, NULL); }


            // .//Emerson.g:268:13: ( expression )?
            {
                int alt86=2;
                {
                    int LA86_0 = LA(1);
                    if ( (((LA86_0 >= Identifier) && (LA86_0 <= NumericLiteral)) || ((LA86_0 >= 121) && (LA86_0 <= 122)) || LA86_0 == 125 || ((LA86_0 >= 150) && (LA86_0 <= 151)) || ((LA86_0 >= 183) && (LA86_0 <= 184)) || ((LA86_0 >= 188) && (LA86_0 <= 198))) ) 
                    {
                        alt86=1;
                    }
                }
                switch (alt86) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: expression
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_returnStatement1705);
            	        expression175=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression175.tree, NULL); }

            	    }
            	    break;

                }
            }

            // .//Emerson.g:268:25: ( LTERM | ';' )
            {
                int alt87=2;

                {
                    int LA87_0 = LA(1);
                    if ( (LA87_0 == LTERM) ) 
                    {
                        alt87=1;
                    }
                    else if ( (LA87_0 == 128) ) 
                    {
                        alt87=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 87;
                        EXCEPTION->state        = 0;


                        goto rulereturnStatementEx;
                    }
                }
                switch (alt87) 
                {
            	case 1:
            	    // .//Emerson.g:268:26: LTERM
            	    {
            	        LTERM176 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_returnStatement1709); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM176, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:268:34: ';'
            	    {
            	        char_literal177 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_returnStatement1713); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulereturnStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal177, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 268:39: -> ^( RETURN ( expression )? )
            	{
            	    // .//Emerson.g:268:42: ^( RETURN ( expression )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RETURN, (pANTLR3_UINT8)"RETURN"), root_1));

            	        // .//Emerson.g:268:51: ( expression )?
            	        {
            	        	if ( (stream_expression != NULL && stream_expression->hasNext(stream_expression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        	}
            	        	if ( stream_expression != NULL) stream_expression->reset(stream_expression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereturnStatementEx; /* Prevent compiler warnings */
    rulereturnStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_138 != NULL) stream_138->free(stream_138);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(30, returnStatement_StartIndex); }
    return retval;
}
/* $ANTLR end returnStatement */

/** 
 * $ANTLR start withStatement
 * .//Emerson.g:271:1: withStatement : 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) ;
 */
static EmersonParser_withStatement_return
withStatement(pEmersonParser ctx)
{   
    EmersonParser_withStatement_return retval;
    ANTLR3_UINT32 withStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal178;
    pANTLR3_COMMON_TOKEN    LTERM179;
    pANTLR3_COMMON_TOKEN    char_literal180;
    pANTLR3_COMMON_TOKEN    LTERM181;
    pANTLR3_COMMON_TOKEN    LTERM183;
    pANTLR3_COMMON_TOKEN    char_literal184;
    pANTLR3_COMMON_TOKEN    LTERM185;
    EmersonParser_expression_return expression182;
    #undef	RETURN_TYPE_expression182
    #define	RETURN_TYPE_expression182 EmersonParser_expression_return

    EmersonParser_statement_return statement186;
    #undef	RETURN_TYPE_statement186
    #define	RETURN_TYPE_statement186 EmersonParser_statement_return

    pANTLR3_BASE_TREE string_literal178_tree;
    pANTLR3_BASE_TREE LTERM179_tree;
    pANTLR3_BASE_TREE char_literal180_tree;
    pANTLR3_BASE_TREE LTERM181_tree;
    pANTLR3_BASE_TREE LTERM183_tree;
    pANTLR3_BASE_TREE char_literal184_tree;
    pANTLR3_BASE_TREE LTERM185_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_139;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_122;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_124;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    withStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(31)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal178       = NULL;
    LTERM179       = NULL;
    char_literal180       = NULL;
    LTERM181       = NULL;
    LTERM183       = NULL;
    char_literal184       = NULL;
    LTERM185       = NULL;
    expression182.tree = NULL;

    statement186.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal178_tree   = NULL;
    LTERM179_tree   = NULL;
    char_literal180_tree   = NULL;
    LTERM181_tree   = NULL;
    LTERM183_tree   = NULL;
    char_literal184_tree   = NULL;
    LTERM185_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_139   = NULL;
    #define CREATE_stream_139  if (stream_139 == NULL) {stream_139 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 139"); } 
    stream_122   = NULL;
    #define CREATE_stream_122  if (stream_122 == NULL) {stream_122 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 122"); } 
    stream_124   = NULL;
    #define CREATE_stream_124  if (stream_124 == NULL) {stream_124 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 124"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:272:2: ( 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement -> ^( WITH expression statement ) )
        // .//Emerson.g:272:4: 'with' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* statement
        {
            string_literal178 = (pANTLR3_COMMON_TOKEN) MATCHT(139, &FOLLOW_139_in_withStatement1735); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_139; stream_139->add(stream_139, string_literal178, NULL); }


            // .//Emerson.g:272:11: ( LTERM )*

            for (;;)
            {
                int alt88=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA88_0 = LA(1);
                    if ( (LA88_0 == LTERM) ) 
                    {
                        alt88=1;
                    }

                }
                switch (alt88) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM179 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement1737); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM179, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop88;	/* break out of the loop */
            	    break;
                }
            }
            loop88: ; /* Jump out to here if this rule does not match */

            char_literal180 = (pANTLR3_COMMON_TOKEN) MATCHT(122, &FOLLOW_122_in_withStatement1740); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_122; stream_122->add(stream_122, char_literal180, NULL); }


            // .//Emerson.g:272:22: ( LTERM )*

            for (;;)
            {
                int alt89=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA89_0 = LA(1);
                    if ( (LA89_0 == LTERM) ) 
                    {
                        alt89=1;
                    }

                }
                switch (alt89) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM181 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement1742); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM181, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop89;	/* break out of the loop */
            	    break;
                }
            }
            loop89: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_withStatement1745);
            expression182=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression182.tree, NULL); }

            // .//Emerson.g:272:40: ( LTERM )*

            for (;;)
            {
                int alt90=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA90_0 = LA(1);
                    if ( (LA90_0 == LTERM) ) 
                    {
                        alt90=1;
                    }

                }
                switch (alt90) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM183 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement1747); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM183, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop90;	/* break out of the loop */
            	    break;
                }
            }
            loop90: ; /* Jump out to here if this rule does not match */

            char_literal184 = (pANTLR3_COMMON_TOKEN) MATCHT(124, &FOLLOW_124_in_withStatement1750); 
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_124; stream_124->add(stream_124, char_literal184, NULL); }


            // .//Emerson.g:272:51: ( LTERM )*

            for (;;)
            {
                int alt91=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA91_0 = LA(1);
                    if ( (LA91_0 == LTERM) ) 
                    {
                        alt91=1;
                    }

                }
                switch (alt91) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM185 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_withStatement1752); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulewithStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM185, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop91;	/* break out of the loop */
            	    break;
                }
            }
            loop91: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_withStatement1755);
            statement186=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewithStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement186.tree, NULL); }

             
            /* AST REWRITE
             * elements          : expression, statement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 272:68: -> ^( WITH expression statement )
            	{
            	    // .//Emerson.g:272:71: ^( WITH expression statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WITH, (pANTLR3_UINT8)"WITH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewithStatementEx; /* Prevent compiler warnings */
    rulewithStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_139 != NULL) stream_139->free(stream_139);
        if (stream_122 != NULL) stream_122->free(stream_122);
        if (stream_124 != NULL) stream_124->free(stream_124);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(31, withStatement_StartIndex); }
    return retval;
}
/* $ANTLR end withStatement */

/** 
 * $ANTLR start labelledStatement
 * .//Emerson.g:275:1: labelledStatement : Identifier ( LTERM )* ':' ( LTERM )* statement -> ^( LABEL Identifier statement ) ;
 */
static EmersonParser_labelledStatement_return
labelledStatement(pEmersonParser ctx)
{   
    EmersonParser_labelledStatement_return retval;
    ANTLR3_UINT32 labelledStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    Identifier187;
    pANTLR3_COMMON_TOKEN    LTERM188;
    pANTLR3_COMMON_TOKEN    char_literal189;
    pANTLR3_COMMON_TOKEN    LTERM190;
    EmersonParser_statement_return statement191;
    #undef	RETURN_TYPE_statement191
    #define	RETURN_TYPE_statement191 EmersonParser_statement_return

    pANTLR3_BASE_TREE Identifier187_tree;
    pANTLR3_BASE_TREE LTERM188_tree;
    pANTLR3_BASE_TREE char_literal189_tree;
    pANTLR3_BASE_TREE LTERM190_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    /* Initialize rule variables
     */
    labelledStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(32)) )
    {
    	retval.start = 0;

        return retval; 
    }
    Identifier187       = NULL;
    LTERM188       = NULL;
    char_literal189       = NULL;
    LTERM190       = NULL;
    statement191.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    Identifier187_tree   = NULL;
    LTERM188_tree   = NULL;
    char_literal189_tree   = NULL;
    LTERM190_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:276:2: ( Identifier ( LTERM )* ':' ( LTERM )* statement -> ^( LABEL Identifier statement ) )
        // .//Emerson.g:276:4: Identifier ( LTERM )* ':' ( LTERM )* statement
        {
            Identifier187 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_labelledStatement1776); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier187, NULL); }


            // .//Emerson.g:276:15: ( LTERM )*

            for (;;)
            {
                int alt92=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA92_0 = LA(1);
                    if ( (LA92_0 == LTERM) ) 
                    {
                        alt92=1;
                    }

                }
                switch (alt92) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM188 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_labelledStatement1778); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelabelledStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM188, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop92;	/* break out of the loop */
            	    break;
                }
            }
            loop92: ; /* Jump out to here if this rule does not match */

            char_literal189 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_labelledStatement1781); 
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal189, NULL); }


            // .//Emerson.g:276:26: ( LTERM )*

            for (;;)
            {
                int alt93=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA93_0 = LA(1);
                    if ( (LA93_0 == LTERM) ) 
                    {
                        alt93=1;
                    }

                }
                switch (alt93) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM190 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_labelledStatement1783); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelabelledStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM190, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop93;	/* break out of the loop */
            	    break;
                }
            }
            loop93: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statement_in_labelledStatement1786);
            statement191=statement(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelabelledStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statement; stream_statement->add(stream_statement, statement191.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statement, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 276:43: -> ^( LABEL Identifier statement )
            	{
            	    // .//Emerson.g:276:46: ^( LABEL Identifier statement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LABEL, (pANTLR3_UINT8)"LABEL"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelabelledStatementEx; /* Prevent compiler warnings */
    rulelabelledStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(32, labelledStatement_StartIndex); }
    return retval;
}
/* $ANTLR end labelledStatement */

/** 
 * $ANTLR start switchStatement
 * .//Emerson.g:279:1: switchStatement : 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) ;
 */
static EmersonParser_switchStatement_return
switchStatement(pEmersonParser ctx)
{   
    EmersonParser_switchStatement_return retval;
    ANTLR3_UINT32 switchStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal192;
    pANTLR3_COMMON_TOKEN    LTERM193;
    pANTLR3_COMMON_TOKEN    char_literal194;
    pANTLR3_COMMON_TOKEN    LTERM195;
    pANTLR3_COMMON_TOKEN    LTERM197;
    pANTLR3_COMMON_TOKEN    char_literal198;
    pANTLR3_COMMON_TOKEN    LTERM199;
    EmersonParser_expression_return expression196;
    #undef	RETURN_TYPE_expression196
    #define	RETURN_TYPE_expression196 EmersonParser_expression_return

    EmersonParser_caseBlock_return caseBlock200;
    #undef	RETURN_TYPE_caseBlock200
    #define	RETURN_TYPE_caseBlock200 EmersonParser_caseBlock_return

    pANTLR3_BASE_TREE string_literal192_tree;
    pANTLR3_BASE_TREE LTERM193_tree;
    pANTLR3_BASE_TREE char_literal194_tree;
    pANTLR3_BASE_TREE LTERM195_tree;
    pANTLR3_BASE_TREE LTERM197_tree;
    pANTLR3_BASE_TREE char_literal198_tree;
    pANTLR3_BASE_TREE LTERM199_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_122;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_124;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_141;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseBlock;
    /* Initialize rule variables
     */
    switchStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(33)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal192       = NULL;
    LTERM193       = NULL;
    char_literal194       = NULL;
    LTERM195       = NULL;
    LTERM197       = NULL;
    char_literal198       = NULL;
    LTERM199       = NULL;
    expression196.tree = NULL;

    caseBlock200.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal192_tree   = NULL;
    LTERM193_tree   = NULL;
    char_literal194_tree   = NULL;
    LTERM195_tree   = NULL;
    LTERM197_tree   = NULL;
    char_literal198_tree   = NULL;
    LTERM199_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_122   = NULL;
    #define CREATE_stream_122  if (stream_122 == NULL) {stream_122 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 122"); } 
    stream_124   = NULL;
    #define CREATE_stream_124  if (stream_124 == NULL) {stream_124 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 124"); } 
    stream_141   = NULL;
    #define CREATE_stream_141  if (stream_141 == NULL) {stream_141 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 141"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_caseBlock   = NULL;
    #define CREATE_stream_caseBlock  if (stream_caseBlock == NULL) {stream_caseBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:280:2: ( 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock -> ^( SWITCH expression caseBlock ) )
        // .//Emerson.g:280:4: 'switch' ( LTERM )* '(' ( LTERM )* expression ( LTERM )* ')' ( LTERM )* caseBlock
        {
            string_literal192 = (pANTLR3_COMMON_TOKEN) MATCHT(141, &FOLLOW_141_in_switchStatement1809); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_141; stream_141->add(stream_141, string_literal192, NULL); }


            // .//Emerson.g:280:13: ( LTERM )*

            for (;;)
            {
                int alt94=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA94_0 = LA(1);
                    if ( (LA94_0 == LTERM) ) 
                    {
                        alt94=1;
                    }

                }
                switch (alt94) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM193 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement1811); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM193, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop94;	/* break out of the loop */
            	    break;
                }
            }
            loop94: ; /* Jump out to here if this rule does not match */

            char_literal194 = (pANTLR3_COMMON_TOKEN) MATCHT(122, &FOLLOW_122_in_switchStatement1814); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_122; stream_122->add(stream_122, char_literal194, NULL); }


            // .//Emerson.g:280:24: ( LTERM )*

            for (;;)
            {
                int alt95=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA95_0 = LA(1);
                    if ( (LA95_0 == LTERM) ) 
                    {
                        alt95=1;
                    }

                }
                switch (alt95) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM195 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement1816); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM195, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop95;	/* break out of the loop */
            	    break;
                }
            }
            loop95: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_switchStatement1819);
            expression196=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression196.tree, NULL); }

            // .//Emerson.g:280:42: ( LTERM )*

            for (;;)
            {
                int alt96=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA96_0 = LA(1);
                    if ( (LA96_0 == LTERM) ) 
                    {
                        alt96=1;
                    }

                }
                switch (alt96) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM197 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement1821); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM197, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop96;	/* break out of the loop */
            	    break;
                }
            }
            loop96: ; /* Jump out to here if this rule does not match */

            char_literal198 = (pANTLR3_COMMON_TOKEN) MATCHT(124, &FOLLOW_124_in_switchStatement1824); 
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_124; stream_124->add(stream_124, char_literal198, NULL); }


            // .//Emerson.g:280:53: ( LTERM )*

            for (;;)
            {
                int alt97=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA97_0 = LA(1);
                    if ( (LA97_0 == LTERM) ) 
                    {
                        alt97=1;
                    }

                }
                switch (alt97) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM199 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_switchStatement1826); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleswitchStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM199, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop97;	/* break out of the loop */
            	    break;
                }
            }
            loop97: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_caseBlock_in_switchStatement1829);
            caseBlock200=caseBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleswitchStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_caseBlock; stream_caseBlock->add(stream_caseBlock, caseBlock200.tree, NULL); }

             
            /* AST REWRITE
             * elements          : caseBlock, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 280:70: -> ^( SWITCH expression caseBlock )
            	{
            	    // .//Emerson.g:280:73: ^( SWITCH expression caseBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SWITCH, (pANTLR3_UINT8)"SWITCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_caseBlock == NULL ? NULL : stream_caseBlock->nextTree(stream_caseBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleswitchStatementEx; /* Prevent compiler warnings */
    ruleswitchStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_122 != NULL) stream_122->free(stream_122);
        if (stream_124 != NULL) stream_124->free(stream_124);
        if (stream_141 != NULL) stream_141->free(stream_141);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_caseBlock != NULL) stream_caseBlock->free(stream_caseBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(33, switchStatement_StartIndex); }
    return retval;
}
/* $ANTLR end switchStatement */

/** 
 * $ANTLR start caseBlock
 * .//Emerson.g:283:1: caseBlock : '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}' -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )? ;
 */
static EmersonParser_caseBlock_return
caseBlock(pEmersonParser ctx)
{   
    EmersonParser_caseBlock_return retval;
    ANTLR3_UINT32 caseBlock_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal201;
    pANTLR3_COMMON_TOKEN    LTERM202;
    pANTLR3_COMMON_TOKEN    LTERM203;
    pANTLR3_COMMON_TOKEN    LTERM205;
    pANTLR3_COMMON_TOKEN    LTERM206;
    pANTLR3_COMMON_TOKEN    char_literal207;
    EmersonParser_caseClause_return case1;
    #undef	RETURN_TYPE_case1
    #define	RETURN_TYPE_case1 EmersonParser_caseClause_return

    EmersonParser_caseClause_return case2;
    #undef	RETURN_TYPE_case2
    #define	RETURN_TYPE_case2 EmersonParser_caseClause_return

    EmersonParser_defaultClause_return defaultClause204;
    #undef	RETURN_TYPE_defaultClause204
    #define	RETURN_TYPE_defaultClause204 EmersonParser_defaultClause_return

    pANTLR3_BASE_TREE char_literal201_tree;
    pANTLR3_BASE_TREE LTERM202_tree;
    pANTLR3_BASE_TREE LTERM203_tree;
    pANTLR3_BASE_TREE LTERM205_tree;
    pANTLR3_BASE_TREE LTERM206_tree;
    pANTLR3_BASE_TREE char_literal207_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_caseClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_defaultClause;
    /* Initialize rule variables
     */
    caseBlock_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(34)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal201       = NULL;
    LTERM202       = NULL;
    LTERM203       = NULL;
    LTERM205       = NULL;
    LTERM206       = NULL;
    char_literal207       = NULL;
    case1.tree = NULL;

    case2.tree = NULL;

    defaultClause204.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal201_tree   = NULL;
    LTERM202_tree   = NULL;
    LTERM203_tree   = NULL;
    LTERM205_tree   = NULL;
    LTERM206_tree   = NULL;
    char_literal207_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_caseClause   = NULL;
    #define CREATE_stream_caseClause  if (stream_caseClause == NULL) {stream_caseClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule caseClause"); }
    stream_defaultClause   = NULL;
    #define CREATE_stream_defaultClause  if (stream_defaultClause == NULL) {stream_defaultClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule defaultClause"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:284:2: ( '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}' -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )? )
        // .//Emerson.g:284:4: '{' ( ( LTERM )* case1= caseClause )* ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )? ( LTERM )* '}'
        {
            char_literal201 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_caseBlock1851); 
            if  (HASEXCEPTION())
            {
                goto rulecaseBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal201, NULL); }


            // .//Emerson.g:284:8: ( ( LTERM )* case1= caseClause )*

            for (;;)
            {
                int alt99=2;
                alt99 = cdfa99.predict(ctx, RECOGNIZER, ISTREAM, &cdfa99);
                if  (HASEXCEPTION())
                {
                    goto rulecaseBlockEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt99) 
                {
            	case 1:
            	    // .//Emerson.g:284:9: ( LTERM )* case1= caseClause
            	    {

            	        // .//Emerson.g:284:9: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt98=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA98_0 = LA(1);
            	                if ( (LA98_0 == LTERM) ) 
            	                {
            	                    alt98=1;
            	                }

            	            }
            	            switch (alt98) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM202 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock1854); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM202, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop98;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop98: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock1859);
            	        case1=caseClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, case1.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop99;	/* break out of the loop */
            	    break;
                }
            }
            loop99: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:284:35: ( ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )* )?
            {
                int alt103=2;
                alt103 = cdfa103.predict(ctx, RECOGNIZER, ISTREAM, &cdfa103);
                if  (HASEXCEPTION())
                {
                    goto rulecaseBlockEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt103) 
                {
            	case 1:
            	    // .//Emerson.g:284:36: ( LTERM )* defaultClause ( ( LTERM )* case2= caseClause )*
            	    {

            	        // .//Emerson.g:284:36: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt100=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA100_0 = LA(1);
            	                if ( (LA100_0 == LTERM) ) 
            	                {
            	                    alt100=1;
            	                }

            	            }
            	            switch (alt100) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM203 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock1864); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM203, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop100;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop100: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_defaultClause_in_caseBlock1867);
            	        defaultClause204=defaultClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_defaultClause; stream_defaultClause->add(stream_defaultClause, defaultClause204.tree, NULL); }

            	        // .//Emerson.g:284:57: ( ( LTERM )* case2= caseClause )*

            	        for (;;)
            	        {
            	            int alt102=2;
            	            alt102 = cdfa102.predict(ctx, RECOGNIZER, ISTREAM, &cdfa102);
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulecaseBlockEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt102) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:284:58: ( LTERM )* case2= caseClause
            	        	    {

            	        	        // .//Emerson.g:284:58: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt101=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA101_0 = LA(1);
            	        	                if ( (LA101_0 == LTERM) ) 
            	        	                {
            	        	                    alt101=1;
            	        	                }

            	        	            }
            	        	            switch (alt101) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM205 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock1870); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto rulecaseBlockEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM205, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop101;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop101: ; /* Jump out to here if this rule does not match */

            	        	        FOLLOWPUSH(FOLLOW_caseClause_in_caseBlock1875);
            	        	        case2=caseClause(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecaseBlockEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_caseClause; stream_caseClause->add(stream_caseClause, case2.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop102;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop102: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // .//Emerson.g:284:86: ( LTERM )*

            for (;;)
            {
                int alt104=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA104_0 = LA(1);
                    if ( (LA104_0 == LTERM) ) 
                    {
                        alt104=1;
                    }

                }
                switch (alt104) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM206 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseBlock1881); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseBlockEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM206, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop104;	/* break out of the loop */
            	    break;
                }
            }
            loop104: ; /* Jump out to here if this rule does not match */

            char_literal207 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_caseBlock1884); 
            if  (HASEXCEPTION())
            {
                goto rulecaseBlockEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal207, NULL); }


             
            /* AST REWRITE
             * elements          : defaultClause, case1, case2
             * token labels      : 
             * rule labels       : case2, retval, case1
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case2;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_case1;

            	stream_case2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token case2", case2.tree != NULL ? case2.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_case1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token case1", case1.tree != NULL ? case1.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 284:97: -> ( ^( $case1) )* ( ( ^( defaultClause ) )* )? ( ( ^( $case2) )* )?
            	{
            	    // .//Emerson.g:284:101: ( ^( $case1) )*
            	    {
            	    	while ( (stream_case1 != NULL && stream_case1->hasNext(stream_case1))  )
            	    	{
            	    		// .//Emerson.g:284:101: ^( $case1)
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_case1 == NULL ? NULL : stream_case1->nextNode(stream_case1), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	if (stream_case1 != NULL) stream_case1->reset(stream_case1);

            	    }
            	    // .//Emerson.g:284:112: ( ( ^( defaultClause ) )* )?
            	    {
            	    	if ( (stream_defaultClause != NULL && stream_defaultClause->hasNext(stream_defaultClause))  )
            	    	{
            	    		// .//Emerson.g:284:113: ( ^( defaultClause ) )*
            	    		{
            	    			while ( (stream_defaultClause != NULL && stream_defaultClause->hasNext(stream_defaultClause))  )
            	    			{
            	    				// .//Emerson.g:284:113: ^( defaultClause )
            	    				{
            	    				    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    				    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_defaultClause == NULL ? NULL : stream_defaultClause->nextNode(stream_defaultClause), root_1));

            	    				    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    				}

            	    			}
            	    			if (stream_defaultClause != NULL) stream_defaultClause->reset(stream_defaultClause);

            	    		}

            	    	}
            	    	if ( stream_defaultClause != NULL) stream_defaultClause->reset(stream_defaultClause);

            	    }
            	    // .//Emerson.g:284:133: ( ( ^( $case2) )* )?
            	    {
            	    	if ( (stream_case2 != NULL && stream_case2->hasNext(stream_case2))  )
            	    	{
            	    		// .//Emerson.g:284:134: ( ^( $case2) )*
            	    		{
            	    			while ( (stream_case2 != NULL && stream_case2->hasNext(stream_case2))  )
            	    			{
            	    				// .//Emerson.g:284:134: ^( $case2)
            	    				{
            	    				    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    				    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_case2 == NULL ? NULL : stream_case2->nextNode(stream_case2), root_1));

            	    				    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    				}

            	    			}
            	    			if (stream_case2 != NULL) stream_case2->reset(stream_case2);

            	    		}

            	    	}
            	    	if ( stream_case2 != NULL) stream_case2->reset(stream_case2);

            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_case2 != NULL) stream_case2->free(stream_case2);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_case1 != NULL) stream_case1->free(stream_case1);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseBlockEx; /* Prevent compiler warnings */
    rulecaseBlockEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_caseClause != NULL) stream_caseClause->free(stream_caseClause);
        if (stream_defaultClause != NULL) stream_defaultClause->free(stream_defaultClause);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(34, caseBlock_StartIndex); }
    return retval;
}
/* $ANTLR end caseBlock */

/** 
 * $ANTLR start caseClause
 * .//Emerson.g:287:1: caseClause : 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( CASE expression ( statementList )? ) ;
 */
static EmersonParser_caseClause_return
caseClause(pEmersonParser ctx)
{   
    EmersonParser_caseClause_return retval;
    ANTLR3_UINT32 caseClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal208;
    pANTLR3_COMMON_TOKEN    LTERM209;
    pANTLR3_COMMON_TOKEN    LTERM211;
    pANTLR3_COMMON_TOKEN    char_literal212;
    pANTLR3_COMMON_TOKEN    LTERM213;
    EmersonParser_expression_return expression210;
    #undef	RETURN_TYPE_expression210
    #define	RETURN_TYPE_expression210 EmersonParser_expression_return

    EmersonParser_statementList_return statementList214;
    #undef	RETURN_TYPE_statementList214
    #define	RETURN_TYPE_statementList214 EmersonParser_statementList_return

    pANTLR3_BASE_TREE string_literal208_tree;
    pANTLR3_BASE_TREE LTERM209_tree;
    pANTLR3_BASE_TREE LTERM211_tree;
    pANTLR3_BASE_TREE char_literal212_tree;
    pANTLR3_BASE_TREE LTERM213_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_142;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    caseClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(35)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal208       = NULL;
    LTERM209       = NULL;
    LTERM211       = NULL;
    char_literal212       = NULL;
    LTERM213       = NULL;
    expression210.tree = NULL;

    statementList214.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal208_tree   = NULL;
    LTERM209_tree   = NULL;
    LTERM211_tree   = NULL;
    char_literal212_tree   = NULL;
    LTERM213_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_142   = NULL;
    #define CREATE_stream_142  if (stream_142 == NULL) {stream_142 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 142"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:288:2: ( 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( CASE expression ( statementList )? ) )
        // .//Emerson.g:288:4: 'case' ( LTERM )* expression ( LTERM )* ':' ( LTERM )* ( statementList )?
        {
            string_literal208 = (pANTLR3_COMMON_TOKEN) MATCHT(142, &FOLLOW_142_in_caseClause1921); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_142; stream_142->add(stream_142, string_literal208, NULL); }


            // .//Emerson.g:288:11: ( LTERM )*

            for (;;)
            {
                int alt105=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA105_0 = LA(1);
                    if ( (LA105_0 == LTERM) ) 
                    {
                        alt105=1;
                    }

                }
                switch (alt105) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM209 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause1923); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM209, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop105;	/* break out of the loop */
            	    break;
                }
            }
            loop105: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_caseClause1926);
            expression210=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression210.tree, NULL); }

            // .//Emerson.g:288:29: ( LTERM )*

            for (;;)
            {
                int alt106=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA106_0 = LA(1);
                    if ( (LA106_0 == LTERM) ) 
                    {
                        alt106=1;
                    }

                }
                switch (alt106) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM211 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause1928); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM211, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop106;	/* break out of the loop */
            	    break;
                }
            }
            loop106: ; /* Jump out to here if this rule does not match */

            char_literal212 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_caseClause1931); 
            if  (HASEXCEPTION())
            {
                goto rulecaseClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal212, NULL); }


            // .//Emerson.g:288:40: ( LTERM )*

            for (;;)
            {
                int alt107=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA107_0 = LA(1);
                    if ( (LA107_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA107_2 = LA(2);
                            if ( (synpred123_Emerson(ctx)) ) 
                            {
                                alt107=1;
                            }

                        }
                    }

                }
                switch (alt107) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM213 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_caseClause1933); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM213, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop107;	/* break out of the loop */
            	    break;
                }
            }
            loop107: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:288:47: ( statementList )?
            {
                int alt108=2;
                {
                    int LA108_0 = LA(1);
                    if ( (((LA108_0 >= Identifier) && (LA108_0 <= NumericLiteral)) || ((LA108_0 >= 121) && (LA108_0 <= 122)) || LA108_0 == 125 || ((LA108_0 >= 127) && (LA108_0 <= 128)) || LA108_0 == 130 || ((LA108_0 >= 132) && (LA108_0 <= 134)) || ((LA108_0 >= 136) && (LA108_0 <= 139)) || LA108_0 == 141 || ((LA108_0 >= 144) && (LA108_0 <= 145)) || ((LA108_0 >= 150) && (LA108_0 <= 151)) || ((LA108_0 >= 183) && (LA108_0 <= 184)) || ((LA108_0 >= 188) && (LA108_0 <= 198))) ) 
                    {
                        alt108=1;
                    }
                }
                switch (alt108) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_caseClause1936);
            	        statementList214=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecaseClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList214.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : statementList, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 288:62: -> ^( CASE expression ( statementList )? )
            	{
            	    // .//Emerson.g:288:65: ^( CASE expression ( statementList )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CASE, (pANTLR3_UINT8)"CASE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));
            	        // .//Emerson.g:288:84: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecaseClauseEx; /* Prevent compiler warnings */
    rulecaseClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_142 != NULL) stream_142->free(stream_142);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(35, caseClause_StartIndex); }
    return retval;
}
/* $ANTLR end caseClause */

/** 
 * $ANTLR start defaultClause
 * .//Emerson.g:291:1: defaultClause : 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( DEFAULT ( statementList )? ) ;
 */
static EmersonParser_defaultClause_return
defaultClause(pEmersonParser ctx)
{   
    EmersonParser_defaultClause_return retval;
    ANTLR3_UINT32 defaultClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal215;
    pANTLR3_COMMON_TOKEN    LTERM216;
    pANTLR3_COMMON_TOKEN    char_literal217;
    pANTLR3_COMMON_TOKEN    LTERM218;
    EmersonParser_statementList_return statementList219;
    #undef	RETURN_TYPE_statementList219
    #define	RETURN_TYPE_statementList219 EmersonParser_statementList_return

    pANTLR3_BASE_TREE string_literal215_tree;
    pANTLR3_BASE_TREE LTERM216_tree;
    pANTLR3_BASE_TREE char_literal217_tree;
    pANTLR3_BASE_TREE LTERM218_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_143;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementList;
    /* Initialize rule variables
     */
    defaultClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(36)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal215       = NULL;
    LTERM216       = NULL;
    char_literal217       = NULL;
    LTERM218       = NULL;
    statementList219.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal215_tree   = NULL;
    LTERM216_tree   = NULL;
    char_literal217_tree   = NULL;
    LTERM218_tree   = NULL;

    stream_143   = NULL;
    #define CREATE_stream_143  if (stream_143 == NULL) {stream_143 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 143"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_statementList   = NULL;
    #define CREATE_stream_statementList  if (stream_statementList == NULL) {stream_statementList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementList"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:292:2: ( 'default' ( LTERM )* ':' ( LTERM )* ( statementList )? -> ^( DEFAULT ( statementList )? ) )
        // .//Emerson.g:292:4: 'default' ( LTERM )* ':' ( LTERM )* ( statementList )?
        {
            string_literal215 = (pANTLR3_COMMON_TOKEN) MATCHT(143, &FOLLOW_143_in_defaultClause1961); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_143; stream_143->add(stream_143, string_literal215, NULL); }


            // .//Emerson.g:292:14: ( LTERM )*

            for (;;)
            {
                int alt109=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA109_0 = LA(1);
                    if ( (LA109_0 == LTERM) ) 
                    {
                        alt109=1;
                    }

                }
                switch (alt109) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM216 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause1963); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM216, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop109;	/* break out of the loop */
            	    break;
                }
            }
            loop109: ; /* Jump out to here if this rule does not match */

            char_literal217 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_defaultClause1966); 
            if  (HASEXCEPTION())
            {
                goto ruledefaultClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal217, NULL); }


            // .//Emerson.g:292:25: ( LTERM )*

            for (;;)
            {
                int alt110=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA110_0 = LA(1);
                    if ( (LA110_0 == LTERM) ) 
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA110_2 = LA(2);
                            if ( (synpred126_Emerson(ctx)) ) 
                            {
                                alt110=1;
                            }

                        }
                    }

                }
                switch (alt110) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM218 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_defaultClause1968); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM218, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop110;	/* break out of the loop */
            	    break;
                }
            }
            loop110: ; /* Jump out to here if this rule does not match */


            // .//Emerson.g:292:32: ( statementList )?
            {
                int alt111=2;
                {
                    int LA111_0 = LA(1);
                    if ( (((LA111_0 >= Identifier) && (LA111_0 <= NumericLiteral)) || ((LA111_0 >= 121) && (LA111_0 <= 122)) || LA111_0 == 125 || ((LA111_0 >= 127) && (LA111_0 <= 128)) || LA111_0 == 130 || ((LA111_0 >= 132) && (LA111_0 <= 134)) || ((LA111_0 >= 136) && (LA111_0 <= 139)) || LA111_0 == 141 || ((LA111_0 >= 144) && (LA111_0 <= 145)) || ((LA111_0 >= 150) && (LA111_0 <= 151)) || ((LA111_0 >= 183) && (LA111_0 <= 184)) || ((LA111_0 >= 188) && (LA111_0 <= 198))) ) 
                    {
                        alt111=1;
                    }
                }
                switch (alt111) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: statementList
            	    {
            	        FOLLOWPUSH(FOLLOW_statementList_in_defaultClause1971);
            	        statementList219=statementList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledefaultClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_statementList; stream_statementList->add(stream_statementList, statementList219.tree, NULL); }

            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : statementList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 292:47: -> ^( DEFAULT ( statementList )? )
            	{
            	    // .//Emerson.g:292:50: ^( DEFAULT ( statementList )? )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DEFAULT, (pANTLR3_UINT8)"DEFAULT"), root_1));

            	        // .//Emerson.g:292:60: ( statementList )?
            	        {
            	        	if ( (stream_statementList != NULL && stream_statementList->hasNext(stream_statementList))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_statementList == NULL ? NULL : stream_statementList->nextTree(stream_statementList));

            	        	}
            	        	if ( stream_statementList != NULL) stream_statementList->reset(stream_statementList);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledefaultClauseEx; /* Prevent compiler warnings */
    ruledefaultClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_143 != NULL) stream_143->free(stream_143);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_statementList != NULL) stream_statementList->free(stream_statementList);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(36, defaultClause_StartIndex); }
    return retval;
}
/* $ANTLR end defaultClause */

/** 
 * $ANTLR start throwStatement
 * .//Emerson.g:295:1: throwStatement : 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) ;
 */
static EmersonParser_throwStatement_return
throwStatement(pEmersonParser ctx)
{   
    EmersonParser_throwStatement_return retval;
    ANTLR3_UINT32 throwStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal220;
    pANTLR3_COMMON_TOKEN    LTERM222;
    pANTLR3_COMMON_TOKEN    char_literal223;
    EmersonParser_expression_return expression221;
    #undef	RETURN_TYPE_expression221
    #define	RETURN_TYPE_expression221 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal220_tree;
    pANTLR3_BASE_TREE LTERM222_tree;
    pANTLR3_BASE_TREE char_literal223_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_144;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    throwStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(37)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal220       = NULL;
    LTERM222       = NULL;
    char_literal223       = NULL;
    expression221.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal220_tree   = NULL;
    LTERM222_tree   = NULL;
    char_literal223_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_144   = NULL;
    #define CREATE_stream_144  if (stream_144 == NULL) {stream_144 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 144"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:296:2: ( 'throw' expression ( LTERM | ';' ) -> ^( THROW expression ) )
        // .//Emerson.g:296:4: 'throw' expression ( LTERM | ';' )
        {
            string_literal220 = (pANTLR3_COMMON_TOKEN) MATCHT(144, &FOLLOW_144_in_throwStatement1993); 
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_144; stream_144->add(stream_144, string_literal220, NULL); }

            FOLLOWPUSH(FOLLOW_expression_in_throwStatement1995);
            expression221=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulethrowStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression221.tree, NULL); }

            // .//Emerson.g:296:23: ( LTERM | ';' )
            {
                int alt112=2;

                {
                    int LA112_0 = LA(1);
                    if ( (LA112_0 == LTERM) ) 
                    {
                        alt112=1;
                    }
                    else if ( (LA112_0 == 128) ) 
                    {
                        alt112=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 112;
                        EXCEPTION->state        = 0;


                        goto rulethrowStatementEx;
                    }
                }
                switch (alt112) 
                {
            	case 1:
            	    // .//Emerson.g:296:24: LTERM
            	    {
            	        LTERM222 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_throwStatement1998); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM222, NULL); }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:296:32: ';'
            	    {
            	        char_literal223 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_throwStatement2002); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulethrowStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal223, NULL); }


            	    }
            	    break;

                }
            }

             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 296:37: -> ^( THROW expression )
            	{
            	    // .//Emerson.g:296:40: ^( THROW expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, THROW, (pANTLR3_UINT8)"THROW"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulethrowStatementEx; /* Prevent compiler warnings */
    rulethrowStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_144 != NULL) stream_144->free(stream_144);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(37, throwStatement_StartIndex); }
    return retval;
}
/* $ANTLR end throwStatement */

/** 
 * $ANTLR start tryStatement
 * .//Emerson.g:299:1: tryStatement : ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) ) ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? ) ;
 */
static EmersonParser_tryStatement_return
tryStatement(pEmersonParser ctx)
{   
    EmersonParser_tryStatement_return retval;
    ANTLR3_UINT32 tryStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal224;
    pANTLR3_COMMON_TOKEN    LTERM225;
    pANTLR3_COMMON_TOKEN    LTERM227;
    pANTLR3_COMMON_TOKEN    LTERM230;
    EmersonParser_statementBlock_return statementBlock226;
    #undef	RETURN_TYPE_statementBlock226
    #define	RETURN_TYPE_statementBlock226 EmersonParser_statementBlock_return

    EmersonParser_finallyClause_return finallyClause228;
    #undef	RETURN_TYPE_finallyClause228
    #define	RETURN_TYPE_finallyClause228 EmersonParser_finallyClause_return

    EmersonParser_catchClause_return catchClause229;
    #undef	RETURN_TYPE_catchClause229
    #define	RETURN_TYPE_catchClause229 EmersonParser_catchClause_return

    EmersonParser_finallyClause_return finallyClause231;
    #undef	RETURN_TYPE_finallyClause231
    #define	RETURN_TYPE_finallyClause231 EmersonParser_finallyClause_return

    pANTLR3_BASE_TREE string_literal224_tree;
    pANTLR3_BASE_TREE LTERM225_tree;
    pANTLR3_BASE_TREE LTERM227_tree;
    pANTLR3_BASE_TREE LTERM230_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_145;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_finallyClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_catchClause;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    tryStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(38)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal224       = NULL;
    LTERM225       = NULL;
    LTERM227       = NULL;
    LTERM230       = NULL;
    statementBlock226.tree = NULL;

    finallyClause228.tree = NULL;

    catchClause229.tree = NULL;

    finallyClause231.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal224_tree   = NULL;
    LTERM225_tree   = NULL;
    LTERM227_tree   = NULL;
    LTERM230_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_145   = NULL;
    #define CREATE_stream_145  if (stream_145 == NULL) {stream_145 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 145"); } 
    stream_finallyClause   = NULL;
    #define CREATE_stream_finallyClause  if (stream_finallyClause == NULL) {stream_finallyClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule finallyClause"); }
    stream_catchClause   = NULL;
    #define CREATE_stream_catchClause  if (stream_catchClause == NULL) {stream_catchClause = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule catchClause"); }
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:300:2: ( ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) ) ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? ) )
        // .//Emerson.g:300:4: ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) ) ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? )
        {
            // .//Emerson.g:300:4: ( 'try' ( LTERM )* statementBlock ( LTERM )* -> ^( TRY statementBlock ) )
            // .//Emerson.g:300:5: 'try' ( LTERM )* statementBlock ( LTERM )*
            {
                string_literal224 = (pANTLR3_COMMON_TOKEN) MATCHT(145, &FOLLOW_145_in_tryStatement2023); 
                if  (HASEXCEPTION())
                {
                    goto ruletryStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_145; stream_145->add(stream_145, string_literal224, NULL); }


                // .//Emerson.g:300:11: ( LTERM )*

                for (;;)
                {
                    int alt113=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA113_0 = LA(1);
                        if ( (LA113_0 == LTERM) ) 
                        {
                            alt113=1;
                        }

                    }
                    switch (alt113) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM225 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2025); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruletryStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM225, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop113;	/* break out of the loop */
                	    break;
                    }
                }
                loop113: ; /* Jump out to here if this rule does not match */

                FOLLOWPUSH(FOLLOW_statementBlock_in_tryStatement2028);
                statementBlock226=statementBlock(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruletryStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock226.tree, NULL); }

                // .//Emerson.g:300:33: ( LTERM )*

                for (;;)
                {
                    int alt114=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA114_0 = LA(1);
                        if ( (LA114_0 == LTERM) ) 
                        {
                            alt114=1;
                        }

                    }
                    switch (alt114) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM227 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2030); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto ruletryStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM227, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop114;	/* break out of the loop */
                	    break;
                    }
                }
                loop114: ; /* Jump out to here if this rule does not match */


                 
                /* AST REWRITE
                 * elements          : statementBlock
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 300:40: -> ^( TRY statementBlock )
                	{
                	    // .//Emerson.g:300:43: ^( TRY statementBlock )
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRY, (pANTLR3_UINT8)"TRY"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:300:65: ( finallyClause -> ^( $tryStatement finallyClause ) | catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )? )
            {
                int alt117=2;

                {
                    int LA117_0 = LA(1);
                    if ( (LA117_0 == 147) ) 
                    {
                        alt117=1;
                    }
                    else if ( (LA117_0 == 146) ) 
                    {
                        alt117=2;
                    }
                    else 
                    {
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE; 
                            return retval;
                        }
                    
                        CONSTRUCTEX();
                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message      = (void *)"";
                        EXCEPTION->decisionNum  = 117;
                        EXCEPTION->state        = 0;


                        goto ruletryStatementEx;
                    }
                }
                switch (alt117) 
                {
            	case 1:
            	    // .//Emerson.g:300:66: finallyClause
            	    {
            	        FOLLOWPUSH(FOLLOW_finallyClause_in_tryStatement2042);
            	        finallyClause228=finallyClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyClause; stream_finallyClause->add(stream_finallyClause, finallyClause228.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : tryStatement, finallyClause
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 300:80: -> ^( $tryStatement finallyClause )
            	        	{
            	        	    // .//Emerson.g:300:83: ^( $tryStatement finallyClause )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_finallyClause == NULL ? NULL : stream_finallyClause->nextTree(stream_finallyClause));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:300:115: catchClause ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?
            	    {
            	        FOLLOWPUSH(FOLLOW_catchClause_in_tryStatement2054);
            	        catchClause229=catchClause(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletryStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_catchClause; stream_catchClause->add(stream_catchClause, catchClause229.tree, NULL); }

            	        // .//Emerson.g:300:127: ( ( LTERM )* finallyClause -> ^( $tryStatement catchClause finallyClause ) )?
            	        {
            	            int alt116=2;
            	            alt116 = cdfa116.predict(ctx, RECOGNIZER, ISTREAM, &cdfa116);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruletryStatementEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt116) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:300:128: ( LTERM )* finallyClause
            	        	    {

            	        	        // .//Emerson.g:300:128: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt115=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA115_0 = LA(1);
            	        	                if ( (LA115_0 == LTERM) ) 
            	        	                {
            	        	                    alt115=1;
            	        	                }

            	        	            }
            	        	            switch (alt115) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM230 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_tryStatement2057); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruletryStatementEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM230, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop115;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop115: ; /* Jump out to here if this rule does not match */

            	        	        FOLLOWPUSH(FOLLOW_finallyClause_in_tryStatement2060);
            	        	        finallyClause231=finallyClause(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruletryStatementEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_finallyClause; stream_finallyClause->add(stream_finallyClause, finallyClause231.tree, NULL); }

            	        	         
            	        	        /* AST REWRITE
            	        	         * elements          : tryStatement, finallyClause, catchClause
            	        	         * token labels      : 
            	        	         * rule labels       : retval
            	        	         * token list labels : 
            	        	         * rule list labels  : 
            	        	         */
            	        	        if ( BACKTRACKING==0 ) 
            	        	        {
            	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        	retval.tree    = root_0;
            	        	        	// 300:149: -> ^( $tryStatement catchClause finallyClause )
            	        	        	{
            	        	        	    // .//Emerson.g:300:152: ^( $tryStatement catchClause finallyClause )
            	        	        	    {
            	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_catchClause == NULL ? NULL : stream_catchClause->nextTree(stream_catchClause));
            	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_finallyClause == NULL ? NULL : stream_finallyClause->nextTree(stream_finallyClause));

            	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	        	    }

            	        	        	}

            	        	        	retval.tree = root_0; // set result root
            	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        	        }
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletryStatementEx; /* Prevent compiler warnings */
    ruletryStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_145 != NULL) stream_145->free(stream_145);
        if (stream_finallyClause != NULL) stream_finallyClause->free(stream_finallyClause);
        if (stream_catchClause != NULL) stream_catchClause->free(stream_catchClause);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(38, tryStatement_StartIndex); }
    return retval;
}
/* $ANTLR end tryStatement */

/** 
 * $ANTLR start catchClause
 * .//Emerson.g:303:1: catchClause : 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) ;
 */
static EmersonParser_catchClause_return
catchClause(pEmersonParser ctx)
{   
    EmersonParser_catchClause_return retval;
    ANTLR3_UINT32 catchClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal232;
    pANTLR3_COMMON_TOKEN    LTERM233;
    pANTLR3_COMMON_TOKEN    char_literal234;
    pANTLR3_COMMON_TOKEN    LTERM235;
    pANTLR3_COMMON_TOKEN    Identifier236;
    pANTLR3_COMMON_TOKEN    LTERM237;
    pANTLR3_COMMON_TOKEN    char_literal238;
    pANTLR3_COMMON_TOKEN    LTERM239;
    EmersonParser_statementBlock_return statementBlock240;
    #undef	RETURN_TYPE_statementBlock240
    #define	RETURN_TYPE_statementBlock240 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal232_tree;
    pANTLR3_BASE_TREE LTERM233_tree;
    pANTLR3_BASE_TREE char_literal234_tree;
    pANTLR3_BASE_TREE LTERM235_tree;
    pANTLR3_BASE_TREE Identifier236_tree;
    pANTLR3_BASE_TREE LTERM237_tree;
    pANTLR3_BASE_TREE char_literal238_tree;
    pANTLR3_BASE_TREE LTERM239_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_146;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_122;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_124;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    catchClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(39)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal232       = NULL;
    LTERM233       = NULL;
    char_literal234       = NULL;
    LTERM235       = NULL;
    Identifier236       = NULL;
    LTERM237       = NULL;
    char_literal238       = NULL;
    LTERM239       = NULL;
    statementBlock240.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal232_tree   = NULL;
    LTERM233_tree   = NULL;
    char_literal234_tree   = NULL;
    LTERM235_tree   = NULL;
    Identifier236_tree   = NULL;
    LTERM237_tree   = NULL;
    char_literal238_tree   = NULL;
    LTERM239_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_146   = NULL;
    #define CREATE_stream_146  if (stream_146 == NULL) {stream_146 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 146"); } 
    stream_122   = NULL;
    #define CREATE_stream_122  if (stream_122 == NULL) {stream_122 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 122"); } 
    stream_124   = NULL;
    #define CREATE_stream_124  if (stream_124 == NULL) {stream_124 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 124"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:304:2: ( 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock -> ^( CATCH Identifier statementBlock ) )
        // .//Emerson.g:304:4: 'catch' ( LTERM )* '(' ( LTERM )* Identifier ( LTERM )* ')' ( LTERM )* statementBlock
        {
            string_literal232 = (pANTLR3_COMMON_TOKEN) MATCHT(146, &FOLLOW_146_in_catchClause2093); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_146; stream_146->add(stream_146, string_literal232, NULL); }


            // .//Emerson.g:304:12: ( LTERM )*

            for (;;)
            {
                int alt118=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA118_0 = LA(1);
                    if ( (LA118_0 == LTERM) ) 
                    {
                        alt118=1;
                    }

                }
                switch (alt118) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM233 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2095); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM233, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop118;	/* break out of the loop */
            	    break;
                }
            }
            loop118: ; /* Jump out to here if this rule does not match */

            char_literal234 = (pANTLR3_COMMON_TOKEN) MATCHT(122, &FOLLOW_122_in_catchClause2098); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_122; stream_122->add(stream_122, char_literal234, NULL); }


            // .//Emerson.g:304:23: ( LTERM )*

            for (;;)
            {
                int alt119=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA119_0 = LA(1);
                    if ( (LA119_0 == LTERM) ) 
                    {
                        alt119=1;
                    }

                }
                switch (alt119) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM235 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2100); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM235, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop119;	/* break out of the loop */
            	    break;
                }
            }
            loop119: ; /* Jump out to here if this rule does not match */

            Identifier236 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_catchClause2103); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier236, NULL); }


            // .//Emerson.g:304:41: ( LTERM )*

            for (;;)
            {
                int alt120=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA120_0 = LA(1);
                    if ( (LA120_0 == LTERM) ) 
                    {
                        alt120=1;
                    }

                }
                switch (alt120) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM237 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2105); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM237, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop120;	/* break out of the loop */
            	    break;
                }
            }
            loop120: ; /* Jump out to here if this rule does not match */

            char_literal238 = (pANTLR3_COMMON_TOKEN) MATCHT(124, &FOLLOW_124_in_catchClause2108); 
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_124; stream_124->add(stream_124, char_literal238, NULL); }


            // .//Emerson.g:304:52: ( LTERM )*

            for (;;)
            {
                int alt121=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA121_0 = LA(1);
                    if ( (LA121_0 == LTERM) ) 
                    {
                        alt121=1;
                    }

                }
                switch (alt121) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM239 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_catchClause2110); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecatchClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM239, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop121;	/* break out of the loop */
            	    break;
                }
            }
            loop121: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_catchClause2113);
            statementBlock240=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecatchClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock240.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock, Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 304:74: -> ^( CATCH Identifier statementBlock )
            	{
            	    // .//Emerson.g:304:77: ^( CATCH Identifier statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CATCH, (pANTLR3_UINT8)"CATCH"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecatchClauseEx; /* Prevent compiler warnings */
    rulecatchClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_146 != NULL) stream_146->free(stream_146);
        if (stream_122 != NULL) stream_122->free(stream_122);
        if (stream_124 != NULL) stream_124->free(stream_124);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(39, catchClause_StartIndex); }
    return retval;
}
/* $ANTLR end catchClause */

/** 
 * $ANTLR start finallyClause
 * .//Emerson.g:307:1: finallyClause : 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) ;
 */
static EmersonParser_finallyClause_return
finallyClause(pEmersonParser ctx)
{   
    EmersonParser_finallyClause_return retval;
    ANTLR3_UINT32 finallyClause_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal241;
    pANTLR3_COMMON_TOKEN    LTERM242;
    EmersonParser_statementBlock_return statementBlock243;
    #undef	RETURN_TYPE_statementBlock243
    #define	RETURN_TYPE_statementBlock243 EmersonParser_statementBlock_return

    pANTLR3_BASE_TREE string_literal241_tree;
    pANTLR3_BASE_TREE LTERM242_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_147;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statementBlock;
    /* Initialize rule variables
     */
    finallyClause_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(40)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal241       = NULL;
    LTERM242       = NULL;
    statementBlock243.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal241_tree   = NULL;
    LTERM242_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_147   = NULL;
    #define CREATE_stream_147  if (stream_147 == NULL) {stream_147 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 147"); } 
    stream_statementBlock   = NULL;
    #define CREATE_stream_statementBlock  if (stream_statementBlock == NULL) {stream_statementBlock = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statementBlock"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:308:2: ( 'finally' ( LTERM )* statementBlock -> ^( FINALLY statementBlock ) )
        // .//Emerson.g:308:4: 'finally' ( LTERM )* statementBlock
        {
            string_literal241 = (pANTLR3_COMMON_TOKEN) MATCHT(147, &FOLLOW_147_in_finallyClause2135); 
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_147; stream_147->add(stream_147, string_literal241, NULL); }


            // .//Emerson.g:308:14: ( LTERM )*

            for (;;)
            {
                int alt122=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA122_0 = LA(1);
                    if ( (LA122_0 == LTERM) ) 
                    {
                        alt122=1;
                    }

                }
                switch (alt122) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM242 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_finallyClause2137); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefinallyClauseEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM242, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop122;	/* break out of the loop */
            	    break;
                }
            }
            loop122: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_statementBlock_in_finallyClause2140);
            statementBlock243=statementBlock(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefinallyClauseEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_statementBlock; stream_statementBlock->add(stream_statementBlock, statementBlock243.tree, NULL); }

             
            /* AST REWRITE
             * elements          : statementBlock
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 308:36: -> ^( FINALLY statementBlock )
            	{
            	    // .//Emerson.g:308:39: ^( FINALLY statementBlock )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FINALLY, (pANTLR3_UINT8)"FINALLY"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statementBlock == NULL ? NULL : stream_statementBlock->nextTree(stream_statementBlock));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefinallyClauseEx; /* Prevent compiler warnings */
    rulefinallyClauseEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_147 != NULL) stream_147->free(stream_147);
        if (stream_statementBlock != NULL) stream_statementBlock->free(stream_statementBlock);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(40, finallyClause_StartIndex); }
    return retval;
}
/* $ANTLR end finallyClause */

/** 
 * $ANTLR start msgSendStatement
 * .//Emerson.g:312:1: msgSendStatement : (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )? ;
 */
static EmersonParser_msgSendStatement_return
msgSendStatement(pEmersonParser ctx)
{   
    EmersonParser_msgSendStatement_return retval;
    ANTLR3_UINT32 msgSendStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM244;
    pANTLR3_COMMON_TOKEN    string_literal245;
    pANTLR3_COMMON_TOKEN    LTERM246;
    pANTLR3_COMMON_TOKEN    char_literal247;
    pANTLR3_COMMON_TOKEN    string_literal248;
    EmersonParser_leftHandSideExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_leftHandSideExpression_return

    EmersonParser_leftHandSideExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_leftHandSideExpression_return

    EmersonParser_memberExpression_return memberExpression249;
    #undef	RETURN_TYPE_memberExpression249
    #define	RETURN_TYPE_memberExpression249 EmersonParser_memberExpression_return

    pANTLR3_BASE_TREE LTERM244_tree;
    pANTLR3_BASE_TREE string_literal245_tree;
    pANTLR3_BASE_TREE LTERM246_tree;
    pANTLR3_BASE_TREE char_literal247_tree;
    pANTLR3_BASE_TREE string_literal248_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_148;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    msgSendStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(41)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM244       = NULL;
    string_literal245       = NULL;
    LTERM246       = NULL;
    char_literal247       = NULL;
    string_literal248       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    memberExpression249.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM244_tree   = NULL;
    string_literal245_tree   = NULL;
    LTERM246_tree   = NULL;
    char_literal247_tree   = NULL;
    string_literal248_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_148   = NULL;
    #define CREATE_stream_148  if (stream_148 == NULL) {stream_148 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 148"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:313:2: ( (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )? )
        // .//Emerson.g:313:4: (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) ) ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )?
        {
            // .//Emerson.g:313:4: (e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_SEND $e1 $e2) )
            // .//Emerson.g:313:5: e1= leftHandSideExpression ( LTERM )* '->' e2= leftHandSideExpression ( LTERM | ';' )
            {
                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement2165);
                e1=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e1.tree, NULL); }

                // .//Emerson.g:313:32: ( LTERM )*

                for (;;)
                {
                    int alt123=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA123_0 = LA(1);
                        if ( (LA123_0 == LTERM) ) 
                        {
                            alt123=1;
                        }

                    }
                    switch (alt123) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM244 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSendStatement2168); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM244, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop123;	/* break out of the loop */
                	    break;
                    }
                }
                loop123: ; /* Jump out to here if this rule does not match */

                string_literal245 = (pANTLR3_COMMON_TOKEN) MATCHT(148, &FOLLOW_148_in_msgSendStatement2171); 
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                } 
                if ( BACKTRACKING==0 ) { CREATE_stream_148; stream_148->add(stream_148, string_literal245, NULL); }

                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgSendStatement2176);
                e2=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemsgSendStatementEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

                // .//Emerson.g:313:71: ( LTERM | ';' )
                {
                    int alt124=2;

                    {
                        int LA124_0 = LA(1);
                        if ( (LA124_0 == LTERM) ) 
                        {
                            alt124=1;
                        }
                        else if ( (LA124_0 == 128) ) 
                        {
                            alt124=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 124;
                            EXCEPTION->state        = 0;


                            goto rulemsgSendStatementEx;
                        }
                    }
                    switch (alt124) 
                    {
                	case 1:
                	    // .//Emerson.g:313:72: LTERM
                	    {
                	        LTERM246 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgSendStatement2179); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM246, NULL); }


                	    }
                	    break;
                	case 2:
                	    // .//Emerson.g:313:80: ';'
                	    {
                	        char_literal247 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_msgSendStatement2183); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulemsgSendStatementEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal247, NULL); }


                	    }
                	    break;

                    }
                }

                 
                /* AST REWRITE
                 * elements          : e1, e2
                 * token labels      : 
                 * rule labels       : retval, e1, e2
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
                	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
                	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 313:85: -> ^( MESSAGE_SEND $e1 $e2)
                	{
                	    // .//Emerson.g:313:88: ^( MESSAGE_SEND $e1 $e2)
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_SEND, (pANTLR3_UINT8)"MESSAGE_SEND"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);
                	if (stream_e1 != NULL) stream_e1->free(stream_e1);
                	if (stream_e2 != NULL) stream_e2->free(stream_e2);


                }
            }


            // .//Emerson.g:313:114: ( '->' memberExpression -> ^( $msgSendStatement memberExpression ) )?
            {
                int alt125=2;
                {
                    int LA125_0 = LA(1);
                    if ( (LA125_0 == 148) ) 
                    {
                        alt125=1;
                    }
                }
                switch (alt125) 
                {
            	case 1:
            	    // .//Emerson.g:313:116: '->' memberExpression
            	    {
            	        string_literal248 = (pANTLR3_COMMON_TOKEN) MATCHT(148, &FOLLOW_148_in_msgSendStatement2202); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSendStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_148; stream_148->add(stream_148, string_literal248, NULL); }

            	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgSendStatement2204);
            	        memberExpression249=memberExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemsgSendStatementEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression249.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : memberExpression, msgSendStatement
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 313:138: -> ^( $msgSendStatement memberExpression )
            	        	{
            	        	    // .//Emerson.g:313:141: ^( $msgSendStatement memberExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_retval == NULL ? NULL : stream_retval->nextNode(stream_retval), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgSendStatementEx; /* Prevent compiler warnings */
    rulemsgSendStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_148 != NULL) stream_148->free(stream_148);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(41, msgSendStatement_StartIndex); }
    return retval;
}
/* $ANTLR end msgSendStatement */

/** 
 * $ANTLR start msgRecvStatement
 * .//Emerson.g:320:2: msgRecvStatement : (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) );
 */
static EmersonParser_msgRecvStatement_return
msgRecvStatement(pEmersonParser ctx)
{   
    EmersonParser_msgRecvStatement_return retval;
    ANTLR3_UINT32 msgRecvStatement_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM250;
    pANTLR3_COMMON_TOKEN    string_literal251;
    pANTLR3_COMMON_TOKEN    LTERM252;
    pANTLR3_COMMON_TOKEN    char_literal253;
    pANTLR3_COMMON_TOKEN    LTERM254;
    pANTLR3_COMMON_TOKEN    string_literal255;
    pANTLR3_COMMON_TOKEN    LTERM256;
    pANTLR3_COMMON_TOKEN    string_literal257;
    pANTLR3_COMMON_TOKEN    LTERM258;
    pANTLR3_COMMON_TOKEN    char_literal259;
    EmersonParser_memberExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_memberExpression_return

    EmersonParser_leftHandSideExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_leftHandSideExpression_return

    EmersonParser_memberExpression_return e3;
    #undef	RETURN_TYPE_e3
    #define	RETURN_TYPE_e3 EmersonParser_memberExpression_return

    pANTLR3_BASE_TREE LTERM250_tree;
    pANTLR3_BASE_TREE string_literal251_tree;
    pANTLR3_BASE_TREE LTERM252_tree;
    pANTLR3_BASE_TREE char_literal253_tree;
    pANTLR3_BASE_TREE LTERM254_tree;
    pANTLR3_BASE_TREE string_literal255_tree;
    pANTLR3_BASE_TREE LTERM256_tree;
    pANTLR3_BASE_TREE string_literal257_tree;
    pANTLR3_BASE_TREE LTERM258_tree;
    pANTLR3_BASE_TREE char_literal259_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_128;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_149;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    msgRecvStatement_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(42)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM250       = NULL;
    string_literal251       = NULL;
    LTERM252       = NULL;
    char_literal253       = NULL;
    LTERM254       = NULL;
    string_literal255       = NULL;
    LTERM256       = NULL;
    string_literal257       = NULL;
    LTERM258       = NULL;
    char_literal259       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    e3.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM250_tree   = NULL;
    string_literal251_tree   = NULL;
    LTERM252_tree   = NULL;
    char_literal253_tree   = NULL;
    LTERM254_tree   = NULL;
    string_literal255_tree   = NULL;
    LTERM256_tree   = NULL;
    string_literal257_tree   = NULL;
    LTERM258_tree   = NULL;
    char_literal259_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_128   = NULL;
    #define CREATE_stream_128  if (stream_128 == NULL) {stream_128 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 128"); } 
    stream_149   = NULL;
    #define CREATE_stream_149  if (stream_149 == NULL) {stream_149 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 149"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:321:2: (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2) | e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' ) -> ^( MESSAGE_RECV $e1 $e2 $e3) )
            
            ANTLR3_UINT32 alt131;

            alt131=2;

            alt131 = cdfa131.predict(ctx, RECOGNIZER, ISTREAM, &cdfa131);
            if  (HASEXCEPTION())
            {
                goto rulemsgRecvStatementEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt131) 
            {
        	case 1:
        	    // .//Emerson.g:321:4: e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' )
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgRecvStatement2232);
        	        e1=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, e1.tree, NULL); }

        	        // .//Emerson.g:321:24: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt126=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA126_0 = LA(1);
        	                if ( (LA126_0 == LTERM) ) 
        	                {
        	                    alt126=1;
        	                }

        	            }
        	            switch (alt126) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM250 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2234); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM250, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop126;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop126: ; /* Jump out to here if this rule does not match */

        	        string_literal251 = (pANTLR3_COMMON_TOKEN) MATCHT(149, &FOLLOW_149_in_msgRecvStatement2236); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_149; stream_149->add(stream_149, string_literal251, NULL); }

        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement2240);
        	        e2=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

        	        // .//Emerson.g:321:61: ( LTERM | ';' )
        	        {
        	            int alt127=2;

        	            {
        	                int LA127_0 = LA(1);
        	                if ( (LA127_0 == LTERM) ) 
        	                {
        	                    alt127=1;
        	                }
        	                else if ( (LA127_0 == 128) ) 
        	                {
        	                    alt127=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 127;
        	                    EXCEPTION->state        = 0;


        	                    goto rulemsgRecvStatementEx;
        	                }
        	            }
        	            switch (alt127) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:321:62: LTERM
        	        	    {
        	        	        LTERM252 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2243); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM252, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:321:70: ';'
        	        	    {
        	        	        char_literal253 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_msgRecvStatement2247); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal253, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : e2, e1
        	         * token labels      : 
        	         * rule labels       : retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 321:76: -> ^( MESSAGE_RECV $e1 $e2)
        	        	{
        	        	    // .//Emerson.g:321:79: ^( MESSAGE_RECV $e1 $e2)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV, (pANTLR3_UINT8)"MESSAGE_RECV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:322:4: e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM )* '<-' e3= memberExpression ( LTERM | ';' )
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgRecvStatement2268);
        	        e1=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, e1.tree, NULL); }

        	        // .//Emerson.g:322:24: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt128=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA128_0 = LA(1);
        	                if ( (LA128_0 == LTERM) ) 
        	                {
        	                    alt128=1;
        	                }

        	            }
        	            switch (alt128) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM254 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2270); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM254, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop128;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop128: ; /* Jump out to here if this rule does not match */

        	        string_literal255 = (pANTLR3_COMMON_TOKEN) MATCHT(149, &FOLLOW_149_in_msgRecvStatement2272); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_149; stream_149->add(stream_149, string_literal255, NULL); }

        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_msgRecvStatement2276);
        	        e2=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, e2.tree, NULL); }

        	        // .//Emerson.g:322:61: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt129=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA129_0 = LA(1);
        	                if ( (LA129_0 == LTERM) ) 
        	                {
        	                    alt129=1;
        	                }

        	            }
        	            switch (alt129) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM256 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2278); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM256, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop129;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop129: ; /* Jump out to here if this rule does not match */

        	        string_literal257 = (pANTLR3_COMMON_TOKEN) MATCHT(149, &FOLLOW_149_in_msgRecvStatement2281); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_149; stream_149->add(stream_149, string_literal257, NULL); }

        	        FOLLOWPUSH(FOLLOW_memberExpression_in_msgRecvStatement2285);
        	        e3=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemsgRecvStatementEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, e3.tree, NULL); }

        	        // .//Emerson.g:322:93: ( LTERM | ';' )
        	        {
        	            int alt130=2;

        	            {
        	                int LA130_0 = LA(1);
        	                if ( (LA130_0 == LTERM) ) 
        	                {
        	                    alt130=1;
        	                }
        	                else if ( (LA130_0 == 128) ) 
        	                {
        	                    alt130=2;
        	                }
        	                else 
        	                {
        	                    if (BACKTRACKING>0)
        	                    {
        	                        FAILEDFLAG = ANTLR3_TRUE; 
        	                        return retval;
        	                    }
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 130;
        	                    EXCEPTION->state        = 0;


        	                    goto rulemsgRecvStatementEx;
        	                }
        	            }
        	            switch (alt130) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:322:94: LTERM
        	        	    {
        	        	        LTERM258 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_msgRecvStatement2288); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM258, NULL); }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:322:102: ';'
        	        	    {
        	        	        char_literal259 = (pANTLR3_COMMON_TOKEN) MATCHT(128, &FOLLOW_128_in_msgRecvStatement2292); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulemsgRecvStatementEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_128; stream_128->add(stream_128, char_literal259, NULL); }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : e1, e3, e2
        	         * token labels      : 
        	         * rule labels       : e3, retval, e1, e2
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e3;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e2;

        	        	stream_e3=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e3", e3.tree != NULL ? e3.tree : NULL);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e1", e1.tree != NULL ? e1.tree : NULL);
        	        	stream_e2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e2", e2.tree != NULL ? e2.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 322:107: -> ^( MESSAGE_RECV $e1 $e2 $e3)
        	        	{
        	        	    // .//Emerson.g:322:110: ^( MESSAGE_RECV $e1 $e2 $e3)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MESSAGE_RECV, (pANTLR3_UINT8)"MESSAGE_RECV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e1 == NULL ? NULL : stream_e1->nextTree(stream_e1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e2 == NULL ? NULL : stream_e2->nextTree(stream_e2));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e3 == NULL ? NULL : stream_e3->nextTree(stream_e3));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_e3 != NULL) stream_e3->free(stream_e3);
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e1 != NULL) stream_e1->free(stream_e1);
        	        	if (stream_e2 != NULL) stream_e2->free(stream_e2);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemsgRecvStatementEx; /* Prevent compiler warnings */
    rulemsgRecvStatementEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_128 != NULL) stream_128->free(stream_128);
        if (stream_149 != NULL) stream_149->free(stream_149);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(42, msgRecvStatement_StartIndex); }
    return retval;
}
/* $ANTLR end msgRecvStatement */

/** 
 * $ANTLR start expression
 * .//Emerson.g:326:1: expression : assignmentExpression ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* -> ^( EXPR_LIST ( assignmentExpression )+ ) ;
 */
static EmersonParser_expression_return
expression(pEmersonParser ctx)
{   
    EmersonParser_expression_return retval;
    ANTLR3_UINT32 expression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM261;
    pANTLR3_COMMON_TOKEN    char_literal262;
    pANTLR3_COMMON_TOKEN    LTERM263;
    EmersonParser_assignmentExpression_return assignmentExpression260;
    #undef	RETURN_TYPE_assignmentExpression260
    #define	RETURN_TYPE_assignmentExpression260 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression264;
    #undef	RETURN_TYPE_assignmentExpression264
    #define	RETURN_TYPE_assignmentExpression264 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM261_tree;
    pANTLR3_BASE_TREE char_literal262_tree;
    pANTLR3_BASE_TREE LTERM263_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_123;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    expression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(43)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM261       = NULL;
    char_literal262       = NULL;
    LTERM263       = NULL;
    assignmentExpression260.tree = NULL;

    assignmentExpression264.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM261_tree   = NULL;
    char_literal262_tree   = NULL;
    LTERM263_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_123   = NULL;
    #define CREATE_stream_123  if (stream_123 == NULL) {stream_123 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 123"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:327:2: ( assignmentExpression ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* -> ^( EXPR_LIST ( assignmentExpression )+ ) )
        // .//Emerson.g:327:4: assignmentExpression ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
        {
            FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression2319);
            assignmentExpression260=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression260.tree, NULL); }

            // .//Emerson.g:327:25: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*

            for (;;)
            {
                int alt134=2;
                alt134 = cdfa134.predict(ctx, RECOGNIZER, ISTREAM, &cdfa134);
                if  (HASEXCEPTION())
                {
                    goto ruleexpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt134) 
                {
            	case 1:
            	    // .//Emerson.g:327:26: ( LTERM )* ',' ( LTERM )* assignmentExpression
            	    {

            	        // .//Emerson.g:327:26: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt132=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA132_0 = LA(1);
            	                if ( (LA132_0 == LTERM) ) 
            	                {
            	                    alt132=1;
            	                }

            	            }
            	            switch (alt132) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM261 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expression2322); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM261, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop132;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop132: ; /* Jump out to here if this rule does not match */

            	        char_literal262 = (pANTLR3_COMMON_TOKEN) MATCHT(123, &FOLLOW_123_in_expression2325); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_123; stream_123->add(stream_123, char_literal262, NULL); }


            	        // .//Emerson.g:327:37: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt133=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA133_0 = LA(1);
            	                if ( (LA133_0 == LTERM) ) 
            	                {
            	                    alt133=1;
            	                }

            	            }
            	            switch (alt133) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM263 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expression2327); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM263, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop133;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop133: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_expression2330);
            	        assignmentExpression264=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression264.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop134;	/* break out of the loop */
            	    break;
                }
            }
            loop134: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 327:67: -> ^( EXPR_LIST ( assignmentExpression )+ )
            	{
            	    // .//Emerson.g:327:71: ^( EXPR_LIST ( assignmentExpression )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR_LIST, (pANTLR3_UINT8)"EXPR_LIST"), root_1));

            	        if ((stream_assignmentExpression == NULL || !stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_assignmentExpression->hasNext(stream_assignmentExpression))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        	}
            	        	stream_assignmentExpression->reset(stream_assignmentExpression);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_123 != NULL) stream_123->free(stream_123);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(43, expression_StartIndex); }
    return retval;
}
/* $ANTLR end expression */

/** 
 * $ANTLR start expressionNoIn
 * .//Emerson.g:330:1: expressionNoIn : assignmentExpressionNoIn ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )* -> ^( EXPR_LIST ( assignmentExpressionNoIn )+ ) ;
 */
static EmersonParser_expressionNoIn_return
expressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_expressionNoIn_return retval;
    ANTLR3_UINT32 expressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM266;
    pANTLR3_COMMON_TOKEN    char_literal267;
    pANTLR3_COMMON_TOKEN    LTERM268;
    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn265;
    #undef	RETURN_TYPE_assignmentExpressionNoIn265
    #define	RETURN_TYPE_assignmentExpressionNoIn265 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn269;
    #undef	RETURN_TYPE_assignmentExpressionNoIn269
    #define	RETURN_TYPE_assignmentExpressionNoIn269 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM266_tree;
    pANTLR3_BASE_TREE char_literal267_tree;
    pANTLR3_BASE_TREE LTERM268_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_123;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    /* Initialize rule variables
     */
    expressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(44)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM266       = NULL;
    char_literal267       = NULL;
    LTERM268       = NULL;
    assignmentExpressionNoIn265.tree = NULL;

    assignmentExpressionNoIn269.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM266_tree   = NULL;
    char_literal267_tree   = NULL;
    LTERM268_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_123   = NULL;
    #define CREATE_stream_123  if (stream_123 == NULL) {stream_123 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 123"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:331:2: ( assignmentExpressionNoIn ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )* -> ^( EXPR_LIST ( assignmentExpressionNoIn )+ ) )
        // .//Emerson.g:331:4: assignmentExpressionNoIn ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*
        {
            FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2354);
            assignmentExpressionNoIn265=assignmentExpressionNoIn(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn265.tree, NULL); }

            // .//Emerson.g:331:29: ( ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn )*

            for (;;)
            {
                int alt137=2;
                alt137 = cdfa137.predict(ctx, RECOGNIZER, ISTREAM, &cdfa137);
                if  (HASEXCEPTION())
                {
                    goto ruleexpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt137) 
                {
            	case 1:
            	    // .//Emerson.g:331:30: ( LTERM )* ',' ( LTERM )* assignmentExpressionNoIn
            	    {

            	        // .//Emerson.g:331:30: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt135=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA135_0 = LA(1);
            	                if ( (LA135_0 == LTERM) ) 
            	                {
            	                    alt135=1;
            	                }

            	            }
            	            switch (alt135) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM266 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionNoIn2357); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM266, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop135;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop135: ; /* Jump out to here if this rule does not match */

            	        char_literal267 = (pANTLR3_COMMON_TOKEN) MATCHT(123, &FOLLOW_123_in_expressionNoIn2360); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_123; stream_123->add(stream_123, char_literal267, NULL); }


            	        // .//Emerson.g:331:41: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt136=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA136_0 = LA(1);
            	                if ( (LA136_0 == LTERM) ) 
            	                {
            	                    alt136=1;
            	                }

            	            }
            	            switch (alt136) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM268 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_expressionNoIn2362); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM268, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop136;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop136: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_expressionNoIn2365);
            	        assignmentExpressionNoIn269=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn269.tree, NULL); }

            	    }
            	    break;

            	default:
            	    goto loop137;	/* break out of the loop */
            	    break;
                }
            }
            loop137: ; /* Jump out to here if this rule does not match */


             
            /* AST REWRITE
             * elements          : assignmentExpressionNoIn
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 331:75: -> ^( EXPR_LIST ( assignmentExpressionNoIn )+ )
            	{
            	    // .//Emerson.g:331:78: ^( EXPR_LIST ( assignmentExpressionNoIn )+ )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXPR_LIST, (pANTLR3_UINT8)"EXPR_LIST"), root_1));

            	        if ((stream_assignmentExpressionNoIn == NULL || !stream_assignmentExpressionNoIn->hasNext(stream_assignmentExpressionNoIn))  )
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	        }
            	        else
            	        {
            	        	while ( (stream_assignmentExpressionNoIn->hasNext(stream_assignmentExpressionNoIn))  ) {
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

            	        	}
            	        	stream_assignmentExpressionNoIn->reset(stream_assignmentExpressionNoIn);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionNoInEx; /* Prevent compiler warnings */
    ruleexpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_123 != NULL) stream_123->free(stream_123);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(44, expressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end expressionNoIn */

/** 
 * $ANTLR start assignmentExpression
 * .//Emerson.g:335:1: assignmentExpression : ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) );
 */
static EmersonParser_assignmentExpression_return
assignmentExpression(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpression_return retval;
    ANTLR3_UINT32 assignmentExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM272;
    pANTLR3_COMMON_TOKEN    LTERM274;
    EmersonParser_conditionalExpression_return conditionalExpression270;
    #undef	RETURN_TYPE_conditionalExpression270
    #define	RETURN_TYPE_conditionalExpression270 EmersonParser_conditionalExpression_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression271;
    #undef	RETURN_TYPE_leftHandSideExpression271
    #define	RETURN_TYPE_leftHandSideExpression271 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator273;
    #undef	RETURN_TYPE_assignmentOperator273
    #define	RETURN_TYPE_assignmentOperator273 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpression_return assignmentExpression275;
    #undef	RETURN_TYPE_assignmentExpression275
    #define	RETURN_TYPE_assignmentExpression275 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM272_tree;
    pANTLR3_BASE_TREE LTERM274_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_conditionalExpression;
    /* Initialize rule variables
     */
    assignmentExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(45)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM272       = NULL;
    LTERM274       = NULL;
    conditionalExpression270.tree = NULL;

    leftHandSideExpression271.tree = NULL;

    assignmentOperator273.tree = NULL;

    assignmentExpression275.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM272_tree   = NULL;
    LTERM274_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }
    stream_conditionalExpression   = NULL;
    #define CREATE_stream_conditionalExpression  if (stream_conditionalExpression == NULL) {stream_conditionalExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule conditionalExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:336:2: ( conditionalExpression -> ^( COND_EXPR conditionalExpression ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression -> ^( assignmentOperator leftHandSideExpression assignmentExpression ) )
            
            ANTLR3_UINT32 alt140;

            alt140=2;

            alt140 = cdfa140.predict(ctx, RECOGNIZER, ISTREAM, &cdfa140);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt140) 
            {
        	case 1:
        	    // .//Emerson.g:336:4: conditionalExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpression_in_assignmentExpression2389);
        	        conditionalExpression270=conditionalExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_conditionalExpression; stream_conditionalExpression->add(stream_conditionalExpression, conditionalExpression270.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : conditionalExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 336:26: -> ^( COND_EXPR conditionalExpression )
        	        	{
        	        	    // .//Emerson.g:336:29: ^( COND_EXPR conditionalExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND_EXPR, (pANTLR3_UINT8)"COND_EXPR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditionalExpression == NULL ? NULL : stream_conditionalExpression->nextTree(stream_conditionalExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:337:4: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpression2402);
        	        leftHandSideExpression271=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression271.tree, NULL); }

        	        // .//Emerson.g:337:27: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt138=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA138_0 = LA(1);
        	                if ( (LA138_0 == LTERM) ) 
        	                {
        	                    alt138=1;
        	                }

        	            }
        	            switch (alt138) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM272 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2404); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM272, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop138;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop138: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpression2407);
        	        assignmentOperator273=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator273.tree, NULL); }

        	        // .//Emerson.g:337:53: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt139=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA139_0 = LA(1);
        	                if ( (LA139_0 == LTERM) ) 
        	                {
        	                    alt139=1;
        	                }

        	            }
        	            switch (alt139) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM274 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpression2409); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM274, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop139;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop139: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_assignmentExpression2412);
        	        assignmentExpression275=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression275.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression, leftHandSideExpression, assignmentOperator
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 337:81: -> ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	{
        	        	    // .//Emerson.g:337:85: ^( assignmentOperator leftHandSideExpression assignmentExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionEx; /* Prevent compiler warnings */
    ruleassignmentExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
        if (stream_conditionalExpression != NULL) stream_conditionalExpression->free(stream_conditionalExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(45, assignmentExpression_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpression */

/** 
 * $ANTLR start assignmentExpressionNoIn
 * .//Emerson.g:340:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) );
 */
static EmersonParser_assignmentExpressionNoIn_return
assignmentExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_assignmentExpressionNoIn_return retval;
    ANTLR3_UINT32 assignmentExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM278;
    pANTLR3_COMMON_TOKEN    LTERM280;
    EmersonParser_conditionalExpressionNoIn_return conditionalExpressionNoIn276;
    #undef	RETURN_TYPE_conditionalExpressionNoIn276
    #define	RETURN_TYPE_conditionalExpressionNoIn276 EmersonParser_conditionalExpressionNoIn_return

    EmersonParser_leftHandSideExpression_return leftHandSideExpression277;
    #undef	RETURN_TYPE_leftHandSideExpression277
    #define	RETURN_TYPE_leftHandSideExpression277 EmersonParser_leftHandSideExpression_return

    EmersonParser_assignmentOperator_return assignmentOperator279;
    #undef	RETURN_TYPE_assignmentOperator279
    #define	RETURN_TYPE_assignmentOperator279 EmersonParser_assignmentOperator_return

    EmersonParser_assignmentExpressionNoIn_return assignmentExpressionNoIn281;
    #undef	RETURN_TYPE_assignmentExpressionNoIn281
    #define	RETURN_TYPE_assignmentExpressionNoIn281 EmersonParser_assignmentExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM278_tree;
    pANTLR3_BASE_TREE LTERM280_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentOperator;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_conditionalExpressionNoIn;
    /* Initialize rule variables
     */
    assignmentExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(46)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM278       = NULL;
    LTERM280       = NULL;
    conditionalExpressionNoIn276.tree = NULL;

    leftHandSideExpression277.tree = NULL;

    assignmentOperator279.tree = NULL;

    assignmentExpressionNoIn281.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM278_tree   = NULL;
    LTERM280_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_assignmentOperator   = NULL;
    #define CREATE_stream_assignmentOperator  if (stream_assignmentOperator == NULL) {stream_assignmentOperator = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentOperator"); }
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }
    stream_conditionalExpressionNoIn   = NULL;
    #define CREATE_stream_conditionalExpressionNoIn  if (stream_conditionalExpressionNoIn == NULL) {stream_conditionalExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule conditionalExpressionNoIn"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:341:2: ( conditionalExpressionNoIn -> ^( COND_EXPR_NOIN conditionalExpressionNoIn ) | leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn ) )
            
            ANTLR3_UINT32 alt143;

            alt143=2;

            alt143 = cdfa143.predict(ctx, RECOGNIZER, ISTREAM, &cdfa143);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentExpressionNoInEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt143) 
            {
        	case 1:
        	    // .//Emerson.g:341:4: conditionalExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_assignmentExpressionNoIn2436);
        	        conditionalExpressionNoIn276=conditionalExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_conditionalExpressionNoIn; stream_conditionalExpressionNoIn->add(stream_conditionalExpressionNoIn, conditionalExpressionNoIn276.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : conditionalExpressionNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 341:30: -> ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	        	{
        	        	    // .//Emerson.g:341:33: ^( COND_EXPR_NOIN conditionalExpressionNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COND_EXPR_NOIN, (pANTLR3_UINT8)"COND_EXPR_NOIN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_conditionalExpressionNoIn == NULL ? NULL : stream_conditionalExpressionNoIn->nextTree(stream_conditionalExpressionNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:342:4: leftHandSideExpression ( LTERM )* assignmentOperator ( LTERM )* assignmentExpressionNoIn
        	    {
        	        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_assignmentExpressionNoIn2449);
        	        leftHandSideExpression277=leftHandSideExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression277.tree, NULL); }

        	        // .//Emerson.g:342:27: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt141=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA141_0 = LA(1);
        	                if ( (LA141_0 == LTERM) ) 
        	                {
        	                    alt141=1;
        	                }

        	            }
        	            switch (alt141) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM278 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn2451); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM278, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop141;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop141: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentOperator_in_assignmentExpressionNoIn2454);
        	        assignmentOperator279=assignmentOperator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentOperator; stream_assignmentOperator->add(stream_assignmentOperator, assignmentOperator279.tree, NULL); }

        	        // .//Emerson.g:342:53: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt142=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA142_0 = LA(1);
        	                if ( (LA142_0 == LTERM) ) 
        	                {
        	                    alt142=1;
        	                }

        	            }
        	            switch (alt142) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM280 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_assignmentExpressionNoIn2456); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleassignmentExpressionNoInEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM280, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop142;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop142: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_assignmentExpressionNoIn2459);
        	        assignmentExpressionNoIn281=assignmentExpressionNoIn(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentExpressionNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, assignmentExpressionNoIn281.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : assignmentOperator, leftHandSideExpression, assignmentExpressionNoIn
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 342:85: -> ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	{
        	        	    // .//Emerson.g:342:89: ^( assignmentOperator leftHandSideExpression assignmentExpressionNoIn )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_assignmentOperator == NULL ? NULL : stream_assignmentOperator->nextNode(stream_assignmentOperator), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpressionNoIn == NULL ? NULL : stream_assignmentExpressionNoIn->nextTree(stream_assignmentExpressionNoIn));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentExpressionNoInEx; /* Prevent compiler warnings */
    ruleassignmentExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_assignmentOperator != NULL) stream_assignmentOperator->free(stream_assignmentOperator);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
        if (stream_conditionalExpressionNoIn != NULL) stream_conditionalExpressionNoIn->free(stream_conditionalExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(46, assignmentExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentExpressionNoIn */

/** 
 * $ANTLR start leftHandSideExpression
 * .//Emerson.g:345:1: leftHandSideExpression : ( callExpression -> callExpression | newExpression -> newExpression );
 */
static EmersonParser_leftHandSideExpression_return
leftHandSideExpression(pEmersonParser ctx)
{   
    EmersonParser_leftHandSideExpression_return retval;
    ANTLR3_UINT32 leftHandSideExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_callExpression_return callExpression282;
    #undef	RETURN_TYPE_callExpression282
    #define	RETURN_TYPE_callExpression282 EmersonParser_callExpression_return

    EmersonParser_newExpression_return newExpression283;
    #undef	RETURN_TYPE_newExpression283
    #define	RETURN_TYPE_newExpression283 EmersonParser_newExpression_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_callExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    leftHandSideExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(47)) )
    {
    	retval.start = 0;

        return retval; 
    }
    callExpression282.tree = NULL;

    newExpression283.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_callExpression   = NULL;
    #define CREATE_stream_callExpression  if (stream_callExpression == NULL) {stream_callExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule callExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:346:2: ( callExpression -> callExpression | newExpression -> newExpression )
            
            ANTLR3_UINT32 alt144;

            alt144=2;

            alt144 = cdfa144.predict(ctx, RECOGNIZER, ISTREAM, &cdfa144);
            if  (HASEXCEPTION())
            {
                goto ruleleftHandSideExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt144) 
            {
        	case 1:
        	    // .//Emerson.g:346:4: callExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_callExpression_in_leftHandSideExpression2484);
        	        callExpression282=callExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_callExpression; stream_callExpression->add(stream_callExpression, callExpression282.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : callExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 346:19: -> callExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_callExpression == NULL ? NULL : stream_callExpression->nextTree(stream_callExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:347:4: newExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_newExpression_in_leftHandSideExpression2493);
        	        newExpression283=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleleftHandSideExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression283.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 347:18: -> newExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleleftHandSideExpressionEx; /* Prevent compiler warnings */
    ruleleftHandSideExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_callExpression != NULL) stream_callExpression->free(stream_callExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(47, leftHandSideExpression_StartIndex); }
    return retval;
}
/* $ANTLR end leftHandSideExpression */

/** 
 * $ANTLR start newExpression
 * .//Emerson.g:350:1: newExpression : ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) );
 */
static EmersonParser_newExpression_return
newExpression(pEmersonParser ctx)
{   
    EmersonParser_newExpression_return retval;
    ANTLR3_UINT32 newExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal285;
    pANTLR3_COMMON_TOKEN    LTERM286;
    EmersonParser_memberExpression_return memberExpression284;
    #undef	RETURN_TYPE_memberExpression284
    #define	RETURN_TYPE_memberExpression284 EmersonParser_memberExpression_return

    EmersonParser_newExpression_return newExpression287;
    #undef	RETURN_TYPE_newExpression287
    #define	RETURN_TYPE_newExpression287 EmersonParser_newExpression_return

    pANTLR3_BASE_TREE string_literal285_tree;
    pANTLR3_BASE_TREE LTERM286_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_150;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_newExpression;
    /* Initialize rule variables
     */
    newExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(48)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal285       = NULL;
    LTERM286       = NULL;
    memberExpression284.tree = NULL;

    newExpression287.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal285_tree   = NULL;
    LTERM286_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_150   = NULL;
    #define CREATE_stream_150  if (stream_150 == NULL) {stream_150 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 150"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_newExpression   = NULL;
    #define CREATE_stream_newExpression  if (stream_newExpression == NULL) {stream_newExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule newExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:351:2: ( memberExpression -> memberExpression | 'new' ( LTERM )* newExpression -> ^( NEW newExpression ) )
            
            ANTLR3_UINT32 alt146;

            alt146=2;

            alt146 = cdfa146.predict(ctx, RECOGNIZER, ISTREAM, &cdfa146);
            if  (HASEXCEPTION())
            {
                goto rulenewExpressionEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            switch (alt146) 
            {
        	case 1:
        	    // .//Emerson.g:351:4: memberExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_memberExpression_in_newExpression2509);
        	        memberExpression284=memberExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression284.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : memberExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 351:21: -> memberExpression
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:352:4: 'new' ( LTERM )* newExpression
        	    {
        	        string_literal285 = (pANTLR3_COMMON_TOKEN) MATCHT(150, &FOLLOW_150_in_newExpression2518); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_150; stream_150->add(stream_150, string_literal285, NULL); }


        	        // .//Emerson.g:352:10: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt145=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA145_0 = LA(1);
        	                if ( (LA145_0 == LTERM) ) 
        	                {
        	                    alt145=1;
        	                }

        	            }
        	            switch (alt145) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM286 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_newExpression2520); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulenewExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM286, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop145;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop145: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_newExpression_in_newExpression2523);
        	        newExpression287=newExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulenewExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_newExpression; stream_newExpression->add(stream_newExpression, newExpression287.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : newExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 352:31: -> ^( NEW newExpression )
        	        	{
        	        	    // .//Emerson.g:352:34: ^( NEW newExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_newExpression == NULL ? NULL : stream_newExpression->nextTree(stream_newExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulenewExpressionEx; /* Prevent compiler warnings */
    rulenewExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_150 != NULL) stream_150->free(stream_150);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_newExpression != NULL) stream_newExpression->free(stream_newExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(48, newExpression_StartIndex); }
    return retval;
}
/* $ANTLR end newExpression */

/** 
 * $ANTLR start indexSuffix1
 * .//Emerson.g:356:1: indexSuffix1 : '[' ( LTERM )* expression ( LTERM )* ']' -> expression ;
 */
static EmersonParser_indexSuffix1_return
indexSuffix1(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix1_return retval;
    ANTLR3_UINT32 indexSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal288;
    pANTLR3_COMMON_TOKEN    LTERM289;
    pANTLR3_COMMON_TOKEN    LTERM291;
    pANTLR3_COMMON_TOKEN    char_literal292;
    EmersonParser_expression_return expression290;
    #undef	RETURN_TYPE_expression290
    #define	RETURN_TYPE_expression290 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal288_tree;
    pANTLR3_BASE_TREE LTERM289_tree;
    pANTLR3_BASE_TREE LTERM291_tree;
    pANTLR3_BASE_TREE char_literal292_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_152;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_151;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(49)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal288       = NULL;
    LTERM289       = NULL;
    LTERM291       = NULL;
    char_literal292       = NULL;
    expression290.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal288_tree   = NULL;
    LTERM289_tree   = NULL;
    LTERM291_tree   = NULL;
    char_literal292_tree   = NULL;

    stream_152   = NULL;
    #define CREATE_stream_152  if (stream_152 == NULL) {stream_152 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 152"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_151   = NULL;
    #define CREATE_stream_151  if (stream_151 == NULL) {stream_151 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 151"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:357:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> expression )
        // .//Emerson.g:357:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal288 = (pANTLR3_COMMON_TOKEN) MATCHT(151, &FOLLOW_151_in_indexSuffix12545); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_151; stream_151->add(stream_151, char_literal288, NULL); }


            // .//Emerson.g:357:8: ( LTERM )*

            for (;;)
            {
                int alt147=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA147_0 = LA(1);
                    if ( (LA147_0 == LTERM) ) 
                    {
                        alt147=1;
                    }

                }
                switch (alt147) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM289 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix12547); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM289, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop147;	/* break out of the loop */
            	    break;
                }
            }
            loop147: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix12550);
            expression290=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression290.tree, NULL); }

            // .//Emerson.g:357:26: ( LTERM )*

            for (;;)
            {
                int alt148=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA148_0 = LA(1);
                    if ( (LA148_0 == LTERM) ) 
                    {
                        alt148=1;
                    }

                }
                switch (alt148) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM291 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix12552); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM291, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop148;	/* break out of the loop */
            	    break;
                }
            }
            loop148: ; /* Jump out to here if this rule does not match */

            char_literal292 = (pANTLR3_COMMON_TOKEN) MATCHT(152, &FOLLOW_152_in_indexSuffix12555); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_152; stream_152->add(stream_152, char_literal292, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 357:37: -> expression
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffix1Ex; /* Prevent compiler warnings */
    ruleindexSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_152 != NULL) stream_152->free(stream_152);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_151 != NULL) stream_151->free(stream_151);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(49, indexSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix1 */

/** 
 * $ANTLR start propertyReferenceSuffix1
 * .//Emerson.g:361:1: propertyReferenceSuffix1 : '.' ( LTERM )* Identifier -> Identifier ;
 */
static EmersonParser_propertyReferenceSuffix1_return
propertyReferenceSuffix1(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix1_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix1_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal293;
    pANTLR3_COMMON_TOKEN    LTERM294;
    pANTLR3_COMMON_TOKEN    Identifier295;

    pANTLR3_BASE_TREE char_literal293_tree;
    pANTLR3_BASE_TREE LTERM294_tree;
    pANTLR3_BASE_TREE Identifier295_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_153;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    propertyReferenceSuffix1_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(50)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal293       = NULL;
    LTERM294       = NULL;
    Identifier295       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal293_tree   = NULL;
    LTERM294_tree   = NULL;
    Identifier295_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_153   = NULL;
    #define CREATE_stream_153  if (stream_153 == NULL) {stream_153 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 153"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:362:2: ( '.' ( LTERM )* Identifier -> Identifier )
        // .//Emerson.g:362:4: '.' ( LTERM )* Identifier
        {
            char_literal293 = (pANTLR3_COMMON_TOKEN) MATCHT(153, &FOLLOW_153_in_propertyReferenceSuffix12572); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_153; stream_153->add(stream_153, char_literal293, NULL); }


            // .//Emerson.g:362:8: ( LTERM )*

            for (;;)
            {
                int alt149=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA149_0 = LA(1);
                    if ( (LA149_0 == LTERM) ) 
                    {
                        alt149=1;
                    }

                }
                switch (alt149) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM294 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix12574); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffix1Ex;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM294, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop149;	/* break out of the loop */
            	    break;
                }
            }
            loop149: ; /* Jump out to here if this rule does not match */

            Identifier295 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix12577); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffix1Ex;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier295, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 362:26: -> Identifier
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffix1Ex; /* Prevent compiler warnings */
    rulepropertyReferenceSuffix1Ex: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_153 != NULL) stream_153->free(stream_153);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(50, propertyReferenceSuffix1_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix1 */

/** 
 * $ANTLR start memberExpression
 * .//Emerson.g:366:1: memberExpression : ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* );
 */
static EmersonParser_memberExpression_return
memberExpression(pEmersonParser ctx)
{   
    EmersonParser_memberExpression_return retval;
    ANTLR3_UINT32 memberExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM297;
    pANTLR3_COMMON_TOKEN    LTERM299;
    pANTLR3_COMMON_TOKEN    LTERM302;
    pANTLR3_COMMON_TOKEN    LTERM304;
    pANTLR3_COMMON_TOKEN    string_literal306;
    pANTLR3_COMMON_TOKEN    LTERM307;
    pANTLR3_COMMON_TOKEN    LTERM308;
    pANTLR3_COMMON_TOKEN    LTERM310;
    pANTLR3_COMMON_TOKEN    LTERM312;
    EmersonParser_memberExpression_return expr;
    #undef	RETURN_TYPE_expr
    #define	RETURN_TYPE_expr EmersonParser_memberExpression_return

    EmersonParser_primaryExpression_return primaryExpression296;
    #undef	RETURN_TYPE_primaryExpression296
    #define	RETURN_TYPE_primaryExpression296 EmersonParser_primaryExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1298;
    #undef	RETURN_TYPE_propertyReferenceSuffix1298
    #define	RETURN_TYPE_propertyReferenceSuffix1298 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1300;
    #undef	RETURN_TYPE_indexSuffix1300
    #define	RETURN_TYPE_indexSuffix1300 EmersonParser_indexSuffix1_return

    EmersonParser_functionExpression_return functionExpression301;
    #undef	RETURN_TYPE_functionExpression301
    #define	RETURN_TYPE_functionExpression301 EmersonParser_functionExpression_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1303;
    #undef	RETURN_TYPE_propertyReferenceSuffix1303
    #define	RETURN_TYPE_propertyReferenceSuffix1303 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1305;
    #undef	RETURN_TYPE_indexSuffix1305
    #define	RETURN_TYPE_indexSuffix1305 EmersonParser_indexSuffix1_return

    EmersonParser_arguments_return arguments309;
    #undef	RETURN_TYPE_arguments309
    #define	RETURN_TYPE_arguments309 EmersonParser_arguments_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1311;
    #undef	RETURN_TYPE_propertyReferenceSuffix1311
    #define	RETURN_TYPE_propertyReferenceSuffix1311 EmersonParser_propertyReferenceSuffix1_return

    EmersonParser_indexSuffix1_return indexSuffix1313;
    #undef	RETURN_TYPE_indexSuffix1313
    #define	RETURN_TYPE_indexSuffix1313 EmersonParser_indexSuffix1_return

    pANTLR3_BASE_TREE LTERM297_tree;
    pANTLR3_BASE_TREE LTERM299_tree;
    pANTLR3_BASE_TREE LTERM302_tree;
    pANTLR3_BASE_TREE LTERM304_tree;
    pANTLR3_BASE_TREE string_literal306_tree;
    pANTLR3_BASE_TREE LTERM307_tree;
    pANTLR3_BASE_TREE LTERM308_tree;
    pANTLR3_BASE_TREE LTERM310_tree;
    pANTLR3_BASE_TREE LTERM312_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_150;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_functionExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_primaryExpression;
    /* Initialize rule variables
     */
    memberExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(51)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM297       = NULL;
    LTERM299       = NULL;
    LTERM302       = NULL;
    LTERM304       = NULL;
    string_literal306       = NULL;
    LTERM307       = NULL;
    LTERM308       = NULL;
    LTERM310       = NULL;
    LTERM312       = NULL;
    expr.tree = NULL;

    primaryExpression296.tree = NULL;

    propertyReferenceSuffix1298.tree = NULL;

    indexSuffix1300.tree = NULL;

    functionExpression301.tree = NULL;

    propertyReferenceSuffix1303.tree = NULL;

    indexSuffix1305.tree = NULL;

    arguments309.tree = NULL;

    propertyReferenceSuffix1311.tree = NULL;

    indexSuffix1313.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM297_tree   = NULL;
    LTERM299_tree   = NULL;
    LTERM302_tree   = NULL;
    LTERM304_tree   = NULL;
    string_literal306_tree   = NULL;
    LTERM307_tree   = NULL;
    LTERM308_tree   = NULL;
    LTERM310_tree   = NULL;
    LTERM312_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_150   = NULL;
    #define CREATE_stream_150  if (stream_150 == NULL) {stream_150 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 150"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_functionExpression   = NULL;
    #define CREATE_stream_functionExpression  if (stream_functionExpression == NULL) {stream_functionExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule functionExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }
    stream_primaryExpression   = NULL;
    #define CREATE_stream_primaryExpression  if (stream_primaryExpression == NULL) {stream_primaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule primaryExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:368:2: ( ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* | ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )* )
            
            ANTLR3_UINT32 alt161;

            alt161=3;

            switch ( LA(1) ) 
            {
            case Identifier:
            case StringLiteral:
            case NumericLiteral:
            case 122:
            case 125:
            case 151:
            case 195:
            case 196:
            case 197:
            case 198:
            	{
            		alt161=1;
            	}
                break;
            case 121:
            	{
            		alt161=2;
            	}
                break;
            case 150:
            	{
            		alt161=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 161;
                EXCEPTION->state        = 0;


                goto rulememberExpressionEx;
            }

            switch (alt161) 
            {
        	case 1:
        	    // .//Emerson.g:368:4: ( primaryExpression -> primaryExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:368:4: ( primaryExpression -> primaryExpression )
        	        // .//Emerson.g:368:5: primaryExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_primaryExpression_in_memberExpression2596);
        	            primaryExpression296=primaryExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_primaryExpression; stream_primaryExpression->add(stream_primaryExpression, primaryExpression296.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : primaryExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 368:23: -> primaryExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_primaryExpression == NULL ? NULL : stream_primaryExpression->nextTree(stream_primaryExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:368:45: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt152=3;
        	            alt152 = cdfa152.predict(ctx, RECOGNIZER, ISTREAM, &cdfa152);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt152) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:368:47: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:368:47: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt150=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA150_0 = LA(1);
        	        	                if ( (LA150_0 == LTERM) ) 
        	        	                {
        	        	                    alt150=1;
        	        	                }

        	        	            }
        	        	            switch (alt150) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM297 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression2605); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM297, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop150;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop150: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression2608);
        	        	        propertyReferenceSuffix1298=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1298.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, propertyReferenceSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 368:79: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:368:82: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:368:136: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:368:136: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt151=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA151_0 = LA(1);
        	        	                if ( (LA151_0 == LTERM) ) 
        	        	                {
        	        	                    alt151=1;
        	        	                }

        	        	            }
        	        	            switch (alt151) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM299 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression2625); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM299, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop151;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop151: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression2628);
        	        	        indexSuffix1300=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1300.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : indexSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 368:156: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:368:159: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop152;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop152: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:369:4: ( functionExpression -> functionExpression ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:369:4: ( functionExpression -> functionExpression )
        	        // .//Emerson.g:369:5: functionExpression
        	        {
        	            FOLLOWPUSH(FOLLOW_functionExpression_in_memberExpression2647);
        	            functionExpression301=functionExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_functionExpression; stream_functionExpression->add(stream_functionExpression, functionExpression301.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : functionExpression
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 369:24: -> functionExpression
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_functionExpression == NULL ? NULL : stream_functionExpression->nextTree(stream_functionExpression));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }


        	        // .//Emerson.g:369:47: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression propertyReferenceSuffix1 ) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt155=3;
        	            alt155 = cdfa155.predict(ctx, RECOGNIZER, ISTREAM, &cdfa155);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt155) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:369:48: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:369:48: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt153=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA153_0 = LA(1);
        	        	                if ( (LA153_0 == LTERM) ) 
        	        	                {
        	        	                    alt153=1;
        	        	                }

        	        	            }
        	        	            switch (alt153) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM302 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression2655); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM302, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop153;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop153: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression2658);
        	        	        propertyReferenceSuffix1303=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1303.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression, propertyReferenceSuffix1
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 369:80: -> ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:369:83: ^( DOT $memberExpression propertyReferenceSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:369:137: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:369:137: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt154=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA154_0 = LA(1);
        	        	                if ( (LA154_0 == LTERM) ) 
        	        	                {
        	        	                    alt154=1;
        	        	                }

        	        	            }
        	        	            switch (alt154) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM304 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression2675); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM304, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop154;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop154: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression2678);
        	        	        indexSuffix1305=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1305.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : indexSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 369:157: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:369:160: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop155;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop155: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:370:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) ) ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*
        	    {
        	        // .//Emerson.g:370:4: ( 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments -> ^( NEW $expr arguments ) )
        	        // .//Emerson.g:370:5: 'new' ( LTERM )* expr= memberExpression ( LTERM )* arguments
        	        {
        	            string_literal306 = (pANTLR3_COMMON_TOKEN) MATCHT(150, &FOLLOW_150_in_memberExpression2697); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            } 
        	            if ( BACKTRACKING==0 ) { CREATE_stream_150; stream_150->add(stream_150, string_literal306, NULL); }


        	            // .//Emerson.g:370:11: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt156=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA156_0 = LA(1);
        	                    if ( (LA156_0 == LTERM) ) 
        	                    {
        	                        alt156=1;
        	                    }

        	                }
        	                switch (alt156) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM307 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression2699); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM307, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop156;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop156: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_memberExpression_in_memberExpression2704);
        	            expr=memberExpression(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, expr.tree, NULL); }

        	            // .//Emerson.g:370:40: ( LTERM )*

        	            for (;;)
        	            {
        	                int alt157=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA157_0 = LA(1);
        	                    if ( (LA157_0 == LTERM) ) 
        	                    {
        	                        alt157=1;
        	                    }

        	                }
        	                switch (alt157) 
        	                {
        	            	case 1:
        	            	    // .//Emerson.g:0:0: LTERM
        	            	    {
        	            	        LTERM308 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression2706); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulememberExpressionEx;
        	            	        }
        	            	        if (HASFAILED())
        	            	        {
        	            	            return retval;
        	            	        } 
        	            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM308, NULL); }


        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop157;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop157: ; /* Jump out to here if this rule does not match */

        	            FOLLOWPUSH(FOLLOW_arguments_in_memberExpression2709);
        	            arguments309=arguments(ctx);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments309.tree, NULL); }

        	             
        	            /* AST REWRITE
        	             * elements          : expr, arguments
        	             * token labels      : 
        	             * rule labels       : retval, expr
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            if ( BACKTRACKING==0 ) 
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	            	stream_expr=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr", expr.tree != NULL ? expr.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 370:57: -> ^( NEW $expr arguments )
        	            	{
        	            	    // .//Emerson.g:370:60: ^( NEW $expr arguments )
        	            	    {
        	            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEW, (pANTLR3_UINT8)"NEW"), root_1));

        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));
        	            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	            	    }

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	            	if (stream_expr != NULL) stream_expr->free(stream_expr);


        	            }
        	        }


        	        // .//Emerson.g:370:84: ( ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $memberExpression) | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $memberExpression indexSuffix1 ) )*

        	        for (;;)
        	        {
        	            int alt160=3;
        	            alt160 = cdfa160.predict(ctx, RECOGNIZER, ISTREAM, &cdfa160);
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulememberExpressionEx;
        	            }
        	            if (HASFAILED())
        	            {
        	                return retval;
        	            }
        	            switch (alt160) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:370:85: ( LTERM )* propertyReferenceSuffix1
        	        	    {

        	        	        // .//Emerson.g:370:85: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt158=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA158_0 = LA(1);
        	        	                if ( (LA158_0 == LTERM) ) 
        	        	                {
        	        	                    alt158=1;
        	        	                }

        	        	            }
        	        	            switch (alt158) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM310 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression2724); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM310, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop158;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop158: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_memberExpression2727);
        	        	        propertyReferenceSuffix1311=propertyReferenceSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1311.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 370:117: -> ^( DOT $memberExpression)
        	        	        	{
        	        	        	    // .//Emerson.g:370:120: ^( DOT $memberExpression)
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // .//Emerson.g:370:147: ( LTERM )* indexSuffix1
        	        	    {

        	        	        // .//Emerson.g:370:147: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt159=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA159_0 = LA(1);
        	        	                if ( (LA159_0 == LTERM) ) 
        	        	                {
        	        	                    alt159=1;
        	        	                }

        	        	            }
        	        	            switch (alt159) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM312 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_memberExpression2740); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulememberExpressionEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM312, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop159;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop159: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_memberExpression2743);
        	        	        indexSuffix1313=indexSuffix1(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulememberExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1313.tree, NULL); }

        	        	         
        	        	        /* AST REWRITE
        	        	         * elements          : indexSuffix1, memberExpression
        	        	         * token labels      : 
        	        	         * rule labels       : retval
        	        	         * token list labels : 
        	        	         * rule list labels  : 
        	        	         */
        	        	        if ( BACKTRACKING==0 ) 
        	        	        {
        	        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	retval.tree    = root_0;
        	        	        	// 370:167: -> ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	{
        	        	        	    // .//Emerson.g:370:170: ^( ARRAY_INDEX $memberExpression indexSuffix1 )
        	        	        	    {
        	        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
        	        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

        	        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	        	    }

        	        	        	}

        	        	        	retval.tree = root_0; // set result root
        	        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	        }
        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop160;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop160: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionEx; /* Prevent compiler warnings */
    rulememberExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_150 != NULL) stream_150->free(stream_150);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_functionExpression != NULL) stream_functionExpression->free(stream_functionExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
        if (stream_primaryExpression != NULL) stream_primaryExpression->free(stream_primaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(51, memberExpression_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpression */

/** 
 * $ANTLR start memberExpressionSuffix
 * .//Emerson.g:373:1: memberExpressionSuffix : ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_memberExpressionSuffix_return
memberExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_memberExpressionSuffix_return retval;
    ANTLR3_UINT32 memberExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_indexSuffix_return indexSuffix314;
    #undef	RETURN_TYPE_indexSuffix314
    #define	RETURN_TYPE_indexSuffix314 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix315;
    #undef	RETURN_TYPE_propertyReferenceSuffix315
    #define	RETURN_TYPE_propertyReferenceSuffix315 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    memberExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(52)) )
    {
    	retval.start = 0;

        return retval; 
    }
    indexSuffix314.tree = NULL;

    propertyReferenceSuffix315.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:374:2: ( indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt162;

            alt162=2;


            {
                int LA162_0 = LA(1);
                if ( (LA162_0 == 151) ) 
                {
                    alt162=1;
                }
                else if ( (LA162_0 == 153) ) 
                {
                    alt162=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 162;
                    EXCEPTION->state        = 0;


                    goto rulememberExpressionSuffixEx;
                }
            }
            switch (alt162) 
            {
        	case 1:
        	    // .//Emerson.g:374:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_memberExpressionSuffix2772);
        	        indexSuffix314=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix314.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 374:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:375:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_memberExpressionSuffix2782);
        	        propertyReferenceSuffix315=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulememberExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix315.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 375:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulememberExpressionSuffixEx; /* Prevent compiler warnings */
    rulememberExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(52, memberExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end memberExpressionSuffix */

/** 
 * $ANTLR start callExpression
 * .//Emerson.g:378:1: callExpression : ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* ;
 */
static EmersonParser_callExpression_return
callExpression(pEmersonParser ctx)
{   
    EmersonParser_callExpression_return retval;
    ANTLR3_UINT32 callExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM317;
    pANTLR3_COMMON_TOKEN    LTERM319;
    pANTLR3_COMMON_TOKEN    LTERM321;
    pANTLR3_COMMON_TOKEN    LTERM323;
    EmersonParser_memberExpression_return memberExpression316;
    #undef	RETURN_TYPE_memberExpression316
    #define	RETURN_TYPE_memberExpression316 EmersonParser_memberExpression_return

    EmersonParser_arguments_return arguments318;
    #undef	RETURN_TYPE_arguments318
    #define	RETURN_TYPE_arguments318 EmersonParser_arguments_return

    EmersonParser_arguments_return arguments320;
    #undef	RETURN_TYPE_arguments320
    #define	RETURN_TYPE_arguments320 EmersonParser_arguments_return

    EmersonParser_indexSuffix1_return indexSuffix1322;
    #undef	RETURN_TYPE_indexSuffix1322
    #define	RETURN_TYPE_indexSuffix1322 EmersonParser_indexSuffix1_return

    EmersonParser_propertyReferenceSuffix1_return propertyReferenceSuffix1324;
    #undef	RETURN_TYPE_propertyReferenceSuffix1324
    #define	RETURN_TYPE_propertyReferenceSuffix1324 EmersonParser_propertyReferenceSuffix1_return

    pANTLR3_BASE_TREE LTERM317_tree;
    pANTLR3_BASE_TREE LTERM319_tree;
    pANTLR3_BASE_TREE LTERM321_tree;
    pANTLR3_BASE_TREE LTERM323_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_memberExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix1;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix1;
    /* Initialize rule variables
     */
    callExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(53)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM317       = NULL;
    LTERM319       = NULL;
    LTERM321       = NULL;
    LTERM323       = NULL;
    memberExpression316.tree = NULL;

    arguments318.tree = NULL;

    arguments320.tree = NULL;

    indexSuffix1322.tree = NULL;

    propertyReferenceSuffix1324.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM317_tree   = NULL;
    LTERM319_tree   = NULL;
    LTERM321_tree   = NULL;
    LTERM323_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_memberExpression   = NULL;
    #define CREATE_stream_memberExpression  if (stream_memberExpression == NULL) {stream_memberExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule memberExpression"); }
    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_indexSuffix1   = NULL;
    #define CREATE_stream_indexSuffix1  if (stream_indexSuffix1 == NULL) {stream_indexSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix1"); }
    stream_propertyReferenceSuffix1   = NULL;
    #define CREATE_stream_propertyReferenceSuffix1  if (stream_propertyReferenceSuffix1 == NULL) {stream_propertyReferenceSuffix1 = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix1"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:379:2: ( ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )* )
        // .//Emerson.g:379:4: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) ) ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*
        {
            // .//Emerson.g:379:4: ( memberExpression ( LTERM )* arguments -> ^( CALL memberExpression arguments ) )
            // .//Emerson.g:379:5: memberExpression ( LTERM )* arguments
            {
                FOLLOWPUSH(FOLLOW_memberExpression_in_callExpression2799);
                memberExpression316=memberExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_memberExpression; stream_memberExpression->add(stream_memberExpression, memberExpression316.tree, NULL); }

                // .//Emerson.g:379:22: ( LTERM )*

                for (;;)
                {
                    int alt163=2;
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA163_0 = LA(1);
                        if ( (LA163_0 == LTERM) ) 
                        {
                            alt163=1;
                        }

                    }
                    switch (alt163) 
                    {
                	case 1:
                	    // .//Emerson.g:0:0: LTERM
                	    {
                	        LTERM317 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression2801); 
                	        if  (HASEXCEPTION())
                	        {
                	            goto rulecallExpressionEx;
                	        }
                	        if (HASFAILED())
                	        {
                	            return retval;
                	        } 
                	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM317, NULL); }


                	    }
                	    break;

                	default:
                	    goto loop163;	/* break out of the loop */
                	    break;
                    }
                }
                loop163: ; /* Jump out to here if this rule does not match */

                FOLLOWPUSH(FOLLOW_arguments_in_callExpression2804);
                arguments318=arguments(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments318.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : memberExpression, arguments
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 379:39: -> ^( CALL memberExpression arguments )
                	{
                	    // .//Emerson.g:379:42: ^( CALL memberExpression arguments )
                	    {
                	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CALL, (pANTLR3_UINT8)"CALL"), root_1));

                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_memberExpression == NULL ? NULL : stream_memberExpression->nextTree(stream_memberExpression));
                	        ADAPTOR->addChild(ADAPTOR, root_1, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

                	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                	    }

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:379:78: ( ( LTERM )* arguments -> arguments | ( LTERM )* indexSuffix1 -> ^( ARRAY_INDEX $callExpression indexSuffix1 ) | ( LTERM )* propertyReferenceSuffix1 -> ^( DOT $callExpression propertyReferenceSuffix1 ) )*

            for (;;)
            {
                int alt167=4;
                alt167 = cdfa167.predict(ctx, RECOGNIZER, ISTREAM, &cdfa167);
                if  (HASEXCEPTION())
                {
                    goto rulecallExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt167) 
                {
            	case 1:
            	    // .//Emerson.g:379:79: ( LTERM )* arguments
            	    {

            	        // .//Emerson.g:379:79: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt164=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA164_0 = LA(1);
            	                if ( (LA164_0 == LTERM) ) 
            	                {
            	                    alt164=1;
            	                }

            	            }
            	            switch (alt164) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM319 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression2818); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM319, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop164;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop164: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_arguments_in_callExpression2821);
            	        arguments320=arguments(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments320.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : arguments
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 379:96: -> arguments
            	        	{
            	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:379:111: ( LTERM )* indexSuffix1
            	    {

            	        // .//Emerson.g:379:111: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt165=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA165_0 = LA(1);
            	                if ( (LA165_0 == LTERM) ) 
            	                {
            	                    alt165=1;
            	                }

            	            }
            	            switch (alt165) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM321 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression2829); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM321, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop165;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop165: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_indexSuffix1_in_callExpression2832);
            	        indexSuffix1322=indexSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix1; stream_indexSuffix1->add(stream_indexSuffix1, indexSuffix1322.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : indexSuffix1, callExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 379:131: -> ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	{
            	        	    // .//Emerson.g:379:134: ^( ARRAY_INDEX $callExpression indexSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_indexSuffix1 == NULL ? NULL : stream_indexSuffix1->nextTree(stream_indexSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;
            	case 3:
            	    // .//Emerson.g:379:180: ( LTERM )* propertyReferenceSuffix1
            	    {

            	        // .//Emerson.g:379:180: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt166=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA166_0 = LA(1);
            	                if ( (LA166_0 == LTERM) ) 
            	                {
            	                    alt166=1;
            	                }

            	            }
            	            switch (alt166) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM323 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_callExpression2847); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulecallExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM323, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop166;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop166: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_callExpression2850);
            	        propertyReferenceSuffix1324=propertyReferenceSuffix1(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecallExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix1; stream_propertyReferenceSuffix1->add(stream_propertyReferenceSuffix1, propertyReferenceSuffix1324.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : callExpression, propertyReferenceSuffix1
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 379:212: -> ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	{
            	        	    // .//Emerson.g:379:215: ^( DOT $callExpression propertyReferenceSuffix1 )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyReferenceSuffix1 == NULL ? NULL : stream_propertyReferenceSuffix1->nextTree(stream_propertyReferenceSuffix1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop167;	/* break out of the loop */
            	    break;
                }
            }
            loop167: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionEx; /* Prevent compiler warnings */
    rulecallExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_memberExpression != NULL) stream_memberExpression->free(stream_memberExpression);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_indexSuffix1 != NULL) stream_indexSuffix1->free(stream_indexSuffix1);
        if (stream_propertyReferenceSuffix1 != NULL) stream_propertyReferenceSuffix1->free(stream_propertyReferenceSuffix1);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(53, callExpression_StartIndex); }
    return retval;
}
/* $ANTLR end callExpression */

/** 
 * $ANTLR start callExpressionSuffix
 * .//Emerson.g:382:1: callExpressionSuffix : ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix );
 */
static EmersonParser_callExpressionSuffix_return
callExpressionSuffix(pEmersonParser ctx)
{   
    EmersonParser_callExpressionSuffix_return retval;
    ANTLR3_UINT32 callExpressionSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_arguments_return arguments325;
    #undef	RETURN_TYPE_arguments325
    #define	RETURN_TYPE_arguments325 EmersonParser_arguments_return

    EmersonParser_indexSuffix_return indexSuffix326;
    #undef	RETURN_TYPE_indexSuffix326
    #define	RETURN_TYPE_indexSuffix326 EmersonParser_indexSuffix_return

    EmersonParser_propertyReferenceSuffix_return propertyReferenceSuffix327;
    #undef	RETURN_TYPE_propertyReferenceSuffix327
    #define	RETURN_TYPE_propertyReferenceSuffix327 EmersonParser_propertyReferenceSuffix_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_arguments;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyReferenceSuffix;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_indexSuffix;
    /* Initialize rule variables
     */
    callExpressionSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(54)) )
    {
    	retval.start = 0;

        return retval; 
    }
    arguments325.tree = NULL;

    indexSuffix326.tree = NULL;

    propertyReferenceSuffix327.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_arguments   = NULL;
    #define CREATE_stream_arguments  if (stream_arguments == NULL) {stream_arguments = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule arguments"); }
    stream_propertyReferenceSuffix   = NULL;
    #define CREATE_stream_propertyReferenceSuffix  if (stream_propertyReferenceSuffix == NULL) {stream_propertyReferenceSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyReferenceSuffix"); }
    stream_indexSuffix   = NULL;
    #define CREATE_stream_indexSuffix  if (stream_indexSuffix == NULL) {stream_indexSuffix = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule indexSuffix"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:383:2: ( arguments -> arguments | indexSuffix -> indexSuffix | propertyReferenceSuffix -> propertyReferenceSuffix )
            
            ANTLR3_UINT32 alt168;

            alt168=3;

            switch ( LA(1) ) 
            {
            case 122:
            	{
            		alt168=1;
            	}
                break;
            case 151:
            	{
            		alt168=2;
            	}
                break;
            case 153:
            	{
            		alt168=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 168;
                EXCEPTION->state        = 0;


                goto rulecallExpressionSuffixEx;
            }

            switch (alt168) 
            {
        	case 1:
        	    // .//Emerson.g:383:4: arguments
        	    {
        	        FOLLOWPUSH(FOLLOW_arguments_in_callExpressionSuffix2877);
        	        arguments325=arguments(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_arguments; stream_arguments->add(stream_arguments, arguments325.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : arguments
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 383:14: -> arguments
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_arguments == NULL ? NULL : stream_arguments->nextTree(stream_arguments));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:384:4: indexSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_indexSuffix_in_callExpressionSuffix2886);
        	        indexSuffix326=indexSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_indexSuffix; stream_indexSuffix->add(stream_indexSuffix, indexSuffix326.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : indexSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 384:16: -> indexSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_indexSuffix == NULL ? NULL : stream_indexSuffix->nextTree(stream_indexSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:385:4: propertyReferenceSuffix
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix_in_callExpressionSuffix2895);
        	        propertyReferenceSuffix327=propertyReferenceSuffix(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecallExpressionSuffixEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyReferenceSuffix; stream_propertyReferenceSuffix->add(stream_propertyReferenceSuffix, propertyReferenceSuffix327.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : propertyReferenceSuffix
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 385:28: -> propertyReferenceSuffix
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_propertyReferenceSuffix == NULL ? NULL : stream_propertyReferenceSuffix->nextTree(stream_propertyReferenceSuffix));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecallExpressionSuffixEx; /* Prevent compiler warnings */
    rulecallExpressionSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_arguments != NULL) stream_arguments->free(stream_arguments);
        if (stream_propertyReferenceSuffix != NULL) stream_propertyReferenceSuffix->free(stream_propertyReferenceSuffix);
        if (stream_indexSuffix != NULL) stream_indexSuffix->free(stream_indexSuffix);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(54, callExpressionSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end callExpressionSuffix */

/** 
 * $ANTLR start arguments
 * .//Emerson.g:388:1: arguments : '(' ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )? ( LTERM )* ')' -> ^( ARGLIST ( assignmentExpression )* ) ;
 */
static EmersonParser_arguments_return
arguments(pEmersonParser ctx)
{   
    EmersonParser_arguments_return retval;
    ANTLR3_UINT32 arguments_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal328;
    pANTLR3_COMMON_TOKEN    LTERM329;
    pANTLR3_COMMON_TOKEN    LTERM331;
    pANTLR3_COMMON_TOKEN    char_literal332;
    pANTLR3_COMMON_TOKEN    LTERM333;
    pANTLR3_COMMON_TOKEN    LTERM335;
    pANTLR3_COMMON_TOKEN    char_literal336;
    EmersonParser_assignmentExpression_return assignmentExpression330;
    #undef	RETURN_TYPE_assignmentExpression330
    #define	RETURN_TYPE_assignmentExpression330 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression334;
    #undef	RETURN_TYPE_assignmentExpression334
    #define	RETURN_TYPE_assignmentExpression334 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal328_tree;
    pANTLR3_BASE_TREE LTERM329_tree;
    pANTLR3_BASE_TREE LTERM331_tree;
    pANTLR3_BASE_TREE char_literal332_tree;
    pANTLR3_BASE_TREE LTERM333_tree;
    pANTLR3_BASE_TREE LTERM335_tree;
    pANTLR3_BASE_TREE char_literal336_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_122;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_123;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_124;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    arguments_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(55)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal328       = NULL;
    LTERM329       = NULL;
    LTERM331       = NULL;
    char_literal332       = NULL;
    LTERM333       = NULL;
    LTERM335       = NULL;
    char_literal336       = NULL;
    assignmentExpression330.tree = NULL;

    assignmentExpression334.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal328_tree   = NULL;
    LTERM329_tree   = NULL;
    LTERM331_tree   = NULL;
    char_literal332_tree   = NULL;
    LTERM333_tree   = NULL;
    LTERM335_tree   = NULL;
    char_literal336_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_122   = NULL;
    #define CREATE_stream_122  if (stream_122 == NULL) {stream_122 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 122"); } 
    stream_123   = NULL;
    #define CREATE_stream_123  if (stream_123 == NULL) {stream_123 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 123"); } 
    stream_124   = NULL;
    #define CREATE_stream_124  if (stream_124 == NULL) {stream_124 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 124"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:389:2: ( '(' ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )? ( LTERM )* ')' -> ^( ARGLIST ( assignmentExpression )* ) )
        // .//Emerson.g:389:4: '(' ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )? ( LTERM )* ')'
        {
            char_literal328 = (pANTLR3_COMMON_TOKEN) MATCHT(122, &FOLLOW_122_in_arguments2910); 
            if  (HASEXCEPTION())
            {
                goto ruleargumentsEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_122; stream_122->add(stream_122, char_literal328, NULL); }


            // .//Emerson.g:389:8: ( ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )* )?
            {
                int alt173=2;
                alt173 = cdfa173.predict(ctx, RECOGNIZER, ISTREAM, &cdfa173);
                if  (HASEXCEPTION())
                {
                    goto ruleargumentsEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt173) 
                {
            	case 1:
            	    // .//Emerson.g:389:9: ( LTERM )* ( assignmentExpression ) ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*
            	    {

            	        // .//Emerson.g:389:9: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt169=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA169_0 = LA(1);
            	                if ( (LA169_0 == LTERM) ) 
            	                {
            	                    alt169=1;
            	                }

            	            }
            	            switch (alt169) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM329 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments2913); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleargumentsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM329, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop169;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop169: ; /* Jump out to here if this rule does not match */

            	        // .//Emerson.g:389:16: ( assignmentExpression )
            	        // .//Emerson.g:389:17: assignmentExpression
            	        {
            	            FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments2917);
            	            assignmentExpression330=assignmentExpression(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleargumentsEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression330.tree, NULL); }

            	        }


            	        // .//Emerson.g:389:39: ( ( LTERM )* ',' ( LTERM )* assignmentExpression )*

            	        for (;;)
            	        {
            	            int alt172=2;
            	            alt172 = cdfa172.predict(ctx, RECOGNIZER, ISTREAM, &cdfa172);
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleargumentsEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            }
            	            switch (alt172) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:389:40: ( LTERM )* ',' ( LTERM )* assignmentExpression
            	        	    {

            	        	        // .//Emerson.g:389:40: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt170=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA170_0 = LA(1);
            	        	                if ( (LA170_0 == LTERM) ) 
            	        	                {
            	        	                    alt170=1;
            	        	                }

            	        	            }
            	        	            switch (alt170) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM331 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments2921); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleargumentsEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM331, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop170;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop170: ; /* Jump out to here if this rule does not match */

            	        	        char_literal332 = (pANTLR3_COMMON_TOKEN) MATCHT(123, &FOLLOW_123_in_arguments2924); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleargumentsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_123; stream_123->add(stream_123, char_literal332, NULL); }


            	        	        // .//Emerson.g:389:51: ( LTERM )*

            	        	        for (;;)
            	        	        {
            	        	            int alt171=2;
            	        	            {
            	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	        	                */
            	        	                int LA171_0 = LA(1);
            	        	                if ( (LA171_0 == LTERM) ) 
            	        	                {
            	        	                    alt171=1;
            	        	                }

            	        	            }
            	        	            switch (alt171) 
            	        	            {
            	        	        	case 1:
            	        	        	    // .//Emerson.g:0:0: LTERM
            	        	        	    {
            	        	        	        LTERM333 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments2926); 
            	        	        	        if  (HASEXCEPTION())
            	        	        	        {
            	        	        	            goto ruleargumentsEx;
            	        	        	        }
            	        	        	        if (HASFAILED())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        } 
            	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM333, NULL); }


            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop171;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop171: ; /* Jump out to here if this rule does not match */

            	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arguments2929);
            	        	        assignmentExpression334=assignmentExpression(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleargumentsEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression334.tree, NULL); }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop172;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop172: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // .//Emerson.g:389:83: ( LTERM )*

            for (;;)
            {
                int alt174=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA174_0 = LA(1);
                    if ( (LA174_0 == LTERM) ) 
                    {
                        alt174=1;
                    }

                }
                switch (alt174) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM335 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arguments2935); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleargumentsEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM335, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop174;	/* break out of the loop */
            	    break;
                }
            }
            loop174: ; /* Jump out to here if this rule does not match */

            char_literal336 = (pANTLR3_COMMON_TOKEN) MATCHT(124, &FOLLOW_124_in_arguments2938); 
            if  (HASEXCEPTION())
            {
                goto ruleargumentsEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_124; stream_124->add(stream_124, char_literal336, NULL); }


             
            /* AST REWRITE
             * elements          : assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 389:94: -> ^( ARGLIST ( assignmentExpression )* )
            	{
            	    // .//Emerson.g:389:97: ^( ARGLIST ( assignmentExpression )* )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARGLIST, (pANTLR3_UINT8)"ARGLIST"), root_1));

            	        // .//Emerson.g:389:107: ( assignmentExpression )*
            	        {
            	        	while ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        	}
            	        	if (stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleargumentsEx; /* Prevent compiler warnings */
    ruleargumentsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_122 != NULL) stream_122->free(stream_122);
        if (stream_123 != NULL) stream_123->free(stream_123);
        if (stream_124 != NULL) stream_124->free(stream_124);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(55, arguments_StartIndex); }
    return retval;
}
/* $ANTLR end arguments */

/** 
 * $ANTLR start indexSuffix
 * .//Emerson.g:393:1: indexSuffix : '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) ;
 */
static EmersonParser_indexSuffix_return
indexSuffix(pEmersonParser ctx)
{   
    EmersonParser_indexSuffix_return retval;
    ANTLR3_UINT32 indexSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal337;
    pANTLR3_COMMON_TOKEN    LTERM338;
    pANTLR3_COMMON_TOKEN    LTERM340;
    pANTLR3_COMMON_TOKEN    char_literal341;
    EmersonParser_expression_return expression339;
    #undef	RETURN_TYPE_expression339
    #define	RETURN_TYPE_expression339 EmersonParser_expression_return

    pANTLR3_BASE_TREE char_literal337_tree;
    pANTLR3_BASE_TREE LTERM338_tree;
    pANTLR3_BASE_TREE LTERM340_tree;
    pANTLR3_BASE_TREE char_literal341_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_152;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_151;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    indexSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(56)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal337       = NULL;
    LTERM338       = NULL;
    LTERM340       = NULL;
    char_literal341       = NULL;
    expression339.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal337_tree   = NULL;
    LTERM338_tree   = NULL;
    LTERM340_tree   = NULL;
    char_literal341_tree   = NULL;

    stream_152   = NULL;
    #define CREATE_stream_152  if (stream_152 == NULL) {stream_152 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 152"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_151   = NULL;
    #define CREATE_stream_151  if (stream_151 == NULL) {stream_151 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 151"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:394:2: ( '[' ( LTERM )* expression ( LTERM )* ']' -> ^( ARRAY_INDEX expression ) )
        // .//Emerson.g:394:4: '[' ( LTERM )* expression ( LTERM )* ']'
        {
            char_literal337 = (pANTLR3_COMMON_TOKEN) MATCHT(151, &FOLLOW_151_in_indexSuffix2961); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_151; stream_151->add(stream_151, char_literal337, NULL); }


            // .//Emerson.g:394:8: ( LTERM )*

            for (;;)
            {
                int alt175=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA175_0 = LA(1);
                    if ( (LA175_0 == LTERM) ) 
                    {
                        alt175=1;
                    }

                }
                switch (alt175) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM338 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix2963); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM338, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop175;	/* break out of the loop */
            	    break;
                }
            }
            loop175: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_expression_in_indexSuffix2966);
            expression339=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression339.tree, NULL); }

            // .//Emerson.g:394:26: ( LTERM )*

            for (;;)
            {
                int alt176=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA176_0 = LA(1);
                    if ( (LA176_0 == LTERM) ) 
                    {
                        alt176=1;
                    }

                }
                switch (alt176) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM340 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_indexSuffix2968); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleindexSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM340, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop176;	/* break out of the loop */
            	    break;
                }
            }
            loop176: ; /* Jump out to here if this rule does not match */

            char_literal341 = (pANTLR3_COMMON_TOKEN) MATCHT(152, &FOLLOW_152_in_indexSuffix2971); 
            if  (HASEXCEPTION())
            {
                goto ruleindexSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_152; stream_152->add(stream_152, char_literal341, NULL); }


             
            /* AST REWRITE
             * elements          : expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 394:37: -> ^( ARRAY_INDEX expression )
            	{
            	    // .//Emerson.g:394:40: ^( ARRAY_INDEX expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_INDEX, (pANTLR3_UINT8)"ARRAY_INDEX"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleindexSuffixEx; /* Prevent compiler warnings */
    ruleindexSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_152 != NULL) stream_152->free(stream_152);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_151 != NULL) stream_151->free(stream_151);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(56, indexSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end indexSuffix */

/** 
 * $ANTLR start propertyReferenceSuffix
 * .//Emerson.g:397:1: propertyReferenceSuffix : '.' ( LTERM )* Identifier -> ^( DOT Identifier ) ;
 */
static EmersonParser_propertyReferenceSuffix_return
propertyReferenceSuffix(pEmersonParser ctx)
{   
    EmersonParser_propertyReferenceSuffix_return retval;
    ANTLR3_UINT32 propertyReferenceSuffix_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal342;
    pANTLR3_COMMON_TOKEN    LTERM343;
    pANTLR3_COMMON_TOKEN    Identifier344;

    pANTLR3_BASE_TREE char_literal342_tree;
    pANTLR3_BASE_TREE LTERM343_tree;
    pANTLR3_BASE_TREE Identifier344_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_153;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_Identifier;

    /* Initialize rule variables
     */
    propertyReferenceSuffix_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(57)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal342       = NULL;
    LTERM343       = NULL;
    Identifier344       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal342_tree   = NULL;
    LTERM343_tree   = NULL;
    Identifier344_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_153   = NULL;
    #define CREATE_stream_153  if (stream_153 == NULL) {stream_153 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 153"); } 
    stream_Identifier   = NULL;
    #define CREATE_stream_Identifier  if (stream_Identifier == NULL) {stream_Identifier = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token Identifier"); } 

    retval.tree  = NULL;
    {
        // .//Emerson.g:398:2: ( '.' ( LTERM )* Identifier -> ^( DOT Identifier ) )
        // .//Emerson.g:398:4: '.' ( LTERM )* Identifier
        {
            char_literal342 = (pANTLR3_COMMON_TOKEN) MATCHT(153, &FOLLOW_153_in_propertyReferenceSuffix2992); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_153; stream_153->add(stream_153, char_literal342, NULL); }


            // .//Emerson.g:398:8: ( LTERM )*

            for (;;)
            {
                int alt177=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA177_0 = LA(1);
                    if ( (LA177_0 == LTERM) ) 
                    {
                        alt177=1;
                    }

                }
                switch (alt177) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM343 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyReferenceSuffix2994); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyReferenceSuffixEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM343, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop177;	/* break out of the loop */
            	    break;
                }
            }
            loop177: ; /* Jump out to here if this rule does not match */

            Identifier344 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_propertyReferenceSuffix2997); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyReferenceSuffixEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_Identifier; stream_Identifier->add(stream_Identifier, Identifier344, NULL); }


             
            /* AST REWRITE
             * elements          : Identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 398:26: -> ^( DOT Identifier )
            	{
            	    // .//Emerson.g:398:29: ^( DOT Identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOT, (pANTLR3_UINT8)"DOT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_Identifier == NULL ? NULL : stream_Identifier->nextNode(stream_Identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyReferenceSuffixEx; /* Prevent compiler warnings */
    rulepropertyReferenceSuffixEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_153 != NULL) stream_153->free(stream_153);
        if (stream_Identifier != NULL) stream_Identifier->free(stream_Identifier);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(57, propertyReferenceSuffix_StartIndex); }
    return retval;
}
/* $ANTLR end propertyReferenceSuffix */

/** 
 * $ANTLR start assignmentOperator
 * .//Emerson.g:401:1: assignmentOperator : ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '<<=' -> ^( LEFT_SHIFT_ASSIGN ) | '>>=' -> ^( RIGHT_SHIFT_ASSIGN ) | '>>>=' -> ^( TRIPLE_SHIFT_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) );
 */
static EmersonParser_assignmentOperator_return
assignmentOperator(pEmersonParser ctx)
{   
    EmersonParser_assignmentOperator_return retval;
    ANTLR3_UINT32 assignmentOperator_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal345;
    pANTLR3_COMMON_TOKEN    string_literal346;
    pANTLR3_COMMON_TOKEN    string_literal347;
    pANTLR3_COMMON_TOKEN    string_literal348;
    pANTLR3_COMMON_TOKEN    string_literal349;
    pANTLR3_COMMON_TOKEN    string_literal350;
    pANTLR3_COMMON_TOKEN    string_literal351;
    pANTLR3_COMMON_TOKEN    string_literal352;
    pANTLR3_COMMON_TOKEN    string_literal353;
    pANTLR3_COMMON_TOKEN    string_literal354;
    pANTLR3_COMMON_TOKEN    string_literal355;
    pANTLR3_COMMON_TOKEN    string_literal356;

    pANTLR3_BASE_TREE char_literal345_tree;
    pANTLR3_BASE_TREE string_literal346_tree;
    pANTLR3_BASE_TREE string_literal347_tree;
    pANTLR3_BASE_TREE string_literal348_tree;
    pANTLR3_BASE_TREE string_literal349_tree;
    pANTLR3_BASE_TREE string_literal350_tree;
    pANTLR3_BASE_TREE string_literal351_tree;
    pANTLR3_BASE_TREE string_literal352_tree;
    pANTLR3_BASE_TREE string_literal353_tree;
    pANTLR3_BASE_TREE string_literal354_tree;
    pANTLR3_BASE_TREE string_literal355_tree;
    pANTLR3_BASE_TREE string_literal356_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_161;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_162;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_163;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_164;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_160;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_159;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_158;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_157;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_129;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_156;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_155;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_154;

    /* Initialize rule variables
     */
    assignmentOperator_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(58)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal345       = NULL;
    string_literal346       = NULL;
    string_literal347       = NULL;
    string_literal348       = NULL;
    string_literal349       = NULL;
    string_literal350       = NULL;
    string_literal351       = NULL;
    string_literal352       = NULL;
    string_literal353       = NULL;
    string_literal354       = NULL;
    string_literal355       = NULL;
    string_literal356       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal345_tree   = NULL;
    string_literal346_tree   = NULL;
    string_literal347_tree   = NULL;
    string_literal348_tree   = NULL;
    string_literal349_tree   = NULL;
    string_literal350_tree   = NULL;
    string_literal351_tree   = NULL;
    string_literal352_tree   = NULL;
    string_literal353_tree   = NULL;
    string_literal354_tree   = NULL;
    string_literal355_tree   = NULL;
    string_literal356_tree   = NULL;

    stream_161   = NULL;
    #define CREATE_stream_161  if (stream_161 == NULL) {stream_161 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 161"); } 
    stream_162   = NULL;
    #define CREATE_stream_162  if (stream_162 == NULL) {stream_162 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 162"); } 
    stream_163   = NULL;
    #define CREATE_stream_163  if (stream_163 == NULL) {stream_163 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 163"); } 
    stream_164   = NULL;
    #define CREATE_stream_164  if (stream_164 == NULL) {stream_164 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 164"); } 
    stream_160   = NULL;
    #define CREATE_stream_160  if (stream_160 == NULL) {stream_160 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 160"); } 
    stream_159   = NULL;
    #define CREATE_stream_159  if (stream_159 == NULL) {stream_159 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 159"); } 
    stream_158   = NULL;
    #define CREATE_stream_158  if (stream_158 == NULL) {stream_158 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 158"); } 
    stream_157   = NULL;
    #define CREATE_stream_157  if (stream_157 == NULL) {stream_157 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 157"); } 
    stream_129   = NULL;
    #define CREATE_stream_129  if (stream_129 == NULL) {stream_129 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 129"); } 
    stream_156   = NULL;
    #define CREATE_stream_156  if (stream_156 == NULL) {stream_156 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 156"); } 
    stream_155   = NULL;
    #define CREATE_stream_155  if (stream_155 == NULL) {stream_155 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 155"); } 
    stream_154   = NULL;
    #define CREATE_stream_154  if (stream_154 == NULL) {stream_154 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 154"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:402:2: ( '=' -> ^( ASSIGN ) | '*=' -> ^( MULT_ASSIGN ) | '/=' -> ^( DIV_ASSIGN ) | '%=' -> ^( MOD_ASSIGN ) | '+=' -> ^( ADD_ASSIGN ) | '-=' -> ^( SUB_ASSIGN ) | '<<=' -> ^( LEFT_SHIFT_ASSIGN ) | '>>=' -> ^( RIGHT_SHIFT_ASSIGN ) | '>>>=' -> ^( TRIPLE_SHIFT_ASSIGN ) | '&=' -> ^( AND_ASSIGN ) | '^=' -> ^( EXP_ASSIGN ) | '|=' -> ^( OR_ASSIGN ) )
            
            ANTLR3_UINT32 alt178;

            alt178=12;

            switch ( LA(1) ) 
            {
            case 129:
            	{
            		alt178=1;
            	}
                break;
            case 154:
            	{
            		alt178=2;
            	}
                break;
            case 155:
            	{
            		alt178=3;
            	}
                break;
            case 156:
            	{
            		alt178=4;
            	}
                break;
            case 157:
            	{
            		alt178=5;
            	}
                break;
            case 158:
            	{
            		alt178=6;
            	}
                break;
            case 159:
            	{
            		alt178=7;
            	}
                break;
            case 160:
            	{
            		alt178=8;
            	}
                break;
            case 161:
            	{
            		alt178=9;
            	}
                break;
            case 162:
            	{
            		alt178=10;
            	}
                break;
            case 163:
            	{
            		alt178=11;
            	}
                break;
            case 164:
            	{
            		alt178=12;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 178;
                EXCEPTION->state        = 0;


                goto ruleassignmentOperatorEx;
            }

            switch (alt178) 
            {
        	case 1:
        	    // .//Emerson.g:402:4: '='
        	    {
        	        char_literal345 = (pANTLR3_COMMON_TOKEN) MATCHT(129, &FOLLOW_129_in_assignmentOperator3017); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_129; stream_129->add(stream_129, char_literal345, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 402:8: -> ^( ASSIGN )
        	        	{
        	        	    // .//Emerson.g:402:11: ^( ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN, (pANTLR3_UINT8)"ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:402:22: '*='
        	    {
        	        string_literal346 = (pANTLR3_COMMON_TOKEN) MATCHT(154, &FOLLOW_154_in_assignmentOperator3026); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_154; stream_154->add(stream_154, string_literal346, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 402:27: -> ^( MULT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:402:30: ^( MULT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT_ASSIGN, (pANTLR3_UINT8)"MULT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:402:46: '/='
        	    {
        	        string_literal347 = (pANTLR3_COMMON_TOKEN) MATCHT(155, &FOLLOW_155_in_assignmentOperator3035); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_155; stream_155->add(stream_155, string_literal347, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 402:51: -> ^( DIV_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:402:54: ^( DIV_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV_ASSIGN, (pANTLR3_UINT8)"DIV_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:402:70: '%='
        	    {
        	        string_literal348 = (pANTLR3_COMMON_TOKEN) MATCHT(156, &FOLLOW_156_in_assignmentOperator3045); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_156; stream_156->add(stream_156, string_literal348, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 402:75: -> ^( MOD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:402:78: ^( MOD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD_ASSIGN, (pANTLR3_UINT8)"MOD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:402:93: '+='
        	    {
        	        string_literal349 = (pANTLR3_COMMON_TOKEN) MATCHT(157, &FOLLOW_157_in_assignmentOperator3054); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_157; stream_157->add(stream_157, string_literal349, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 402:98: -> ^( ADD_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:402:101: ^( ADD_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD_ASSIGN, (pANTLR3_UINT8)"ADD_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:402:116: '-='
        	    {
        	        string_literal350 = (pANTLR3_COMMON_TOKEN) MATCHT(158, &FOLLOW_158_in_assignmentOperator3063); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_158; stream_158->add(stream_158, string_literal350, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 402:121: -> ^( SUB_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:402:124: ^( SUB_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB_ASSIGN, (pANTLR3_UINT8)"SUB_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:402:139: '<<='
        	    {
        	        string_literal351 = (pANTLR3_COMMON_TOKEN) MATCHT(159, &FOLLOW_159_in_assignmentOperator3072); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_159; stream_159->add(stream_159, string_literal351, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 402:145: -> ^( LEFT_SHIFT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:402:148: ^( LEFT_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LEFT_SHIFT_ASSIGN, (pANTLR3_UINT8)"LEFT_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:402:170: '>>='
        	    {
        	        string_literal352 = (pANTLR3_COMMON_TOKEN) MATCHT(160, &FOLLOW_160_in_assignmentOperator3081); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_160; stream_160->add(stream_160, string_literal352, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 402:176: -> ^( RIGHT_SHIFT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:402:179: ^( RIGHT_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RIGHT_SHIFT_ASSIGN, (pANTLR3_UINT8)"RIGHT_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:402:202: '>>>='
        	    {
        	        string_literal353 = (pANTLR3_COMMON_TOKEN) MATCHT(161, &FOLLOW_161_in_assignmentOperator3090); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_161; stream_161->add(stream_161, string_literal353, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 402:209: -> ^( TRIPLE_SHIFT_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:402:212: ^( TRIPLE_SHIFT_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRIPLE_SHIFT_ASSIGN, (pANTLR3_UINT8)"TRIPLE_SHIFT_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 10:
        	    // .//Emerson.g:402:236: '&='
        	    {
        	        string_literal354 = (pANTLR3_COMMON_TOKEN) MATCHT(162, &FOLLOW_162_in_assignmentOperator3099); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_162; stream_162->add(stream_162, string_literal354, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 402:240: -> ^( AND_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:402:243: ^( AND_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND_ASSIGN, (pANTLR3_UINT8)"AND_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 11:
        	    // .//Emerson.g:402:258: '^='
        	    {
        	        string_literal355 = (pANTLR3_COMMON_TOKEN) MATCHT(163, &FOLLOW_163_in_assignmentOperator3107); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_163; stream_163->add(stream_163, string_literal355, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 402:262: -> ^( EXP_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:402:265: ^( EXP_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP_ASSIGN, (pANTLR3_UINT8)"EXP_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 12:
        	    // .//Emerson.g:402:281: '|='
        	    {
        	        string_literal356 = (pANTLR3_COMMON_TOKEN) MATCHT(164, &FOLLOW_164_in_assignmentOperator3116); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleassignmentOperatorEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_164; stream_164->add(stream_164, string_literal356, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 402:286: -> ^( OR_ASSIGN )
        	        	{
        	        	    // .//Emerson.g:402:289: ^( OR_ASSIGN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR_ASSIGN, (pANTLR3_UINT8)"OR_ASSIGN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleassignmentOperatorEx; /* Prevent compiler warnings */
    ruleassignmentOperatorEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_161 != NULL) stream_161->free(stream_161);
        if (stream_162 != NULL) stream_162->free(stream_162);
        if (stream_163 != NULL) stream_163->free(stream_163);
        if (stream_164 != NULL) stream_164->free(stream_164);
        if (stream_160 != NULL) stream_160->free(stream_160);
        if (stream_159 != NULL) stream_159->free(stream_159);
        if (stream_158 != NULL) stream_158->free(stream_158);
        if (stream_157 != NULL) stream_157->free(stream_157);
        if (stream_129 != NULL) stream_129->free(stream_129);
        if (stream_156 != NULL) stream_156->free(stream_156);
        if (stream_155 != NULL) stream_155->free(stream_155);
        if (stream_154 != NULL) stream_154->free(stream_154);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(58, assignmentOperator_StartIndex); }
    return retval;
}
/* $ANTLR end assignmentOperator */

/** 
 * $ANTLR start conditionalExpression
 * .//Emerson.g:405:1: conditionalExpression : ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )? ;
 */
static EmersonParser_conditionalExpression_return
conditionalExpression(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpression_return retval;
    ANTLR3_UINT32 conditionalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM358;
    pANTLR3_COMMON_TOKEN    char_literal359;
    pANTLR3_COMMON_TOKEN    LTERM360;
    pANTLR3_COMMON_TOKEN    LTERM361;
    pANTLR3_COMMON_TOKEN    char_literal362;
    pANTLR3_COMMON_TOKEN    LTERM363;
    EmersonParser_assignmentExpression_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpression_return

    EmersonParser_logicalORExpression_return logicalORExpression357;
    #undef	RETURN_TYPE_logicalORExpression357
    #define	RETURN_TYPE_logicalORExpression357 EmersonParser_logicalORExpression_return

    pANTLR3_BASE_TREE LTERM358_tree;
    pANTLR3_BASE_TREE char_literal359_tree;
    pANTLR3_BASE_TREE LTERM360_tree;
    pANTLR3_BASE_TREE LTERM361_tree;
    pANTLR3_BASE_TREE char_literal362_tree;
    pANTLR3_BASE_TREE LTERM363_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_165;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpression;
    /* Initialize rule variables
     */
    conditionalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(59)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM358       = NULL;
    char_literal359       = NULL;
    LTERM360       = NULL;
    LTERM361       = NULL;
    char_literal362       = NULL;
    LTERM363       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpression357.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM358_tree   = NULL;
    char_literal359_tree   = NULL;
    LTERM360_tree   = NULL;
    LTERM361_tree   = NULL;
    char_literal362_tree   = NULL;
    LTERM363_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_165   = NULL;
    #define CREATE_stream_165  if (stream_165 == NULL) {stream_165 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 165"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }
    stream_logicalORExpression   = NULL;
    #define CREATE_stream_logicalORExpression  if (stream_logicalORExpression == NULL) {stream_logicalORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:406:2: ( ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )? )
        // .//Emerson.g:406:4: ( logicalORExpression -> logicalORExpression ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
        {
            // .//Emerson.g:406:4: ( logicalORExpression -> logicalORExpression )
            // .//Emerson.g:406:5: logicalORExpression
            {
                FOLLOWPUSH(FOLLOW_logicalORExpression_in_conditionalExpression3134);
                logicalORExpression357=logicalORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpression; stream_logicalORExpression->add(stream_logicalORExpression, logicalORExpression357.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 406:25: -> logicalORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpression == NULL ? NULL : stream_logicalORExpression->nextTree(stream_logicalORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:406:49: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression -> ^( TERNARYOP $conditionalExpression $expr1 $expr2) )?
            {
                int alt183=2;
                alt183 = cdfa183.predict(ctx, RECOGNIZER, ISTREAM, &cdfa183);
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt183) 
                {
            	case 1:
            	    // .//Emerson.g:406:50: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpression ( LTERM )* ':' ( LTERM )* expr2= assignmentExpression
            	    {

            	        // .//Emerson.g:406:50: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt179=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA179_0 = LA(1);
            	                if ( (LA179_0 == LTERM) ) 
            	                {
            	                    alt179=1;
            	                }

            	            }
            	            switch (alt179) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM358 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3142); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM358, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop179;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop179: ; /* Jump out to here if this rule does not match */

            	        char_literal359 = (pANTLR3_COMMON_TOKEN) MATCHT(165, &FOLLOW_165_in_conditionalExpression3145); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_165; stream_165->add(stream_165, char_literal359, NULL); }


            	        // .//Emerson.g:406:61: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt180=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA180_0 = LA(1);
            	                if ( (LA180_0 == LTERM) ) 
            	                {
            	                    alt180=1;
            	                }

            	            }
            	            switch (alt180) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM360 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3147); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM360, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop180;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop180: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_conditionalExpression3152);
            	        expr1=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr1.tree, NULL); }

            	        // .//Emerson.g:406:95: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt181=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA181_0 = LA(1);
            	                if ( (LA181_0 == LTERM) ) 
            	                {
            	                    alt181=1;
            	                }

            	            }
            	            switch (alt181) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM361 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3154); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM361, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop181;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop181: ; /* Jump out to here if this rule does not match */

            	        char_literal362 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_conditionalExpression3157); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal362, NULL); }


            	        // .//Emerson.g:406:106: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt182=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA182_0 = LA(1);
            	                if ( (LA182_0 == LTERM) ) 
            	                {
            	                    alt182=1;
            	                }

            	            }
            	            switch (alt182) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM363 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpression3159); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM363, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop182;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop182: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_conditionalExpression3164);
            	        expr2=assignmentExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : expr1, conditionalExpression, expr2
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 406:140: -> ^( TERNARYOP $conditionalExpression $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:406:143: ^( TERNARYOP $conditionalExpression $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP, (pANTLR3_UINT8)"TERNARYOP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionEx; /* Prevent compiler warnings */
    ruleconditionalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_165 != NULL) stream_165->free(stream_165);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
        if (stream_logicalORExpression != NULL) stream_logicalORExpression->free(stream_logicalORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(59, conditionalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpression */

/** 
 * $ANTLR start conditionalExpressionNoIn
 * .//Emerson.g:409:1: conditionalExpressionNoIn : ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )? ;
 */
static EmersonParser_conditionalExpressionNoIn_return
conditionalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_conditionalExpressionNoIn_return retval;
    ANTLR3_UINT32 conditionalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM365;
    pANTLR3_COMMON_TOKEN    char_literal366;
    pANTLR3_COMMON_TOKEN    LTERM367;
    pANTLR3_COMMON_TOKEN    LTERM368;
    pANTLR3_COMMON_TOKEN    char_literal369;
    pANTLR3_COMMON_TOKEN    LTERM370;
    EmersonParser_assignmentExpressionNoIn_return expr1;
    #undef	RETURN_TYPE_expr1
    #define	RETURN_TYPE_expr1 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_assignmentExpressionNoIn_return expr2;
    #undef	RETURN_TYPE_expr2
    #define	RETURN_TYPE_expr2 EmersonParser_assignmentExpressionNoIn_return

    EmersonParser_logicalORExpressionNoIn_return logicalORExpressionNoIn364;
    #undef	RETURN_TYPE_logicalORExpressionNoIn364
    #define	RETURN_TYPE_logicalORExpressionNoIn364 EmersonParser_logicalORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM365_tree;
    pANTLR3_BASE_TREE char_literal366_tree;
    pANTLR3_BASE_TREE LTERM367_tree;
    pANTLR3_BASE_TREE LTERM368_tree;
    pANTLR3_BASE_TREE char_literal369_tree;
    pANTLR3_BASE_TREE LTERM370_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_165;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpressionNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalORExpressionNoIn;
    /* Initialize rule variables
     */
    conditionalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(60)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM365       = NULL;
    char_literal366       = NULL;
    LTERM367       = NULL;
    LTERM368       = NULL;
    char_literal369       = NULL;
    LTERM370       = NULL;
    expr1.tree = NULL;

    expr2.tree = NULL;

    logicalORExpressionNoIn364.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM365_tree   = NULL;
    char_literal366_tree   = NULL;
    LTERM367_tree   = NULL;
    LTERM368_tree   = NULL;
    char_literal369_tree   = NULL;
    LTERM370_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_165   = NULL;
    #define CREATE_stream_165  if (stream_165 == NULL) {stream_165 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 165"); } 
    stream_assignmentExpressionNoIn   = NULL;
    #define CREATE_stream_assignmentExpressionNoIn  if (stream_assignmentExpressionNoIn == NULL) {stream_assignmentExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpressionNoIn"); }
    stream_logicalORExpressionNoIn   = NULL;
    #define CREATE_stream_logicalORExpressionNoIn  if (stream_logicalORExpressionNoIn == NULL) {stream_logicalORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:410:2: ( ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )? )
        // .//Emerson.g:410:4: ( logicalORExpressionNoIn -> logicalORExpressionNoIn ) ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
        {
            // .//Emerson.g:410:4: ( logicalORExpressionNoIn -> logicalORExpressionNoIn )
            // .//Emerson.g:410:5: logicalORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalORExpressionNoIn_in_conditionalExpressionNoIn3195);
                logicalORExpressionNoIn364=logicalORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalORExpressionNoIn; stream_logicalORExpressionNoIn->add(stream_logicalORExpressionNoIn, logicalORExpressionNoIn364.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 410:29: -> logicalORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalORExpressionNoIn == NULL ? NULL : stream_logicalORExpressionNoIn->nextTree(stream_logicalORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:410:56: ( ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2) )?
            {
                int alt188=2;
                alt188 = cdfa188.predict(ctx, RECOGNIZER, ISTREAM, &cdfa188);
                if  (HASEXCEPTION())
                {
                    goto ruleconditionalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt188) 
                {
            	case 1:
            	    // .//Emerson.g:410:57: ( LTERM )* '?' ( LTERM )* expr1= assignmentExpressionNoIn ( LTERM )* ':' ( LTERM )* expr2= assignmentExpressionNoIn
            	    {

            	        // .//Emerson.g:410:57: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt184=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA184_0 = LA(1);
            	                if ( (LA184_0 == LTERM) ) 
            	                {
            	                    alt184=1;
            	                }

            	            }
            	            switch (alt184) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM365 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3202); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM365, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop184;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop184: ; /* Jump out to here if this rule does not match */

            	        char_literal366 = (pANTLR3_COMMON_TOKEN) MATCHT(165, &FOLLOW_165_in_conditionalExpressionNoIn3205); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_165; stream_165->add(stream_165, char_literal366, NULL); }


            	        // .//Emerson.g:410:68: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt185=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA185_0 = LA(1);
            	                if ( (LA185_0 == LTERM) ) 
            	                {
            	                    alt185=1;
            	                }

            	            }
            	            switch (alt185) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM367 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3207); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM367, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop185;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop185: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3212);
            	        expr1=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr1.tree, NULL); }

            	        // .//Emerson.g:410:106: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt186=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA186_0 = LA(1);
            	                if ( (LA186_0 == LTERM) ) 
            	                {
            	                    alt186=1;
            	                }

            	            }
            	            switch (alt186) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM368 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3214); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM368, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop186;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop186: ; /* Jump out to here if this rule does not match */

            	        char_literal369 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_conditionalExpressionNoIn3217); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal369, NULL); }


            	        // .//Emerson.g:410:117: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt187=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA187_0 = LA(1);
            	                if ( (LA187_0 == LTERM) ) 
            	                {
            	                    alt187=1;
            	                }

            	            }
            	            switch (alt187) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM370 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_conditionalExpressionNoIn3219); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleconditionalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM370, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop187;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop187: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_assignmentExpressionNoIn_in_conditionalExpressionNoIn3224);
            	        expr2=assignmentExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditionalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpressionNoIn; stream_assignmentExpressionNoIn->add(stream_assignmentExpressionNoIn, expr2.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : conditionalExpressionNoIn, expr1, expr2
            	         * token labels      : 
            	         * rule labels       : retval, expr1, expr2
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr1;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr2;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_expr1=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr1", expr1.tree != NULL ? expr1.tree : NULL);
            	        	stream_expr2=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr2", expr2.tree != NULL ? expr2.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 410:155: -> ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2)
            	        	{
            	        	    // .//Emerson.g:410:158: ^( TERNARYOP $conditionalExpressionNoIn $expr1 $expr2)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERNARYOP, (pANTLR3_UINT8)"TERNARYOP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr1 == NULL ? NULL : stream_expr1->nextTree(stream_expr1));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr2 == NULL ? NULL : stream_expr2->nextTree(stream_expr2));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_expr1 != NULL) stream_expr1->free(stream_expr1);
            	        	if (stream_expr2 != NULL) stream_expr2->free(stream_expr2);


            	        }
            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditionalExpressionNoInEx; /* Prevent compiler warnings */
    ruleconditionalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_165 != NULL) stream_165->free(stream_165);
        if (stream_assignmentExpressionNoIn != NULL) stream_assignmentExpressionNoIn->free(stream_assignmentExpressionNoIn);
        if (stream_logicalORExpressionNoIn != NULL) stream_logicalORExpressionNoIn->free(stream_logicalORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(60, conditionalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end conditionalExpressionNoIn */

/** 
 * $ANTLR start logicalORExpression
 * .//Emerson.g:414:1: logicalORExpression : ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* ;
 */
static EmersonParser_logicalORExpression_return
logicalORExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpression_return retval;
    ANTLR3_UINT32 logicalORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM372;
    pANTLR3_COMMON_TOKEN    string_literal373;
    pANTLR3_COMMON_TOKEN    LTERM374;
    EmersonParser_logicalANDExpression_return logicalANDExpression371;
    #undef	RETURN_TYPE_logicalANDExpression371
    #define	RETURN_TYPE_logicalANDExpression371 EmersonParser_logicalANDExpression_return

    EmersonParser_logicalANDExpression_return logicalANDExpression375;
    #undef	RETURN_TYPE_logicalANDExpression375
    #define	RETURN_TYPE_logicalANDExpression375 EmersonParser_logicalANDExpression_return

    pANTLR3_BASE_TREE LTERM372_tree;
    pANTLR3_BASE_TREE string_literal373_tree;
    pANTLR3_BASE_TREE LTERM374_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_166;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpression;
    /* Initialize rule variables
     */
    logicalORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(61)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM372       = NULL;
    string_literal373       = NULL;
    LTERM374       = NULL;
    logicalANDExpression371.tree = NULL;

    logicalANDExpression375.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM372_tree   = NULL;
    string_literal373_tree   = NULL;
    LTERM374_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_166   = NULL;
    #define CREATE_stream_166  if (stream_166 == NULL) {stream_166 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 166"); } 
    stream_logicalANDExpression   = NULL;
    #define CREATE_stream_logicalANDExpression  if (stream_logicalANDExpression == NULL) {stream_logicalANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:415:2: ( ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )* )
        // .//Emerson.g:415:4: ( logicalANDExpression -> logicalANDExpression ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*
        {
            // .//Emerson.g:415:4: ( logicalANDExpression -> logicalANDExpression )
            // .//Emerson.g:415:5: logicalANDExpression
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression3254);
                logicalANDExpression371=logicalANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression371.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 415:26: -> logicalANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:415:50: ( ( LTERM )* '||' ( LTERM )* logicalANDExpression -> ^( OR $logicalORExpression logicalANDExpression ) )*

            for (;;)
            {
                int alt191=2;
                alt191 = cdfa191.predict(ctx, RECOGNIZER, ISTREAM, &cdfa191);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt191) 
                {
            	case 1:
            	    // .//Emerson.g:415:51: ( LTERM )* '||' ( LTERM )* logicalANDExpression
            	    {

            	        // .//Emerson.g:415:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt189=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA189_0 = LA(1);
            	                if ( (LA189_0 == LTERM) ) 
            	                {
            	                    alt189=1;
            	                }

            	            }
            	            switch (alt189) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM372 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression3261); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM372, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop189;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop189: ; /* Jump out to here if this rule does not match */

            	        string_literal373 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_logicalORExpression3264); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, string_literal373, NULL); }


            	        // .//Emerson.g:415:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt190=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA190_0 = LA(1);
            	                if ( (LA190_0 == LTERM) ) 
            	                {
            	                    alt190=1;
            	                }

            	            }
            	            switch (alt190) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM374 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpression3266); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM374, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop190;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop190: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpression_in_logicalORExpression3269);
            	        logicalANDExpression375=logicalANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpression; stream_logicalANDExpression->add(stream_logicalANDExpression, logicalANDExpression375.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalORExpression, logicalANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 415:91: -> ^( OR $logicalORExpression logicalANDExpression )
            	        	{
            	        	    // .//Emerson.g:415:94: ^( OR $logicalORExpression logicalANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpression == NULL ? NULL : stream_logicalANDExpression->nextTree(stream_logicalANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop191;	/* break out of the loop */
            	    break;
                }
            }
            loop191: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionEx; /* Prevent compiler warnings */
    rulelogicalORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_166 != NULL) stream_166->free(stream_166);
        if (stream_logicalANDExpression != NULL) stream_logicalANDExpression->free(stream_logicalANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(61, logicalORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpression */

/** 
 * $ANTLR start logicalANDExpression
 * .//Emerson.g:418:1: logicalANDExpression : ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* ;
 */
static EmersonParser_logicalANDExpression_return
logicalANDExpression(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpression_return retval;
    ANTLR3_UINT32 logicalANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM377;
    pANTLR3_COMMON_TOKEN    string_literal378;
    pANTLR3_COMMON_TOKEN    LTERM379;
    EmersonParser_bitwiseORExpression_return bitwiseORExpression376;
    #undef	RETURN_TYPE_bitwiseORExpression376
    #define	RETURN_TYPE_bitwiseORExpression376 EmersonParser_bitwiseORExpression_return

    EmersonParser_bitwiseORExpression_return bitwiseORExpression380;
    #undef	RETURN_TYPE_bitwiseORExpression380
    #define	RETURN_TYPE_bitwiseORExpression380 EmersonParser_bitwiseORExpression_return

    pANTLR3_BASE_TREE LTERM377_tree;
    pANTLR3_BASE_TREE string_literal378_tree;
    pANTLR3_BASE_TREE LTERM379_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_167;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpression;
    /* Initialize rule variables
     */
    logicalANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(62)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM377       = NULL;
    string_literal378       = NULL;
    LTERM379       = NULL;
    bitwiseORExpression376.tree = NULL;

    bitwiseORExpression380.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM377_tree   = NULL;
    string_literal378_tree   = NULL;
    LTERM379_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_167   = NULL;
    #define CREATE_stream_167  if (stream_167 == NULL) {stream_167 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 167"); } 
    stream_bitwiseORExpression   = NULL;
    #define CREATE_stream_bitwiseORExpression  if (stream_bitwiseORExpression == NULL) {stream_bitwiseORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:419:2: ( ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )* )
        // .//Emerson.g:419:4: ( bitwiseORExpression -> bitwiseORExpression ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*
        {
            // .//Emerson.g:419:4: ( bitwiseORExpression -> bitwiseORExpression )
            // .//Emerson.g:419:5: bitwiseORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression3296);
                bitwiseORExpression376=bitwiseORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression376.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 419:25: -> bitwiseORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:419:48: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpression -> ^( AND $logicalANDExpression bitwiseORExpression ) )*

            for (;;)
            {
                int alt194=2;
                alt194 = cdfa194.predict(ctx, RECOGNIZER, ISTREAM, &cdfa194);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt194) 
                {
            	case 1:
            	    // .//Emerson.g:419:49: ( LTERM )* '&&' ( LTERM )* bitwiseORExpression
            	    {

            	        // .//Emerson.g:419:49: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt192=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA192_0 = LA(1);
            	                if ( (LA192_0 == LTERM) ) 
            	                {
            	                    alt192=1;
            	                }

            	            }
            	            switch (alt192) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM377 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression3303); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM377, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop192;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop192: ; /* Jump out to here if this rule does not match */

            	        string_literal378 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_logicalANDExpression3306); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, string_literal378, NULL); }


            	        // .//Emerson.g:419:61: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt193=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA193_0 = LA(1);
            	                if ( (LA193_0 == LTERM) ) 
            	                {
            	                    alt193=1;
            	                }

            	            }
            	            switch (alt193) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM379 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpression3308); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM379, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop193;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop193: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpression_in_logicalANDExpression3311);
            	        bitwiseORExpression380=bitwiseORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpression; stream_bitwiseORExpression->add(stream_bitwiseORExpression, bitwiseORExpression380.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpression, bitwiseORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 419:89: -> ^( AND $logicalANDExpression bitwiseORExpression )
            	        	{
            	        	    // .//Emerson.g:419:92: ^( AND $logicalANDExpression bitwiseORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpression == NULL ? NULL : stream_bitwiseORExpression->nextTree(stream_bitwiseORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop194;	/* break out of the loop */
            	    break;
                }
            }
            loop194: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_167 != NULL) stream_167->free(stream_167);
        if (stream_bitwiseORExpression != NULL) stream_bitwiseORExpression->free(stream_bitwiseORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(62, logicalANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpression */

/** 
 * $ANTLR start logicalORExpressionNoIn
 * .//Emerson.g:422:1: logicalORExpressionNoIn : ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* ;
 */
static EmersonParser_logicalORExpressionNoIn_return
logicalORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalORExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM382;
    pANTLR3_COMMON_TOKEN    string_literal383;
    pANTLR3_COMMON_TOKEN    LTERM384;
    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn381;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn381
    #define	RETURN_TYPE_logicalANDExpressionNoIn381 EmersonParser_logicalANDExpressionNoIn_return

    EmersonParser_logicalANDExpressionNoIn_return logicalANDExpressionNoIn385;
    #undef	RETURN_TYPE_logicalANDExpressionNoIn385
    #define	RETURN_TYPE_logicalANDExpressionNoIn385 EmersonParser_logicalANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM382_tree;
    pANTLR3_BASE_TREE string_literal383_tree;
    pANTLR3_BASE_TREE LTERM384_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_166;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logicalANDExpressionNoIn;
    /* Initialize rule variables
     */
    logicalORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(63)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM382       = NULL;
    string_literal383       = NULL;
    LTERM384       = NULL;
    logicalANDExpressionNoIn381.tree = NULL;

    logicalANDExpressionNoIn385.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM382_tree   = NULL;
    string_literal383_tree   = NULL;
    LTERM384_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_166   = NULL;
    #define CREATE_stream_166  if (stream_166 == NULL) {stream_166 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 166"); } 
    stream_logicalANDExpressionNoIn   = NULL;
    #define CREATE_stream_logicalANDExpressionNoIn  if (stream_logicalANDExpressionNoIn == NULL) {stream_logicalANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logicalANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:423:2: ( ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )* )
        // .//Emerson.g:423:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn ) ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*
        {
            // .//Emerson.g:423:4: ( logicalANDExpressionNoIn -> logicalANDExpressionNoIn )
            // .//Emerson.g:423:5: logicalANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3339);
                logicalANDExpressionNoIn381=logicalANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn381.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : logicalANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 423:30: -> logicalANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:423:58: ( ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn ) )*

            for (;;)
            {
                int alt197=2;
                alt197 = cdfa197.predict(ctx, RECOGNIZER, ISTREAM, &cdfa197);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt197) 
                {
            	case 1:
            	    // .//Emerson.g:423:59: ( LTERM )* '||' ( LTERM )* logicalANDExpressionNoIn
            	    {

            	        // .//Emerson.g:423:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt195=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA195_0 = LA(1);
            	                if ( (LA195_0 == LTERM) ) 
            	                {
            	                    alt195=1;
            	                }

            	            }
            	            switch (alt195) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM382 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn3346); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM382, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop195;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop195: ; /* Jump out to here if this rule does not match */

            	        string_literal383 = (pANTLR3_COMMON_TOKEN) MATCHT(166, &FOLLOW_166_in_logicalORExpressionNoIn3349); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_166; stream_166->add(stream_166, string_literal383, NULL); }


            	        // .//Emerson.g:423:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt196=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA196_0 = LA(1);
            	                if ( (LA196_0 == LTERM) ) 
            	                {
            	                    alt196=1;
            	                }

            	            }
            	            switch (alt196) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM384 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalORExpressionNoIn3351); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM384, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop196;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop196: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_logicalANDExpressionNoIn_in_logicalORExpressionNoIn3354);
            	        logicalANDExpressionNoIn385=logicalANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_logicalANDExpressionNoIn; stream_logicalANDExpressionNoIn->add(stream_logicalANDExpressionNoIn, logicalANDExpressionNoIn385.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : logicalANDExpressionNoIn, logicalORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 423:103: -> ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:423:106: ^( OR $logicalORExpressionNoIn logicalANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OR, (pANTLR3_UINT8)"OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_logicalANDExpressionNoIn == NULL ? NULL : stream_logicalANDExpressionNoIn->nextTree(stream_logicalANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop197;	/* break out of the loop */
            	    break;
                }
            }
            loop197: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalORExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_166 != NULL) stream_166->free(stream_166);
        if (stream_logicalANDExpressionNoIn != NULL) stream_logicalANDExpressionNoIn->free(stream_logicalANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(63, logicalORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalORExpressionNoIn */

/** 
 * $ANTLR start logicalANDExpressionNoIn
 * .//Emerson.g:427:1: logicalANDExpressionNoIn : ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* ;
 */
static EmersonParser_logicalANDExpressionNoIn_return
logicalANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_logicalANDExpressionNoIn_return retval;
    ANTLR3_UINT32 logicalANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM387;
    pANTLR3_COMMON_TOKEN    string_literal388;
    pANTLR3_COMMON_TOKEN    LTERM389;
    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn386;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn386
    #define	RETURN_TYPE_bitwiseORExpressionNoIn386 EmersonParser_bitwiseORExpressionNoIn_return

    EmersonParser_bitwiseORExpressionNoIn_return bitwiseORExpressionNoIn390;
    #undef	RETURN_TYPE_bitwiseORExpressionNoIn390
    #define	RETURN_TYPE_bitwiseORExpressionNoIn390 EmersonParser_bitwiseORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM387_tree;
    pANTLR3_BASE_TREE string_literal388_tree;
    pANTLR3_BASE_TREE LTERM389_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_167;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseORExpressionNoIn;
    /* Initialize rule variables
     */
    logicalANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(64)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM387       = NULL;
    string_literal388       = NULL;
    LTERM389       = NULL;
    bitwiseORExpressionNoIn386.tree = NULL;

    bitwiseORExpressionNoIn390.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM387_tree   = NULL;
    string_literal388_tree   = NULL;
    LTERM389_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_167   = NULL;
    #define CREATE_stream_167  if (stream_167 == NULL) {stream_167 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 167"); } 
    stream_bitwiseORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseORExpressionNoIn  if (stream_bitwiseORExpressionNoIn == NULL) {stream_bitwiseORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:428:2: ( ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )* )
        // .//Emerson.g:428:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn ) ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*
        {
            // .//Emerson.g:428:4: ( bitwiseORExpressionNoIn -> bitwiseORExpressionNoIn )
            // .//Emerson.g:428:5: bitwiseORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3383);
                bitwiseORExpressionNoIn386=bitwiseORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn386.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 428:29: -> bitwiseORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:428:57: ( ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn ) )*

            for (;;)
            {
                int alt200=2;
                alt200 = cdfa200.predict(ctx, RECOGNIZER, ISTREAM, &cdfa200);
                if  (HASEXCEPTION())
                {
                    goto rulelogicalANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt200) 
                {
            	case 1:
            	    // .//Emerson.g:428:58: ( LTERM )* '&&' ( LTERM )* bitwiseORExpressionNoIn
            	    {

            	        // .//Emerson.g:428:58: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt198=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA198_0 = LA(1);
            	                if ( (LA198_0 == LTERM) ) 
            	                {
            	                    alt198=1;
            	                }

            	            }
            	            switch (alt198) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM387 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn3391); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM387, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop198;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop198: ; /* Jump out to here if this rule does not match */

            	        string_literal388 = (pANTLR3_COMMON_TOKEN) MATCHT(167, &FOLLOW_167_in_logicalANDExpressionNoIn3394); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_167; stream_167->add(stream_167, string_literal388, NULL); }


            	        // .//Emerson.g:428:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt199=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA199_0 = LA(1);
            	                if ( (LA199_0 == LTERM) ) 
            	                {
            	                    alt199=1;
            	                }

            	            }
            	            switch (alt199) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM389 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_logicalANDExpressionNoIn3396); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulelogicalANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM389, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop199;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop199: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn3399);
            	        bitwiseORExpressionNoIn390=bitwiseORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogicalANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseORExpressionNoIn; stream_bitwiseORExpressionNoIn->add(stream_bitwiseORExpressionNoIn, bitwiseORExpressionNoIn390.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpressionNoIn, logicalANDExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 428:101: -> ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:428:104: ^( AND $logicalANDExpressionNoIn bitwiseORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, AND, (pANTLR3_UINT8)"AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseORExpressionNoIn == NULL ? NULL : stream_bitwiseORExpressionNoIn->nextTree(stream_bitwiseORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop200;	/* break out of the loop */
            	    break;
                }
            }
            loop200: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogicalANDExpressionNoInEx; /* Prevent compiler warnings */
    rulelogicalANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_167 != NULL) stream_167->free(stream_167);
        if (stream_bitwiseORExpressionNoIn != NULL) stream_bitwiseORExpressionNoIn->free(stream_bitwiseORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(64, logicalANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end logicalANDExpressionNoIn */

/** 
 * $ANTLR start bitwiseORExpression
 * .//Emerson.g:431:1: bitwiseORExpression : ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* ;
 */
static EmersonParser_bitwiseORExpression_return
bitwiseORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpression_return retval;
    ANTLR3_UINT32 bitwiseORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM392;
    pANTLR3_COMMON_TOKEN    char_literal393;
    pANTLR3_COMMON_TOKEN    LTERM394;
    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression391;
    #undef	RETURN_TYPE_bitwiseXORExpression391
    #define	RETURN_TYPE_bitwiseXORExpression391 EmersonParser_bitwiseXORExpression_return

    EmersonParser_bitwiseXORExpression_return bitwiseXORExpression395;
    #undef	RETURN_TYPE_bitwiseXORExpression395
    #define	RETURN_TYPE_bitwiseXORExpression395 EmersonParser_bitwiseXORExpression_return

    pANTLR3_BASE_TREE LTERM392_tree;
    pANTLR3_BASE_TREE char_literal393_tree;
    pANTLR3_BASE_TREE LTERM394_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_168;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpression;
    /* Initialize rule variables
     */
    bitwiseORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(65)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM392       = NULL;
    char_literal393       = NULL;
    LTERM394       = NULL;
    bitwiseXORExpression391.tree = NULL;

    bitwiseXORExpression395.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM392_tree   = NULL;
    char_literal393_tree   = NULL;
    LTERM394_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_168   = NULL;
    #define CREATE_stream_168  if (stream_168 == NULL) {stream_168 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 168"); } 
    stream_bitwiseXORExpression   = NULL;
    #define CREATE_stream_bitwiseXORExpression  if (stream_bitwiseXORExpression == NULL) {stream_bitwiseXORExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:432:2: ( ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )* )
        // .//Emerson.g:432:4: ( bitwiseXORExpression -> bitwiseXORExpression ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*
        {
            // .//Emerson.g:432:4: ( bitwiseXORExpression -> bitwiseXORExpression )
            // .//Emerson.g:432:5: bitwiseXORExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3426);
                bitwiseXORExpression391=bitwiseXORExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression391.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 432:26: -> bitwiseXORExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:432:51: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpression -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression ) )*

            for (;;)
            {
                int alt203=2;
                alt203 = cdfa203.predict(ctx, RECOGNIZER, ISTREAM, &cdfa203);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt203) 
                {
            	case 1:
            	    // .//Emerson.g:432:52: ( LTERM )* '|' ( LTERM )* bitwiseXORExpression
            	    {

            	        // .//Emerson.g:432:52: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt201=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA201_0 = LA(1);
            	                if ( (LA201_0 == LTERM) ) 
            	                {
            	                    alt201=1;
            	                }

            	            }
            	            switch (alt201) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM392 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression3434); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM392, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop201;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop201: ; /* Jump out to here if this rule does not match */

            	        char_literal393 = (pANTLR3_COMMON_TOKEN) MATCHT(168, &FOLLOW_168_in_bitwiseORExpression3437); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_168; stream_168->add(stream_168, char_literal393, NULL); }


            	        // .//Emerson.g:432:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt202=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA202_0 = LA(1);
            	                if ( (LA202_0 == LTERM) ) 
            	                {
            	                    alt202=1;
            	                }

            	            }
            	            switch (alt202) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM394 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpression3439); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM394, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop202;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop202: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpression_in_bitwiseORExpression3442);
            	        bitwiseXORExpression395=bitwiseXORExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpression; stream_bitwiseXORExpression->add(stream_bitwiseXORExpression, bitwiseXORExpression395.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpression, bitwiseXORExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 432:91: -> ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	{
            	        	    // .//Emerson.g:432:94: ^( BIT_OR $bitwiseORExpression bitwiseXORExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpression == NULL ? NULL : stream_bitwiseXORExpression->nextTree(stream_bitwiseXORExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop203;	/* break out of the loop */
            	    break;
                }
            }
            loop203: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_168 != NULL) stream_168->free(stream_168);
        if (stream_bitwiseXORExpression != NULL) stream_bitwiseXORExpression->free(stream_bitwiseXORExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(65, bitwiseORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpression */

/** 
 * $ANTLR start bitwiseORExpressionNoIn
 * .//Emerson.g:435:1: bitwiseORExpressionNoIn : ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseORExpressionNoIn_return
bitwiseORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM397;
    pANTLR3_COMMON_TOKEN    char_literal398;
    pANTLR3_COMMON_TOKEN    LTERM399;
    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn396;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn396
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn396 EmersonParser_bitwiseXORExpressionNoIn_return

    EmersonParser_bitwiseXORExpressionNoIn_return bitwiseXORExpressionNoIn400;
    #undef	RETURN_TYPE_bitwiseXORExpressionNoIn400
    #define	RETURN_TYPE_bitwiseXORExpressionNoIn400 EmersonParser_bitwiseXORExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM397_tree;
    pANTLR3_BASE_TREE char_literal398_tree;
    pANTLR3_BASE_TREE LTERM399_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_168;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseXORExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(66)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM397       = NULL;
    char_literal398       = NULL;
    LTERM399       = NULL;
    bitwiseXORExpressionNoIn396.tree = NULL;

    bitwiseXORExpressionNoIn400.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM397_tree   = NULL;
    char_literal398_tree   = NULL;
    LTERM399_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_168   = NULL;
    #define CREATE_stream_168  if (stream_168 == NULL) {stream_168 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 168"); } 
    stream_bitwiseXORExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseXORExpressionNoIn  if (stream_bitwiseXORExpressionNoIn == NULL) {stream_bitwiseXORExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseXORExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:436:2: ( ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )* )
        // .//Emerson.g:436:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn ) ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*
        {
            // .//Emerson.g:436:4: ( bitwiseXORExpressionNoIn -> bitwiseXORExpressionNoIn )
            // .//Emerson.g:436:5: bitwiseXORExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3469);
                bitwiseXORExpressionNoIn396=bitwiseXORExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn396.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseXORExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 436:30: -> bitwiseXORExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:436:59: ( ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn ) )*

            for (;;)
            {
                int alt206=2;
                alt206 = cdfa206.predict(ctx, RECOGNIZER, ISTREAM, &cdfa206);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt206) 
                {
            	case 1:
            	    // .//Emerson.g:436:60: ( LTERM )* '|' ( LTERM )* bitwiseXORExpressionNoIn
            	    {

            	        // .//Emerson.g:436:60: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt204=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA204_0 = LA(1);
            	                if ( (LA204_0 == LTERM) ) 
            	                {
            	                    alt204=1;
            	                }

            	            }
            	            switch (alt204) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM397 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn3477); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM397, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop204;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop204: ; /* Jump out to here if this rule does not match */

            	        char_literal398 = (pANTLR3_COMMON_TOKEN) MATCHT(168, &FOLLOW_168_in_bitwiseORExpressionNoIn3480); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_168; stream_168->add(stream_168, char_literal398, NULL); }


            	        // .//Emerson.g:436:71: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt205=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA205_0 = LA(1);
            	                if ( (LA205_0 == LTERM) ) 
            	                {
            	                    alt205=1;
            	                }

            	            }
            	            switch (alt205) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM399 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseORExpressionNoIn3482); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM399, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop205;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop205: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn3485);
            	        bitwiseXORExpressionNoIn400=bitwiseXORExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseXORExpressionNoIn; stream_bitwiseXORExpressionNoIn->add(stream_bitwiseXORExpressionNoIn, bitwiseXORExpressionNoIn400.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseORExpressionNoIn, bitwiseXORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 436:103: -> ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:436:106: ^( BIT_OR $bitwiseORExpressionNoIn bitwiseXORExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_OR, (pANTLR3_UINT8)"BIT_OR"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseXORExpressionNoIn == NULL ? NULL : stream_bitwiseXORExpressionNoIn->nextTree(stream_bitwiseXORExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop206;	/* break out of the loop */
            	    break;
                }
            }
            loop206: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_168 != NULL) stream_168->free(stream_168);
        if (stream_bitwiseXORExpressionNoIn != NULL) stream_bitwiseXORExpressionNoIn->free(stream_bitwiseXORExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(66, bitwiseORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseORExpressionNoIn */

/** 
 * $ANTLR start bitwiseXORExpression
 * .//Emerson.g:439:1: bitwiseXORExpression : ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* ;
 */
static EmersonParser_bitwiseXORExpression_return
bitwiseXORExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpression_return retval;
    ANTLR3_UINT32 bitwiseXORExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM402;
    pANTLR3_COMMON_TOKEN    char_literal403;
    pANTLR3_COMMON_TOKEN    LTERM404;
    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression401;
    #undef	RETURN_TYPE_bitwiseANDExpression401
    #define	RETURN_TYPE_bitwiseANDExpression401 EmersonParser_bitwiseANDExpression_return

    EmersonParser_bitwiseANDExpression_return bitwiseANDExpression405;
    #undef	RETURN_TYPE_bitwiseANDExpression405
    #define	RETURN_TYPE_bitwiseANDExpression405 EmersonParser_bitwiseANDExpression_return

    pANTLR3_BASE_TREE LTERM402_tree;
    pANTLR3_BASE_TREE char_literal403_tree;
    pANTLR3_BASE_TREE LTERM404_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_169;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpression;
    /* Initialize rule variables
     */
    bitwiseXORExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(67)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM402       = NULL;
    char_literal403       = NULL;
    LTERM404       = NULL;
    bitwiseANDExpression401.tree = NULL;

    bitwiseANDExpression405.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM402_tree   = NULL;
    char_literal403_tree   = NULL;
    LTERM404_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_169   = NULL;
    #define CREATE_stream_169  if (stream_169 == NULL) {stream_169 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 169"); } 
    stream_bitwiseANDExpression   = NULL;
    #define CREATE_stream_bitwiseANDExpression  if (stream_bitwiseANDExpression == NULL) {stream_bitwiseANDExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:440:1: ( ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )* )
        // .//Emerson.g:440:3: ( bitwiseANDExpression -> bitwiseANDExpression ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*
        {
            // .//Emerson.g:440:3: ( bitwiseANDExpression -> bitwiseANDExpression )
            // .//Emerson.g:440:4: bitwiseANDExpression
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3511);
                bitwiseANDExpression401=bitwiseANDExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression401.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 440:25: -> bitwiseANDExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:440:50: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpression -> ^( EXP $bitwiseXORExpression bitwiseANDExpression ) )*

            for (;;)
            {
                int alt209=2;
                alt209 = cdfa209.predict(ctx, RECOGNIZER, ISTREAM, &cdfa209);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt209) 
                {
            	case 1:
            	    // .//Emerson.g:440:51: ( LTERM )* '^' ( LTERM )* bitwiseANDExpression
            	    {

            	        // .//Emerson.g:440:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt207=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA207_0 = LA(1);
            	                if ( (LA207_0 == LTERM) ) 
            	                {
            	                    alt207=1;
            	                }

            	            }
            	            switch (alt207) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM402 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression3519); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM402, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop207;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop207: ; /* Jump out to here if this rule does not match */

            	        char_literal403 = (pANTLR3_COMMON_TOKEN) MATCHT(169, &FOLLOW_169_in_bitwiseXORExpression3522); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_169; stream_169->add(stream_169, char_literal403, NULL); }


            	        // .//Emerson.g:440:62: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt208=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA208_0 = LA(1);
            	                if ( (LA208_0 == LTERM) ) 
            	                {
            	                    alt208=1;
            	                }

            	            }
            	            switch (alt208) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM404 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpression3524); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM404, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop208;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop208: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpression_in_bitwiseXORExpression3527);
            	        bitwiseANDExpression405=bitwiseANDExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpression; stream_bitwiseANDExpression->add(stream_bitwiseANDExpression, bitwiseANDExpression405.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseXORExpression, bitwiseANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 440:90: -> ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	{
            	        	    // .//Emerson.g:440:93: ^( EXP $bitwiseXORExpression bitwiseANDExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpression == NULL ? NULL : stream_bitwiseANDExpression->nextTree(stream_bitwiseANDExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop209;	/* break out of the loop */
            	    break;
                }
            }
            loop209: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_169 != NULL) stream_169->free(stream_169);
        if (stream_bitwiseANDExpression != NULL) stream_bitwiseANDExpression->free(stream_bitwiseANDExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(67, bitwiseXORExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpression */

/** 
 * $ANTLR start bitwiseXORExpressionNoIn
 * .//Emerson.g:443:1: bitwiseXORExpressionNoIn : ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseXORExpressionNoIn_return
bitwiseXORExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseXORExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseXORExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM407;
    pANTLR3_COMMON_TOKEN    char_literal408;
    pANTLR3_COMMON_TOKEN    LTERM409;
    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn406;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn406
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn406 EmersonParser_bitwiseANDExpressionNoIn_return

    EmersonParser_bitwiseANDExpressionNoIn_return bitwiseANDExpressionNoIn410;
    #undef	RETURN_TYPE_bitwiseANDExpressionNoIn410
    #define	RETURN_TYPE_bitwiseANDExpressionNoIn410 EmersonParser_bitwiseANDExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM407_tree;
    pANTLR3_BASE_TREE char_literal408_tree;
    pANTLR3_BASE_TREE LTERM409_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_169;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bitwiseANDExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseXORExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(68)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM407       = NULL;
    char_literal408       = NULL;
    LTERM409       = NULL;
    bitwiseANDExpressionNoIn406.tree = NULL;

    bitwiseANDExpressionNoIn410.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM407_tree   = NULL;
    char_literal408_tree   = NULL;
    LTERM409_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_169   = NULL;
    #define CREATE_stream_169  if (stream_169 == NULL) {stream_169 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 169"); } 
    stream_bitwiseANDExpressionNoIn   = NULL;
    #define CREATE_stream_bitwiseANDExpressionNoIn  if (stream_bitwiseANDExpressionNoIn == NULL) {stream_bitwiseANDExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bitwiseANDExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:444:2: ( ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )* )
        // .//Emerson.g:444:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn ) ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*
        {
            // .//Emerson.g:444:4: ( bitwiseANDExpressionNoIn -> bitwiseANDExpressionNoIn )
            // .//Emerson.g:444:5: bitwiseANDExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3554);
                bitwiseANDExpressionNoIn406=bitwiseANDExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn406.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : bitwiseANDExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 444:30: -> bitwiseANDExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:444:58: ( ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn ) )*

            for (;;)
            {
                int alt212=2;
                alt212 = cdfa212.predict(ctx, RECOGNIZER, ISTREAM, &cdfa212);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseXORExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt212) 
                {
            	case 1:
            	    // .//Emerson.g:444:59: ( LTERM )* '^' ( LTERM )* bitwiseANDExpressionNoIn
            	    {

            	        // .//Emerson.g:444:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt210=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA210_0 = LA(1);
            	                if ( (LA210_0 == LTERM) ) 
            	                {
            	                    alt210=1;
            	                }

            	            }
            	            switch (alt210) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM407 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3561); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM407, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop210;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop210: ; /* Jump out to here if this rule does not match */

            	        char_literal408 = (pANTLR3_COMMON_TOKEN) MATCHT(169, &FOLLOW_169_in_bitwiseXORExpressionNoIn3564); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_169; stream_169->add(stream_169, char_literal408, NULL); }


            	        // .//Emerson.g:444:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt211=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA211_0 = LA(1);
            	                if ( (LA211_0 == LTERM) ) 
            	                {
            	                    alt211=1;
            	                }

            	            }
            	            switch (alt211) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM409 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseXORExpressionNoIn3566); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseXORExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM409, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop211;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop211: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn3569);
            	        bitwiseANDExpressionNoIn410=bitwiseANDExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseXORExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_bitwiseANDExpressionNoIn; stream_bitwiseANDExpressionNoIn->add(stream_bitwiseANDExpressionNoIn, bitwiseANDExpressionNoIn410.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : bitwiseANDExpressionNoIn, bitwiseXORExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 444:102: -> ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:444:105: ^( EXP $bitwiseXORExpressionNoIn bitwiseANDExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EXP, (pANTLR3_UINT8)"EXP"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bitwiseANDExpressionNoIn == NULL ? NULL : stream_bitwiseANDExpressionNoIn->nextTree(stream_bitwiseANDExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop212;	/* break out of the loop */
            	    break;
                }
            }
            loop212: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseXORExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseXORExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_169 != NULL) stream_169->free(stream_169);
        if (stream_bitwiseANDExpressionNoIn != NULL) stream_bitwiseANDExpressionNoIn->free(stream_bitwiseANDExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(68, bitwiseXORExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseXORExpressionNoIn */

/** 
 * $ANTLR start bitwiseANDExpression
 * .//Emerson.g:447:1: bitwiseANDExpression : ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* ;
 */
static EmersonParser_bitwiseANDExpression_return
bitwiseANDExpression(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpression_return retval;
    ANTLR3_UINT32 bitwiseANDExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM412;
    pANTLR3_COMMON_TOKEN    char_literal413;
    pANTLR3_COMMON_TOKEN    LTERM414;
    EmersonParser_equalityExpression_return equalityExpression411;
    #undef	RETURN_TYPE_equalityExpression411
    #define	RETURN_TYPE_equalityExpression411 EmersonParser_equalityExpression_return

    EmersonParser_equalityExpression_return equalityExpression415;
    #undef	RETURN_TYPE_equalityExpression415
    #define	RETURN_TYPE_equalityExpression415 EmersonParser_equalityExpression_return

    pANTLR3_BASE_TREE LTERM412_tree;
    pANTLR3_BASE_TREE char_literal413_tree;
    pANTLR3_BASE_TREE LTERM414_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_170;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpression;
    /* Initialize rule variables
     */
    bitwiseANDExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(69)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM412       = NULL;
    char_literal413       = NULL;
    LTERM414       = NULL;
    equalityExpression411.tree = NULL;

    equalityExpression415.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM412_tree   = NULL;
    char_literal413_tree   = NULL;
    LTERM414_tree   = NULL;

    stream_170   = NULL;
    #define CREATE_stream_170  if (stream_170 == NULL) {stream_170 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 170"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_equalityExpression   = NULL;
    #define CREATE_stream_equalityExpression  if (stream_equalityExpression == NULL) {stream_equalityExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:448:2: ( ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )* )
        // .//Emerson.g:448:4: ( equalityExpression -> equalityExpression ) ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*
        {
            // .//Emerson.g:448:4: ( equalityExpression -> equalityExpression )
            // .//Emerson.g:448:5: equalityExpression
            {
                FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression3597);
                equalityExpression411=equalityExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression411.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 448:24: -> equalityExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:448:47: ( ( LTERM )* '&' ( LTERM )* equalityExpression -> ^( BIT_AND $bitwiseANDExpression equalityExpression ) )*

            for (;;)
            {
                int alt215=2;
                alt215 = cdfa215.predict(ctx, RECOGNIZER, ISTREAM, &cdfa215);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt215) 
                {
            	case 1:
            	    // .//Emerson.g:448:48: ( LTERM )* '&' ( LTERM )* equalityExpression
            	    {

            	        // .//Emerson.g:448:48: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt213=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA213_0 = LA(1);
            	                if ( (LA213_0 == LTERM) ) 
            	                {
            	                    alt213=1;
            	                }

            	            }
            	            switch (alt213) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM412 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression3605); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM412, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop213;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop213: ; /* Jump out to here if this rule does not match */

            	        char_literal413 = (pANTLR3_COMMON_TOKEN) MATCHT(170, &FOLLOW_170_in_bitwiseANDExpression3608); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_170; stream_170->add(stream_170, char_literal413, NULL); }


            	        // .//Emerson.g:448:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt214=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA214_0 = LA(1);
            	                if ( (LA214_0 == LTERM) ) 
            	                {
            	                    alt214=1;
            	                }

            	            }
            	            switch (alt214) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM414 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpression3610); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM414, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop214;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop214: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpression_in_bitwiseANDExpression3613);
            	        equalityExpression415=equalityExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpression; stream_equalityExpression->add(stream_equalityExpression, equalityExpression415.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityExpression, bitwiseANDExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 448:85: -> ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	{
            	        	    // .//Emerson.g:448:88: ^( BIT_AND $bitwiseANDExpression equalityExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpression == NULL ? NULL : stream_equalityExpression->nextTree(stream_equalityExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop215;	/* break out of the loop */
            	    break;
                }
            }
            loop215: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_170 != NULL) stream_170->free(stream_170);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_equalityExpression != NULL) stream_equalityExpression->free(stream_equalityExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(69, bitwiseANDExpression_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpression */

/** 
 * $ANTLR start bitwiseANDExpressionNoIn
 * .//Emerson.g:451:1: bitwiseANDExpressionNoIn : ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* ;
 */
static EmersonParser_bitwiseANDExpressionNoIn_return
bitwiseANDExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_bitwiseANDExpressionNoIn_return retval;
    ANTLR3_UINT32 bitwiseANDExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM417;
    pANTLR3_COMMON_TOKEN    char_literal418;
    pANTLR3_COMMON_TOKEN    LTERM419;
    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn416;
    #undef	RETURN_TYPE_equalityExpressionNoIn416
    #define	RETURN_TYPE_equalityExpressionNoIn416 EmersonParser_equalityExpressionNoIn_return

    EmersonParser_equalityExpressionNoIn_return equalityExpressionNoIn420;
    #undef	RETURN_TYPE_equalityExpressionNoIn420
    #define	RETURN_TYPE_equalityExpressionNoIn420 EmersonParser_equalityExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM417_tree;
    pANTLR3_BASE_TREE char_literal418_tree;
    pANTLR3_BASE_TREE LTERM419_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_170;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityExpressionNoIn;
    /* Initialize rule variables
     */
    bitwiseANDExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(70)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM417       = NULL;
    char_literal418       = NULL;
    LTERM419       = NULL;
    equalityExpressionNoIn416.tree = NULL;

    equalityExpressionNoIn420.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM417_tree   = NULL;
    char_literal418_tree   = NULL;
    LTERM419_tree   = NULL;

    stream_170   = NULL;
    #define CREATE_stream_170  if (stream_170 == NULL) {stream_170 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 170"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_equalityExpressionNoIn   = NULL;
    #define CREATE_stream_equalityExpressionNoIn  if (stream_equalityExpressionNoIn == NULL) {stream_equalityExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:452:2: ( ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )* )
        // .//Emerson.g:452:4: ( equalityExpressionNoIn -> equalityExpressionNoIn ) ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*
        {
            // .//Emerson.g:452:4: ( equalityExpressionNoIn -> equalityExpressionNoIn )
            // .//Emerson.g:452:5: equalityExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3641);
                equalityExpressionNoIn416=equalityExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn416.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : equalityExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 452:28: -> equalityExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:452:55: ( ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn ) )*

            for (;;)
            {
                int alt218=2;
                alt218 = cdfa218.predict(ctx, RECOGNIZER, ISTREAM, &cdfa218);
                if  (HASEXCEPTION())
                {
                    goto rulebitwiseANDExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt218) 
                {
            	case 1:
            	    // .//Emerson.g:452:56: ( LTERM )* '&' ( LTERM )* equalityExpressionNoIn
            	    {

            	        // .//Emerson.g:452:56: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt216=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA216_0 = LA(1);
            	                if ( (LA216_0 == LTERM) ) 
            	                {
            	                    alt216=1;
            	                }

            	            }
            	            switch (alt216) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM417 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3649); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM417, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop216;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop216: ; /* Jump out to here if this rule does not match */

            	        char_literal418 = (pANTLR3_COMMON_TOKEN) MATCHT(170, &FOLLOW_170_in_bitwiseANDExpressionNoIn3652); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_170; stream_170->add(stream_170, char_literal418, NULL); }


            	        // .//Emerson.g:452:67: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt217=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA217_0 = LA(1);
            	                if ( (LA217_0 == LTERM) ) 
            	                {
            	                    alt217=1;
            	                }

            	            }
            	            switch (alt217) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM419 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_bitwiseANDExpressionNoIn3654); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulebitwiseANDExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM419, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop217;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop217: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityExpressionNoIn_in_bitwiseANDExpressionNoIn3657);
            	        equalityExpressionNoIn420=equalityExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebitwiseANDExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityExpressionNoIn; stream_equalityExpressionNoIn->add(stream_equalityExpressionNoIn, equalityExpressionNoIn420.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityExpressionNoIn, bitwiseANDExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 452:97: -> ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:452:100: ^( BIT_AND $bitwiseANDExpressionNoIn equalityExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BIT_AND, (pANTLR3_UINT8)"BIT_AND"), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_equalityExpressionNoIn == NULL ? NULL : stream_equalityExpressionNoIn->nextTree(stream_equalityExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop218;	/* break out of the loop */
            	    break;
                }
            }
            loop218: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebitwiseANDExpressionNoInEx; /* Prevent compiler warnings */
    rulebitwiseANDExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_170 != NULL) stream_170->free(stream_170);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_equalityExpressionNoIn != NULL) stream_equalityExpressionNoIn->free(stream_equalityExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(70, bitwiseANDExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end bitwiseANDExpressionNoIn */

/** 
 * $ANTLR start equalityExpression
 * .//Emerson.g:455:1: equalityExpression : ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* ;
 */
static EmersonParser_equalityExpression_return
equalityExpression(pEmersonParser ctx)
{   
    EmersonParser_equalityExpression_return retval;
    ANTLR3_UINT32 equalityExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM422;
    pANTLR3_COMMON_TOKEN    LTERM424;
    EmersonParser_relationalExpression_return relationalExpression421;
    #undef	RETURN_TYPE_relationalExpression421
    #define	RETURN_TYPE_relationalExpression421 EmersonParser_relationalExpression_return

    EmersonParser_equalityOps_return equalityOps423;
    #undef	RETURN_TYPE_equalityOps423
    #define	RETURN_TYPE_equalityOps423 EmersonParser_equalityOps_return

    EmersonParser_relationalExpression_return relationalExpression425;
    #undef	RETURN_TYPE_relationalExpression425
    #define	RETURN_TYPE_relationalExpression425 EmersonParser_relationalExpression_return

    pANTLR3_BASE_TREE LTERM422_tree;
    pANTLR3_BASE_TREE LTERM424_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    /* Initialize rule variables
     */
    equalityExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(71)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM422       = NULL;
    LTERM424       = NULL;
    relationalExpression421.tree = NULL;

    equalityOps423.tree = NULL;

    relationalExpression425.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM422_tree   = NULL;
    LTERM424_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalExpression   = NULL;
    #define CREATE_stream_relationalExpression  if (stream_relationalExpression == NULL) {stream_relationalExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpression"); }
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:456:2: ( ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )* )
        // .//Emerson.g:456:4: ( relationalExpression -> relationalExpression ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*
        {
            // .//Emerson.g:456:4: ( relationalExpression -> relationalExpression )
            // .//Emerson.g:456:5: relationalExpression
            {
                FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression3684);
                relationalExpression421=relationalExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression421.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 456:26: -> relationalExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:456:50: ( ( LTERM )* equalityOps ( LTERM )* relationalExpression -> ^( equalityOps $equalityExpression relationalExpression ) )*

            for (;;)
            {
                int alt221=2;
                alt221 = cdfa221.predict(ctx, RECOGNIZER, ISTREAM, &cdfa221);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt221) 
                {
            	case 1:
            	    // .//Emerson.g:456:51: ( LTERM )* equalityOps ( LTERM )* relationalExpression
            	    {

            	        // .//Emerson.g:456:51: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt219=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA219_0 = LA(1);
            	                if ( (LA219_0 == LTERM) ) 
            	                {
            	                    alt219=1;
            	                }

            	            }
            	            switch (alt219) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM422 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression3691); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM422, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop219;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop219: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpression3694);
            	        equalityOps423=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps423.tree, NULL); }

            	        // .//Emerson.g:456:70: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt220=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA220_0 = LA(1);
            	                if ( (LA220_0 == LTERM) ) 
            	                {
            	                    alt220=1;
            	                }

            	            }
            	            switch (alt220) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM424 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpression3696); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM424, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop220;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop220: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpression_in_equalityExpression3699);
            	        relationalExpression425=relationalExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpression; stream_relationalExpression->add(stream_relationalExpression, relationalExpression425.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityExpression, relationalExpression, equalityOps
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 456:98: -> ^( equalityOps $equalityExpression relationalExpression )
            	        	{
            	        	    // .//Emerson.g:456:101: ^( equalityOps $equalityExpression relationalExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpression == NULL ? NULL : stream_relationalExpression->nextTree(stream_relationalExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop221;	/* break out of the loop */
            	    break;
                }
            }
            loop221: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionEx; /* Prevent compiler warnings */
    ruleequalityExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalExpression != NULL) stream_relationalExpression->free(stream_relationalExpression);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(71, equalityExpression_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpression */

/** 
 * $ANTLR start equalityOps
 * .//Emerson.g:459:1: equalityOps : ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) );
 */
static EmersonParser_equalityOps_return
equalityOps(pEmersonParser ctx)
{   
    EmersonParser_equalityOps_return retval;
    ANTLR3_UINT32 equalityOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal426;
    pANTLR3_COMMON_TOKEN    string_literal427;
    pANTLR3_COMMON_TOKEN    string_literal428;
    pANTLR3_COMMON_TOKEN    string_literal429;

    pANTLR3_BASE_TREE string_literal426_tree;
    pANTLR3_BASE_TREE string_literal427_tree;
    pANTLR3_BASE_TREE string_literal428_tree;
    pANTLR3_BASE_TREE string_literal429_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_171;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_174;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_172;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_173;

    /* Initialize rule variables
     */
    equalityOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(72)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal426       = NULL;
    string_literal427       = NULL;
    string_literal428       = NULL;
    string_literal429       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal426_tree   = NULL;
    string_literal427_tree   = NULL;
    string_literal428_tree   = NULL;
    string_literal429_tree   = NULL;

    stream_171   = NULL;
    #define CREATE_stream_171  if (stream_171 == NULL) {stream_171 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 171"); } 
    stream_174   = NULL;
    #define CREATE_stream_174  if (stream_174 == NULL) {stream_174 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 174"); } 
    stream_172   = NULL;
    #define CREATE_stream_172  if (stream_172 == NULL) {stream_172 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 172"); } 
    stream_173   = NULL;
    #define CREATE_stream_173  if (stream_173 == NULL) {stream_173 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 173"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:460:1: ( '==' -> ^( EQUALS ) | '!=' -> ^( NOT_EQUALS ) | '===' -> ^( IDENT ) | '!==' -> ^( NOT_IDENT ) )
            
            ANTLR3_UINT32 alt222;

            alt222=4;

            switch ( LA(1) ) 
            {
            case 171:
            	{
            		alt222=1;
            	}
                break;
            case 172:
            	{
            		alt222=2;
            	}
                break;
            case 173:
            	{
            		alt222=3;
            	}
                break;
            case 174:
            	{
            		alt222=4;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 222;
                EXCEPTION->state        = 0;


                goto ruleequalityOpsEx;
            }

            switch (alt222) 
            {
        	case 1:
        	    // .//Emerson.g:460:4: '=='
        	    {
        	        string_literal426 = (pANTLR3_COMMON_TOKEN) MATCHT(171, &FOLLOW_171_in_equalityOps3724); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_171; stream_171->add(stream_171, string_literal426, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 460:9: -> ^( EQUALS )
        	        	{
        	        	    // .//Emerson.g:460:12: ^( EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EQUALS, (pANTLR3_UINT8)"EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:461:3: '!='
        	    {
        	        string_literal427 = (pANTLR3_COMMON_TOKEN) MATCHT(172, &FOLLOW_172_in_equalityOps3734); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_172; stream_172->add(stream_172, string_literal427, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 461:8: -> ^( NOT_EQUALS )
        	        	{
        	        	    // .//Emerson.g:461:11: ^( NOT_EQUALS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_EQUALS, (pANTLR3_UINT8)"NOT_EQUALS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:462:3: '==='
        	    {
        	        string_literal428 = (pANTLR3_COMMON_TOKEN) MATCHT(173, &FOLLOW_173_in_equalityOps3744); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_173; stream_173->add(stream_173, string_literal428, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 462:9: -> ^( IDENT )
        	        	{
        	        	    // .//Emerson.g:462:12: ^( IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IDENT, (pANTLR3_UINT8)"IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:463:3: '!=='
        	    {
        	        string_literal429 = (pANTLR3_COMMON_TOKEN) MATCHT(174, &FOLLOW_174_in_equalityOps3754); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleequalityOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_174; stream_174->add(stream_174, string_literal429, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 463:9: -> ^( NOT_IDENT )
        	        	{
        	        	    // .//Emerson.g:463:12: ^( NOT_IDENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT_IDENT, (pANTLR3_UINT8)"NOT_IDENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityOpsEx; /* Prevent compiler warnings */
    ruleequalityOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_171 != NULL) stream_171->free(stream_171);
        if (stream_174 != NULL) stream_174->free(stream_174);
        if (stream_172 != NULL) stream_172->free(stream_172);
        if (stream_173 != NULL) stream_173->free(stream_173);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(72, equalityOps_StartIndex); }
    return retval;
}
/* $ANTLR end equalityOps */

/** 
 * $ANTLR start equalityExpressionNoIn
 * .//Emerson.g:466:1: equalityExpressionNoIn : ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* ;
 */
static EmersonParser_equalityExpressionNoIn_return
equalityExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_equalityExpressionNoIn_return retval;
    ANTLR3_UINT32 equalityExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM431;
    pANTLR3_COMMON_TOKEN    LTERM433;
    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn430;
    #undef	RETURN_TYPE_relationalExpressionNoIn430
    #define	RETURN_TYPE_relationalExpressionNoIn430 EmersonParser_relationalExpressionNoIn_return

    EmersonParser_equalityOps_return equalityOps432;
    #undef	RETURN_TYPE_equalityOps432
    #define	RETURN_TYPE_equalityOps432 EmersonParser_equalityOps_return

    EmersonParser_relationalExpressionNoIn_return relationalExpressionNoIn434;
    #undef	RETURN_TYPE_relationalExpressionNoIn434
    #define	RETURN_TYPE_relationalExpressionNoIn434 EmersonParser_relationalExpressionNoIn_return

    pANTLR3_BASE_TREE LTERM431_tree;
    pANTLR3_BASE_TREE LTERM433_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_equalityOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalExpressionNoIn;
    /* Initialize rule variables
     */
    equalityExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(73)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM431       = NULL;
    LTERM433       = NULL;
    relationalExpressionNoIn430.tree = NULL;

    equalityOps432.tree = NULL;

    relationalExpressionNoIn434.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM431_tree   = NULL;
    LTERM433_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_equalityOps   = NULL;
    #define CREATE_stream_equalityOps  if (stream_equalityOps == NULL) {stream_equalityOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule equalityOps"); }
    stream_relationalExpressionNoIn   = NULL;
    #define CREATE_stream_relationalExpressionNoIn  if (stream_relationalExpressionNoIn == NULL) {stream_relationalExpressionNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalExpressionNoIn"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:467:2: ( ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )* )
        // .//Emerson.g:467:4: ( relationalExpressionNoIn -> relationalExpressionNoIn ) ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*
        {
            // .//Emerson.g:467:4: ( relationalExpressionNoIn -> relationalExpressionNoIn )
            // .//Emerson.g:467:5: relationalExpressionNoIn
            {
                FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3771);
                relationalExpressionNoIn430=relationalExpressionNoIn(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn430.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : relationalExpressionNoIn
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 467:30: -> relationalExpressionNoIn
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:467:58: ( ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn ) )*

            for (;;)
            {
                int alt225=2;
                alt225 = cdfa225.predict(ctx, RECOGNIZER, ISTREAM, &cdfa225);
                if  (HASEXCEPTION())
                {
                    goto ruleequalityExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt225) 
                {
            	case 1:
            	    // .//Emerson.g:467:59: ( LTERM )* equalityOps ( LTERM )* relationalExpressionNoIn
            	    {

            	        // .//Emerson.g:467:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt223=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA223_0 = LA(1);
            	                if ( (LA223_0 == LTERM) ) 
            	                {
            	                    alt223=1;
            	                }

            	            }
            	            switch (alt223) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM431 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn3778); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM431, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop223;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop223: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_equalityOps_in_equalityExpressionNoIn3781);
            	        equalityOps432=equalityOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_equalityOps; stream_equalityOps->add(stream_equalityOps, equalityOps432.tree, NULL); }

            	        // .//Emerson.g:467:78: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt224=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA224_0 = LA(1);
            	                if ( (LA224_0 == LTERM) ) 
            	                {
            	                    alt224=1;
            	                }

            	            }
            	            switch (alt224) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM433 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_equalityExpressionNoIn3783); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequalityExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM433, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop224;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop224: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalExpressionNoIn_in_equalityExpressionNoIn3786);
            	        relationalExpressionNoIn434=relationalExpressionNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequalityExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalExpressionNoIn; stream_relationalExpressionNoIn->add(stream_relationalExpressionNoIn, relationalExpressionNoIn434.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : equalityOps, relationalExpressionNoIn, equalityExpressionNoIn
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 467:110: -> ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	{
            	        	    // .//Emerson.g:467:113: ^( equalityOps $equalityExpressionNoIn relationalExpressionNoIn )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_equalityOps == NULL ? NULL : stream_equalityOps->nextNode(stream_equalityOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_relationalExpressionNoIn == NULL ? NULL : stream_relationalExpressionNoIn->nextTree(stream_relationalExpressionNoIn));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop225;	/* break out of the loop */
            	    break;
                }
            }
            loop225: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequalityExpressionNoInEx; /* Prevent compiler warnings */
    ruleequalityExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_equalityOps != NULL) stream_equalityOps->free(stream_equalityOps);
        if (stream_relationalExpressionNoIn != NULL) stream_relationalExpressionNoIn->free(stream_relationalExpressionNoIn);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(73, equalityExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end equalityExpressionNoIn */

/** 
 * $ANTLR start relationalOps
 * .//Emerson.g:471:1: relationalOps : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) );
 */
static EmersonParser_relationalOps_return
relationalOps(pEmersonParser ctx)
{   
    EmersonParser_relationalOps_return retval;
    ANTLR3_UINT32 relationalOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal435;
    pANTLR3_COMMON_TOKEN    char_literal436;
    pANTLR3_COMMON_TOKEN    string_literal437;
    pANTLR3_COMMON_TOKEN    string_literal438;
    pANTLR3_COMMON_TOKEN    string_literal439;
    pANTLR3_COMMON_TOKEN    string_literal440;

    pANTLR3_BASE_TREE char_literal435_tree;
    pANTLR3_BASE_TREE char_literal436_tree;
    pANTLR3_BASE_TREE string_literal437_tree;
    pANTLR3_BASE_TREE string_literal438_tree;
    pANTLR3_BASE_TREE string_literal439_tree;
    pANTLR3_BASE_TREE string_literal440_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_135;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_175;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_179;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_178;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_177;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_176;

    /* Initialize rule variables
     */
    relationalOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(74)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal435       = NULL;
    char_literal436       = NULL;
    string_literal437       = NULL;
    string_literal438       = NULL;
    string_literal439       = NULL;
    string_literal440       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal435_tree   = NULL;
    char_literal436_tree   = NULL;
    string_literal437_tree   = NULL;
    string_literal438_tree   = NULL;
    string_literal439_tree   = NULL;
    string_literal440_tree   = NULL;

    stream_135   = NULL;
    #define CREATE_stream_135  if (stream_135 == NULL) {stream_135 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 135"); } 
    stream_175   = NULL;
    #define CREATE_stream_175  if (stream_175 == NULL) {stream_175 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 175"); } 
    stream_179   = NULL;
    #define CREATE_stream_179  if (stream_179 == NULL) {stream_179 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 179"); } 
    stream_178   = NULL;
    #define CREATE_stream_178  if (stream_178 == NULL) {stream_178 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 178"); } 
    stream_177   = NULL;
    #define CREATE_stream_177  if (stream_177 == NULL) {stream_177 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 177"); } 
    stream_176   = NULL;
    #define CREATE_stream_176  if (stream_176 == NULL) {stream_176 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 176"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:472:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) | 'in' -> ^( IN ) )
            
            ANTLR3_UINT32 alt226;

            alt226=6;

            switch ( LA(1) ) 
            {
            case 175:
            	{
            		alt226=1;
            	}
                break;
            case 176:
            	{
            		alt226=2;
            	}
                break;
            case 177:
            	{
            		alt226=3;
            	}
                break;
            case 178:
            	{
            		alt226=4;
            	}
                break;
            case 179:
            	{
            		alt226=5;
            	}
                break;
            case 135:
            	{
            		alt226=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 226;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsEx;
            }

            switch (alt226) 
            {
        	case 1:
        	    // .//Emerson.g:472:3: '<'
        	    {
        	        char_literal435 = (pANTLR3_COMMON_TOKEN) MATCHT(175, &FOLLOW_175_in_relationalOps3811); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_175; stream_175->add(stream_175, char_literal435, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 472:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:472:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:473:3: '>'
        	    {
        	        char_literal436 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_relationalOps3822); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, char_literal436, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 473:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:473:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:474:3: '<='
        	    {
        	        string_literal437 = (pANTLR3_COMMON_TOKEN) MATCHT(177, &FOLLOW_177_in_relationalOps3833); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_177; stream_177->add(stream_177, string_literal437, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 474:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:474:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:475:3: '>='
        	    {
        	        string_literal438 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_relationalOps3843); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, string_literal438, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 475:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:475:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:476:3: 'instanceof'
        	    {
        	        string_literal439 = (pANTLR3_COMMON_TOKEN) MATCHT(179, &FOLLOW_179_in_relationalOps3853); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_179; stream_179->add(stream_179, string_literal439, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 476:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:476:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:477:3: 'in'
        	    {
        	        string_literal440 = (pANTLR3_COMMON_TOKEN) MATCHT(135, &FOLLOW_135_in_relationalOps3863); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_135; stream_135->add(stream_135, string_literal440, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 477:16: -> ^( IN )
        	        	{
        	        	    // .//Emerson.g:477:19: ^( IN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IN, (pANTLR3_UINT8)"IN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsEx; /* Prevent compiler warnings */
    rulerelationalOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_135 != NULL) stream_135->free(stream_135);
        if (stream_175 != NULL) stream_175->free(stream_175);
        if (stream_179 != NULL) stream_179->free(stream_179);
        if (stream_178 != NULL) stream_178->free(stream_178);
        if (stream_177 != NULL) stream_177->free(stream_177);
        if (stream_176 != NULL) stream_176->free(stream_176);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(74, relationalOps_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOps */

/** 
 * $ANTLR start relationalExpression
 * .//Emerson.g:480:1: relationalExpression : ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )* ;
 */
static EmersonParser_relationalExpression_return
relationalExpression(pEmersonParser ctx)
{   
    EmersonParser_relationalExpression_return retval;
    ANTLR3_UINT32 relationalExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM442;
    pANTLR3_COMMON_TOKEN    LTERM444;
    EmersonParser_shiftExpression_return shiftExpression441;
    #undef	RETURN_TYPE_shiftExpression441
    #define	RETURN_TYPE_shiftExpression441 EmersonParser_shiftExpression_return

    EmersonParser_relationalOps_return relationalOps443;
    #undef	RETURN_TYPE_relationalOps443
    #define	RETURN_TYPE_relationalOps443 EmersonParser_relationalOps_return

    EmersonParser_shiftExpression_return shiftExpression445;
    #undef	RETURN_TYPE_shiftExpression445
    #define	RETURN_TYPE_shiftExpression445 EmersonParser_shiftExpression_return

    pANTLR3_BASE_TREE LTERM442_tree;
    pANTLR3_BASE_TREE LTERM444_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOps;
    /* Initialize rule variables
     */
    relationalExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(75)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM442       = NULL;
    LTERM444       = NULL;
    shiftExpression441.tree = NULL;

    relationalOps443.tree = NULL;

    shiftExpression445.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM442_tree   = NULL;
    LTERM444_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_shiftExpression   = NULL;
    #define CREATE_stream_shiftExpression  if (stream_shiftExpression == NULL) {stream_shiftExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftExpression"); }
    stream_relationalOps   = NULL;
    #define CREATE_stream_relationalOps  if (stream_relationalOps == NULL) {stream_relationalOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOps"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:481:2: ( ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )* )
        // .//Emerson.g:481:4: ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*
        {
            // .//Emerson.g:481:4: ( shiftExpression -> shiftExpression )
            // .//Emerson.g:481:5: shiftExpression
            {
                FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression3888);
                shiftExpression441=shiftExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression441.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : shiftExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 481:21: -> shiftExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:481:41: ( ( LTERM )* relationalOps ( LTERM )* shiftExpression -> ^( relationalOps $relationalExpression shiftExpression ) )*

            for (;;)
            {
                int alt229=2;
                alt229 = cdfa229.predict(ctx, RECOGNIZER, ISTREAM, &cdfa229);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt229) 
                {
            	case 1:
            	    // .//Emerson.g:481:42: ( LTERM )* relationalOps ( LTERM )* shiftExpression
            	    {

            	        // .//Emerson.g:481:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt227=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA227_0 = LA(1);
            	                if ( (LA227_0 == LTERM) ) 
            	                {
            	                    alt227=1;
            	                }

            	            }
            	            switch (alt227) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM442 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression3896); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM442, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop227;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop227: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOps_in_relationalExpression3899);
            	        relationalOps443=relationalOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOps; stream_relationalOps->add(stream_relationalOps, relationalOps443.tree, NULL); }

            	        // .//Emerson.g:481:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt228=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA228_0 = LA(1);
            	                if ( (LA228_0 == LTERM) ) 
            	                {
            	                    alt228=1;
            	                }

            	            }
            	            switch (alt228) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM444 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpression3901); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM444, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop228;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop228: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpression3904);
            	        shiftExpression445=shiftExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression445.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalOps, relationalExpression, shiftExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 481:86: -> ^( relationalOps $relationalExpression shiftExpression )
            	        	{
            	        	    // .//Emerson.g:481:89: ^( relationalOps $relationalExpression shiftExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOps == NULL ? NULL : stream_relationalOps->nextNode(stream_relationalOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop229;	/* break out of the loop */
            	    break;
                }
            }
            loop229: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionEx; /* Prevent compiler warnings */
    rulerelationalExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_shiftExpression != NULL) stream_shiftExpression->free(stream_shiftExpression);
        if (stream_relationalOps != NULL) stream_relationalOps->free(stream_relationalOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(75, relationalExpression_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpression */

/** 
 * $ANTLR start relationalOpsNoIn
 * .//Emerson.g:484:1: relationalOpsNoIn : ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) );
 */
static EmersonParser_relationalOpsNoIn_return
relationalOpsNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalOpsNoIn_return retval;
    ANTLR3_UINT32 relationalOpsNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal446;
    pANTLR3_COMMON_TOKEN    char_literal447;
    pANTLR3_COMMON_TOKEN    string_literal448;
    pANTLR3_COMMON_TOKEN    string_literal449;
    pANTLR3_COMMON_TOKEN    string_literal450;

    pANTLR3_BASE_TREE char_literal446_tree;
    pANTLR3_BASE_TREE char_literal447_tree;
    pANTLR3_BASE_TREE string_literal448_tree;
    pANTLR3_BASE_TREE string_literal449_tree;
    pANTLR3_BASE_TREE string_literal450_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_175;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_179;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_178;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_177;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_176;

    /* Initialize rule variables
     */
    relationalOpsNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(76)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal446       = NULL;
    char_literal447       = NULL;
    string_literal448       = NULL;
    string_literal449       = NULL;
    string_literal450       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal446_tree   = NULL;
    char_literal447_tree   = NULL;
    string_literal448_tree   = NULL;
    string_literal449_tree   = NULL;
    string_literal450_tree   = NULL;

    stream_175   = NULL;
    #define CREATE_stream_175  if (stream_175 == NULL) {stream_175 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 175"); } 
    stream_179   = NULL;
    #define CREATE_stream_179  if (stream_179 == NULL) {stream_179 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 179"); } 
    stream_178   = NULL;
    #define CREATE_stream_178  if (stream_178 == NULL) {stream_178 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 178"); } 
    stream_177   = NULL;
    #define CREATE_stream_177  if (stream_177 == NULL) {stream_177 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 177"); } 
    stream_176   = NULL;
    #define CREATE_stream_176  if (stream_176 == NULL) {stream_176 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 176"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:485:1: ( '<' -> ^( LESS_THAN ) | '>' -> ^( GREATER_THAN ) | '<=' -> ^( LESS_THAN_EQUAL ) | '>=' -> ^( GREATER_THAN_EQUAL ) | 'instanceof' -> ^( INSTANCE_OF ) )
            
            ANTLR3_UINT32 alt230;

            alt230=5;

            switch ( LA(1) ) 
            {
            case 175:
            	{
            		alt230=1;
            	}
                break;
            case 176:
            	{
            		alt230=2;
            	}
                break;
            case 177:
            	{
            		alt230=3;
            	}
                break;
            case 178:
            	{
            		alt230=4;
            	}
                break;
            case 179:
            	{
            		alt230=5;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 230;
                EXCEPTION->state        = 0;


                goto rulerelationalOpsNoInEx;
            }

            switch (alt230) 
            {
        	case 1:
        	    // .//Emerson.g:485:3: '<'
        	    {
        	        char_literal446 = (pANTLR3_COMMON_TOKEN) MATCHT(175, &FOLLOW_175_in_relationalOpsNoIn3928); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_175; stream_175->add(stream_175, char_literal446, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 485:8: -> ^( LESS_THAN )
        	        	{
        	        	    // .//Emerson.g:485:11: ^( LESS_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN, (pANTLR3_UINT8)"LESS_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:486:3: '>'
        	    {
        	        char_literal447 = (pANTLR3_COMMON_TOKEN) MATCHT(176, &FOLLOW_176_in_relationalOpsNoIn3939); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_176; stream_176->add(stream_176, char_literal447, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 486:8: -> ^( GREATER_THAN )
        	        	{
        	        	    // .//Emerson.g:486:11: ^( GREATER_THAN )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN, (pANTLR3_UINT8)"GREATER_THAN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:487:3: '<='
        	    {
        	        string_literal448 = (pANTLR3_COMMON_TOKEN) MATCHT(177, &FOLLOW_177_in_relationalOpsNoIn3950); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_177; stream_177->add(stream_177, string_literal448, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 487:8: -> ^( LESS_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:487:11: ^( LESS_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LESS_THAN_EQUAL, (pANTLR3_UINT8)"LESS_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:488:3: '>='
        	    {
        	        string_literal449 = (pANTLR3_COMMON_TOKEN) MATCHT(178, &FOLLOW_178_in_relationalOpsNoIn3960); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_178; stream_178->add(stream_178, string_literal449, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 488:8: -> ^( GREATER_THAN_EQUAL )
        	        	{
        	        	    // .//Emerson.g:488:11: ^( GREATER_THAN_EQUAL )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, GREATER_THAN_EQUAL, (pANTLR3_UINT8)"GREATER_THAN_EQUAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:489:3: 'instanceof'
        	    {
        	        string_literal450 = (pANTLR3_COMMON_TOKEN) MATCHT(179, &FOLLOW_179_in_relationalOpsNoIn3970); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulerelationalOpsNoInEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_179; stream_179->add(stream_179, string_literal450, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 489:16: -> ^( INSTANCE_OF )
        	        	{
        	        	    // .//Emerson.g:489:19: ^( INSTANCE_OF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INSTANCE_OF, (pANTLR3_UINT8)"INSTANCE_OF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalOpsNoInEx; /* Prevent compiler warnings */
    rulerelationalOpsNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_175 != NULL) stream_175->free(stream_175);
        if (stream_179 != NULL) stream_179->free(stream_179);
        if (stream_178 != NULL) stream_178->free(stream_178);
        if (stream_177 != NULL) stream_177->free(stream_177);
        if (stream_176 != NULL) stream_176->free(stream_176);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(76, relationalOpsNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalOpsNoIn */

/** 
 * $ANTLR start relationalExpressionNoIn
 * .//Emerson.g:492:1: relationalExpressionNoIn : ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )* ;
 */
static EmersonParser_relationalExpressionNoIn_return
relationalExpressionNoIn(pEmersonParser ctx)
{   
    EmersonParser_relationalExpressionNoIn_return retval;
    ANTLR3_UINT32 relationalExpressionNoIn_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM452;
    pANTLR3_COMMON_TOKEN    LTERM454;
    EmersonParser_shiftExpression_return shiftExpression451;
    #undef	RETURN_TYPE_shiftExpression451
    #define	RETURN_TYPE_shiftExpression451 EmersonParser_shiftExpression_return

    EmersonParser_relationalOpsNoIn_return relationalOpsNoIn453;
    #undef	RETURN_TYPE_relationalOpsNoIn453
    #define	RETURN_TYPE_relationalOpsNoIn453 EmersonParser_relationalOpsNoIn_return

    EmersonParser_shiftExpression_return shiftExpression455;
    #undef	RETURN_TYPE_shiftExpression455
    #define	RETURN_TYPE_shiftExpression455 EmersonParser_shiftExpression_return

    pANTLR3_BASE_TREE LTERM452_tree;
    pANTLR3_BASE_TREE LTERM454_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relationalOpsNoIn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftExpression;
    /* Initialize rule variables
     */
    relationalExpressionNoIn_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(77)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM452       = NULL;
    LTERM454       = NULL;
    shiftExpression451.tree = NULL;

    relationalOpsNoIn453.tree = NULL;

    shiftExpression455.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM452_tree   = NULL;
    LTERM454_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_relationalOpsNoIn   = NULL;
    #define CREATE_stream_relationalOpsNoIn  if (stream_relationalOpsNoIn == NULL) {stream_relationalOpsNoIn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relationalOpsNoIn"); }
    stream_shiftExpression   = NULL;
    #define CREATE_stream_shiftExpression  if (stream_shiftExpression == NULL) {stream_shiftExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:493:2: ( ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )* )
        // .//Emerson.g:493:4: ( shiftExpression -> shiftExpression ) ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*
        {
            // .//Emerson.g:493:4: ( shiftExpression -> shiftExpression )
            // .//Emerson.g:493:5: shiftExpression
            {
                FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn3987);
                shiftExpression451=shiftExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression451.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : shiftExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 493:21: -> shiftExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:493:41: ( ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression ) )*

            for (;;)
            {
                int alt233=2;
                alt233 = cdfa233.predict(ctx, RECOGNIZER, ISTREAM, &cdfa233);
                if  (HASEXCEPTION())
                {
                    goto rulerelationalExpressionNoInEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt233) 
                {
            	case 1:
            	    // .//Emerson.g:493:42: ( LTERM )* relationalOpsNoIn ( LTERM )* shiftExpression
            	    {

            	        // .//Emerson.g:493:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt231=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA231_0 = LA(1);
            	                if ( (LA231_0 == LTERM) ) 
            	                {
            	                    alt231=1;
            	                }

            	            }
            	            switch (alt231) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM452 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn3995); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM452, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop231;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop231: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_relationalOpsNoIn_in_relationalExpressionNoIn3998);
            	        relationalOpsNoIn453=relationalOpsNoIn(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_relationalOpsNoIn; stream_relationalOpsNoIn->add(stream_relationalOpsNoIn, relationalOpsNoIn453.tree, NULL); }

            	        // .//Emerson.g:493:67: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt232=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA232_0 = LA(1);
            	                if ( (LA232_0 == LTERM) ) 
            	                {
            	                    alt232=1;
            	                }

            	            }
            	            switch (alt232) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM454 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_relationalExpressionNoIn4000); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelationalExpressionNoInEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM454, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop232;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop232: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftExpression_in_relationalExpressionNoIn4003);
            	        shiftExpression455=shiftExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelationalExpressionNoInEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftExpression; stream_shiftExpression->add(stream_shiftExpression, shiftExpression455.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : relationalOpsNoIn, relationalExpressionNoIn, shiftExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 493:90: -> ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression )
            	        	{
            	        	    // .//Emerson.g:493:93: ^( relationalOpsNoIn $relationalExpressionNoIn shiftExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_relationalOpsNoIn == NULL ? NULL : stream_relationalOpsNoIn->nextNode(stream_relationalOpsNoIn), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_shiftExpression == NULL ? NULL : stream_shiftExpression->nextTree(stream_shiftExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop233;	/* break out of the loop */
            	    break;
                }
            }
            loop233: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelationalExpressionNoInEx; /* Prevent compiler warnings */
    rulerelationalExpressionNoInEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_relationalOpsNoIn != NULL) stream_relationalOpsNoIn->free(stream_relationalOpsNoIn);
        if (stream_shiftExpression != NULL) stream_shiftExpression->free(stream_shiftExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(77, relationalExpressionNoIn_StartIndex); }
    return retval;
}
/* $ANTLR end relationalExpressionNoIn */

/** 
 * $ANTLR start shiftOps
 * .//Emerson.g:496:1: shiftOps : ( '<<' -> ^( LEFT_SHIFT ) | '>>' -> ^( RIGHT_SHIFT ) | '>>>' -> ^( TRIPLE_SHIFT ) );
 */
static EmersonParser_shiftOps_return
shiftOps(pEmersonParser ctx)
{   
    EmersonParser_shiftOps_return retval;
    ANTLR3_UINT32 shiftOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal456;
    pANTLR3_COMMON_TOKEN    string_literal457;
    pANTLR3_COMMON_TOKEN    string_literal458;

    pANTLR3_BASE_TREE string_literal456_tree;
    pANTLR3_BASE_TREE string_literal457_tree;
    pANTLR3_BASE_TREE string_literal458_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_180;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_181;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_182;

    /* Initialize rule variables
     */
    shiftOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(78)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal456       = NULL;
    string_literal457       = NULL;
    string_literal458       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal456_tree   = NULL;
    string_literal457_tree   = NULL;
    string_literal458_tree   = NULL;

    stream_180   = NULL;
    #define CREATE_stream_180  if (stream_180 == NULL) {stream_180 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 180"); } 
    stream_181   = NULL;
    #define CREATE_stream_181  if (stream_181 == NULL) {stream_181 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 181"); } 
    stream_182   = NULL;
    #define CREATE_stream_182  if (stream_182 == NULL) {stream_182 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 182"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:497:1: ( '<<' -> ^( LEFT_SHIFT ) | '>>' -> ^( RIGHT_SHIFT ) | '>>>' -> ^( TRIPLE_SHIFT ) )
            
            ANTLR3_UINT32 alt234;

            alt234=3;

            switch ( LA(1) ) 
            {
            case 180:
            	{
            		alt234=1;
            	}
                break;
            case 181:
            	{
            		alt234=2;
            	}
                break;
            case 182:
            	{
            		alt234=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 234;
                EXCEPTION->state        = 0;


                goto ruleshiftOpsEx;
            }

            switch (alt234) 
            {
        	case 1:
        	    // .//Emerson.g:497:2: '<<'
        	    {
        	        string_literal456 = (pANTLR3_COMMON_TOKEN) MATCHT(180, &FOLLOW_180_in_shiftOps4026); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_180; stream_180->add(stream_180, string_literal456, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 497:7: -> ^( LEFT_SHIFT )
        	        	{
        	        	    // .//Emerson.g:497:10: ^( LEFT_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LEFT_SHIFT, (pANTLR3_UINT8)"LEFT_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:498:3: '>>'
        	    {
        	        string_literal457 = (pANTLR3_COMMON_TOKEN) MATCHT(181, &FOLLOW_181_in_shiftOps4036); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_181; stream_181->add(stream_181, string_literal457, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 498:7: -> ^( RIGHT_SHIFT )
        	        	{
        	        	    // .//Emerson.g:498:10: ^( RIGHT_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RIGHT_SHIFT, (pANTLR3_UINT8)"RIGHT_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:499:3: '>>>'
        	    {
        	        string_literal458 = (pANTLR3_COMMON_TOKEN) MATCHT(182, &FOLLOW_182_in_shiftOps4045); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleshiftOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_182; stream_182->add(stream_182, string_literal458, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 499:9: -> ^( TRIPLE_SHIFT )
        	        	{
        	        	    // .//Emerson.g:499:12: ^( TRIPLE_SHIFT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TRIPLE_SHIFT, (pANTLR3_UINT8)"TRIPLE_SHIFT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftOpsEx; /* Prevent compiler warnings */
    ruleshiftOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_180 != NULL) stream_180->free(stream_180);
        if (stream_181 != NULL) stream_181->free(stream_181);
        if (stream_182 != NULL) stream_182->free(stream_182);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(78, shiftOps_StartIndex); }
    return retval;
}
/* $ANTLR end shiftOps */

/** 
 * $ANTLR start shiftExpression
 * .//Emerson.g:502:1: shiftExpression : ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )* ;
 */
static EmersonParser_shiftExpression_return
shiftExpression(pEmersonParser ctx)
{   
    EmersonParser_shiftExpression_return retval;
    ANTLR3_UINT32 shiftExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM460;
    pANTLR3_COMMON_TOKEN    LTERM462;
    EmersonParser_additiveExpression_return additiveExpression459;
    #undef	RETURN_TYPE_additiveExpression459
    #define	RETURN_TYPE_additiveExpression459 EmersonParser_additiveExpression_return

    EmersonParser_shiftOps_return shiftOps461;
    #undef	RETURN_TYPE_shiftOps461
    #define	RETURN_TYPE_shiftOps461 EmersonParser_shiftOps_return

    EmersonParser_additiveExpression_return additiveExpression463;
    #undef	RETURN_TYPE_additiveExpression463
    #define	RETURN_TYPE_additiveExpression463 EmersonParser_additiveExpression_return

    pANTLR3_BASE_TREE LTERM460_tree;
    pANTLR3_BASE_TREE LTERM462_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shiftOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_additiveExpression;
    /* Initialize rule variables
     */
    shiftExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(79)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM460       = NULL;
    LTERM462       = NULL;
    additiveExpression459.tree = NULL;

    shiftOps461.tree = NULL;

    additiveExpression463.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM460_tree   = NULL;
    LTERM462_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_shiftOps   = NULL;
    #define CREATE_stream_shiftOps  if (stream_shiftOps == NULL) {stream_shiftOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shiftOps"); }
    stream_additiveExpression   = NULL;
    #define CREATE_stream_additiveExpression  if (stream_additiveExpression == NULL) {stream_additiveExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule additiveExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:503:2: ( ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )* )
        // .//Emerson.g:503:4: ( additiveExpression -> additiveExpression ) ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*
        {
            // .//Emerson.g:503:4: ( additiveExpression -> additiveExpression )
            // .//Emerson.g:503:5: additiveExpression
            {
                FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression4062);
                additiveExpression459=additiveExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleshiftExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression459.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : additiveExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 503:24: -> additiveExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:503:46: ( ( LTERM )* shiftOps ( LTERM )* additiveExpression -> ^( shiftOps $shiftExpression additiveExpression ) )*

            for (;;)
            {
                int alt237=2;
                alt237 = cdfa237.predict(ctx, RECOGNIZER, ISTREAM, &cdfa237);
                if  (HASEXCEPTION())
                {
                    goto ruleshiftExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt237) 
                {
            	case 1:
            	    // .//Emerson.g:503:47: ( LTERM )* shiftOps ( LTERM )* additiveExpression
            	    {

            	        // .//Emerson.g:503:47: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt235=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA235_0 = LA(1);
            	                if ( (LA235_0 == LTERM) ) 
            	                {
            	                    alt235=1;
            	                }

            	            }
            	            switch (alt235) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM460 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_shiftExpression4069); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleshiftExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM460, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop235;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop235: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_shiftOps_in_shiftExpression4072);
            	        shiftOps461=shiftOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleshiftExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_shiftOps; stream_shiftOps->add(stream_shiftOps, shiftOps461.tree, NULL); }

            	        // .//Emerson.g:503:63: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt236=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA236_0 = LA(1);
            	                if ( (LA236_0 == LTERM) ) 
            	                {
            	                    alt236=1;
            	                }

            	            }
            	            switch (alt236) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM462 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_shiftExpression4074); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleshiftExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM462, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop236;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop236: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_additiveExpression_in_shiftExpression4077);
            	        additiveExpression463=additiveExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleshiftExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_additiveExpression; stream_additiveExpression->add(stream_additiveExpression, additiveExpression463.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : shiftOps, additiveExpression, shiftExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 503:89: -> ^( shiftOps $shiftExpression additiveExpression )
            	        	{
            	        	    // .//Emerson.g:503:92: ^( shiftOps $shiftExpression additiveExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_shiftOps == NULL ? NULL : stream_shiftOps->nextNode(stream_shiftOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_additiveExpression == NULL ? NULL : stream_additiveExpression->nextTree(stream_additiveExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop237;	/* break out of the loop */
            	    break;
                }
            }
            loop237: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleshiftExpressionEx; /* Prevent compiler warnings */
    ruleshiftExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_shiftOps != NULL) stream_shiftOps->free(stream_shiftOps);
        if (stream_additiveExpression != NULL) stream_additiveExpression->free(stream_additiveExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(79, shiftExpression_StartIndex); }
    return retval;
}
/* $ANTLR end shiftExpression */

/** 
 * $ANTLR start addOps
 * .//Emerson.g:507:1: addOps : ( '+' -> ^( ADD ) | '-' -> ^( SUB ) );
 */
static EmersonParser_addOps_return
addOps(pEmersonParser ctx)
{   
    EmersonParser_addOps_return retval;
    ANTLR3_UINT32 addOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal464;
    pANTLR3_COMMON_TOKEN    char_literal465;

    pANTLR3_BASE_TREE char_literal464_tree;
    pANTLR3_BASE_TREE char_literal465_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;

    /* Initialize rule variables
     */
    addOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(80)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal464       = NULL;
    char_literal465       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal464_tree   = NULL;
    char_literal465_tree   = NULL;

    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:508:1: ( '+' -> ^( ADD ) | '-' -> ^( SUB ) )
            
            ANTLR3_UINT32 alt238;

            alt238=2;


            {
                int LA238_0 = LA(1);
                if ( (LA238_0 == 183) ) 
                {
                    alt238=1;
                }
                else if ( (LA238_0 == 184) ) 
                {
                    alt238=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 238;
                    EXCEPTION->state        = 0;


                    goto ruleaddOpsEx;
                }
            }
            switch (alt238) 
            {
        	case 1:
        	    // .//Emerson.g:508:3: '+'
        	    {
        	        char_literal464 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_addOps4103); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, char_literal464, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 508:7: -> ^( ADD )
        	        	{
        	        	    // .//Emerson.g:508:10: ^( ADD )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ADD, (pANTLR3_UINT8)"ADD"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:509:3: '-'
        	    {
        	        char_literal465 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_addOps4113); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleaddOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, char_literal465, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 509:7: -> ^( SUB )
        	        	{
        	        	    // .//Emerson.g:509:10: ^( SUB )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SUB, (pANTLR3_UINT8)"SUB"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleaddOpsEx; /* Prevent compiler warnings */
    ruleaddOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_184 != NULL) stream_184->free(stream_184);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(80, addOps_StartIndex); }
    return retval;
}
/* $ANTLR end addOps */

/** 
 * $ANTLR start additiveExpression
 * .//Emerson.g:513:1: additiveExpression : ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* ;
 */
static EmersonParser_additiveExpression_return
additiveExpression(pEmersonParser ctx)
{   
    EmersonParser_additiveExpression_return retval;
    ANTLR3_UINT32 additiveExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM467;
    pANTLR3_COMMON_TOKEN    LTERM469;
    EmersonParser_multiplicativeExpression_return multiplicativeExpression466;
    #undef	RETURN_TYPE_multiplicativeExpression466
    #define	RETURN_TYPE_multiplicativeExpression466 EmersonParser_multiplicativeExpression_return

    EmersonParser_addOps_return addOps468;
    #undef	RETURN_TYPE_addOps468
    #define	RETURN_TYPE_addOps468 EmersonParser_addOps_return

    EmersonParser_multiplicativeExpression_return multiplicativeExpression470;
    #undef	RETURN_TYPE_multiplicativeExpression470
    #define	RETURN_TYPE_multiplicativeExpression470 EmersonParser_multiplicativeExpression_return

    pANTLR3_BASE_TREE LTERM467_tree;
    pANTLR3_BASE_TREE LTERM469_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_addOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multiplicativeExpression;
    /* Initialize rule variables
     */
    additiveExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(81)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM467       = NULL;
    LTERM469       = NULL;
    multiplicativeExpression466.tree = NULL;

    addOps468.tree = NULL;

    multiplicativeExpression470.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM467_tree   = NULL;
    LTERM469_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_addOps   = NULL;
    #define CREATE_stream_addOps  if (stream_addOps == NULL) {stream_addOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule addOps"); }
    stream_multiplicativeExpression   = NULL;
    #define CREATE_stream_multiplicativeExpression  if (stream_multiplicativeExpression == NULL) {stream_multiplicativeExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multiplicativeExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:514:2: ( ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )* )
        // .//Emerson.g:514:4: ( multiplicativeExpression -> multiplicativeExpression ) ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*
        {
            // .//Emerson.g:514:4: ( multiplicativeExpression -> multiplicativeExpression )
            // .//Emerson.g:514:5: multiplicativeExpression
            {
                FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression4131);
                multiplicativeExpression466=multiplicativeExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression466.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : multiplicativeExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 514:30: -> multiplicativeExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:514:58: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression -> ^( addOps $additiveExpression multiplicativeExpression ) )*

            for (;;)
            {
                int alt241=2;
                alt241 = cdfa241.predict(ctx, RECOGNIZER, ISTREAM, &cdfa241);
                if  (HASEXCEPTION())
                {
                    goto ruleadditiveExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt241) 
                {
            	case 1:
            	    // .//Emerson.g:514:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
            	    {

            	        // .//Emerson.g:514:59: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt239=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA239_0 = LA(1);
            	                if ( (LA239_0 == LTERM) ) 
            	                {
            	                    alt239=1;
            	                }

            	            }
            	            switch (alt239) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM467 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression4138); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM467, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop239;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop239: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_addOps_in_additiveExpression4141);
            	        addOps468=addOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_addOps; stream_addOps->add(stream_addOps, addOps468.tree, NULL); }

            	        // .//Emerson.g:514:73: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt240=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA240_0 = LA(1);
            	                if ( (LA240_0 == LTERM) ) 
            	                {
            	                    alt240=1;
            	                }

            	            }
            	            switch (alt240) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM469 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_additiveExpression4143); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditiveExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM469, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop240;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop240: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_additiveExpression4146);
            	        multiplicativeExpression470=multiplicativeExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditiveExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multiplicativeExpression; stream_multiplicativeExpression->add(stream_multiplicativeExpression, multiplicativeExpression470.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : addOps, multiplicativeExpression, additiveExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 514:105: -> ^( addOps $additiveExpression multiplicativeExpression )
            	        	{
            	        	    // .//Emerson.g:514:108: ^( addOps $additiveExpression multiplicativeExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_addOps == NULL ? NULL : stream_addOps->nextNode(stream_addOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_multiplicativeExpression == NULL ? NULL : stream_multiplicativeExpression->nextTree(stream_multiplicativeExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop241;	/* break out of the loop */
            	    break;
                }
            }
            loop241: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditiveExpressionEx; /* Prevent compiler warnings */
    ruleadditiveExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_addOps != NULL) stream_addOps->free(stream_addOps);
        if (stream_multiplicativeExpression != NULL) stream_multiplicativeExpression->free(stream_multiplicativeExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(81, additiveExpression_StartIndex); }
    return retval;
}
/* $ANTLR end additiveExpression */

/** 
 * $ANTLR start multOps
 * .//Emerson.g:517:1: multOps : ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) );
 */
static EmersonParser_multOps_return
multOps(pEmersonParser ctx)
{   
    EmersonParser_multOps_return retval;
    ANTLR3_UINT32 multOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal471;
    pANTLR3_COMMON_TOKEN    char_literal472;
    pANTLR3_COMMON_TOKEN    char_literal473;

    pANTLR3_BASE_TREE char_literal471_tree;
    pANTLR3_BASE_TREE char_literal472_tree;
    pANTLR3_BASE_TREE char_literal473_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_185;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_186;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_187;

    /* Initialize rule variables
     */
    multOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(82)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal471       = NULL;
    char_literal472       = NULL;
    char_literal473       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal471_tree   = NULL;
    char_literal472_tree   = NULL;
    char_literal473_tree   = NULL;

    stream_185   = NULL;
    #define CREATE_stream_185  if (stream_185 == NULL) {stream_185 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 185"); } 
    stream_186   = NULL;
    #define CREATE_stream_186  if (stream_186 == NULL) {stream_186 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 186"); } 
    stream_187   = NULL;
    #define CREATE_stream_187  if (stream_187 == NULL) {stream_187 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 187"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:518:1: ( '*' -> ^( MULT ) | '/' -> ^( DIV ) | '%' -> ^( MOD ) )
            
            ANTLR3_UINT32 alt242;

            alt242=3;

            switch ( LA(1) ) 
            {
            case 185:
            	{
            		alt242=1;
            	}
                break;
            case 186:
            	{
            		alt242=2;
            	}
                break;
            case 187:
            	{
            		alt242=3;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 242;
                EXCEPTION->state        = 0;


                goto rulemultOpsEx;
            }

            switch (alt242) 
            {
        	case 1:
        	    // .//Emerson.g:518:3: '*'
        	    {
        	        char_literal471 = (pANTLR3_COMMON_TOKEN) MATCHT(185, &FOLLOW_185_in_multOps4171); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_185; stream_185->add(stream_185, char_literal471, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 518:7: -> ^( MULT )
        	        	{
        	        	    // .//Emerson.g:518:10: ^( MULT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MULT, (pANTLR3_UINT8)"MULT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:519:3: '/'
        	    {
        	        char_literal472 = (pANTLR3_COMMON_TOKEN) MATCHT(186, &FOLLOW_186_in_multOps4181); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_186; stream_186->add(stream_186, char_literal472, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 519:7: -> ^( DIV )
        	        	{
        	        	    // .//Emerson.g:519:10: ^( DIV )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DIV, (pANTLR3_UINT8)"DIV"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:520:3: '%'
        	    {
        	        char_literal473 = (pANTLR3_COMMON_TOKEN) MATCHT(187, &FOLLOW_187_in_multOps4191); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_187; stream_187->add(stream_187, char_literal473, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 520:7: -> ^( MOD )
        	        	{
        	        	    // .//Emerson.g:520:10: ^( MOD )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MOD, (pANTLR3_UINT8)"MOD"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemultOpsEx; /* Prevent compiler warnings */
    rulemultOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_185 != NULL) stream_185->free(stream_185);
        if (stream_186 != NULL) stream_186->free(stream_186);
        if (stream_187 != NULL) stream_187->free(stream_187);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(82, multOps_StartIndex); }
    return retval;
}
/* $ANTLR end multOps */

/** 
 * $ANTLR start multiplicativeExpression
 * .//Emerson.g:523:1: multiplicativeExpression : ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* ;
 */
static EmersonParser_multiplicativeExpression_return
multiplicativeExpression(pEmersonParser ctx)
{   
    EmersonParser_multiplicativeExpression_return retval;
    ANTLR3_UINT32 multiplicativeExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM475;
    pANTLR3_COMMON_TOKEN    LTERM477;
    EmersonParser_unaryExpression_return unaryExpression474;
    #undef	RETURN_TYPE_unaryExpression474
    #define	RETURN_TYPE_unaryExpression474 EmersonParser_unaryExpression_return

    EmersonParser_multOps_return multOps476;
    #undef	RETURN_TYPE_multOps476
    #define	RETURN_TYPE_multOps476 EmersonParser_multOps_return

    EmersonParser_unaryExpression_return unaryExpression478;
    #undef	RETURN_TYPE_unaryExpression478
    #define	RETURN_TYPE_unaryExpression478 EmersonParser_unaryExpression_return

    pANTLR3_BASE_TREE LTERM475_tree;
    pANTLR3_BASE_TREE LTERM477_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multOps;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    /* Initialize rule variables
     */
    multiplicativeExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(83)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM475       = NULL;
    LTERM477       = NULL;
    unaryExpression474.tree = NULL;

    multOps476.tree = NULL;

    unaryExpression478.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM475_tree   = NULL;
    LTERM477_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_multOps   = NULL;
    #define CREATE_stream_multOps  if (stream_multOps == NULL) {stream_multOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multOps"); }
    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:524:2: ( ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )* )
        // .//Emerson.g:524:4: ( unaryExpression -> unaryExpression ) ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*
        {
            // .//Emerson.g:524:4: ( unaryExpression -> unaryExpression )
            // .//Emerson.g:524:5: unaryExpression
            {
                FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression4208);
                unaryExpression474=unaryExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression474.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : unaryExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 524:21: -> unaryExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:524:41: ( ( LTERM )* multOps ( LTERM )* unaryExpression -> ^( multOps $multiplicativeExpression unaryExpression ) )*

            for (;;)
            {
                int alt245=2;
                alt245 = cdfa245.predict(ctx, RECOGNIZER, ISTREAM, &cdfa245);
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicativeExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                switch (alt245) 
                {
            	case 1:
            	    // .//Emerson.g:524:42: ( LTERM )* multOps ( LTERM )* unaryExpression
            	    {

            	        // .//Emerson.g:524:42: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt243=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA243_0 = LA(1);
            	                if ( (LA243_0 == LTERM) ) 
            	                {
            	                    alt243=1;
            	                }

            	            }
            	            switch (alt243) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM475 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression4216); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM475, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop243;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop243: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_multOps_in_multiplicativeExpression4219);
            	        multOps476=multOps(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_multOps; stream_multOps->add(stream_multOps, multOps476.tree, NULL); }

            	        // .//Emerson.g:524:57: ( LTERM )*

            	        for (;;)
            	        {
            	            int alt244=2;
            	            {
            	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            	                */
            	                int LA244_0 = LA(1);
            	                if ( (LA244_0 == LTERM) ) 
            	                {
            	                    alt244=1;
            	                }

            	            }
            	            switch (alt244) 
            	            {
            	        	case 1:
            	        	    // .//Emerson.g:0:0: LTERM
            	        	    {
            	        	        LTERM477 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_multiplicativeExpression4221); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicativeExpressionEx;
            	        	        }
            	        	        if (HASFAILED())
            	        	        {
            	        	            return retval;
            	        	        } 
            	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM477, NULL); }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop244;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop244: ; /* Jump out to here if this rule does not match */

            	        FOLLOWPUSH(FOLLOW_unaryExpression_in_multiplicativeExpression4224);
            	        unaryExpression478=unaryExpression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicativeExpressionEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        }
            	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, unaryExpression478.tree, NULL); }

            	         
            	        /* AST REWRITE
            	         * elements          : multiplicativeExpression, multOps, unaryExpression
            	         * token labels      : 
            	         * rule labels       : retval
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        if ( BACKTRACKING==0 ) 
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 524:80: -> ^( multOps $multiplicativeExpression unaryExpression )
            	        	{
            	        	    // .//Emerson.g:524:83: ^( multOps $multiplicativeExpression unaryExpression )
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_multOps == NULL ? NULL : stream_multOps->nextNode(stream_multOps), root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_unaryExpression == NULL ? NULL : stream_unaryExpression->nextTree(stream_unaryExpression));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop245;	/* break out of the loop */
            	    break;
                }
            }
            loop245: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicativeExpressionEx; /* Prevent compiler warnings */
    rulemultiplicativeExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_multOps != NULL) stream_multOps->free(stream_multOps);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(83, multiplicativeExpression_StartIndex); }
    return retval;
}
/* $ANTLR end multiplicativeExpression */

/** 
 * $ANTLR start postfixExpression
 * .//Emerson.g:528:1: postfixExpression : ( leftHandSideExpression -> leftHandSideExpression ) ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )? ;
 */
static EmersonParser_postfixExpression_return
postfixExpression(pEmersonParser ctx)
{   
    EmersonParser_postfixExpression_return retval;
    ANTLR3_UINT32 postfixExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal480;
    pANTLR3_COMMON_TOKEN    string_literal481;
    EmersonParser_leftHandSideExpression_return leftHandSideExpression479;
    #undef	RETURN_TYPE_leftHandSideExpression479
    #define	RETURN_TYPE_leftHandSideExpression479 EmersonParser_leftHandSideExpression_return

    pANTLR3_BASE_TREE string_literal480_tree;
    pANTLR3_BASE_TREE string_literal481_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_188;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_189;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_leftHandSideExpression;
    /* Initialize rule variables
     */
    postfixExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(84)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal480       = NULL;
    string_literal481       = NULL;
    leftHandSideExpression479.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal480_tree   = NULL;
    string_literal481_tree   = NULL;

    stream_188   = NULL;
    #define CREATE_stream_188  if (stream_188 == NULL) {stream_188 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 188"); } 
    stream_189   = NULL;
    #define CREATE_stream_189  if (stream_189 == NULL) {stream_189 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 189"); } 
    stream_leftHandSideExpression   = NULL;
    #define CREATE_stream_leftHandSideExpression  if (stream_leftHandSideExpression == NULL) {stream_leftHandSideExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule leftHandSideExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:529:2: ( ( leftHandSideExpression -> leftHandSideExpression ) ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )? )
        // .//Emerson.g:529:3: ( leftHandSideExpression -> leftHandSideExpression ) ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )?
        {
            // .//Emerson.g:529:3: ( leftHandSideExpression -> leftHandSideExpression )
            // .//Emerson.g:529:4: leftHandSideExpression
            {
                FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_postfixExpression4249);
                leftHandSideExpression479=leftHandSideExpression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulepostfixExpressionEx;
                }
                if (HASFAILED())
                {
                    return retval;
                }
                if ( BACKTRACKING==0 ) { CREATE_stream_leftHandSideExpression; stream_leftHandSideExpression->add(stream_leftHandSideExpression, leftHandSideExpression479.tree, NULL); }

                 
                /* AST REWRITE
                 * elements          : leftHandSideExpression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                if ( BACKTRACKING==0 ) 
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 529:27: -> leftHandSideExpression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_leftHandSideExpression == NULL ? NULL : stream_leftHandSideExpression->nextTree(stream_leftHandSideExpression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // .//Emerson.g:529:54: ( ( '--' -> $postfixExpression '--' ) | ( '++' -> $postfixExpression '++' ) )?
            {
                int alt246=3;
                {
                    int LA246_0 = LA(1);
                    if ( (LA246_0 == 188) ) 
                    {
                        alt246=1;
                    }
                    else if ( (LA246_0 == 189) ) 
                    {
                        alt246=2;
                    }
                }
                switch (alt246) 
                {
            	case 1:
            	    // .//Emerson.g:529:55: ( '--' -> $postfixExpression '--' )
            	    {
            	        // .//Emerson.g:529:55: ( '--' -> $postfixExpression '--' )
            	        // .//Emerson.g:529:56: '--'
            	        {
            	            string_literal480 = (pANTLR3_COMMON_TOKEN) MATCHT(188, &FOLLOW_188_in_postfixExpression4258); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulepostfixExpressionEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_188; stream_188->add(stream_188, string_literal480, NULL); }


            	             
            	            /* AST REWRITE
            	             * elements          : postfixExpression, 188
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 529:61: -> $postfixExpression '--'
            	            	{
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_188 == NULL ? NULL : stream_188->nextNode(stream_188));

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;
            	case 2:
            	    // .//Emerson.g:529:91: ( '++' -> $postfixExpression '++' )
            	    {
            	        // .//Emerson.g:529:91: ( '++' -> $postfixExpression '++' )
            	        // .//Emerson.g:529:92: '++'
            	        {
            	            string_literal481 = (pANTLR3_COMMON_TOKEN) MATCHT(189, &FOLLOW_189_in_postfixExpression4271); 
            	            if  (HASEXCEPTION())
            	            {
            	                goto rulepostfixExpressionEx;
            	            }
            	            if (HASFAILED())
            	            {
            	                return retval;
            	            } 
            	            if ( BACKTRACKING==0 ) { CREATE_stream_189; stream_189->add(stream_189, string_literal481, NULL); }


            	             
            	            /* AST REWRITE
            	             * elements          : postfixExpression, 189
            	             * token labels      : 
            	             * rule labels       : retval
            	             * token list labels : 
            	             * rule list labels  : 
            	             */
            	            if ( BACKTRACKING==0 ) 
            	            {
            	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            	retval.tree    = root_0;
            	            	// 529:97: -> $postfixExpression '++'
            	            	{
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_189 == NULL ? NULL : stream_189->nextNode(stream_189));

            	            	}

            	            	retval.tree = root_0; // set result root
            	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            	            }
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepostfixExpressionEx; /* Prevent compiler warnings */
    rulepostfixExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_188 != NULL) stream_188->free(stream_188);
        if (stream_189 != NULL) stream_189->free(stream_189);
        if (stream_leftHandSideExpression != NULL) stream_leftHandSideExpression->free(stream_leftHandSideExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(84, postfixExpression_StartIndex); }
    return retval;
}
/* $ANTLR end postfixExpression */

/** 
 * $ANTLR start unaryOps
 * .//Emerson.g:533:1: unaryOps : ( 'delete' -> ^( DELETE ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) );
 */
static EmersonParser_unaryOps_return
unaryOps(pEmersonParser ctx)
{   
    EmersonParser_unaryOps_return retval;
    ANTLR3_UINT32 unaryOps_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal482;
    pANTLR3_COMMON_TOKEN    string_literal483;
    pANTLR3_COMMON_TOKEN    string_literal484;
    pANTLR3_COMMON_TOKEN    string_literal485;
    pANTLR3_COMMON_TOKEN    string_literal486;
    pANTLR3_COMMON_TOKEN    char_literal487;
    pANTLR3_COMMON_TOKEN    char_literal488;
    pANTLR3_COMMON_TOKEN    char_literal489;
    pANTLR3_COMMON_TOKEN    char_literal490;

    pANTLR3_BASE_TREE string_literal482_tree;
    pANTLR3_BASE_TREE string_literal483_tree;
    pANTLR3_BASE_TREE string_literal484_tree;
    pANTLR3_BASE_TREE string_literal485_tree;
    pANTLR3_BASE_TREE string_literal486_tree;
    pANTLR3_BASE_TREE char_literal487_tree;
    pANTLR3_BASE_TREE char_literal488_tree;
    pANTLR3_BASE_TREE char_literal489_tree;
    pANTLR3_BASE_TREE char_literal490_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_183;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_184;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_188;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_194;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_189;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_191;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_190;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_193;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_192;

    /* Initialize rule variables
     */
    unaryOps_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(85)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal482       = NULL;
    string_literal483       = NULL;
    string_literal484       = NULL;
    string_literal485       = NULL;
    string_literal486       = NULL;
    char_literal487       = NULL;
    char_literal488       = NULL;
    char_literal489       = NULL;
    char_literal490       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    string_literal482_tree   = NULL;
    string_literal483_tree   = NULL;
    string_literal484_tree   = NULL;
    string_literal485_tree   = NULL;
    string_literal486_tree   = NULL;
    char_literal487_tree   = NULL;
    char_literal488_tree   = NULL;
    char_literal489_tree   = NULL;
    char_literal490_tree   = NULL;

    stream_183   = NULL;
    #define CREATE_stream_183  if (stream_183 == NULL) {stream_183 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 183"); } 
    stream_184   = NULL;
    #define CREATE_stream_184  if (stream_184 == NULL) {stream_184 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 184"); } 
    stream_188   = NULL;
    #define CREATE_stream_188  if (stream_188 == NULL) {stream_188 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 188"); } 
    stream_194   = NULL;
    #define CREATE_stream_194  if (stream_194 == NULL) {stream_194 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 194"); } 
    stream_189   = NULL;
    #define CREATE_stream_189  if (stream_189 == NULL) {stream_189 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 189"); } 
    stream_191   = NULL;
    #define CREATE_stream_191  if (stream_191 == NULL) {stream_191 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 191"); } 
    stream_190   = NULL;
    #define CREATE_stream_190  if (stream_190 == NULL) {stream_190 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 190"); } 
    stream_193   = NULL;
    #define CREATE_stream_193  if (stream_193 == NULL) {stream_193 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 193"); } 
    stream_192   = NULL;
    #define CREATE_stream_192  if (stream_192 == NULL) {stream_192 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 192"); } 

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:534:1: ( 'delete' -> ^( DELETE ) | 'void' -> ^( VOID ) | 'typeof' -> ^( TYPEOF ) | '++' -> ^( PLUSPLUS ) | '--' -> ^( MINUSMINUS ) | '+' -> ^( UNARY_PLUS ) | '-' -> ^( UNARY_MINUS ) | '~' -> ^( COMPLEMENT ) | '!' -> ^( NOT ) )
            
            ANTLR3_UINT32 alt247;

            alt247=9;

            switch ( LA(1) ) 
            {
            case 190:
            	{
            		alt247=1;
            	}
                break;
            case 191:
            	{
            		alt247=2;
            	}
                break;
            case 192:
            	{
            		alt247=3;
            	}
                break;
            case 189:
            	{
            		alt247=4;
            	}
                break;
            case 188:
            	{
            		alt247=5;
            	}
                break;
            case 183:
            	{
            		alt247=6;
            	}
                break;
            case 184:
            	{
            		alt247=7;
            	}
                break;
            case 193:
            	{
            		alt247=8;
            	}
                break;
            case 194:
            	{
            		alt247=9;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 247;
                EXCEPTION->state        = 0;


                goto ruleunaryOpsEx;
            }

            switch (alt247) 
            {
        	case 1:
        	    // .//Emerson.g:534:2: 'delete'
        	    {
        	        string_literal482 = (pANTLR3_COMMON_TOKEN) MATCHT(190, &FOLLOW_190_in_unaryOps4291); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_190; stream_190->add(stream_190, string_literal482, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 534:11: -> ^( DELETE )
        	        	{
        	        	    // .//Emerson.g:534:14: ^( DELETE )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DELETE, (pANTLR3_UINT8)"DELETE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:535:3: 'void'
        	    {
        	        string_literal483 = (pANTLR3_COMMON_TOKEN) MATCHT(191, &FOLLOW_191_in_unaryOps4301); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_191; stream_191->add(stream_191, string_literal483, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 535:10: -> ^( VOID )
        	        	{
        	        	    // .//Emerson.g:535:13: ^( VOID )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, VOID, (pANTLR3_UINT8)"VOID"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:536:3: 'typeof'
        	    {
        	        string_literal484 = (pANTLR3_COMMON_TOKEN) MATCHT(192, &FOLLOW_192_in_unaryOps4311); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_192; stream_192->add(stream_192, string_literal484, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 536:12: -> ^( TYPEOF )
        	        	{
        	        	    // .//Emerson.g:536:15: ^( TYPEOF )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TYPEOF, (pANTLR3_UINT8)"TYPEOF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:537:3: '++'
        	    {
        	        string_literal485 = (pANTLR3_COMMON_TOKEN) MATCHT(189, &FOLLOW_189_in_unaryOps4321); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_189; stream_189->add(stream_189, string_literal485, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 537:9: -> ^( PLUSPLUS )
        	        	{
        	        	    // .//Emerson.g:537:12: ^( PLUSPLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PLUSPLUS, (pANTLR3_UINT8)"PLUSPLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:538:3: '--'
        	    {
        	        string_literal486 = (pANTLR3_COMMON_TOKEN) MATCHT(188, &FOLLOW_188_in_unaryOps4332); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_188; stream_188->add(stream_188, string_literal486, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 538:9: -> ^( MINUSMINUS )
        	        	{
        	        	    // .//Emerson.g:538:12: ^( MINUSMINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, MINUSMINUS, (pANTLR3_UINT8)"MINUSMINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:539:3: '+'
        	    {
        	        char_literal487 = (pANTLR3_COMMON_TOKEN) MATCHT(183, &FOLLOW_183_in_unaryOps4343); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_183; stream_183->add(stream_183, char_literal487, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 539:9: -> ^( UNARY_PLUS )
        	        	{
        	        	    // .//Emerson.g:539:12: ^( UNARY_PLUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_PLUS, (pANTLR3_UINT8)"UNARY_PLUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // .//Emerson.g:540:3: '-'
        	    {
        	        char_literal488 = (pANTLR3_COMMON_TOKEN) MATCHT(184, &FOLLOW_184_in_unaryOps4355); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_184; stream_184->add(stream_184, char_literal488, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 540:9: -> ^( UNARY_MINUS )
        	        	{
        	        	    // .//Emerson.g:540:12: ^( UNARY_MINUS )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UNARY_MINUS, (pANTLR3_UINT8)"UNARY_MINUS"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // .//Emerson.g:541:3: '~'
        	    {
        	        char_literal489 = (pANTLR3_COMMON_TOKEN) MATCHT(193, &FOLLOW_193_in_unaryOps4367); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_193; stream_193->add(stream_193, char_literal489, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 541:9: -> ^( COMPLEMENT )
        	        	{
        	        	    // .//Emerson.g:541:12: ^( COMPLEMENT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, COMPLEMENT, (pANTLR3_UINT8)"COMPLEMENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // .//Emerson.g:542:3: '!'
        	    {
        	        char_literal490 = (pANTLR3_COMMON_TOKEN) MATCHT(194, &FOLLOW_194_in_unaryOps4379); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryOpsEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_194; stream_194->add(stream_194, char_literal490, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 542:9: -> ^( NOT )
        	        	{
        	        	    // .//Emerson.g:542:12: ^( NOT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NOT, (pANTLR3_UINT8)"NOT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryOpsEx; /* Prevent compiler warnings */
    ruleunaryOpsEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_183 != NULL) stream_183->free(stream_183);
        if (stream_184 != NULL) stream_184->free(stream_184);
        if (stream_188 != NULL) stream_188->free(stream_188);
        if (stream_194 != NULL) stream_194->free(stream_194);
        if (stream_189 != NULL) stream_189->free(stream_189);
        if (stream_191 != NULL) stream_191->free(stream_191);
        if (stream_190 != NULL) stream_190->free(stream_190);
        if (stream_193 != NULL) stream_193->free(stream_193);
        if (stream_192 != NULL) stream_192->free(stream_192);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(85, unaryOps_StartIndex); }
    return retval;
}
/* $ANTLR end unaryOps */

/** 
 * $ANTLR start unaryExpression
 * .//Emerson.g:546:1: unaryExpression : ( postfixExpression -> ^( POSTEXPR postfixExpression ) | unaryOps e= unaryExpression -> ^( unaryOps $e) );
 */
static EmersonParser_unaryExpression_return
unaryExpression(pEmersonParser ctx)
{   
    EmersonParser_unaryExpression_return retval;
    ANTLR3_UINT32 unaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    EmersonParser_unaryExpression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e EmersonParser_unaryExpression_return

    EmersonParser_postfixExpression_return postfixExpression491;
    #undef	RETURN_TYPE_postfixExpression491
    #define	RETURN_TYPE_postfixExpression491 EmersonParser_postfixExpression_return

    EmersonParser_unaryOps_return unaryOps492;
    #undef	RETURN_TYPE_unaryOps492
    #define	RETURN_TYPE_unaryOps492 EmersonParser_unaryOps_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_postfixExpression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unaryOps;
    /* Initialize rule variables
     */
    unaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(86)) )
    {
    	retval.start = 0;

        return retval; 
    }
    e.tree = NULL;

    postfixExpression491.tree = NULL;

    unaryOps492.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_unaryExpression   = NULL;
    #define CREATE_stream_unaryExpression  if (stream_unaryExpression == NULL) {stream_unaryExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryExpression"); }
    stream_postfixExpression   = NULL;
    #define CREATE_stream_postfixExpression  if (stream_postfixExpression == NULL) {stream_postfixExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule postfixExpression"); }
    stream_unaryOps   = NULL;
    #define CREATE_stream_unaryOps  if (stream_unaryOps == NULL) {stream_unaryOps = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unaryOps"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:547:2: ( postfixExpression -> ^( POSTEXPR postfixExpression ) | unaryOps e= unaryExpression -> ^( unaryOps $e) )
            
            ANTLR3_UINT32 alt248;

            alt248=2;


            {
                int LA248_0 = LA(1);
                if ( (((LA248_0 >= Identifier) && (LA248_0 <= NumericLiteral)) || ((LA248_0 >= 121) && (LA248_0 <= 122)) || LA248_0 == 125 || ((LA248_0 >= 150) && (LA248_0 <= 151)) || ((LA248_0 >= 195) && (LA248_0 <= 198))) ) 
                {
                    alt248=1;
                }
                else if ( (((LA248_0 >= 183) && (LA248_0 <= 184)) || ((LA248_0 >= 188) && (LA248_0 <= 194))) ) 
                {
                    alt248=2;
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 248;
                    EXCEPTION->state        = 0;


                    goto ruleunaryExpressionEx;
                }
            }
            switch (alt248) 
            {
        	case 1:
        	    // .//Emerson.g:547:4: postfixExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_postfixExpression_in_unaryExpression4398);
        	        postfixExpression491=postfixExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_postfixExpression; stream_postfixExpression->add(stream_postfixExpression, postfixExpression491.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : postfixExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 547:22: -> ^( POSTEXPR postfixExpression )
        	        	{
        	        	    // .//Emerson.g:547:25: ^( POSTEXPR postfixExpression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, POSTEXPR, (pANTLR3_UINT8)"POSTEXPR"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_postfixExpression == NULL ? NULL : stream_postfixExpression->nextTree(stream_postfixExpression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:548:4: unaryOps e= unaryExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_unaryOps_in_unaryExpression4411);
        	        unaryOps492=unaryOps(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryOps; stream_unaryOps->add(stream_unaryOps, unaryOps492.tree, NULL); }
        	        FOLLOWPUSH(FOLLOW_unaryExpression_in_unaryExpression4415);
        	        e=unaryExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_unaryExpression; stream_unaryExpression->add(stream_unaryExpression, e.tree, NULL); }

        	         
        	        /* AST REWRITE
        	         * elements          : e, unaryOps
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 548:31: -> ^( unaryOps $e)
        	        	{
        	        	    // .//Emerson.g:548:34: ^( unaryOps $e)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_unaryOps == NULL ? NULL : stream_unaryOps->nextNode(stream_unaryOps), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_unaryExpression != NULL) stream_unaryExpression->free(stream_unaryExpression);
        if (stream_postfixExpression != NULL) stream_postfixExpression->free(stream_postfixExpression);
        if (stream_unaryOps != NULL) stream_unaryOps->free(stream_unaryOps);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(86, unaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end unaryExpression */

/** 
 * $ANTLR start primaryExpression
 * .//Emerson.g:552:1: primaryExpression : ( 'this' | Identifier | literal | arrayLiteral | objectLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) );
 */
static EmersonParser_primaryExpression_return
primaryExpression(pEmersonParser ctx)
{   
    EmersonParser_primaryExpression_return retval;
    ANTLR3_UINT32 primaryExpression_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    string_literal493;
    pANTLR3_COMMON_TOKEN    Identifier494;
    pANTLR3_COMMON_TOKEN    char_literal498;
    pANTLR3_COMMON_TOKEN    LTERM499;
    pANTLR3_COMMON_TOKEN    LTERM501;
    pANTLR3_COMMON_TOKEN    char_literal502;
    EmersonParser_literal_return literal495;
    #undef	RETURN_TYPE_literal495
    #define	RETURN_TYPE_literal495 EmersonParser_literal_return

    EmersonParser_arrayLiteral_return arrayLiteral496;
    #undef	RETURN_TYPE_arrayLiteral496
    #define	RETURN_TYPE_arrayLiteral496 EmersonParser_arrayLiteral_return

    EmersonParser_objectLiteral_return objectLiteral497;
    #undef	RETURN_TYPE_objectLiteral497
    #define	RETURN_TYPE_objectLiteral497 EmersonParser_objectLiteral_return

    EmersonParser_expression_return expression500;
    #undef	RETURN_TYPE_expression500
    #define	RETURN_TYPE_expression500 EmersonParser_expression_return

    pANTLR3_BASE_TREE string_literal493_tree;
    pANTLR3_BASE_TREE Identifier494_tree;
    pANTLR3_BASE_TREE char_literal498_tree;
    pANTLR3_BASE_TREE LTERM499_tree;
    pANTLR3_BASE_TREE LTERM501_tree;
    pANTLR3_BASE_TREE char_literal502_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_122;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_124;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */
    primaryExpression_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(87)) )
    {
    	retval.start = 0;

        return retval; 
    }
    string_literal493       = NULL;
    Identifier494       = NULL;
    char_literal498       = NULL;
    LTERM499       = NULL;
    LTERM501       = NULL;
    char_literal502       = NULL;
    literal495.tree = NULL;

    arrayLiteral496.tree = NULL;

    objectLiteral497.tree = NULL;

    expression500.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    string_literal493_tree   = NULL;
    Identifier494_tree   = NULL;
    char_literal498_tree   = NULL;
    LTERM499_tree   = NULL;
    LTERM501_tree   = NULL;
    char_literal502_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_122   = NULL;
    #define CREATE_stream_122  if (stream_122 == NULL) {stream_122 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 122"); } 
    stream_124   = NULL;
    #define CREATE_stream_124  if (stream_124 == NULL) {stream_124 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 124"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:553:2: ( 'this' | Identifier | literal | arrayLiteral | objectLiteral | '(' ( LTERM )* expression ( LTERM )* ')' -> ^( PAREN expression ) )
            
            ANTLR3_UINT32 alt251;

            alt251=6;

            switch ( LA(1) ) 
            {
            case 195:
            	{
            		alt251=1;
            	}
                break;
            case Identifier:
            	{
            		alt251=2;
            	}
                break;
            case StringLiteral:
            case NumericLiteral:
            case 196:
            case 197:
            case 198:
            	{
            		alt251=3;
            	}
                break;
            case 151:
            	{
            		alt251=4;
            	}
                break;
            case 125:
            	{
            		alt251=5;
            	}
                break;
            case 122:
            	{
            		alt251=6;
            	}
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 251;
                EXCEPTION->state        = 0;


                goto ruleprimaryExpressionEx;
            }

            switch (alt251) 
            {
        	case 1:
        	    // .//Emerson.g:553:4: 'this'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        string_literal493 = (pANTLR3_COMMON_TOKEN) MATCHT(195, &FOLLOW_195_in_primaryExpression4437); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        string_literal493_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, string_literal493));
        	        ADAPTOR->addChild(ADAPTOR, root_0, string_literal493_tree);
        	        }

        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:554:4: Identifier
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        Identifier494 = (pANTLR3_COMMON_TOKEN) MATCHT(Identifier, &FOLLOW_Identifier_in_primaryExpression4442); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) {
        	        Identifier494_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, Identifier494));
        	        ADAPTOR->addChild(ADAPTOR, root_0, Identifier494_tree);
        	        }

        	    }
        	    break;
        	case 3:
        	    // .//Emerson.g:555:4: literal
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_literal_in_primaryExpression4447);
        	        literal495=literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, literal495.tree);

        	    }
        	    break;
        	case 4:
        	    // .//Emerson.g:556:4: arrayLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_arrayLiteral_in_primaryExpression4452);
        	        arrayLiteral496=arrayLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, arrayLiteral496.tree);

        	    }
        	    break;
        	case 5:
        	    // .//Emerson.g:557:4: objectLiteral
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_objectLiteral_in_primaryExpression4457);
        	        objectLiteral497=objectLiteral(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, objectLiteral497.tree);

        	    }
        	    break;
        	case 6:
        	    // .//Emerson.g:558:4: '(' ( LTERM )* expression ( LTERM )* ')'
        	    {
        	        char_literal498 = (pANTLR3_COMMON_TOKEN) MATCHT(122, &FOLLOW_122_in_primaryExpression4462); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_122; stream_122->add(stream_122, char_literal498, NULL); }


        	        // .//Emerson.g:558:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt249=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA249_0 = LA(1);
        	                if ( (LA249_0 == LTERM) ) 
        	                {
        	                    alt249=1;
        	                }

        	            }
        	            switch (alt249) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM499 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression4464); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM499, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop249;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop249: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_expression_in_primaryExpression4467);
        	        expression500=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_expression; stream_expression->add(stream_expression, expression500.tree, NULL); }

        	        // .//Emerson.g:558:26: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt250=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA250_0 = LA(1);
        	                if ( (LA250_0 == LTERM) ) 
        	                {
        	                    alt250=1;
        	                }

        	            }
        	            switch (alt250) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM501 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_primaryExpression4469); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprimaryExpressionEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM501, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop250;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop250: ; /* Jump out to here if this rule does not match */

        	        char_literal502 = (pANTLR3_COMMON_TOKEN) MATCHT(124, &FOLLOW_124_in_primaryExpression4472); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimaryExpressionEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_124; stream_124->add(stream_124, char_literal502, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : expression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 558:37: -> ^( PAREN expression )
        	        	{
        	        	    // .//Emerson.g:558:40: ^( PAREN expression )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PAREN, (pANTLR3_UINT8)"PAREN"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimaryExpressionEx; /* Prevent compiler warnings */
    ruleprimaryExpressionEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_122 != NULL) stream_122->free(stream_122);
        if (stream_124 != NULL) stream_124->free(stream_124);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(87, primaryExpression_StartIndex); }
    return retval;
}
/* $ANTLR end primaryExpression */

/** 
 * $ANTLR start arrayLiteral
 * .//Emerson.g:562:1: arrayLiteral : ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( assignmentExpression )? ) | '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']' -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* ) );
 */
static EmersonParser_arrayLiteral_return
arrayLiteral(pEmersonParser ctx)
{   
    EmersonParser_arrayLiteral_return retval;
    ANTLR3_UINT32 arrayLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal503;
    pANTLR3_COMMON_TOKEN    LTERM504;
    pANTLR3_COMMON_TOKEN    LTERM506;
    pANTLR3_COMMON_TOKEN    char_literal507;
    pANTLR3_COMMON_TOKEN    char_literal508;
    pANTLR3_COMMON_TOKEN    LTERM509;
    pANTLR3_COMMON_TOKEN    char_literal510;
    pANTLR3_COMMON_TOKEN    LTERM511;
    pANTLR3_COMMON_TOKEN    LTERM512;
    pANTLR3_COMMON_TOKEN    char_literal513;
    EmersonParser_assignmentExpression_return e1;
    #undef	RETURN_TYPE_e1
    #define	RETURN_TYPE_e1 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return e2;
    #undef	RETURN_TYPE_e2
    #define	RETURN_TYPE_e2 EmersonParser_assignmentExpression_return

    EmersonParser_assignmentExpression_return assignmentExpression505;
    #undef	RETURN_TYPE_assignmentExpression505
    #define	RETURN_TYPE_assignmentExpression505 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE char_literal503_tree;
    pANTLR3_BASE_TREE LTERM504_tree;
    pANTLR3_BASE_TREE LTERM506_tree;
    pANTLR3_BASE_TREE char_literal507_tree;
    pANTLR3_BASE_TREE char_literal508_tree;
    pANTLR3_BASE_TREE LTERM509_tree;
    pANTLR3_BASE_TREE char_literal510_tree;
    pANTLR3_BASE_TREE LTERM511_tree;
    pANTLR3_BASE_TREE LTERM512_tree;
    pANTLR3_BASE_TREE char_literal513_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_152;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_151;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_123;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    arrayLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(88)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal503       = NULL;
    LTERM504       = NULL;
    LTERM506       = NULL;
    char_literal507       = NULL;
    char_literal508       = NULL;
    LTERM509       = NULL;
    char_literal510       = NULL;
    LTERM511       = NULL;
    LTERM512       = NULL;
    char_literal513       = NULL;
    e1.tree = NULL;

    e2.tree = NULL;

    assignmentExpression505.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal503_tree   = NULL;
    LTERM504_tree   = NULL;
    LTERM506_tree   = NULL;
    char_literal507_tree   = NULL;
    char_literal508_tree   = NULL;
    LTERM509_tree   = NULL;
    char_literal510_tree   = NULL;
    LTERM511_tree   = NULL;
    LTERM512_tree   = NULL;
    char_literal513_tree   = NULL;

    stream_152   = NULL;
    #define CREATE_stream_152  if (stream_152 == NULL) {stream_152 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 152"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_151   = NULL;
    #define CREATE_stream_151  if (stream_151 == NULL) {stream_151 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 151"); } 
    stream_123   = NULL;
    #define CREATE_stream_123  if (stream_123 == NULL) {stream_123 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 123"); } 
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:563:3: ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' -> ^( ARRAY_LITERAL ( assignmentExpression )? ) | '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']' -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* ) )
            
            ANTLR3_UINT32 alt259;

            alt259=2;


            {
                int LA259_0 = LA(1);
                if ( (LA259_0 == 151) ) 
                {

                    {
                        int LA259_1 = LA(2);
                        if ( (synpred311_Emerson(ctx)) ) 
                        {
                            alt259=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt259=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 259;
                            EXCEPTION->state        = 1;


                            goto rulearrayLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 259;
                    EXCEPTION->state        = 0;


                    goto rulearrayLiteralEx;
                }
            }
            switch (alt259) 
            {
        	case 1:
        	    // .//Emerson.g:563:5: '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']'
        	    {
        	        char_literal503 = (pANTLR3_COMMON_TOKEN) MATCHT(151, &FOLLOW_151_in_arrayLiteral4496); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_151; stream_151->add(stream_151, char_literal503, NULL); }


        	        // .//Emerson.g:563:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt252=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA252_0 = LA(1);
        	                if ( (LA252_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA252_2 = LA(2);
        	                        if ( (synpred308_Emerson(ctx)) ) 
        	                        {
        	                            alt252=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt252) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM504 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4498); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM504, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop252;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop252: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:563:16: ( assignmentExpression )?
        	        {
        	            int alt253=2;
        	            {
        	                int LA253_0 = LA(1);
        	                if ( (((LA253_0 >= Identifier) && (LA253_0 <= NumericLiteral)) || ((LA253_0 >= 121) && (LA253_0 <= 122)) || LA253_0 == 125 || ((LA253_0 >= 150) && (LA253_0 <= 151)) || ((LA253_0 >= 183) && (LA253_0 <= 184)) || ((LA253_0 >= 188) && (LA253_0 <= 198))) ) 
        	                {
        	                    alt253=1;
        	                }
        	            }
        	            switch (alt253) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:563:17: assignmentExpression
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral4502);
        	        	        assignmentExpression505=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression505.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:563:40: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt254=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA254_0 = LA(1);
        	                if ( (LA254_0 == LTERM) ) 
        	                {
        	                    alt254=1;
        	                }

        	            }
        	            switch (alt254) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM506 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4506); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM506, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop254;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop254: ; /* Jump out to here if this rule does not match */

        	        char_literal507 = (pANTLR3_COMMON_TOKEN) MATCHT(152, &FOLLOW_152_in_arrayLiteral4509); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_152; stream_152->add(stream_152, char_literal507, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 563:51: -> ^( ARRAY_LITERAL ( assignmentExpression )? )
        	        	{
        	        	    // .//Emerson.g:563:54: ^( ARRAY_LITERAL ( assignmentExpression )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        // .//Emerson.g:563:70: ( assignmentExpression )?
        	        	        {
        	        	        	if ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if ( stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:564:4: '[' ( LTERM )* e1= assignmentExpression ( ',' ( LTERM )* e2= assignmentExpression )* ( LTERM )* ']'
        	    {
        	        char_literal508 = (pANTLR3_COMMON_TOKEN) MATCHT(151, &FOLLOW_151_in_arrayLiteral4523); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_151; stream_151->add(stream_151, char_literal508, NULL); }


        	        // .//Emerson.g:564:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt255=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA255_0 = LA(1);
        	                if ( (LA255_0 == LTERM) ) 
        	                {
        	                    alt255=1;
        	                }

        	            }
        	            switch (alt255) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM509 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4525); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM509, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop255;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop255: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral4530);
        	        e1=assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e1.tree, NULL); }

        	        // .//Emerson.g:564:39: ( ',' ( LTERM )* e2= assignmentExpression )*

        	        for (;;)
        	        {
        	            int alt257=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA257_0 = LA(1);
        	                if ( (LA257_0 == 123) ) 
        	                {
        	                    alt257=1;
        	                }

        	            }
        	            switch (alt257) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:564:40: ',' ( LTERM )* e2= assignmentExpression
        	        	    {
        	        	        char_literal510 = (pANTLR3_COMMON_TOKEN) MATCHT(123, &FOLLOW_123_in_arrayLiteral4533); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_123; stream_123->add(stream_123, char_literal510, NULL); }


        	        	        // .//Emerson.g:564:44: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt256=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA256_0 = LA(1);
        	        	                if ( (LA256_0 == LTERM) ) 
        	        	                {
        	        	                    alt256=1;
        	        	                }

        	        	            }
        	        	            switch (alt256) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM511 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4535); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto rulearrayLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM511, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop256;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop256: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_arrayLiteral4540);
        	        	        e2=assignmentExpression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, e2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop257;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop257: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:564:77: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt258=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA258_0 = LA(1);
        	                if ( (LA258_0 == LTERM) ) 
        	                {
        	                    alt258=1;
        	                }

        	            }
        	            switch (alt258) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM512 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_arrayLiteral4544); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulearrayLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM512, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop258;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop258: ; /* Jump out to here if this rule does not match */

        	        char_literal513 = (pANTLR3_COMMON_TOKEN) MATCHT(152, &FOLLOW_152_in_arrayLiteral4547); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulearrayLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_152; stream_152->add(stream_152, char_literal513, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : assignmentExpression, assignmentExpression
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 564:88: -> ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* )
        	        	{
        	        	    // .//Emerson.g:564:91: ^( ARRAY_LITERAL assignmentExpression ( assignmentExpression )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ARRAY_LITERAL, (pANTLR3_UINT8)"ARRAY_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));
        	        	        // .//Emerson.g:564:128: ( assignmentExpression )*
        	        	        {
        	        	        	while ( (stream_assignmentExpression != NULL && stream_assignmentExpression->hasNext(stream_assignmentExpression))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

        	        	        	}
        	        	        	if (stream_assignmentExpression != NULL) stream_assignmentExpression->reset(stream_assignmentExpression);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulearrayLiteralEx; /* Prevent compiler warnings */
    rulearrayLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_152 != NULL) stream_152->free(stream_152);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_151 != NULL) stream_151->free(stream_151);
        if (stream_123 != NULL) stream_123->free(stream_123);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(88, arrayLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end arrayLiteral */

/** 
 * $ANTLR start objectLiteral
 * .//Emerson.g:568:1: objectLiteral : ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) );
 */
static EmersonParser_objectLiteral_return
objectLiteral(pEmersonParser ctx)
{   
    EmersonParser_objectLiteral_return retval;
    ANTLR3_UINT32 objectLiteral_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal514;
    pANTLR3_COMMON_TOKEN    LTERM515;
    pANTLR3_COMMON_TOKEN    LTERM517;
    pANTLR3_COMMON_TOKEN    char_literal518;
    pANTLR3_COMMON_TOKEN    char_literal519;
    pANTLR3_COMMON_TOKEN    LTERM520;
    pANTLR3_COMMON_TOKEN    char_literal521;
    pANTLR3_COMMON_TOKEN    LTERM522;
    pANTLR3_COMMON_TOKEN    LTERM523;
    pANTLR3_COMMON_TOKEN    char_literal524;
    EmersonParser_propertyNameAndValue_return p1;
    #undef	RETURN_TYPE_p1
    #define	RETURN_TYPE_p1 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return p2;
    #undef	RETURN_TYPE_p2
    #define	RETURN_TYPE_p2 EmersonParser_propertyNameAndValue_return

    EmersonParser_propertyNameAndValue_return propertyNameAndValue516;
    #undef	RETURN_TYPE_propertyNameAndValue516
    #define	RETURN_TYPE_propertyNameAndValue516 EmersonParser_propertyNameAndValue_return

    pANTLR3_BASE_TREE char_literal514_tree;
    pANTLR3_BASE_TREE LTERM515_tree;
    pANTLR3_BASE_TREE LTERM517_tree;
    pANTLR3_BASE_TREE char_literal518_tree;
    pANTLR3_BASE_TREE char_literal519_tree;
    pANTLR3_BASE_TREE LTERM520_tree;
    pANTLR3_BASE_TREE char_literal521_tree;
    pANTLR3_BASE_TREE LTERM522_tree;
    pANTLR3_BASE_TREE LTERM523_tree;
    pANTLR3_BASE_TREE char_literal524_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_125;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_126;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_123;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyNameAndValue;
    /* Initialize rule variables
     */
    objectLiteral_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(89)) )
    {
    	retval.start = 0;

        return retval; 
    }
    char_literal514       = NULL;
    LTERM515       = NULL;
    LTERM517       = NULL;
    char_literal518       = NULL;
    char_literal519       = NULL;
    LTERM520       = NULL;
    char_literal521       = NULL;
    LTERM522       = NULL;
    LTERM523       = NULL;
    char_literal524       = NULL;
    p1.tree = NULL;

    p2.tree = NULL;

    propertyNameAndValue516.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    char_literal514_tree   = NULL;
    LTERM515_tree   = NULL;
    LTERM517_tree   = NULL;
    char_literal518_tree   = NULL;
    char_literal519_tree   = NULL;
    LTERM520_tree   = NULL;
    char_literal521_tree   = NULL;
    LTERM522_tree   = NULL;
    LTERM523_tree   = NULL;
    char_literal524_tree   = NULL;

    stream_125   = NULL;
    #define CREATE_stream_125  if (stream_125 == NULL) {stream_125 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 125"); } 
    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_126   = NULL;
    #define CREATE_stream_126  if (stream_126 == NULL) {stream_126 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 126"); } 
    stream_123   = NULL;
    #define CREATE_stream_123  if (stream_123 == NULL) {stream_123 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 123"); } 
    stream_propertyNameAndValue   = NULL;
    #define CREATE_stream_propertyNameAndValue  if (stream_propertyNameAndValue == NULL) {stream_propertyNameAndValue = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyNameAndValue"); }

    retval.tree  = NULL;
    {
        {
            //  .//Emerson.g:569:3: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' -> ^( OBJ_LITERAL ( propertyNameAndValue )? ) | '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}' -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* ) )
            
            ANTLR3_UINT32 alt267;

            alt267=2;


            {
                int LA267_0 = LA(1);
                if ( (LA267_0 == 125) ) 
                {

                    {
                        int LA267_1 = LA(2);
                        if ( (synpred319_Emerson(ctx)) ) 
                        {
                            alt267=1;
                        }
                        else if ( (ANTLR3_TRUE) ) 
                        {
                            alt267=2;
                        }
                        else 
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE; 
                                return retval;
                            }
                        
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 267;
                            EXCEPTION->state        = 1;


                            goto ruleobjectLiteralEx;
                        }
                    }
                }
                else 
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE; 
                        return retval;
                    }
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 267;
                    EXCEPTION->state        = 0;


                    goto ruleobjectLiteralEx;
                }
            }
            switch (alt267) 
            {
        	case 1:
        	    // .//Emerson.g:569:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
        	    {
        	        char_literal514 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_objectLiteral4578); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal514, NULL); }


        	        // .//Emerson.g:569:9: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt260=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA260_0 = LA(1);
        	                if ( (LA260_0 == LTERM) ) 
        	                {
        	                    {
        	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                        */
        	                        int LA260_2 = LA(2);
        	                        if ( (synpred316_Emerson(ctx)) ) 
        	                        {
        	                            alt260=1;
        	                        }

        	                    }
        	                }

        	            }
        	            switch (alt260) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM515 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral4580); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM515, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop260;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop260: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:569:16: ( propertyNameAndValue )?
        	        {
        	            int alt261=2;
        	            {
        	                int LA261_0 = LA(1);
        	                if ( (((LA261_0 >= Identifier) && (LA261_0 <= NumericLiteral))) ) 
        	                {
        	                    alt261=1;
        	                }
        	            }
        	            switch (alt261) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: propertyNameAndValue
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral4583);
        	        	        propertyNameAndValue516=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, propertyNameAndValue516.tree, NULL); }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // .//Emerson.g:569:38: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt262=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA262_0 = LA(1);
        	                if ( (LA262_0 == LTERM) ) 
        	                {
        	                    alt262=1;
        	                }

        	            }
        	            switch (alt262) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM517 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral4586); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM517, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop262;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop262: ; /* Jump out to here if this rule does not match */

        	        char_literal518 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_objectLiteral4589); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal518, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 569:49: -> ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	{
        	        	    // .//Emerson.g:569:52: ^( OBJ_LITERAL ( propertyNameAndValue )? )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        // .//Emerson.g:569:66: ( propertyNameAndValue )?
        	        	        {
        	        	        	if ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if ( stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // .//Emerson.g:570:4: '{' ( LTERM )* p1= propertyNameAndValue ( ',' ( LTERM )* p2= propertyNameAndValue )* ( LTERM )* '}'
        	    {
        	        char_literal519 = (pANTLR3_COMMON_TOKEN) MATCHT(125, &FOLLOW_125_in_objectLiteral4603); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_125; stream_125->add(stream_125, char_literal519, NULL); }


        	        // .//Emerson.g:570:8: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt263=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA263_0 = LA(1);
        	                if ( (LA263_0 == LTERM) ) 
        	                {
        	                    alt263=1;
        	                }

        	            }
        	            switch (alt263) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM520 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral4605); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM520, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop263;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop263: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral4610);
        	        p1=propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        }
        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p1.tree, NULL); }

        	        // .//Emerson.g:570:39: ( ',' ( LTERM )* p2= propertyNameAndValue )*

        	        for (;;)
        	        {
        	            int alt265=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA265_0 = LA(1);
        	                if ( (LA265_0 == 123) ) 
        	                {
        	                    alt265=1;
        	                }

        	            }
        	            switch (alt265) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:570:40: ',' ( LTERM )* p2= propertyNameAndValue
        	        	    {
        	        	        char_literal521 = (pANTLR3_COMMON_TOKEN) MATCHT(123, &FOLLOW_123_in_objectLiteral4613); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_123; stream_123->add(stream_123, char_literal521, NULL); }


        	        	        // .//Emerson.g:570:44: ( LTERM )*

        	        	        for (;;)
        	        	        {
        	        	            int alt264=2;
        	        	            {
        	        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	                */
        	        	                int LA264_0 = LA(1);
        	        	                if ( (LA264_0 == LTERM) ) 
        	        	                {
        	        	                    alt264=1;
        	        	                }

        	        	            }
        	        	            switch (alt264) 
        	        	            {
        	        	        	case 1:
        	        	        	    // .//Emerson.g:0:0: LTERM
        	        	        	    {
        	        	        	        LTERM522 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral4615); 
        	        	        	        if  (HASEXCEPTION())
        	        	        	        {
        	        	        	            goto ruleobjectLiteralEx;
        	        	        	        }
        	        	        	        if (HASFAILED())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        } 
        	        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM522, NULL); }


        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop264;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop264: ; /* Jump out to here if this rule does not match */

        	        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_objectLiteral4620);
        	        	        p2=propertyNameAndValue(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_propertyNameAndValue; stream_propertyNameAndValue->add(stream_propertyNameAndValue, p2.tree, NULL); }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop265;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop265: ; /* Jump out to here if this rule does not match */


        	        // .//Emerson.g:570:77: ( LTERM )*

        	        for (;;)
        	        {
        	            int alt266=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA266_0 = LA(1);
        	                if ( (LA266_0 == LTERM) ) 
        	                {
        	                    alt266=1;
        	                }

        	            }
        	            switch (alt266) 
        	            {
        	        	case 1:
        	        	    // .//Emerson.g:0:0: LTERM
        	        	    {
        	        	        LTERM523 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_objectLiteral4624); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleobjectLiteralEx;
        	        	        }
        	        	        if (HASFAILED())
        	        	        {
        	        	            return retval;
        	        	        } 
        	        	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM523, NULL); }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop266;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop266: ; /* Jump out to here if this rule does not match */

        	        char_literal524 = (pANTLR3_COMMON_TOKEN) MATCHT(126, &FOLLOW_126_in_objectLiteral4631); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleobjectLiteralEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return retval;
        	        } 
        	        if ( BACKTRACKING==0 ) { CREATE_stream_126; stream_126->add(stream_126, char_literal524, NULL); }


        	         
        	        /* AST REWRITE
        	         * elements          : propertyNameAndValue, propertyNameAndValue
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        if ( BACKTRACKING==0 ) 
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 570:92: -> ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	{
        	        	    // .//Emerson.g:570:95: ^( OBJ_LITERAL propertyNameAndValue ( propertyNameAndValue )* )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OBJ_LITERAL, (pANTLR3_UINT8)"OBJ_LITERAL"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));
        	        	        // .//Emerson.g:570:130: ( propertyNameAndValue )*
        	        	        {
        	        	        	while ( (stream_propertyNameAndValue != NULL && stream_propertyNameAndValue->hasNext(stream_propertyNameAndValue))  )
        	        	        	{
        	        	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyNameAndValue == NULL ? NULL : stream_propertyNameAndValue->nextTree(stream_propertyNameAndValue));

        	        	        	}
        	        	        	if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->reset(stream_propertyNameAndValue);

        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleobjectLiteralEx; /* Prevent compiler warnings */
    ruleobjectLiteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_125 != NULL) stream_125->free(stream_125);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_126 != NULL) stream_126->free(stream_126);
        if (stream_123 != NULL) stream_123->free(stream_123);
        if (stream_propertyNameAndValue != NULL) stream_propertyNameAndValue->free(stream_propertyNameAndValue);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(89, objectLiteral_StartIndex); }
    return retval;
}
/* $ANTLR end objectLiteral */

/** 
 * $ANTLR start propertyNameAndValue
 * .//Emerson.g:573:1: propertyNameAndValue : propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) ;
 */
static EmersonParser_propertyNameAndValue_return
propertyNameAndValue(pEmersonParser ctx)
{   
    EmersonParser_propertyNameAndValue_return retval;
    ANTLR3_UINT32 propertyNameAndValue_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LTERM526;
    pANTLR3_COMMON_TOKEN    char_literal527;
    pANTLR3_COMMON_TOKEN    LTERM528;
    EmersonParser_propertyName_return propertyName525;
    #undef	RETURN_TYPE_propertyName525
    #define	RETURN_TYPE_propertyName525 EmersonParser_propertyName_return

    EmersonParser_assignmentExpression_return assignmentExpression529;
    #undef	RETURN_TYPE_assignmentExpression529
    #define	RETURN_TYPE_assignmentExpression529 EmersonParser_assignmentExpression_return

    pANTLR3_BASE_TREE LTERM526_tree;
    pANTLR3_BASE_TREE char_literal527_tree;
    pANTLR3_BASE_TREE LTERM528_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LTERM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_140;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_propertyName;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_assignmentExpression;
    /* Initialize rule variables
     */
    propertyNameAndValue_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(90)) )
    {
    	retval.start = 0;

        return retval; 
    }
    LTERM526       = NULL;
    char_literal527       = NULL;
    LTERM528       = NULL;
    propertyName525.tree = NULL;

    assignmentExpression529.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    LTERM526_tree   = NULL;
    char_literal527_tree   = NULL;
    LTERM528_tree   = NULL;

    stream_LTERM   = NULL;
    #define CREATE_stream_LTERM  if (stream_LTERM == NULL) {stream_LTERM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LTERM"); } 
    stream_140   = NULL;
    #define CREATE_stream_140  if (stream_140 == NULL) {stream_140 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 140"); } 
    stream_propertyName   = NULL;
    #define CREATE_stream_propertyName  if (stream_propertyName == NULL) {stream_propertyName = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule propertyName"); }
    stream_assignmentExpression   = NULL;
    #define CREATE_stream_assignmentExpression  if (stream_assignmentExpression == NULL) {stream_assignmentExpression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule assignmentExpression"); }

    retval.tree  = NULL;
    {
        // .//Emerson.g:574:2: ( propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression -> ^( NAME_VALUE propertyName assignmentExpression ) )
        // .//Emerson.g:574:4: propertyName ( LTERM )* ':' ( LTERM )* assignmentExpression
        {
            FOLLOWPUSH(FOLLOW_propertyName_in_propertyNameAndValue4655);
            propertyName525=propertyName(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_propertyName; stream_propertyName->add(stream_propertyName, propertyName525.tree, NULL); }

            // .//Emerson.g:574:17: ( LTERM )*

            for (;;)
            {
                int alt268=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA268_0 = LA(1);
                    if ( (LA268_0 == LTERM) ) 
                    {
                        alt268=1;
                    }

                }
                switch (alt268) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM526 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue4657); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM526, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop268;	/* break out of the loop */
            	    break;
                }
            }
            loop268: ; /* Jump out to here if this rule does not match */

            char_literal527 = (pANTLR3_COMMON_TOKEN) MATCHT(140, &FOLLOW_140_in_propertyNameAndValue4660); 
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            } 
            if ( BACKTRACKING==0 ) { CREATE_stream_140; stream_140->add(stream_140, char_literal527, NULL); }


            // .//Emerson.g:574:28: ( LTERM )*

            for (;;)
            {
                int alt269=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA269_0 = LA(1);
                    if ( (LA269_0 == LTERM) ) 
                    {
                        alt269=1;
                    }

                }
                switch (alt269) 
                {
            	case 1:
            	    // .//Emerson.g:0:0: LTERM
            	    {
            	        LTERM528 = (pANTLR3_COMMON_TOKEN) MATCHT(LTERM, &FOLLOW_LTERM_in_propertyNameAndValue4662); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulepropertyNameAndValueEx;
            	        }
            	        if (HASFAILED())
            	        {
            	            return retval;
            	        } 
            	        if ( BACKTRACKING==0 ) { CREATE_stream_LTERM; stream_LTERM->add(stream_LTERM, LTERM528, NULL); }


            	    }
            	    break;

            	default:
            	    goto loop269;	/* break out of the loop */
            	    break;
                }
            }
            loop269: ; /* Jump out to here if this rule does not match */

            FOLLOWPUSH(FOLLOW_assignmentExpression_in_propertyNameAndValue4665);
            assignmentExpression529=assignmentExpression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulepropertyNameAndValueEx;
            }
            if (HASFAILED())
            {
                return retval;
            }
            if ( BACKTRACKING==0 ) { CREATE_stream_assignmentExpression; stream_assignmentExpression->add(stream_assignmentExpression, assignmentExpression529.tree, NULL); }

             
            /* AST REWRITE
             * elements          : propertyName, assignmentExpression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            if ( BACKTRACKING==0 ) 
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 574:56: -> ^( NAME_VALUE propertyName assignmentExpression )
            	{
            	    // .//Emerson.g:574:59: ^( NAME_VALUE propertyName assignmentExpression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NAME_VALUE, (pANTLR3_UINT8)"NAME_VALUE"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_propertyName == NULL ? NULL : stream_propertyName->nextTree(stream_propertyName));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_assignmentExpression == NULL ? NULL : stream_assignmentExpression->nextTree(stream_assignmentExpression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameAndValueEx; /* Prevent compiler warnings */
    rulepropertyNameAndValueEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LTERM != NULL) stream_LTERM->free(stream_LTERM);
        if (stream_140 != NULL) stream_140->free(stream_140);
        if (stream_propertyName != NULL) stream_propertyName->free(stream_propertyName);
        if (stream_assignmentExpression != NULL) stream_assignmentExpression->free(stream_assignmentExpression);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(90, propertyNameAndValue_StartIndex); }
    return retval;
}
/* $ANTLR end propertyNameAndValue */

/** 
 * $ANTLR start propertyName
 * .//Emerson.g:577:1: propertyName : ( Identifier | StringLiteral | NumericLiteral );
 */
static EmersonParser_propertyName_return
propertyName(pEmersonParser ctx)
{   
    EmersonParser_propertyName_return retval;
    ANTLR3_UINT32 propertyName_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set530;

    pANTLR3_BASE_TREE set530_tree;

    /* Initialize rule variables
     */
    propertyName_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(91)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set530       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set530_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:578:2: ( Identifier | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set530=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= Identifier) && (LA(1) <= NumericLiteral)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set530)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_propertyName0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_propertyName0);    goto rulepropertyNameEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepropertyNameEx; /* Prevent compiler warnings */
    rulepropertyNameEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(91, propertyName_StartIndex); }
    return retval;
}
/* $ANTLR end propertyName */

/** 
 * $ANTLR start literal
 * .//Emerson.g:584:1: literal : ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral );
 */
static EmersonParser_literal_return
literal(pEmersonParser ctx)
{   
    EmersonParser_literal_return retval;
    ANTLR3_UINT32 literal_StartIndex;
    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set531;

    pANTLR3_BASE_TREE set531_tree;

    /* Initialize rule variables
     */
    literal_StartIndex = INDEX();


    root_0 = NULL;

    if ( (BACKTRACKING>0) && (HAVEPARSEDRULE(92)) )
    {
    	retval.start = 0;

        return retval; 
    }
    set531       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set531_tree   = NULL;


    retval.tree  = NULL;
    {
        // .//Emerson.g:585:2: ( 'null' | 'true' | 'false' | StringLiteral | NumericLiteral )
        // .//Emerson.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set531=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= StringLiteral) && (LA(1) <= NumericLiteral)) || ((LA(1) >= 196) && (LA(1) <= 198)) )
            {
                CONSUME();
                if ( BACKTRACKING==0 ) ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set531)));
                PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

            }
            else 
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE; 
                    return retval;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_literal0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal0);    goto ruleliteralEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteralEx; /* Prevent compiler warnings */
    ruleliteralEx: ;
    retval.stop = LT(-1);

    if ( BACKTRACKING==0 )
    {
    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
    }

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    if ( BACKTRACKING>0 ) { MEMOIZE(92, literal_StartIndex); }
    return retval;
}
/* $ANTLR end literal */

// $ANTLR start synpred5_Emerson
static void synpred5_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:135:4: ( functionDeclaration )
    // .//Emerson.g:135:4: functionDeclaration
    {
        FOLLOWPUSH(FOLLOW_functionDeclaration_in_synpred5_Emerson641);
        functionDeclaration(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred5_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred5_EmersonEx; /* Prevent compiler warnings */
rulesynpred5_EmersonEx: ;

}
// $ANTLR end synpred5_Emerson

// $ANTLR start synpred9_Emerson
static void synpred9_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:145:15: ( LTERM )
    // .//Emerson.g:145:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred9_Emerson708); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred9_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred9_EmersonEx; /* Prevent compiler warnings */
rulesynpred9_EmersonEx: ;

}
// $ANTLR end synpred9_Emerson

// $ANTLR start synpred23_Emerson
static void synpred23_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:159:4: ( statementBlock )
    // .//Emerson.g:159:4: statementBlock
    {
        FOLLOWPUSH(FOLLOW_statementBlock_in_synpred23_Emerson849);
        statementBlock(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred23_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred23_EmersonEx; /* Prevent compiler warnings */
rulesynpred23_EmersonEx: ;

}
// $ANTLR end synpred23_Emerson

// $ANTLR start synpred26_Emerson
static void synpred26_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:162:4: ( expressionStatement )
    // .//Emerson.g:162:4: expressionStatement
    {
        FOLLOWPUSH(FOLLOW_expressionStatement_in_synpred26_Emerson864);
        expressionStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred26_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred26_EmersonEx; /* Prevent compiler warnings */
rulesynpred26_EmersonEx: ;

}
// $ANTLR end synpred26_Emerson

// $ANTLR start synpred33_Emerson
static void synpred33_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:169:4: ( labelledStatement )
    // .//Emerson.g:169:4: labelledStatement
    {
        FOLLOWPUSH(FOLLOW_labelledStatement_in_synpred33_Emerson899);
        labelledStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred33_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred33_EmersonEx; /* Prevent compiler warnings */
rulesynpred33_EmersonEx: ;

}
// $ANTLR end synpred33_Emerson

// $ANTLR start synpred37_Emerson
static void synpred37_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:173:4: ( msgSendStatement )
    // .//Emerson.g:173:4: msgSendStatement
    {
        FOLLOWPUSH(FOLLOW_msgSendStatement_in_synpred37_Emerson919);
        msgSendStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred37_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred37_EmersonEx; /* Prevent compiler warnings */
rulesynpred37_EmersonEx: ;

}
// $ANTLR end synpred37_Emerson

// $ANTLR start synpred52_Emerson
static void synpred52_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:199:15: ( LTERM )
    // .//Emerson.g:199:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred52_Emerson1098); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred52_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred52_EmersonEx; /* Prevent compiler warnings */
rulesynpred52_EmersonEx: ;

}
// $ANTLR end synpred52_Emerson

// $ANTLR start synpred54_Emerson
static void synpred54_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:203:15: ( LTERM )
    // .//Emerson.g:203:15: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred54_Emerson1127); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred54_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred54_EmersonEx; /* Prevent compiler warnings */
rulesynpred54_EmersonEx: ;

}
// $ANTLR end synpred54_Emerson

// $ANTLR start synpred65_Emerson
static void synpred65_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_statement_return s2;
	#undef	RETURN_TYPE_s2
	#define	RETURN_TYPE_s2 EmersonParser_statement_return

    // .//Emerson.g:223:69: ( ( LTERM )* 'else' ( LTERM )* s2= statement )
    // .//Emerson.g:223:69: ( LTERM )* 'else' ( LTERM )* s2= statement
    {

        // .//Emerson.g:223:69: ( LTERM )*

        for (;;)
        {
            int alt284=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA284_0 = LA(1);
                if ( (LA284_0 == LTERM) ) 
                {
                    alt284=1;
                }

            }
            switch (alt284) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred65_Emerson1258); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred65_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop284;	/* break out of the loop */
        	    break;
            }
        }
        loop284: ; /* Jump out to here if this rule does not match */

         MATCHT(131, &FOLLOW_131_in_synpred65_Emerson1261); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred65_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:223:83: ( LTERM )*

        for (;;)
        {
            int alt285=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA285_0 = LA(1);
                if ( (LA285_0 == LTERM) ) 
                {
                    alt285=1;
                }

            }
            switch (alt285) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred65_Emerson1263); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred65_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop285;	/* break out of the loop */
        	    break;
            }
        }
        loop285: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_statement_in_synpred65_Emerson1268);
        s2=statement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred65_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred65_EmersonEx; /* Prevent compiler warnings */
rulesynpred65_EmersonEx: ;

}
// $ANTLR end synpred65_Emerson

// $ANTLR start synpred68_Emerson
static void synpred68_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:229:4: ( forStatement )
    // .//Emerson.g:229:4: forStatement
    {
        FOLLOWPUSH(FOLLOW_forStatement_in_synpred68_Emerson1307);
        forStatement(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred68_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred68_EmersonEx; /* Prevent compiler warnings */
rulesynpred68_EmersonEx: ;

}
// $ANTLR end synpred68_Emerson

// $ANTLR start synpred123_Emerson
static void synpred123_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:288:40: ( LTERM )
    // .//Emerson.g:288:40: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred123_Emerson1933); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred123_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred123_EmersonEx; /* Prevent compiler warnings */
rulesynpred123_EmersonEx: ;

}
// $ANTLR end synpred123_Emerson

// $ANTLR start synpred126_Emerson
static void synpred126_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:292:25: ( LTERM )
    // .//Emerson.g:292:25: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred126_Emerson1968); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred126_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred126_EmersonEx; /* Prevent compiler warnings */
rulesynpred126_EmersonEx: ;

}
// $ANTLR end synpred126_Emerson

// $ANTLR start synpred144_Emerson
static void synpred144_Emerson_fragment(pEmersonParser ctx ) 
{
	EmersonParser_memberExpression_return e1;
	#undef	RETURN_TYPE_e1
	#define	RETURN_TYPE_e1 EmersonParser_memberExpression_return

	EmersonParser_leftHandSideExpression_return e2;
	#undef	RETURN_TYPE_e2
	#define	RETURN_TYPE_e2 EmersonParser_leftHandSideExpression_return




    // .//Emerson.g:321:4: (e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' ) )
    // .//Emerson.g:321:4: e1= memberExpression ( LTERM )* '<-' e2= leftHandSideExpression ( LTERM | ';' )
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred144_Emerson2232);
        e1=memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred144_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:321:24: ( LTERM )*

        for (;;)
        {
            int alt295=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA295_0 = LA(1);
                if ( (LA295_0 == LTERM) ) 
                {
                    alt295=1;
                }

            }
            switch (alt295) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred144_Emerson2234); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred144_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop295;	/* break out of the loop */
        	    break;
            }
        }
        loop295: ; /* Jump out to here if this rule does not match */

         MATCHT(149, &FOLLOW_149_in_synpred144_Emerson2236); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred144_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        FOLLOWPUSH(FOLLOW_leftHandSideExpression_in_synpred144_Emerson2240);
        e2=leftHandSideExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred144_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        if ( LA(1) == LTERM || LA(1) == 128 )
        {
            CONSUME();
            PERRORRECOVERY=ANTLR3_FALSE;FAILEDFLAG=ANTLR3_FALSE;

        }
        else 
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE; 
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            EXCEPTION->expectingSet = &FOLLOW_set_in_synpred144_Emerson2242;
            RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_synpred144_Emerson2242);    goto rulesynpred144_EmersonEx;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred144_EmersonEx; /* Prevent compiler warnings */
rulesynpred144_EmersonEx: ;

}
// $ANTLR end synpred144_Emerson

// $ANTLR start synpred154_Emerson
static void synpred154_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:336:4: ( conditionalExpression )
    // .//Emerson.g:336:4: conditionalExpression
    {
        FOLLOWPUSH(FOLLOW_conditionalExpression_in_synpred154_Emerson2389);
        conditionalExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred154_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred154_EmersonEx; /* Prevent compiler warnings */
rulesynpred154_EmersonEx: ;

}
// $ANTLR end synpred154_Emerson

// $ANTLR start synpred157_Emerson
static void synpred157_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:341:4: ( conditionalExpressionNoIn )
    // .//Emerson.g:341:4: conditionalExpressionNoIn
    {
        FOLLOWPUSH(FOLLOW_conditionalExpressionNoIn_in_synpred157_Emerson2436);
        conditionalExpressionNoIn(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred157_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred157_EmersonEx; /* Prevent compiler warnings */
rulesynpred157_EmersonEx: ;

}
// $ANTLR end synpred157_Emerson

// $ANTLR start synpred160_Emerson
static void synpred160_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:346:4: ( callExpression )
    // .//Emerson.g:346:4: callExpression
    {
        FOLLOWPUSH(FOLLOW_callExpression_in_synpred160_Emerson2484);
        callExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred160_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred160_EmersonEx; /* Prevent compiler warnings */
rulesynpred160_EmersonEx: ;

}
// $ANTLR end synpred160_Emerson

// $ANTLR start synpred161_Emerson
static void synpred161_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:351:4: ( memberExpression )
    // .//Emerson.g:351:4: memberExpression
    {
        FOLLOWPUSH(FOLLOW_memberExpression_in_synpred161_Emerson2509);
        memberExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred161_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred161_EmersonEx; /* Prevent compiler warnings */
rulesynpred161_EmersonEx: ;

}
// $ANTLR end synpred161_Emerson

// $ANTLR start synpred167_Emerson
static void synpred167_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:368:47: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:368:47: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:368:47: ( LTERM )*

        for (;;)
        {
            int alt300=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA300_0 = LA(1);
                if ( (LA300_0 == LTERM) ) 
                {
                    alt300=1;
                }

            }
            switch (alt300) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred167_Emerson2605); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred167_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop300;	/* break out of the loop */
        	    break;
            }
        }
        loop300: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred167_Emerson2608);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred167_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred167_EmersonEx; /* Prevent compiler warnings */
rulesynpred167_EmersonEx: ;

}
// $ANTLR end synpred167_Emerson

// $ANTLR start synpred169_Emerson
static void synpred169_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:368:136: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:368:136: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:368:136: ( LTERM )*

        for (;;)
        {
            int alt301=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA301_0 = LA(1);
                if ( (LA301_0 == LTERM) ) 
                {
                    alt301=1;
                }

            }
            switch (alt301) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred169_Emerson2625); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred169_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop301;	/* break out of the loop */
        	    break;
            }
        }
        loop301: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred169_Emerson2628);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred169_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred169_EmersonEx; /* Prevent compiler warnings */
rulesynpred169_EmersonEx: ;

}
// $ANTLR end synpred169_Emerson

// $ANTLR start synpred172_Emerson
static void synpred172_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:369:48: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:369:48: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:369:48: ( LTERM )*

        for (;;)
        {
            int alt305=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA305_0 = LA(1);
                if ( (LA305_0 == LTERM) ) 
                {
                    alt305=1;
                }

            }
            switch (alt305) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred172_Emerson2655); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred172_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop305;	/* break out of the loop */
        	    break;
            }
        }
        loop305: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred172_Emerson2658);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred172_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred172_EmersonEx; /* Prevent compiler warnings */
rulesynpred172_EmersonEx: ;

}
// $ANTLR end synpred172_Emerson

// $ANTLR start synpred174_Emerson
static void synpred174_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:369:137: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:369:137: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:369:137: ( LTERM )*

        for (;;)
        {
            int alt306=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA306_0 = LA(1);
                if ( (LA306_0 == LTERM) ) 
                {
                    alt306=1;
                }

            }
            switch (alt306) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred174_Emerson2675); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred174_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop306;	/* break out of the loop */
        	    break;
            }
        }
        loop306: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred174_Emerson2678);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred174_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred174_EmersonEx; /* Prevent compiler warnings */
rulesynpred174_EmersonEx: ;

}
// $ANTLR end synpred174_Emerson

// $ANTLR start synpred179_Emerson
static void synpred179_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:370:85: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:370:85: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:370:85: ( LTERM )*

        for (;;)
        {
            int alt310=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA310_0 = LA(1);
                if ( (LA310_0 == LTERM) ) 
                {
                    alt310=1;
                }

            }
            switch (alt310) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred179_Emerson2724); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred179_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop310;	/* break out of the loop */
        	    break;
            }
        }
        loop310: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred179_Emerson2727);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred179_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred179_EmersonEx; /* Prevent compiler warnings */
rulesynpred179_EmersonEx: ;

}
// $ANTLR end synpred179_Emerson

// $ANTLR start synpred181_Emerson
static void synpred181_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:370:147: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:370:147: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:370:147: ( LTERM )*

        for (;;)
        {
            int alt311=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA311_0 = LA(1);
                if ( (LA311_0 == LTERM) ) 
                {
                    alt311=1;
                }

            }
            switch (alt311) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred181_Emerson2740); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred181_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop311;	/* break out of the loop */
        	    break;
            }
        }
        loop311: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred181_Emerson2743);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred181_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred181_EmersonEx; /* Prevent compiler warnings */
rulesynpred181_EmersonEx: ;

}
// $ANTLR end synpred181_Emerson

// $ANTLR start synpred185_Emerson
static void synpred185_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:379:79: ( ( LTERM )* arguments )
    // .//Emerson.g:379:79: ( LTERM )* arguments
    {

        // .//Emerson.g:379:79: ( LTERM )*

        for (;;)
        {
            int alt312=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA312_0 = LA(1);
                if ( (LA312_0 == LTERM) ) 
                {
                    alt312=1;
                }

            }
            switch (alt312) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred185_Emerson2818); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred185_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop312;	/* break out of the loop */
        	    break;
            }
        }
        loop312: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_arguments_in_synpred185_Emerson2821);
        arguments(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred185_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred185_EmersonEx; /* Prevent compiler warnings */
rulesynpred185_EmersonEx: ;

}
// $ANTLR end synpred185_Emerson

// $ANTLR start synpred187_Emerson
static void synpred187_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:379:111: ( ( LTERM )* indexSuffix1 )
    // .//Emerson.g:379:111: ( LTERM )* indexSuffix1
    {

        // .//Emerson.g:379:111: ( LTERM )*

        for (;;)
        {
            int alt313=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA313_0 = LA(1);
                if ( (LA313_0 == LTERM) ) 
                {
                    alt313=1;
                }

            }
            switch (alt313) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred187_Emerson2829); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred187_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop313;	/* break out of the loop */
        	    break;
            }
        }
        loop313: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_indexSuffix1_in_synpred187_Emerson2832);
        indexSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred187_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred187_EmersonEx; /* Prevent compiler warnings */
rulesynpred187_EmersonEx: ;

}
// $ANTLR end synpred187_Emerson

// $ANTLR start synpred189_Emerson
static void synpred189_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:379:180: ( ( LTERM )* propertyReferenceSuffix1 )
    // .//Emerson.g:379:180: ( LTERM )* propertyReferenceSuffix1
    {

        // .//Emerson.g:379:180: ( LTERM )*

        for (;;)
        {
            int alt314=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA314_0 = LA(1);
                if ( (LA314_0 == LTERM) ) 
                {
                    alt314=1;
                }

            }
            switch (alt314) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred189_Emerson2847); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred189_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop314;	/* break out of the loop */
        	    break;
            }
        }
        loop314: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_propertyReferenceSuffix1_in_synpred189_Emerson2850);
        propertyReferenceSuffix1(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred189_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred189_EmersonEx; /* Prevent compiler warnings */
rulesynpred189_EmersonEx: ;

}
// $ANTLR end synpred189_Emerson

// $ANTLR start synpred284_Emerson
static void synpred284_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:514:59: ( ( LTERM )* addOps ( LTERM )* multiplicativeExpression )
    // .//Emerson.g:514:59: ( LTERM )* addOps ( LTERM )* multiplicativeExpression
    {

        // .//Emerson.g:514:59: ( LTERM )*

        for (;;)
        {
            int alt359=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA359_0 = LA(1);
                if ( (LA359_0 == LTERM) ) 
                {
                    alt359=1;
                }

            }
            switch (alt359) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred284_Emerson4138); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred284_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop359;	/* break out of the loop */
        	    break;
            }
        }
        loop359: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_addOps_in_synpred284_Emerson4141);
        addOps(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred284_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:514:73: ( LTERM )*

        for (;;)
        {
            int alt360=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA360_0 = LA(1);
                if ( (LA360_0 == LTERM) ) 
                {
                    alt360=1;
                }

            }
            switch (alt360) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred284_Emerson4143); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred284_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop360;	/* break out of the loop */
        	    break;
            }
        }
        loop360: ; /* Jump out to here if this rule does not match */

        FOLLOWPUSH(FOLLOW_multiplicativeExpression_in_synpred284_Emerson4146);
        multiplicativeExpression(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
            goto rulesynpred284_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred284_EmersonEx; /* Prevent compiler warnings */
rulesynpred284_EmersonEx: ;

}
// $ANTLR end synpred284_Emerson

// $ANTLR start synpred308_Emerson
static void synpred308_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:563:9: ( LTERM )
    // .//Emerson.g:563:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred308_Emerson4498); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred308_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred308_EmersonEx; /* Prevent compiler warnings */
rulesynpred308_EmersonEx: ;

}
// $ANTLR end synpred308_Emerson

// $ANTLR start synpred311_Emerson
static void synpred311_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:563:5: ( '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']' )
    // .//Emerson.g:563:5: '[' ( LTERM )* ( assignmentExpression )? ( LTERM )* ']'
    {
         MATCHT(151, &FOLLOW_151_in_synpred311_Emerson4496); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred311_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:563:9: ( LTERM )*

        for (;;)
        {
            int alt363=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA363_0 = LA(1);
                if ( (LA363_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA363_2 = LA(2);
                        if ( (synpred308_Emerson(ctx)) ) 
                        {
                            alt363=1;
                        }

                    }
                }

            }
            switch (alt363) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred311_Emerson4498); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred311_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop363;	/* break out of the loop */
        	    break;
            }
        }
        loop363: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:563:16: ( assignmentExpression )?
        {
            int alt364=2;
            {
                int LA364_0 = LA(1);
                if ( (((LA364_0 >= Identifier) && (LA364_0 <= NumericLiteral)) || ((LA364_0 >= 121) && (LA364_0 <= 122)) || LA364_0 == 125 || ((LA364_0 >= 150) && (LA364_0 <= 151)) || ((LA364_0 >= 183) && (LA364_0 <= 184)) || ((LA364_0 >= 188) && (LA364_0 <= 198))) ) 
                {
                    alt364=1;
                }
            }
            switch (alt364) 
            {
        	case 1:
        	    // .//Emerson.g:563:17: assignmentExpression
        	    {
        	        FOLLOWPUSH(FOLLOW_assignmentExpression_in_synpred311_Emerson4502);
        	        assignmentExpression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred311_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:563:40: ( LTERM )*

        for (;;)
        {
            int alt365=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA365_0 = LA(1);
                if ( (LA365_0 == LTERM) ) 
                {
                    alt365=1;
                }

            }
            switch (alt365) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred311_Emerson4506); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred311_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop365;	/* break out of the loop */
        	    break;
            }
        }
        loop365: ; /* Jump out to here if this rule does not match */

         MATCHT(152, &FOLLOW_152_in_synpred311_Emerson4509); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred311_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred311_EmersonEx; /* Prevent compiler warnings */
rulesynpred311_EmersonEx: ;

}
// $ANTLR end synpred311_Emerson

// $ANTLR start synpred316_Emerson
static void synpred316_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:569:9: ( LTERM )
    // .//Emerson.g:569:9: LTERM
    {
         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred316_Emerson4580); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred316_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred316_EmersonEx; /* Prevent compiler warnings */
rulesynpred316_EmersonEx: ;

}
// $ANTLR end synpred316_Emerson

// $ANTLR start synpred319_Emerson
static void synpred319_Emerson_fragment(pEmersonParser ctx ) 
{
    // .//Emerson.g:569:5: ( '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}' )
    // .//Emerson.g:569:5: '{' ( LTERM )* ( propertyNameAndValue )? ( LTERM )* '}'
    {
         MATCHT(125, &FOLLOW_125_in_synpred319_Emerson4578); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred319_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // .//Emerson.g:569:9: ( LTERM )*

        for (;;)
        {
            int alt367=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA367_0 = LA(1);
                if ( (LA367_0 == LTERM) ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA367_2 = LA(2);
                        if ( (synpred316_Emerson(ctx)) ) 
                        {
                            alt367=1;
                        }

                    }
                }

            }
            switch (alt367) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred319_Emerson4580); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred319_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop367;	/* break out of the loop */
        	    break;
            }
        }
        loop367: ; /* Jump out to here if this rule does not match */


        // .//Emerson.g:569:16: ( propertyNameAndValue )?
        {
            int alt368=2;
            {
                int LA368_0 = LA(1);
                if ( (((LA368_0 >= Identifier) && (LA368_0 <= NumericLiteral))) ) 
                {
                    alt368=1;
                }
            }
            switch (alt368) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: propertyNameAndValue
        	    {
        	        FOLLOWPUSH(FOLLOW_propertyNameAndValue_in_synpred319_Emerson4583);
        	        propertyNameAndValue(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred319_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

            }
        }

        // .//Emerson.g:569:38: ( LTERM )*

        for (;;)
        {
            int alt369=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA369_0 = LA(1);
                if ( (LA369_0 == LTERM) ) 
                {
                    alt369=1;
                }

            }
            switch (alt369) 
            {
        	case 1:
        	    // .//Emerson.g:0:0: LTERM
        	    {
        	         MATCHT(LTERM, &FOLLOW_LTERM_in_synpred319_Emerson4586); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesynpred319_EmersonEx;
        	        }
        	        if (HASFAILED())
        	        {
        	            return ;
        	        }

        	    }
        	    break;

        	default:
        	    goto loop369;	/* break out of the loop */
        	    break;
            }
        }
        loop369: ; /* Jump out to here if this rule does not match */

         MATCHT(126, &FOLLOW_126_in_synpred319_Emerson4589); 
        if  (HASEXCEPTION())
        {
            goto rulesynpred319_EmersonEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred319_EmersonEx; /* Prevent compiler warnings */
rulesynpred319_EmersonEx: ;

}
// $ANTLR end synpred319_Emerson
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
static ANTLR3_BOOLEAN synpred26_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred26_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred319_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred319_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred179_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred179_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred126_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred126_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred33_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred33_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred154_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred154_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred157_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred157_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred37_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred37_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred172_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred172_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred123_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred123_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred167_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred167_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred68_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred68_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred9_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred9_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred181_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred181_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred54_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred54_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred311_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred311_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred189_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred189_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred52_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred52_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred316_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred316_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred5_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred5_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred23_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred23_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred161_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred161_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred308_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred308_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred144_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred144_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred185_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred185_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred187_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred187_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred65_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred65_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred160_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred160_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred174_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred174_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred169_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred169_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred284_Emerson(pEmersonParser ctx) 
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start	= MARK();
    synpred284_Emerson_fragment(ctx);	    // can never throw exception
    success	= !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG	= ANTLR3_FALSE;
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
